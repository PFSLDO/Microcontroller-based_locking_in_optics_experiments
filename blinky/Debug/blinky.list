
blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034f4  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08003680  08003680  00004680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036d8  080036d8  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080036d8  080036d8  000046d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080036e0  080036e0  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036e0  080036e0  000046e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080036e4  080036e4  000046e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080036e8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  2000000c  080036f4  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  080036f4  000051a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000117ed  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000216a  00000000  00000000  00016829  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001138  00000000  00000000  00018998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d98  00000000  00000000  00019ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a031  00000000  00000000  0001a868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000134a0  00000000  00000000  00034899  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a845e  00000000  00000000  00047d39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f0197  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049b0  00000000  00000000  000f01dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  000f4b8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003668 	.word	0x08003668

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08003668 	.word	0x08003668

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001e0:	f000 b988 	b.w	80004f4 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	468e      	mov	lr, r1
 8000204:	4604      	mov	r4, r0
 8000206:	4688      	mov	r8, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14a      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020c:	428a      	cmp	r2, r1
 800020e:	4617      	mov	r7, r2
 8000210:	d962      	bls.n	80002d8 <__udivmoddi4+0xdc>
 8000212:	fab2 f682 	clz	r6, r2
 8000216:	b14e      	cbz	r6, 800022c <__udivmoddi4+0x30>
 8000218:	f1c6 0320 	rsb	r3, r6, #32
 800021c:	fa01 f806 	lsl.w	r8, r1, r6
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	40b7      	lsls	r7, r6
 8000226:	ea43 0808 	orr.w	r8, r3, r8
 800022a:	40b4      	lsls	r4, r6
 800022c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000230:	fa1f fc87 	uxth.w	ip, r7
 8000234:	fbb8 f1fe 	udiv	r1, r8, lr
 8000238:	0c23      	lsrs	r3, r4, #16
 800023a:	fb0e 8811 	mls	r8, lr, r1, r8
 800023e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000242:	fb01 f20c 	mul.w	r2, r1, ip
 8000246:	429a      	cmp	r2, r3
 8000248:	d909      	bls.n	800025e <__udivmoddi4+0x62>
 800024a:	18fb      	adds	r3, r7, r3
 800024c:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000250:	f080 80ea 	bcs.w	8000428 <__udivmoddi4+0x22c>
 8000254:	429a      	cmp	r2, r3
 8000256:	f240 80e7 	bls.w	8000428 <__udivmoddi4+0x22c>
 800025a:	3902      	subs	r1, #2
 800025c:	443b      	add	r3, r7
 800025e:	1a9a      	subs	r2, r3, r2
 8000260:	b2a3      	uxth	r3, r4
 8000262:	fbb2 f0fe 	udiv	r0, r2, lr
 8000266:	fb0e 2210 	mls	r2, lr, r0, r2
 800026a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000272:	459c      	cmp	ip, r3
 8000274:	d909      	bls.n	800028a <__udivmoddi4+0x8e>
 8000276:	18fb      	adds	r3, r7, r3
 8000278:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 800027c:	f080 80d6 	bcs.w	800042c <__udivmoddi4+0x230>
 8000280:	459c      	cmp	ip, r3
 8000282:	f240 80d3 	bls.w	800042c <__udivmoddi4+0x230>
 8000286:	443b      	add	r3, r7
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028e:	eba3 030c 	sub.w	r3, r3, ip
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa2>
 8000296:	40f3      	lsrs	r3, r6
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xb6>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb0>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa2>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x14c>
 80002ba:	4573      	cmp	r3, lr
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xc8>
 80002be:	4282      	cmp	r2, r0
 80002c0:	f200 8105 	bhi.w	80004ce <__udivmoddi4+0x2d2>
 80002c4:	1a84      	subs	r4, r0, r2
 80002c6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	4690      	mov	r8, r2
 80002ce:	2d00      	cmp	r5, #0
 80002d0:	d0e5      	beq.n	800029e <__udivmoddi4+0xa2>
 80002d2:	e9c5 4800 	strd	r4, r8, [r5]
 80002d6:	e7e2      	b.n	800029e <__udivmoddi4+0xa2>
 80002d8:	2a00      	cmp	r2, #0
 80002da:	f000 8090 	beq.w	80003fe <__udivmoddi4+0x202>
 80002de:	fab2 f682 	clz	r6, r2
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f040 80a4 	bne.w	8000430 <__udivmoddi4+0x234>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	0c03      	lsrs	r3, r0, #16
 80002ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f0:	b280      	uxth	r0, r0
 80002f2:	b2bc      	uxth	r4, r7
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb2 fcfe 	udiv	ip, r2, lr
 80002fa:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000302:	fb04 f20c 	mul.w	r2, r4, ip
 8000306:	429a      	cmp	r2, r3
 8000308:	d907      	bls.n	800031a <__udivmoddi4+0x11e>
 800030a:	18fb      	adds	r3, r7, r3
 800030c:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000310:	d202      	bcs.n	8000318 <__udivmoddi4+0x11c>
 8000312:	429a      	cmp	r2, r3
 8000314:	f200 80e0 	bhi.w	80004d8 <__udivmoddi4+0x2dc>
 8000318:	46c4      	mov	ip, r8
 800031a:	1a9b      	subs	r3, r3, r2
 800031c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000320:	fb0e 3312 	mls	r3, lr, r2, r3
 8000324:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000328:	fb02 f404 	mul.w	r4, r2, r4
 800032c:	429c      	cmp	r4, r3
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x144>
 8000330:	18fb      	adds	r3, r7, r3
 8000332:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x142>
 8000338:	429c      	cmp	r4, r3
 800033a:	f200 80ca 	bhi.w	80004d2 <__udivmoddi4+0x2d6>
 800033e:	4602      	mov	r2, r0
 8000340:	1b1b      	subs	r3, r3, r4
 8000342:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x98>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa0e f401 	lsl.w	r4, lr, r1
 8000358:	fa20 f306 	lsr.w	r3, r0, r6
 800035c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000360:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000364:	4323      	orrs	r3, r4
 8000366:	fa00 f801 	lsl.w	r8, r0, r1
 800036a:	fa1f fc87 	uxth.w	ip, r7
 800036e:	fbbe f0f9 	udiv	r0, lr, r9
 8000372:	0c1c      	lsrs	r4, r3, #16
 8000374:	fb09 ee10 	mls	lr, r9, r0, lr
 8000378:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800037c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000380:	45a6      	cmp	lr, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x1a0>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800038e:	f080 809c 	bcs.w	80004ca <__udivmoddi4+0x2ce>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8099 	bls.w	80004ca <__udivmoddi4+0x2ce>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	eba4 040e 	sub.w	r4, r4, lr
 80003a0:	fa1f fe83 	uxth.w	lr, r3
 80003a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a8:	fb09 4413 	mls	r4, r9, r3, r4
 80003ac:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b4:	45a4      	cmp	ip, r4
 80003b6:	d908      	bls.n	80003ca <__udivmoddi4+0x1ce>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003be:	f080 8082 	bcs.w	80004c6 <__udivmoddi4+0x2ca>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d97f      	bls.n	80004c6 <__udivmoddi4+0x2ca>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ce:	eba4 040c 	sub.w	r4, r4, ip
 80003d2:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d6:	4564      	cmp	r4, ip
 80003d8:	4673      	mov	r3, lr
 80003da:	46e1      	mov	r9, ip
 80003dc:	d362      	bcc.n	80004a4 <__udivmoddi4+0x2a8>
 80003de:	d05f      	beq.n	80004a0 <__udivmoddi4+0x2a4>
 80003e0:	b15d      	cbz	r5, 80003fa <__udivmoddi4+0x1fe>
 80003e2:	ebb8 0203 	subs.w	r2, r8, r3
 80003e6:	eb64 0409 	sbc.w	r4, r4, r9
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	fa22 f301 	lsr.w	r3, r2, r1
 80003f2:	431e      	orrs	r6, r3
 80003f4:	40cc      	lsrs	r4, r1
 80003f6:	e9c5 6400 	strd	r6, r4, [r5]
 80003fa:	2100      	movs	r1, #0
 80003fc:	e74f      	b.n	800029e <__udivmoddi4+0xa2>
 80003fe:	fbb1 fcf2 	udiv	ip, r1, r2
 8000402:	0c01      	lsrs	r1, r0, #16
 8000404:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000408:	b280      	uxth	r0, r0
 800040a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040e:	463b      	mov	r3, r7
 8000410:	4638      	mov	r0, r7
 8000412:	463c      	mov	r4, r7
 8000414:	46b8      	mov	r8, r7
 8000416:	46be      	mov	lr, r7
 8000418:	2620      	movs	r6, #32
 800041a:	fbb1 f1f7 	udiv	r1, r1, r7
 800041e:	eba2 0208 	sub.w	r2, r2, r8
 8000422:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000426:	e766      	b.n	80002f6 <__udivmoddi4+0xfa>
 8000428:	4601      	mov	r1, r0
 800042a:	e718      	b.n	800025e <__udivmoddi4+0x62>
 800042c:	4610      	mov	r0, r2
 800042e:	e72c      	b.n	800028a <__udivmoddi4+0x8e>
 8000430:	f1c6 0220 	rsb	r2, r6, #32
 8000434:	fa2e f302 	lsr.w	r3, lr, r2
 8000438:	40b7      	lsls	r7, r6
 800043a:	40b1      	lsls	r1, r6
 800043c:	fa20 f202 	lsr.w	r2, r0, r2
 8000440:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000444:	430a      	orrs	r2, r1
 8000446:	fbb3 f8fe 	udiv	r8, r3, lr
 800044a:	b2bc      	uxth	r4, r7
 800044c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000456:	fb08 f904 	mul.w	r9, r8, r4
 800045a:	40b0      	lsls	r0, r6
 800045c:	4589      	cmp	r9, r1
 800045e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000462:	b280      	uxth	r0, r0
 8000464:	d93e      	bls.n	80004e4 <__udivmoddi4+0x2e8>
 8000466:	1879      	adds	r1, r7, r1
 8000468:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 800046c:	d201      	bcs.n	8000472 <__udivmoddi4+0x276>
 800046e:	4589      	cmp	r9, r1
 8000470:	d81f      	bhi.n	80004b2 <__udivmoddi4+0x2b6>
 8000472:	eba1 0109 	sub.w	r1, r1, r9
 8000476:	fbb1 f9fe 	udiv	r9, r1, lr
 800047a:	fb09 f804 	mul.w	r8, r9, r4
 800047e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000482:	b292      	uxth	r2, r2
 8000484:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000488:	4542      	cmp	r2, r8
 800048a:	d229      	bcs.n	80004e0 <__udivmoddi4+0x2e4>
 800048c:	18ba      	adds	r2, r7, r2
 800048e:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000492:	d2c4      	bcs.n	800041e <__udivmoddi4+0x222>
 8000494:	4542      	cmp	r2, r8
 8000496:	d2c2      	bcs.n	800041e <__udivmoddi4+0x222>
 8000498:	f1a9 0102 	sub.w	r1, r9, #2
 800049c:	443a      	add	r2, r7
 800049e:	e7be      	b.n	800041e <__udivmoddi4+0x222>
 80004a0:	45f0      	cmp	r8, lr
 80004a2:	d29d      	bcs.n	80003e0 <__udivmoddi4+0x1e4>
 80004a4:	ebbe 0302 	subs.w	r3, lr, r2
 80004a8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004ac:	3801      	subs	r0, #1
 80004ae:	46e1      	mov	r9, ip
 80004b0:	e796      	b.n	80003e0 <__udivmoddi4+0x1e4>
 80004b2:	eba7 0909 	sub.w	r9, r7, r9
 80004b6:	4449      	add	r1, r9
 80004b8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004bc:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c0:	fb09 f804 	mul.w	r8, r9, r4
 80004c4:	e7db      	b.n	800047e <__udivmoddi4+0x282>
 80004c6:	4673      	mov	r3, lr
 80004c8:	e77f      	b.n	80003ca <__udivmoddi4+0x1ce>
 80004ca:	4650      	mov	r0, sl
 80004cc:	e766      	b.n	800039c <__udivmoddi4+0x1a0>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e6fd      	b.n	80002ce <__udivmoddi4+0xd2>
 80004d2:	443b      	add	r3, r7
 80004d4:	3a02      	subs	r2, #2
 80004d6:	e733      	b.n	8000340 <__udivmoddi4+0x144>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	443b      	add	r3, r7
 80004de:	e71c      	b.n	800031a <__udivmoddi4+0x11e>
 80004e0:	4649      	mov	r1, r9
 80004e2:	e79c      	b.n	800041e <__udivmoddi4+0x222>
 80004e4:	eba1 0109 	sub.w	r1, r1, r9
 80004e8:	46c4      	mov	ip, r8
 80004ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ee:	fb09 f804 	mul.w	r8, r9, r4
 80004f2:	e7c4      	b.n	800047e <__udivmoddi4+0x282>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fc:	f000 fc97 	bl	8000e2e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000500:	f000 f81a 	bl	8000538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000504:	f000 f986 	bl	8000814 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000508:	f000 f866 	bl	80005d8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800050c:	f000 f952 	bl	80007b4 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000510:	f000 f8a2 	bl	8000658 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000514:	f000 f8fa 	bl	800070c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  //lcd_send_string_pos(&lcd, "Hello, World!", 0, 0);
  //HAL_Delay(1);

  lcd_init_();
 8000518:	f000 fa64 	bl	80009e4 <lcd_init_>
  lcd_clear();
 800051c:	f000 fa90 	bl	8000a40 <lcd_clear>
  lcd_set_cursor(0, 0);
 8000520:	2100      	movs	r1, #0
 8000522:	2000      	movs	r0, #0
 8000524:	f000 fa96 	bl	8000a54 <lcd_set_cursor>
  lcd_print("Hello, STM32!");
 8000528:	4802      	ldr	r0, [pc, #8]	@ (8000534 <main+0x3c>)
 800052a:	f000 fab1 	bl	8000a90 <lcd_print>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800052e:	bf00      	nop
 8000530:	e7fd      	b.n	800052e <main+0x36>
 8000532:	bf00      	nop
 8000534:	08003680 	.word	0x08003680

08000538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b096      	sub	sp, #88	@ 0x58
 800053c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053e:	f107 0314 	add.w	r3, r7, #20
 8000542:	2244      	movs	r2, #68	@ 0x44
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f003 f861 	bl	800360e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054c:	463b      	mov	r3, r7
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	605a      	str	r2, [r3, #4]
 8000554:	609a      	str	r2, [r3, #8]
 8000556:	60da      	str	r2, [r3, #12]
 8000558:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800055a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800055e:	f001 f8af 	bl	80016c0 <HAL_PWREx_ControlVoltageScaling>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000568:	f000 faa7 	bl	8000aba <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800056c:	2310      	movs	r3, #16
 800056e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000570:	2301      	movs	r3, #1
 8000572:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000574:	2300      	movs	r3, #0
 8000576:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000578:	2360      	movs	r3, #96	@ 0x60
 800057a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057c:	2302      	movs	r3, #2
 800057e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000580:	2301      	movs	r3, #1
 8000582:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000584:	2301      	movs	r3, #1
 8000586:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000588:	2328      	movs	r3, #40	@ 0x28
 800058a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800058c:	2302      	movs	r3, #2
 800058e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000590:	2302      	movs	r3, #2
 8000592:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000594:	f107 0314 	add.w	r3, r7, #20
 8000598:	4618      	mov	r0, r3
 800059a:	f001 f8e7 	bl	800176c <HAL_RCC_OscConfig>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <SystemClock_Config+0x70>
  {
    Error_Handler();
 80005a4:	f000 fa89 	bl	8000aba <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a8:	230f      	movs	r3, #15
 80005aa:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ac:	2303      	movs	r3, #3
 80005ae:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005bc:	463b      	mov	r3, r7
 80005be:	2104      	movs	r1, #4
 80005c0:	4618      	mov	r0, r3
 80005c2:	f001 fd35 	bl	8002030 <HAL_RCC_ClockConfig>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005cc:	f000 fa75 	bl	8000aba <Error_Handler>
  }
}
 80005d0:	bf00      	nop
 80005d2:	3758      	adds	r7, #88	@ 0x58
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005dc:	4b1b      	ldr	r3, [pc, #108]	@ (800064c <MX_I2C1_Init+0x74>)
 80005de:	4a1c      	ldr	r2, [pc, #112]	@ (8000650 <MX_I2C1_Init+0x78>)
 80005e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 80005e2:	4b1a      	ldr	r3, [pc, #104]	@ (800064c <MX_I2C1_Init+0x74>)
 80005e4:	4a1b      	ldr	r2, [pc, #108]	@ (8000654 <MX_I2C1_Init+0x7c>)
 80005e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005e8:	4b18      	ldr	r3, [pc, #96]	@ (800064c <MX_I2C1_Init+0x74>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005ee:	4b17      	ldr	r3, [pc, #92]	@ (800064c <MX_I2C1_Init+0x74>)
 80005f0:	2201      	movs	r2, #1
 80005f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005f4:	4b15      	ldr	r3, [pc, #84]	@ (800064c <MX_I2C1_Init+0x74>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005fa:	4b14      	ldr	r3, [pc, #80]	@ (800064c <MX_I2C1_Init+0x74>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000600:	4b12      	ldr	r3, [pc, #72]	@ (800064c <MX_I2C1_Init+0x74>)
 8000602:	2200      	movs	r2, #0
 8000604:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000606:	4b11      	ldr	r3, [pc, #68]	@ (800064c <MX_I2C1_Init+0x74>)
 8000608:	2200      	movs	r2, #0
 800060a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800060c:	4b0f      	ldr	r3, [pc, #60]	@ (800064c <MX_I2C1_Init+0x74>)
 800060e:	2200      	movs	r2, #0
 8000610:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000612:	480e      	ldr	r0, [pc, #56]	@ (800064c <MX_I2C1_Init+0x74>)
 8000614:	f000 ff14 	bl	8001440 <HAL_I2C_Init>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800061e:	f000 fa4c 	bl	8000aba <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000622:	2100      	movs	r1, #0
 8000624:	4809      	ldr	r0, [pc, #36]	@ (800064c <MX_I2C1_Init+0x74>)
 8000626:	f000 ffa6 	bl	8001576 <HAL_I2CEx_ConfigAnalogFilter>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000630:	f000 fa43 	bl	8000aba <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000634:	2100      	movs	r1, #0
 8000636:	4805      	ldr	r0, [pc, #20]	@ (800064c <MX_I2C1_Init+0x74>)
 8000638:	f000 ffe8 	bl	800160c <HAL_I2CEx_ConfigDigitalFilter>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000642:	f000 fa3a 	bl	8000aba <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	20000028 	.word	0x20000028
 8000650:	40005400 	.word	0x40005400
 8000654:	10d19ce4 	.word	0x10d19ce4

08000658 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b088      	sub	sp, #32
 800065c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800065e:	f107 030c 	add.w	r3, r7, #12
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	609a      	str	r2, [r3, #8]
 800066a:	60da      	str	r2, [r3, #12]
 800066c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800066e:	463b      	mov	r3, r7
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000678:	4b22      	ldr	r3, [pc, #136]	@ (8000704 <MX_TIM1_Init+0xac>)
 800067a:	4a23      	ldr	r2, [pc, #140]	@ (8000708 <MX_TIM1_Init+0xb0>)
 800067c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800067e:	4b21      	ldr	r3, [pc, #132]	@ (8000704 <MX_TIM1_Init+0xac>)
 8000680:	2200      	movs	r2, #0
 8000682:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000684:	4b1f      	ldr	r3, [pc, #124]	@ (8000704 <MX_TIM1_Init+0xac>)
 8000686:	2200      	movs	r2, #0
 8000688:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800068a:	4b1e      	ldr	r3, [pc, #120]	@ (8000704 <MX_TIM1_Init+0xac>)
 800068c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000690:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000692:	4b1c      	ldr	r3, [pc, #112]	@ (8000704 <MX_TIM1_Init+0xac>)
 8000694:	2200      	movs	r2, #0
 8000696:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000698:	4b1a      	ldr	r3, [pc, #104]	@ (8000704 <MX_TIM1_Init+0xac>)
 800069a:	2200      	movs	r2, #0
 800069c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800069e:	4b19      	ldr	r3, [pc, #100]	@ (8000704 <MX_TIM1_Init+0xac>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006a4:	4817      	ldr	r0, [pc, #92]	@ (8000704 <MX_TIM1_Init+0xac>)
 80006a6:	f002 f86d 	bl	8002784 <HAL_TIM_Base_Init>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 80006b0:	f000 fa03 	bl	8000aba <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80006b4:	2307      	movs	r3, #7
 80006b6:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80006b8:	2350      	movs	r3, #80	@ 0x50
 80006ba:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 15;
 80006c0:	230f      	movs	r3, #15
 80006c2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80006c4:	f107 030c 	add.w	r3, r7, #12
 80006c8:	4619      	mov	r1, r3
 80006ca:	480e      	ldr	r0, [pc, #56]	@ (8000704 <MX_TIM1_Init+0xac>)
 80006cc:	f002 f8b1 	bl	8002832 <HAL_TIM_SlaveConfigSynchro>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80006d6:	f000 f9f0 	bl	8000aba <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006da:	2300      	movs	r3, #0
 80006dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80006de:	2300      	movs	r3, #0
 80006e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006e2:	2300      	movs	r3, #0
 80006e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006e6:	463b      	mov	r3, r7
 80006e8:	4619      	mov	r1, r3
 80006ea:	4806      	ldr	r0, [pc, #24]	@ (8000704 <MX_TIM1_Init+0xac>)
 80006ec:	f002 fa66 	bl	8002bbc <HAL_TIMEx_MasterConfigSynchronization>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 80006f6:	f000 f9e0 	bl	8000aba <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80006fa:	bf00      	nop
 80006fc:	3720      	adds	r7, #32
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	2000007c 	.word	0x2000007c
 8000708:	40012c00 	.word	0x40012c00

0800070c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b088      	sub	sp, #32
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000712:	f107 030c 	add.w	r3, r7, #12
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
 8000720:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000722:	463b      	mov	r3, r7
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800072c:	4b20      	ldr	r3, [pc, #128]	@ (80007b0 <MX_TIM2_Init+0xa4>)
 800072e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000732:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000734:	4b1e      	ldr	r3, [pc, #120]	@ (80007b0 <MX_TIM2_Init+0xa4>)
 8000736:	2200      	movs	r2, #0
 8000738:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800073a:	4b1d      	ldr	r3, [pc, #116]	@ (80007b0 <MX_TIM2_Init+0xa4>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000740:	4b1b      	ldr	r3, [pc, #108]	@ (80007b0 <MX_TIM2_Init+0xa4>)
 8000742:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000746:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000748:	4b19      	ldr	r3, [pc, #100]	@ (80007b0 <MX_TIM2_Init+0xa4>)
 800074a:	2200      	movs	r2, #0
 800074c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800074e:	4b18      	ldr	r3, [pc, #96]	@ (80007b0 <MX_TIM2_Init+0xa4>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000754:	4816      	ldr	r0, [pc, #88]	@ (80007b0 <MX_TIM2_Init+0xa4>)
 8000756:	f002 f815 	bl	8002784 <HAL_TIM_Base_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000760:	f000 f9ab 	bl	8000aba <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000764:	2307      	movs	r3, #7
 8000766:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000768:	2350      	movs	r3, #80	@ 0x50
 800076a:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 8000770:	2300      	movs	r3, #0
 8000772:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000774:	f107 030c 	add.w	r3, r7, #12
 8000778:	4619      	mov	r1, r3
 800077a:	480d      	ldr	r0, [pc, #52]	@ (80007b0 <MX_TIM2_Init+0xa4>)
 800077c:	f002 f859 	bl	8002832 <HAL_TIM_SlaveConfigSynchro>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000786:	f000 f998 	bl	8000aba <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800078a:	2300      	movs	r3, #0
 800078c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800078e:	2300      	movs	r3, #0
 8000790:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000792:	463b      	mov	r3, r7
 8000794:	4619      	mov	r1, r3
 8000796:	4806      	ldr	r0, [pc, #24]	@ (80007b0 <MX_TIM2_Init+0xa4>)
 8000798:	f002 fa10 	bl	8002bbc <HAL_TIMEx_MasterConfigSynchronization>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80007a2:	f000 f98a 	bl	8000aba <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007a6:	bf00      	nop
 80007a8:	3720      	adds	r7, #32
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	200000c8 	.word	0x200000c8

080007b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007b8:	4b14      	ldr	r3, [pc, #80]	@ (800080c <MX_USART1_UART_Init+0x58>)
 80007ba:	4a15      	ldr	r2, [pc, #84]	@ (8000810 <MX_USART1_UART_Init+0x5c>)
 80007bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007be:	4b13      	ldr	r3, [pc, #76]	@ (800080c <MX_USART1_UART_Init+0x58>)
 80007c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007c6:	4b11      	ldr	r3, [pc, #68]	@ (800080c <MX_USART1_UART_Init+0x58>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007cc:	4b0f      	ldr	r3, [pc, #60]	@ (800080c <MX_USART1_UART_Init+0x58>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007d2:	4b0e      	ldr	r3, [pc, #56]	@ (800080c <MX_USART1_UART_Init+0x58>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007d8:	4b0c      	ldr	r3, [pc, #48]	@ (800080c <MX_USART1_UART_Init+0x58>)
 80007da:	220c      	movs	r2, #12
 80007dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007de:	4b0b      	ldr	r3, [pc, #44]	@ (800080c <MX_USART1_UART_Init+0x58>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e4:	4b09      	ldr	r3, [pc, #36]	@ (800080c <MX_USART1_UART_Init+0x58>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ea:	4b08      	ldr	r3, [pc, #32]	@ (800080c <MX_USART1_UART_Init+0x58>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007f0:	4b06      	ldr	r3, [pc, #24]	@ (800080c <MX_USART1_UART_Init+0x58>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007f6:	4805      	ldr	r0, [pc, #20]	@ (800080c <MX_USART1_UART_Init+0x58>)
 80007f8:	f002 fa46 	bl	8002c88 <HAL_UART_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000802:	f000 f95a 	bl	8000aba <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000114 	.word	0x20000114
 8000810:	40013800 	.word	0x40013800

08000814 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b088      	sub	sp, #32
 8000818:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081a:	f107 030c 	add.w	r3, r7, #12
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
 8000828:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* Inicialização dos pinos de controle do LCD */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082a:	4b18      	ldr	r3, [pc, #96]	@ (800088c <MX_GPIO_Init+0x78>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800082e:	4a17      	ldr	r2, [pc, #92]	@ (800088c <MX_GPIO_Init+0x78>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000836:	4b15      	ldr	r3, [pc, #84]	@ (800088c <MX_GPIO_Init+0x78>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	60bb      	str	r3, [r7, #8]
 8000840:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000842:	4b12      	ldr	r3, [pc, #72]	@ (800088c <MX_GPIO_Init+0x78>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000846:	4a11      	ldr	r2, [pc, #68]	@ (800088c <MX_GPIO_Init+0x78>)
 8000848:	f043 0302 	orr.w	r3, r3, #2
 800084c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800084e:	4b0f      	ldr	r3, [pc, #60]	@ (800088c <MX_GPIO_Init+0x78>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000852:	f003 0302 	and.w	r3, r3, #2
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800085a:	2200      	movs	r2, #0
 800085c:	21fc      	movs	r1, #252	@ 0xfc
 800085e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000862:	f000 fdd5 	bl	8001410 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA2 PA3 PA4 PA5
                           PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000866:	23fc      	movs	r3, #252	@ 0xfc
 8000868:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086a:	2301      	movs	r3, #1
 800086c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000872:	2303      	movs	r3, #3
 8000874:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000876:	f107 030c 	add.w	r3, r7, #12
 800087a:	4619      	mov	r1, r3
 800087c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000880:	f000 fc54 	bl	800112c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* Qualquer outro código de inicialização se necessário */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000884:	bf00      	nop
 8000886:	3720      	adds	r7, #32
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	40021000 	.word	0x40021000

08000890 <lcd_send_command>:

/* USER CODE BEGIN 4 */
void lcd_send(uint8_t data);

void lcd_send_command(uint8_t cmd) {
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(GPIOA, LCD_RS_PIN, GPIO_PIN_RESET);
 800089a:	2200      	movs	r2, #0
 800089c:	2180      	movs	r1, #128	@ 0x80
 800089e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008a2:	f000 fdb5 	bl	8001410 <HAL_GPIO_WritePin>
    lcd_send(cmd);
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	4618      	mov	r0, r3
 80008aa:	f000 f833 	bl	8000914 <lcd_send>
    HAL_Delay(2);  // Delay adicional
 80008ae:	2002      	movs	r0, #2
 80008b0:	f000 fb32 	bl	8000f18 <HAL_Delay>
}
 80008b4:	bf00      	nop
 80008b6:	3708      	adds	r7, #8
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <lcd_send_data>:

void lcd_send_data(uint8_t data) {
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(GPIOA, LCD_RS_PIN, GPIO_PIN_SET);
 80008c6:	2201      	movs	r2, #1
 80008c8:	2180      	movs	r1, #128	@ 0x80
 80008ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008ce:	f000 fd9f 	bl	8001410 <HAL_GPIO_WritePin>
    lcd_send(data);
 80008d2:	79fb      	ldrb	r3, [r7, #7]
 80008d4:	4618      	mov	r0, r3
 80008d6:	f000 f81d 	bl	8000914 <lcd_send>
    HAL_Delay(2);  // Delay adicional
 80008da:	2002      	movs	r0, #2
 80008dc:	f000 fb1c 	bl	8000f18 <HAL_Delay>
}
 80008e0:	bf00      	nop
 80008e2:	3708      	adds	r7, #8
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <lcd_enable>:

// Função para gerar o pulso de habilitação
void lcd_enable(void) {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, LCD_E_PIN, GPIO_PIN_SET);
 80008ec:	2201      	movs	r2, #1
 80008ee:	2140      	movs	r1, #64	@ 0x40
 80008f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008f4:	f000 fd8c 	bl	8001410 <HAL_GPIO_WritePin>
    HAL_Delay(2);  // Delay ajustado
 80008f8:	2002      	movs	r0, #2
 80008fa:	f000 fb0d 	bl	8000f18 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA, LCD_E_PIN, GPIO_PIN_RESET);
 80008fe:	2200      	movs	r2, #0
 8000900:	2140      	movs	r1, #64	@ 0x40
 8000902:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000906:	f000 fd83 	bl	8001410 <HAL_GPIO_WritePin>
    HAL_Delay(2);  // Delay ajustado
 800090a:	2002      	movs	r0, #2
 800090c:	f000 fb04 	bl	8000f18 <HAL_Delay>
}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}

08000914 <lcd_send>:

// Função interna para enviar um byte (comando ou dado)
void lcd_send(uint8_t data) {
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	71fb      	strb	r3, [r7, #7]
    // Enviar nibble alto
    HAL_GPIO_WritePin(GPIOA, LCD_D7_PIN, (data >> 4) & 0x01);
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	091b      	lsrs	r3, r3, #4
 8000922:	b2db      	uxtb	r3, r3
 8000924:	f003 0301 	and.w	r3, r3, #1
 8000928:	b2db      	uxtb	r3, r3
 800092a:	461a      	mov	r2, r3
 800092c:	2104      	movs	r1, #4
 800092e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000932:	f000 fd6d 	bl	8001410 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, LCD_D6_PIN, (data >> 5) & 0x01);
 8000936:	79fb      	ldrb	r3, [r7, #7]
 8000938:	095b      	lsrs	r3, r3, #5
 800093a:	b2db      	uxtb	r3, r3
 800093c:	f003 0301 	and.w	r3, r3, #1
 8000940:	b2db      	uxtb	r3, r3
 8000942:	461a      	mov	r2, r3
 8000944:	2108      	movs	r1, #8
 8000946:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800094a:	f000 fd61 	bl	8001410 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, LCD_D5_PIN, (data >> 6) & 0x01);
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	099b      	lsrs	r3, r3, #6
 8000952:	b2db      	uxtb	r3, r3
 8000954:	f003 0301 	and.w	r3, r3, #1
 8000958:	b2db      	uxtb	r3, r3
 800095a:	461a      	mov	r2, r3
 800095c:	2110      	movs	r1, #16
 800095e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000962:	f000 fd55 	bl	8001410 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, LCD_D4_PIN, (data >> 7) & 0x01);
 8000966:	79fb      	ldrb	r3, [r7, #7]
 8000968:	09db      	lsrs	r3, r3, #7
 800096a:	b2db      	uxtb	r3, r3
 800096c:	461a      	mov	r2, r3
 800096e:	2120      	movs	r1, #32
 8000970:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000974:	f000 fd4c 	bl	8001410 <HAL_GPIO_WritePin>
    lcd_enable();
 8000978:	f7ff ffb6 	bl	80008e8 <lcd_enable>

    // Enviar nibble baixo
    HAL_GPIO_WritePin(GPIOA, LCD_D7_PIN, (data >> 0) & 0x01);
 800097c:	79fb      	ldrb	r3, [r7, #7]
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	b2db      	uxtb	r3, r3
 8000984:	461a      	mov	r2, r3
 8000986:	2104      	movs	r1, #4
 8000988:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800098c:	f000 fd40 	bl	8001410 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, LCD_D6_PIN, (data >> 1) & 0x01);
 8000990:	79fb      	ldrb	r3, [r7, #7]
 8000992:	085b      	lsrs	r3, r3, #1
 8000994:	b2db      	uxtb	r3, r3
 8000996:	f003 0301 	and.w	r3, r3, #1
 800099a:	b2db      	uxtb	r3, r3
 800099c:	461a      	mov	r2, r3
 800099e:	2108      	movs	r1, #8
 80009a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009a4:	f000 fd34 	bl	8001410 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, LCD_D5_PIN, (data >> 2) & 0x01);
 80009a8:	79fb      	ldrb	r3, [r7, #7]
 80009aa:	089b      	lsrs	r3, r3, #2
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	461a      	mov	r2, r3
 80009b6:	2110      	movs	r1, #16
 80009b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009bc:	f000 fd28 	bl	8001410 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, LCD_D4_PIN, (data >> 3) & 0x01);
 80009c0:	79fb      	ldrb	r3, [r7, #7]
 80009c2:	08db      	lsrs	r3, r3, #3
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	461a      	mov	r2, r3
 80009ce:	2120      	movs	r1, #32
 80009d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009d4:	f000 fd1c 	bl	8001410 <HAL_GPIO_WritePin>
    lcd_enable();
 80009d8:	f7ff ff86 	bl	80008e8 <lcd_enable>
}
 80009dc:	bf00      	nop
 80009de:	3708      	adds	r7, #8
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <lcd_init_>:

// Inicialização do LCD
void lcd_init_(void) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
    HAL_Delay(50);  // Esperar mais tempo após o boot
 80009e8:	2032      	movs	r0, #50	@ 0x32
 80009ea:	f000 fa95 	bl	8000f18 <HAL_Delay>

    lcd_send_command(0x03);
 80009ee:	2003      	movs	r0, #3
 80009f0:	f7ff ff4e 	bl	8000890 <lcd_send_command>
    HAL_Delay(5);
 80009f4:	2005      	movs	r0, #5
 80009f6:	f000 fa8f 	bl	8000f18 <HAL_Delay>
    lcd_send_command(0x03);
 80009fa:	2003      	movs	r0, #3
 80009fc:	f7ff ff48 	bl	8000890 <lcd_send_command>
    HAL_Delay(5);
 8000a00:	2005      	movs	r0, #5
 8000a02:	f000 fa89 	bl	8000f18 <HAL_Delay>
    lcd_send_command(0x03);
 8000a06:	2003      	movs	r0, #3
 8000a08:	f7ff ff42 	bl	8000890 <lcd_send_command>
    HAL_Delay(5);
 8000a0c:	2005      	movs	r0, #5
 8000a0e:	f000 fa83 	bl	8000f18 <HAL_Delay>
    lcd_send_command(0x02);  // Modo 4 bits
 8000a12:	2002      	movs	r0, #2
 8000a14:	f7ff ff3c 	bl	8000890 <lcd_send_command>
    HAL_Delay(5);
 8000a18:	2005      	movs	r0, #5
 8000a1a:	f000 fa7d 	bl	8000f18 <HAL_Delay>

    lcd_send_command(LCD_FUNCTION_SET | 0x08);
 8000a1e:	2028      	movs	r0, #40	@ 0x28
 8000a20:	f7ff ff36 	bl	8000890 <lcd_send_command>
    lcd_send_command(LCD_DISPLAY_CONTROL | LCD_DISPLAY_ON | LCD_CURSOR_OFF | LCD_BLINK_OFF);
 8000a24:	200c      	movs	r0, #12
 8000a26:	f7ff ff33 	bl	8000890 <lcd_send_command>
    lcd_send_command(LCD_CLEAR_DISPLAY);
 8000a2a:	2001      	movs	r0, #1
 8000a2c:	f7ff ff30 	bl	8000890 <lcd_send_command>
    HAL_Delay(2);
 8000a30:	2002      	movs	r0, #2
 8000a32:	f000 fa71 	bl	8000f18 <HAL_Delay>
    lcd_send_command(LCD_ENTRY_MODE_SET | LCD_ENTRY_LEFT);
 8000a36:	2006      	movs	r0, #6
 8000a38:	f7ff ff2a 	bl	8000890 <lcd_send_command>
}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <lcd_clear>:

// Limpa o display
void lcd_clear(void) {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
    lcd_send_command(LCD_CLEAR_DISPLAY);
 8000a44:	2001      	movs	r0, #1
 8000a46:	f7ff ff23 	bl	8000890 <lcd_send_command>
    HAL_Delay(2);
 8000a4a:	2002      	movs	r0, #2
 8000a4c:	f000 fa64 	bl	8000f18 <HAL_Delay>
}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <lcd_set_cursor>:

// Define a posição do cursor
void lcd_set_cursor(uint8_t row, uint8_t col) {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	460a      	mov	r2, r1
 8000a5e:	71fb      	strb	r3, [r7, #7]
 8000a60:	4613      	mov	r3, r2
 8000a62:	71bb      	strb	r3, [r7, #6]
    uint8_t address = (row == 0) ? 0x00 : 0x40;
 8000a64:	79fb      	ldrb	r3, [r7, #7]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d101      	bne.n	8000a6e <lcd_set_cursor+0x1a>
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	e000      	b.n	8000a70 <lcd_set_cursor+0x1c>
 8000a6e:	2340      	movs	r3, #64	@ 0x40
 8000a70:	73fb      	strb	r3, [r7, #15]
    address += col;
 8000a72:	7bfa      	ldrb	r2, [r7, #15]
 8000a74:	79bb      	ldrb	r3, [r7, #6]
 8000a76:	4413      	add	r3, r2
 8000a78:	73fb      	strb	r3, [r7, #15]
    lcd_send_command(LCD_SET_DDRAM_ADDR | address);
 8000a7a:	7bfb      	ldrb	r3, [r7, #15]
 8000a7c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	4618      	mov	r0, r3
 8000a84:	f7ff ff04 	bl	8000890 <lcd_send_command>
}
 8000a88:	bf00      	nop
 8000a8a:	3710      	adds	r7, #16
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <lcd_print>:

// Escreve uma string no LCD
void lcd_print(char *str) {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
    while (*str) {
 8000a98:	e006      	b.n	8000aa8 <lcd_print+0x18>
        lcd_send_data(*str++);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	1c5a      	adds	r2, r3, #1
 8000a9e:	607a      	str	r2, [r7, #4]
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f7ff ff0a 	bl	80008bc <lcd_send_data>
    while (*str) {
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d1f4      	bne.n	8000a9a <lcd_print+0xa>
    }
}
 8000ab0:	bf00      	nop
 8000ab2:	bf00      	nop
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000abe:	b672      	cpsid	i
}
 8000ac0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac2:	bf00      	nop
 8000ac4:	e7fd      	b.n	8000ac2 <Error_Handler+0x8>
	...

08000ac8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ace:	4b0f      	ldr	r3, [pc, #60]	@ (8000b0c <HAL_MspInit+0x44>)
 8000ad0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ad2:	4a0e      	ldr	r2, [pc, #56]	@ (8000b0c <HAL_MspInit+0x44>)
 8000ad4:	f043 0301 	orr.w	r3, r3, #1
 8000ad8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ada:	4b0c      	ldr	r3, [pc, #48]	@ (8000b0c <HAL_MspInit+0x44>)
 8000adc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae6:	4b09      	ldr	r3, [pc, #36]	@ (8000b0c <HAL_MspInit+0x44>)
 8000ae8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aea:	4a08      	ldr	r2, [pc, #32]	@ (8000b0c <HAL_MspInit+0x44>)
 8000aec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000af0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000af2:	4b06      	ldr	r3, [pc, #24]	@ (8000b0c <HAL_MspInit+0x44>)
 8000af4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000af6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000afa:	603b      	str	r3, [r7, #0]
 8000afc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000afe:	bf00      	nop
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	40021000 	.word	0x40021000

08000b10 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b096      	sub	sp, #88	@ 0x58
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b18:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b28:	f107 0310 	add.w	r3, r7, #16
 8000b2c:	2234      	movs	r2, #52	@ 0x34
 8000b2e:	2100      	movs	r1, #0
 8000b30:	4618      	mov	r0, r3
 8000b32:	f002 fd6c 	bl	800360e <memset>
  if(hi2c->Instance==I2C1)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a1f      	ldr	r2, [pc, #124]	@ (8000bb8 <HAL_I2C_MspInit+0xa8>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d137      	bne.n	8000bb0 <HAL_I2C_MspInit+0xa0>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000b40:	2340      	movs	r3, #64	@ 0x40
 8000b42:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000b44:	2300      	movs	r3, #0
 8000b46:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b48:	f107 0310 	add.w	r3, r7, #16
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f001 fc93 	bl	8002478 <HAL_RCCEx_PeriphCLKConfig>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000b58:	f7ff ffaf 	bl	8000aba <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5c:	4b17      	ldr	r3, [pc, #92]	@ (8000bbc <HAL_I2C_MspInit+0xac>)
 8000b5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b60:	4a16      	ldr	r2, [pc, #88]	@ (8000bbc <HAL_I2C_MspInit+0xac>)
 8000b62:	f043 0301 	orr.w	r3, r3, #1
 8000b66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b68:	4b14      	ldr	r3, [pc, #80]	@ (8000bbc <HAL_I2C_MspInit+0xac>)
 8000b6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b6c:	f003 0301 	and.w	r3, r3, #1
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b74:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000b78:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b7a:	2312      	movs	r3, #18
 8000b7c:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b82:	2303      	movs	r3, #3
 8000b84:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b86:	2304      	movs	r3, #4
 8000b88:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000b8e:	4619      	mov	r1, r3
 8000b90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b94:	f000 faca 	bl	800112c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b98:	4b08      	ldr	r3, [pc, #32]	@ (8000bbc <HAL_I2C_MspInit+0xac>)
 8000b9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b9c:	4a07      	ldr	r2, [pc, #28]	@ (8000bbc <HAL_I2C_MspInit+0xac>)
 8000b9e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ba2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ba4:	4b05      	ldr	r3, [pc, #20]	@ (8000bbc <HAL_I2C_MspInit+0xac>)
 8000ba6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ba8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bac:	60bb      	str	r3, [r7, #8]
 8000bae:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000bb0:	bf00      	nop
 8000bb2:	3758      	adds	r7, #88	@ 0x58
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40005400 	.word	0x40005400
 8000bbc:	40021000 	.word	0x40021000

08000bc0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08c      	sub	sp, #48	@ 0x30
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc8:	f107 031c 	add.w	r3, r7, #28
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a30      	ldr	r2, [pc, #192]	@ (8000ca0 <HAL_TIM_Base_MspInit+0xe0>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d12a      	bne.n	8000c38 <HAL_TIM_Base_MspInit+0x78>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000be2:	4b30      	ldr	r3, [pc, #192]	@ (8000ca4 <HAL_TIM_Base_MspInit+0xe4>)
 8000be4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000be6:	4a2f      	ldr	r2, [pc, #188]	@ (8000ca4 <HAL_TIM_Base_MspInit+0xe4>)
 8000be8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000bec:	6613      	str	r3, [r2, #96]	@ 0x60
 8000bee:	4b2d      	ldr	r3, [pc, #180]	@ (8000ca4 <HAL_TIM_Base_MspInit+0xe4>)
 8000bf0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bf2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000bf6:	61bb      	str	r3, [r7, #24]
 8000bf8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfa:	4b2a      	ldr	r3, [pc, #168]	@ (8000ca4 <HAL_TIM_Base_MspInit+0xe4>)
 8000bfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bfe:	4a29      	ldr	r2, [pc, #164]	@ (8000ca4 <HAL_TIM_Base_MspInit+0xe4>)
 8000c00:	f043 0301 	orr.w	r3, r3, #1
 8000c04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c06:	4b27      	ldr	r3, [pc, #156]	@ (8000ca4 <HAL_TIM_Base_MspInit+0xe4>)
 8000c08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c0a:	f003 0301 	and.w	r3, r3, #1
 8000c0e:	617b      	str	r3, [r7, #20]
 8000c10:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c12:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c20:	2300      	movs	r3, #0
 8000c22:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000c24:	2301      	movs	r3, #1
 8000c26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c28:	f107 031c 	add.w	r3, r7, #28
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c32:	f000 fa7b 	bl	800112c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c36:	e02e      	b.n	8000c96 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM2)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c40:	d129      	bne.n	8000c96 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c42:	4b18      	ldr	r3, [pc, #96]	@ (8000ca4 <HAL_TIM_Base_MspInit+0xe4>)
 8000c44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c46:	4a17      	ldr	r2, [pc, #92]	@ (8000ca4 <HAL_TIM_Base_MspInit+0xe4>)
 8000c48:	f043 0301 	orr.w	r3, r3, #1
 8000c4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c4e:	4b15      	ldr	r3, [pc, #84]	@ (8000ca4 <HAL_TIM_Base_MspInit+0xe4>)
 8000c50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5a:	4b12      	ldr	r3, [pc, #72]	@ (8000ca4 <HAL_TIM_Base_MspInit+0xe4>)
 8000c5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c5e:	4a11      	ldr	r2, [pc, #68]	@ (8000ca4 <HAL_TIM_Base_MspInit+0xe4>)
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c66:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca4 <HAL_TIM_Base_MspInit+0xe4>)
 8000c68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000c76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c80:	2300      	movs	r3, #0
 8000c82:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c84:	2301      	movs	r3, #1
 8000c86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c88:	f107 031c 	add.w	r3, r7, #28
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c92:	f000 fa4b 	bl	800112c <HAL_GPIO_Init>
}
 8000c96:	bf00      	nop
 8000c98:	3730      	adds	r7, #48	@ 0x30
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40012c00 	.word	0x40012c00
 8000ca4:	40021000 	.word	0x40021000

08000ca8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b096      	sub	sp, #88	@ 0x58
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cc0:	f107 0310 	add.w	r3, r7, #16
 8000cc4:	2234      	movs	r2, #52	@ 0x34
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f002 fca0 	bl	800360e <memset>
  if(huart->Instance==USART1)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a1e      	ldr	r2, [pc, #120]	@ (8000d4c <HAL_UART_MspInit+0xa4>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d135      	bne.n	8000d44 <HAL_UART_MspInit+0x9c>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ce0:	f107 0310 	add.w	r3, r7, #16
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f001 fbc7 	bl	8002478 <HAL_RCCEx_PeriphCLKConfig>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000cf0:	f7ff fee3 	bl	8000aba <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cf4:	4b16      	ldr	r3, [pc, #88]	@ (8000d50 <HAL_UART_MspInit+0xa8>)
 8000cf6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cf8:	4a15      	ldr	r2, [pc, #84]	@ (8000d50 <HAL_UART_MspInit+0xa8>)
 8000cfa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cfe:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d00:	4b13      	ldr	r3, [pc, #76]	@ (8000d50 <HAL_UART_MspInit+0xa8>)
 8000d02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d08:	60fb      	str	r3, [r7, #12]
 8000d0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d0c:	4b10      	ldr	r3, [pc, #64]	@ (8000d50 <HAL_UART_MspInit+0xa8>)
 8000d0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d10:	4a0f      	ldr	r2, [pc, #60]	@ (8000d50 <HAL_UART_MspInit+0xa8>)
 8000d12:	f043 0302 	orr.w	r3, r3, #2
 8000d16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d18:	4b0d      	ldr	r3, [pc, #52]	@ (8000d50 <HAL_UART_MspInit+0xa8>)
 8000d1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d1c:	f003 0302 	and.w	r3, r3, #2
 8000d20:	60bb      	str	r3, [r7, #8]
 8000d22:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d24:	23c0      	movs	r3, #192	@ 0xc0
 8000d26:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d30:	2303      	movs	r3, #3
 8000d32:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d34:	2307      	movs	r3, #7
 8000d36:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d38:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4805      	ldr	r0, [pc, #20]	@ (8000d54 <HAL_UART_MspInit+0xac>)
 8000d40:	f000 f9f4 	bl	800112c <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000d44:	bf00      	nop
 8000d46:	3758      	adds	r7, #88	@ 0x58
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40013800 	.word	0x40013800
 8000d50:	40021000 	.word	0x40021000
 8000d54:	48000400 	.word	0x48000400

08000d58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d5c:	bf00      	nop
 8000d5e:	e7fd      	b.n	8000d5c <NMI_Handler+0x4>

08000d60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d64:	bf00      	nop
 8000d66:	e7fd      	b.n	8000d64 <HardFault_Handler+0x4>

08000d68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d6c:	bf00      	nop
 8000d6e:	e7fd      	b.n	8000d6c <MemManage_Handler+0x4>

08000d70 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d74:	bf00      	nop
 8000d76:	e7fd      	b.n	8000d74 <BusFault_Handler+0x4>

08000d78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d7c:	bf00      	nop
 8000d7e:	e7fd      	b.n	8000d7c <UsageFault_Handler+0x4>

08000d80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr

08000daa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dae:	f000 f893 	bl	8000ed8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000dbc:	4b06      	ldr	r3, [pc, #24]	@ (8000dd8 <SystemInit+0x20>)
 8000dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dc2:	4a05      	ldr	r2, [pc, #20]	@ (8000dd8 <SystemInit+0x20>)
 8000dc4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dc8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ddc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e14 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000de0:	f7ff ffea 	bl	8000db8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000de4:	480c      	ldr	r0, [pc, #48]	@ (8000e18 <LoopForever+0x6>)
  ldr r1, =_edata
 8000de6:	490d      	ldr	r1, [pc, #52]	@ (8000e1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000de8:	4a0d      	ldr	r2, [pc, #52]	@ (8000e20 <LoopForever+0xe>)
  movs r3, #0
 8000dea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dec:	e002      	b.n	8000df4 <LoopCopyDataInit>

08000dee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000df2:	3304      	adds	r3, #4

08000df4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000df6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df8:	d3f9      	bcc.n	8000dee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dfa:	4a0a      	ldr	r2, [pc, #40]	@ (8000e24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dfc:	4c0a      	ldr	r4, [pc, #40]	@ (8000e28 <LoopForever+0x16>)
  movs r3, #0
 8000dfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e00:	e001      	b.n	8000e06 <LoopFillZerobss>

08000e02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e04:	3204      	adds	r2, #4

08000e06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e08:	d3fb      	bcc.n	8000e02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e0a:	f002 fc09 	bl	8003620 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e0e:	f7ff fb73 	bl	80004f8 <main>

08000e12 <LoopForever>:

LoopForever:
    b LoopForever
 8000e12:	e7fe      	b.n	8000e12 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e14:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000e18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e1c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e20:	080036e8 	.word	0x080036e8
  ldr r2, =_sbss
 8000e24:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e28:	200001a0 	.word	0x200001a0

08000e2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e2c:	e7fe      	b.n	8000e2c <ADC1_2_IRQHandler>

08000e2e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b082      	sub	sp, #8
 8000e32:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e34:	2300      	movs	r3, #0
 8000e36:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e38:	2003      	movs	r0, #3
 8000e3a:	f000 f943 	bl	80010c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e3e:	200f      	movs	r0, #15
 8000e40:	f000 f80e 	bl	8000e60 <HAL_InitTick>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d002      	beq.n	8000e50 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	71fb      	strb	r3, [r7, #7]
 8000e4e:	e001      	b.n	8000e54 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e50:	f7ff fe3a 	bl	8000ac8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e54:	79fb      	ldrb	r3, [r7, #7]
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
	...

08000e60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e6c:	4b17      	ldr	r3, [pc, #92]	@ (8000ecc <HAL_InitTick+0x6c>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d023      	beq.n	8000ebc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e74:	4b16      	ldr	r3, [pc, #88]	@ (8000ed0 <HAL_InitTick+0x70>)
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	4b14      	ldr	r3, [pc, #80]	@ (8000ecc <HAL_InitTick+0x6c>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f000 f941 	bl	8001112 <HAL_SYSTICK_Config>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d10f      	bne.n	8000eb6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2b0f      	cmp	r3, #15
 8000e9a:	d809      	bhi.n	8000eb0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	6879      	ldr	r1, [r7, #4]
 8000ea0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ea4:	f000 f919 	bl	80010da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ea8:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed4 <HAL_InitTick+0x74>)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6013      	str	r3, [r2, #0]
 8000eae:	e007      	b.n	8000ec0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	73fb      	strb	r3, [r7, #15]
 8000eb4:	e004      	b.n	8000ec0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	73fb      	strb	r3, [r7, #15]
 8000eba:	e001      	b.n	8000ec0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3710      	adds	r7, #16
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000008 	.word	0x20000008
 8000ed0:	20000000 	.word	0x20000000
 8000ed4:	20000004 	.word	0x20000004

08000ed8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000edc:	4b06      	ldr	r3, [pc, #24]	@ (8000ef8 <HAL_IncTick+0x20>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	4b06      	ldr	r3, [pc, #24]	@ (8000efc <HAL_IncTick+0x24>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	4a04      	ldr	r2, [pc, #16]	@ (8000efc <HAL_IncTick+0x24>)
 8000eea:	6013      	str	r3, [r2, #0]
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	20000008 	.word	0x20000008
 8000efc:	2000019c 	.word	0x2000019c

08000f00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  return uwTick;
 8000f04:	4b03      	ldr	r3, [pc, #12]	@ (8000f14 <HAL_GetTick+0x14>)
 8000f06:	681b      	ldr	r3, [r3, #0]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	2000019c 	.word	0x2000019c

08000f18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f20:	f7ff ffee 	bl	8000f00 <HAL_GetTick>
 8000f24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000f30:	d005      	beq.n	8000f3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f32:	4b0a      	ldr	r3, [pc, #40]	@ (8000f5c <HAL_Delay+0x44>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	461a      	mov	r2, r3
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f3e:	bf00      	nop
 8000f40:	f7ff ffde 	bl	8000f00 <HAL_GetTick>
 8000f44:	4602      	mov	r2, r0
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	68fa      	ldr	r2, [r7, #12]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d8f7      	bhi.n	8000f40 <HAL_Delay+0x28>
  {
  }
}
 8000f50:	bf00      	nop
 8000f52:	bf00      	nop
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20000008 	.word	0x20000008

08000f60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f003 0307 	and.w	r3, r3, #7
 8000f6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f70:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f76:	68ba      	ldr	r2, [r7, #8]
 8000f78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f92:	4a04      	ldr	r2, [pc, #16]	@ (8000fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	60d3      	str	r3, [r2, #12]
}
 8000f98:	bf00      	nop
 8000f9a:	3714      	adds	r7, #20
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fac:	4b04      	ldr	r3, [pc, #16]	@ (8000fc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	0a1b      	lsrs	r3, r3, #8
 8000fb2:	f003 0307 	and.w	r3, r3, #7
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	6039      	str	r1, [r7, #0]
 8000fce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	db0a      	blt.n	8000fee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	b2da      	uxtb	r2, r3
 8000fdc:	490c      	ldr	r1, [pc, #48]	@ (8001010 <__NVIC_SetPriority+0x4c>)
 8000fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe2:	0112      	lsls	r2, r2, #4
 8000fe4:	b2d2      	uxtb	r2, r2
 8000fe6:	440b      	add	r3, r1
 8000fe8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fec:	e00a      	b.n	8001004 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	4908      	ldr	r1, [pc, #32]	@ (8001014 <__NVIC_SetPriority+0x50>)
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	f003 030f 	and.w	r3, r3, #15
 8000ffa:	3b04      	subs	r3, #4
 8000ffc:	0112      	lsls	r2, r2, #4
 8000ffe:	b2d2      	uxtb	r2, r2
 8001000:	440b      	add	r3, r1
 8001002:	761a      	strb	r2, [r3, #24]
}
 8001004:	bf00      	nop
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	e000e100 	.word	0xe000e100
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001018:	b480      	push	{r7}
 800101a:	b089      	sub	sp, #36	@ 0x24
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	f003 0307 	and.w	r3, r3, #7
 800102a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	f1c3 0307 	rsb	r3, r3, #7
 8001032:	2b04      	cmp	r3, #4
 8001034:	bf28      	it	cs
 8001036:	2304      	movcs	r3, #4
 8001038:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	3304      	adds	r3, #4
 800103e:	2b06      	cmp	r3, #6
 8001040:	d902      	bls.n	8001048 <NVIC_EncodePriority+0x30>
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	3b03      	subs	r3, #3
 8001046:	e000      	b.n	800104a <NVIC_EncodePriority+0x32>
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800104c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	43da      	mvns	r2, r3
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	401a      	ands	r2, r3
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001060:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	fa01 f303 	lsl.w	r3, r1, r3
 800106a:	43d9      	mvns	r1, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001070:	4313      	orrs	r3, r2
         );
}
 8001072:	4618      	mov	r0, r3
 8001074:	3724      	adds	r7, #36	@ 0x24
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
	...

08001080 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3b01      	subs	r3, #1
 800108c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001090:	d301      	bcc.n	8001096 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001092:	2301      	movs	r3, #1
 8001094:	e00f      	b.n	80010b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001096:	4a0a      	ldr	r2, [pc, #40]	@ (80010c0 <SysTick_Config+0x40>)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3b01      	subs	r3, #1
 800109c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800109e:	210f      	movs	r1, #15
 80010a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010a4:	f7ff ff8e 	bl	8000fc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a8:	4b05      	ldr	r3, [pc, #20]	@ (80010c0 <SysTick_Config+0x40>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ae:	4b04      	ldr	r3, [pc, #16]	@ (80010c0 <SysTick_Config+0x40>)
 80010b0:	2207      	movs	r2, #7
 80010b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	e000e010 	.word	0xe000e010

080010c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff ff47 	bl	8000f60 <__NVIC_SetPriorityGrouping>
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b086      	sub	sp, #24
 80010de:	af00      	add	r7, sp, #0
 80010e0:	4603      	mov	r3, r0
 80010e2:	60b9      	str	r1, [r7, #8]
 80010e4:	607a      	str	r2, [r7, #4]
 80010e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010ec:	f7ff ff5c 	bl	8000fa8 <__NVIC_GetPriorityGrouping>
 80010f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	68b9      	ldr	r1, [r7, #8]
 80010f6:	6978      	ldr	r0, [r7, #20]
 80010f8:	f7ff ff8e 	bl	8001018 <NVIC_EncodePriority>
 80010fc:	4602      	mov	r2, r0
 80010fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001102:	4611      	mov	r1, r2
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff ff5d 	bl	8000fc4 <__NVIC_SetPriority>
}
 800110a:	bf00      	nop
 800110c:	3718      	adds	r7, #24
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b082      	sub	sp, #8
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff ffb0 	bl	8001080 <SysTick_Config>
 8001120:	4603      	mov	r3, r0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
	...

0800112c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800112c:	b480      	push	{r7}
 800112e:	b087      	sub	sp, #28
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800113a:	e14e      	b.n	80013da <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	2101      	movs	r1, #1
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	fa01 f303 	lsl.w	r3, r1, r3
 8001148:	4013      	ands	r3, r2
 800114a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	2b00      	cmp	r3, #0
 8001150:	f000 8140 	beq.w	80013d4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f003 0303 	and.w	r3, r3, #3
 800115c:	2b01      	cmp	r3, #1
 800115e:	d005      	beq.n	800116c <HAL_GPIO_Init+0x40>
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f003 0303 	and.w	r3, r3, #3
 8001168:	2b02      	cmp	r3, #2
 800116a:	d130      	bne.n	80011ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	2203      	movs	r2, #3
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	43db      	mvns	r3, r3
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	4013      	ands	r3, r2
 8001182:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	68da      	ldr	r2, [r3, #12]
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	4313      	orrs	r3, r2
 8001194:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011a2:	2201      	movs	r2, #1
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	43db      	mvns	r3, r3
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	4013      	ands	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	091b      	lsrs	r3, r3, #4
 80011b8:	f003 0201 	and.w	r2, r3, #1
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f003 0303 	and.w	r3, r3, #3
 80011d6:	2b03      	cmp	r3, #3
 80011d8:	d017      	beq.n	800120a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	2203      	movs	r2, #3
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	43db      	mvns	r3, r3
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	4013      	ands	r3, r2
 80011f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	689a      	ldr	r2, [r3, #8]
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	4313      	orrs	r3, r2
 8001202:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f003 0303 	and.w	r3, r3, #3
 8001212:	2b02      	cmp	r3, #2
 8001214:	d123      	bne.n	800125e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	08da      	lsrs	r2, r3, #3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	3208      	adds	r2, #8
 800121e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001222:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	220f      	movs	r2, #15
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	43db      	mvns	r3, r3
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	4013      	ands	r3, r2
 8001238:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	691a      	ldr	r2, [r3, #16]
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	f003 0307 	and.w	r3, r3, #7
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	4313      	orrs	r3, r2
 800124e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	08da      	lsrs	r2, r3, #3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	3208      	adds	r2, #8
 8001258:	6939      	ldr	r1, [r7, #16]
 800125a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	2203      	movs	r2, #3
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	43db      	mvns	r3, r3
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	4013      	ands	r3, r2
 8001274:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f003 0203 	and.w	r2, r3, #3
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	4313      	orrs	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800129a:	2b00      	cmp	r3, #0
 800129c:	f000 809a 	beq.w	80013d4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a0:	4b55      	ldr	r3, [pc, #340]	@ (80013f8 <HAL_GPIO_Init+0x2cc>)
 80012a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012a4:	4a54      	ldr	r2, [pc, #336]	@ (80013f8 <HAL_GPIO_Init+0x2cc>)
 80012a6:	f043 0301 	orr.w	r3, r3, #1
 80012aa:	6613      	str	r3, [r2, #96]	@ 0x60
 80012ac:	4b52      	ldr	r3, [pc, #328]	@ (80013f8 <HAL_GPIO_Init+0x2cc>)
 80012ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012b0:	f003 0301 	and.w	r3, r3, #1
 80012b4:	60bb      	str	r3, [r7, #8]
 80012b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012b8:	4a50      	ldr	r2, [pc, #320]	@ (80013fc <HAL_GPIO_Init+0x2d0>)
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	089b      	lsrs	r3, r3, #2
 80012be:	3302      	adds	r3, #2
 80012c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	f003 0303 	and.w	r3, r3, #3
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	220f      	movs	r2, #15
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	43db      	mvns	r3, r3
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	4013      	ands	r3, r2
 80012da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80012e2:	d013      	beq.n	800130c <HAL_GPIO_Init+0x1e0>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	4a46      	ldr	r2, [pc, #280]	@ (8001400 <HAL_GPIO_Init+0x2d4>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d00d      	beq.n	8001308 <HAL_GPIO_Init+0x1dc>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	4a45      	ldr	r2, [pc, #276]	@ (8001404 <HAL_GPIO_Init+0x2d8>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d007      	beq.n	8001304 <HAL_GPIO_Init+0x1d8>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	4a44      	ldr	r2, [pc, #272]	@ (8001408 <HAL_GPIO_Init+0x2dc>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d101      	bne.n	8001300 <HAL_GPIO_Init+0x1d4>
 80012fc:	2303      	movs	r3, #3
 80012fe:	e006      	b.n	800130e <HAL_GPIO_Init+0x1e2>
 8001300:	2307      	movs	r3, #7
 8001302:	e004      	b.n	800130e <HAL_GPIO_Init+0x1e2>
 8001304:	2302      	movs	r3, #2
 8001306:	e002      	b.n	800130e <HAL_GPIO_Init+0x1e2>
 8001308:	2301      	movs	r3, #1
 800130a:	e000      	b.n	800130e <HAL_GPIO_Init+0x1e2>
 800130c:	2300      	movs	r3, #0
 800130e:	697a      	ldr	r2, [r7, #20]
 8001310:	f002 0203 	and.w	r2, r2, #3
 8001314:	0092      	lsls	r2, r2, #2
 8001316:	4093      	lsls	r3, r2
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	4313      	orrs	r3, r2
 800131c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800131e:	4937      	ldr	r1, [pc, #220]	@ (80013fc <HAL_GPIO_Init+0x2d0>)
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	089b      	lsrs	r3, r3, #2
 8001324:	3302      	adds	r3, #2
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800132c:	4b37      	ldr	r3, [pc, #220]	@ (800140c <HAL_GPIO_Init+0x2e0>)
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	43db      	mvns	r3, r3
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	4013      	ands	r3, r2
 800133a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d003      	beq.n	8001350 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	4313      	orrs	r3, r2
 800134e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001350:	4a2e      	ldr	r2, [pc, #184]	@ (800140c <HAL_GPIO_Init+0x2e0>)
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001356:	4b2d      	ldr	r3, [pc, #180]	@ (800140c <HAL_GPIO_Init+0x2e0>)
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	43db      	mvns	r3, r3
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	4013      	ands	r3, r2
 8001364:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d003      	beq.n	800137a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	4313      	orrs	r3, r2
 8001378:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800137a:	4a24      	ldr	r2, [pc, #144]	@ (800140c <HAL_GPIO_Init+0x2e0>)
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001380:	4b22      	ldr	r3, [pc, #136]	@ (800140c <HAL_GPIO_Init+0x2e0>)
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	43db      	mvns	r3, r3
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	4013      	ands	r3, r2
 800138e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d003      	beq.n	80013a4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013a4:	4a19      	ldr	r2, [pc, #100]	@ (800140c <HAL_GPIO_Init+0x2e0>)
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80013aa:	4b18      	ldr	r3, [pc, #96]	@ (800140c <HAL_GPIO_Init+0x2e0>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	43db      	mvns	r3, r3
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	4013      	ands	r3, r2
 80013b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d003      	beq.n	80013ce <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013ce:	4a0f      	ldr	r2, [pc, #60]	@ (800140c <HAL_GPIO_Init+0x2e0>)
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	3301      	adds	r3, #1
 80013d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	fa22 f303 	lsr.w	r3, r2, r3
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	f47f aea9 	bne.w	800113c <HAL_GPIO_Init+0x10>
  }
}
 80013ea:	bf00      	nop
 80013ec:	bf00      	nop
 80013ee:	371c      	adds	r7, #28
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	40021000 	.word	0x40021000
 80013fc:	40010000 	.word	0x40010000
 8001400:	48000400 	.word	0x48000400
 8001404:	48000800 	.word	0x48000800
 8001408:	48000c00 	.word	0x48000c00
 800140c:	40010400 	.word	0x40010400

08001410 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	460b      	mov	r3, r1
 800141a:	807b      	strh	r3, [r7, #2]
 800141c:	4613      	mov	r3, r2
 800141e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001420:	787b      	ldrb	r3, [r7, #1]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d003      	beq.n	800142e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001426:	887a      	ldrh	r2, [r7, #2]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800142c:	e002      	b.n	8001434 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800142e:	887a      	ldrh	r2, [r7, #2]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d101      	bne.n	8001452 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e08d      	b.n	800156e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001458:	b2db      	uxtb	r3, r3
 800145a:	2b00      	cmp	r3, #0
 800145c:	d106      	bne.n	800146c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f7ff fb52 	bl	8000b10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2224      	movs	r2, #36	@ 0x24
 8001470:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f022 0201 	bic.w	r2, r2, #1
 8001482:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	685a      	ldr	r2, [r3, #4]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001490:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	689a      	ldr	r2, [r3, #8]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80014a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d107      	bne.n	80014ba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	689a      	ldr	r2, [r3, #8]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	e006      	b.n	80014c8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	689a      	ldr	r2, [r3, #8]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80014c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d108      	bne.n	80014e2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	685a      	ldr	r2, [r3, #4]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	e007      	b.n	80014f2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	685a      	ldr	r2, [r3, #4]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80014f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	6812      	ldr	r2, [r2, #0]
 80014fc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001500:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001504:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	68da      	ldr	r2, [r3, #12]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001514:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	691a      	ldr	r2, [r3, #16]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	695b      	ldr	r3, [r3, #20]
 800151e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	699b      	ldr	r3, [r3, #24]
 8001526:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	430a      	orrs	r2, r1
 800152e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	69d9      	ldr	r1, [r3, #28]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a1a      	ldr	r2, [r3, #32]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	430a      	orrs	r2, r1
 800153e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f042 0201 	orr.w	r2, r2, #1
 800154e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2220      	movs	r2, #32
 800155a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2200      	movs	r2, #0
 8001568:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001576:	b480      	push	{r7}
 8001578:	b083      	sub	sp, #12
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
 800157e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001586:	b2db      	uxtb	r3, r3
 8001588:	2b20      	cmp	r3, #32
 800158a:	d138      	bne.n	80015fe <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001592:	2b01      	cmp	r3, #1
 8001594:	d101      	bne.n	800159a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001596:	2302      	movs	r3, #2
 8001598:	e032      	b.n	8001600 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2201      	movs	r2, #1
 800159e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2224      	movs	r2, #36	@ 0x24
 80015a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f022 0201 	bic.w	r2, r2, #1
 80015b8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80015c8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	6819      	ldr	r1, [r3, #0]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	683a      	ldr	r2, [r7, #0]
 80015d6:	430a      	orrs	r2, r1
 80015d8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f042 0201 	orr.w	r2, r2, #1
 80015e8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2220      	movs	r2, #32
 80015ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80015fa:	2300      	movs	r3, #0
 80015fc:	e000      	b.n	8001600 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80015fe:	2302      	movs	r3, #2
  }
}
 8001600:	4618      	mov	r0, r3
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800160c:	b480      	push	{r7}
 800160e:	b085      	sub	sp, #20
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800161c:	b2db      	uxtb	r3, r3
 800161e:	2b20      	cmp	r3, #32
 8001620:	d139      	bne.n	8001696 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001628:	2b01      	cmp	r3, #1
 800162a:	d101      	bne.n	8001630 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800162c:	2302      	movs	r3, #2
 800162e:	e033      	b.n	8001698 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2201      	movs	r2, #1
 8001634:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2224      	movs	r2, #36	@ 0x24
 800163c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f022 0201 	bic.w	r2, r2, #1
 800164e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800165e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	021b      	lsls	r3, r3, #8
 8001664:	68fa      	ldr	r2, [r7, #12]
 8001666:	4313      	orrs	r3, r2
 8001668:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	68fa      	ldr	r2, [r7, #12]
 8001670:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f042 0201 	orr.w	r2, r2, #1
 8001680:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2220      	movs	r2, #32
 8001686:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2200      	movs	r2, #0
 800168e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001692:	2300      	movs	r3, #0
 8001694:	e000      	b.n	8001698 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001696:	2302      	movs	r3, #2
  }
}
 8001698:	4618      	mov	r0, r3
 800169a:	3714      	adds	r7, #20
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80016a8:	4b04      	ldr	r3, [pc, #16]	@ (80016bc <HAL_PWREx_GetVoltageRange+0x18>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	40007000 	.word	0x40007000

080016c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80016ce:	d130      	bne.n	8001732 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80016d0:	4b23      	ldr	r3, [pc, #140]	@ (8001760 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80016d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80016dc:	d038      	beq.n	8001750 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80016de:	4b20      	ldr	r3, [pc, #128]	@ (8001760 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80016e6:	4a1e      	ldr	r2, [pc, #120]	@ (8001760 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016e8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016ec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80016ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001764 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2232      	movs	r2, #50	@ 0x32
 80016f4:	fb02 f303 	mul.w	r3, r2, r3
 80016f8:	4a1b      	ldr	r2, [pc, #108]	@ (8001768 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80016fa:	fba2 2303 	umull	r2, r3, r2, r3
 80016fe:	0c9b      	lsrs	r3, r3, #18
 8001700:	3301      	adds	r3, #1
 8001702:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001704:	e002      	b.n	800170c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	3b01      	subs	r3, #1
 800170a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800170c:	4b14      	ldr	r3, [pc, #80]	@ (8001760 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800170e:	695b      	ldr	r3, [r3, #20]
 8001710:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001714:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001718:	d102      	bne.n	8001720 <HAL_PWREx_ControlVoltageScaling+0x60>
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d1f2      	bne.n	8001706 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001720:	4b0f      	ldr	r3, [pc, #60]	@ (8001760 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001722:	695b      	ldr	r3, [r3, #20]
 8001724:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001728:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800172c:	d110      	bne.n	8001750 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e00f      	b.n	8001752 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001732:	4b0b      	ldr	r3, [pc, #44]	@ (8001760 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800173a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800173e:	d007      	beq.n	8001750 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001740:	4b07      	ldr	r3, [pc, #28]	@ (8001760 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001748:	4a05      	ldr	r2, [pc, #20]	@ (8001760 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800174a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800174e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3714      	adds	r7, #20
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	40007000 	.word	0x40007000
 8001764:	20000000 	.word	0x20000000
 8001768:	431bde83 	.word	0x431bde83

0800176c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08a      	sub	sp, #40	@ 0x28
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d102      	bne.n	8001780 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	f000 bc4f 	b.w	800201e <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001780:	4b97      	ldr	r3, [pc, #604]	@ (80019e0 <HAL_RCC_OscConfig+0x274>)
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	f003 030c 	and.w	r3, r3, #12
 8001788:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800178a:	4b95      	ldr	r3, [pc, #596]	@ (80019e0 <HAL_RCC_OscConfig+0x274>)
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	f003 0303 	and.w	r3, r3, #3
 8001792:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0310 	and.w	r3, r3, #16
 800179c:	2b00      	cmp	r3, #0
 800179e:	f000 80e6 	beq.w	800196e <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017a2:	6a3b      	ldr	r3, [r7, #32]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d007      	beq.n	80017b8 <HAL_RCC_OscConfig+0x4c>
 80017a8:	6a3b      	ldr	r3, [r7, #32]
 80017aa:	2b0c      	cmp	r3, #12
 80017ac:	f040 808d 	bne.w	80018ca <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	f040 8089 	bne.w	80018ca <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017b8:	4b89      	ldr	r3, [pc, #548]	@ (80019e0 <HAL_RCC_OscConfig+0x274>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0302 	and.w	r3, r3, #2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d006      	beq.n	80017d2 <HAL_RCC_OscConfig+0x66>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	69db      	ldr	r3, [r3, #28]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d102      	bne.n	80017d2 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	f000 bc26 	b.w	800201e <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80017d6:	4b82      	ldr	r3, [pc, #520]	@ (80019e0 <HAL_RCC_OscConfig+0x274>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0308 	and.w	r3, r3, #8
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d004      	beq.n	80017ec <HAL_RCC_OscConfig+0x80>
 80017e2:	4b7f      	ldr	r3, [pc, #508]	@ (80019e0 <HAL_RCC_OscConfig+0x274>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80017ea:	e005      	b.n	80017f8 <HAL_RCC_OscConfig+0x8c>
 80017ec:	4b7c      	ldr	r3, [pc, #496]	@ (80019e0 <HAL_RCC_OscConfig+0x274>)
 80017ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017f2:	091b      	lsrs	r3, r3, #4
 80017f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d224      	bcs.n	8001846 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001800:	4618      	mov	r0, r3
 8001802:	f000 fdd9 	bl	80023b8 <RCC_SetFlashLatencyFromMSIRange>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d002      	beq.n	8001812 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	f000 bc06 	b.w	800201e <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001812:	4b73      	ldr	r3, [pc, #460]	@ (80019e0 <HAL_RCC_OscConfig+0x274>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a72      	ldr	r2, [pc, #456]	@ (80019e0 <HAL_RCC_OscConfig+0x274>)
 8001818:	f043 0308 	orr.w	r3, r3, #8
 800181c:	6013      	str	r3, [r2, #0]
 800181e:	4b70      	ldr	r3, [pc, #448]	@ (80019e0 <HAL_RCC_OscConfig+0x274>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800182a:	496d      	ldr	r1, [pc, #436]	@ (80019e0 <HAL_RCC_OscConfig+0x274>)
 800182c:	4313      	orrs	r3, r2
 800182e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001830:	4b6b      	ldr	r3, [pc, #428]	@ (80019e0 <HAL_RCC_OscConfig+0x274>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6a1b      	ldr	r3, [r3, #32]
 800183c:	021b      	lsls	r3, r3, #8
 800183e:	4968      	ldr	r1, [pc, #416]	@ (80019e0 <HAL_RCC_OscConfig+0x274>)
 8001840:	4313      	orrs	r3, r2
 8001842:	604b      	str	r3, [r1, #4]
 8001844:	e025      	b.n	8001892 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001846:	4b66      	ldr	r3, [pc, #408]	@ (80019e0 <HAL_RCC_OscConfig+0x274>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a65      	ldr	r2, [pc, #404]	@ (80019e0 <HAL_RCC_OscConfig+0x274>)
 800184c:	f043 0308 	orr.w	r3, r3, #8
 8001850:	6013      	str	r3, [r2, #0]
 8001852:	4b63      	ldr	r3, [pc, #396]	@ (80019e0 <HAL_RCC_OscConfig+0x274>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800185e:	4960      	ldr	r1, [pc, #384]	@ (80019e0 <HAL_RCC_OscConfig+0x274>)
 8001860:	4313      	orrs	r3, r2
 8001862:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001864:	4b5e      	ldr	r3, [pc, #376]	@ (80019e0 <HAL_RCC_OscConfig+0x274>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a1b      	ldr	r3, [r3, #32]
 8001870:	021b      	lsls	r3, r3, #8
 8001872:	495b      	ldr	r1, [pc, #364]	@ (80019e0 <HAL_RCC_OscConfig+0x274>)
 8001874:	4313      	orrs	r3, r2
 8001876:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001878:	6a3b      	ldr	r3, [r7, #32]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d109      	bne.n	8001892 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001882:	4618      	mov	r0, r3
 8001884:	f000 fd98 	bl	80023b8 <RCC_SetFlashLatencyFromMSIRange>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e3c5      	b.n	800201e <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001892:	f000 fccd 	bl	8002230 <HAL_RCC_GetSysClockFreq>
 8001896:	4602      	mov	r2, r0
 8001898:	4b51      	ldr	r3, [pc, #324]	@ (80019e0 <HAL_RCC_OscConfig+0x274>)
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	091b      	lsrs	r3, r3, #4
 800189e:	f003 030f 	and.w	r3, r3, #15
 80018a2:	4950      	ldr	r1, [pc, #320]	@ (80019e4 <HAL_RCC_OscConfig+0x278>)
 80018a4:	5ccb      	ldrb	r3, [r1, r3]
 80018a6:	f003 031f 	and.w	r3, r3, #31
 80018aa:	fa22 f303 	lsr.w	r3, r2, r3
 80018ae:	4a4e      	ldr	r2, [pc, #312]	@ (80019e8 <HAL_RCC_OscConfig+0x27c>)
 80018b0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80018b2:	4b4e      	ldr	r3, [pc, #312]	@ (80019ec <HAL_RCC_OscConfig+0x280>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff fad2 	bl	8000e60 <HAL_InitTick>
 80018bc:	4603      	mov	r3, r0
 80018be:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80018c0:	7dfb      	ldrb	r3, [r7, #23]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d052      	beq.n	800196c <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80018c6:	7dfb      	ldrb	r3, [r7, #23]
 80018c8:	e3a9      	b.n	800201e <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	69db      	ldr	r3, [r3, #28]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d032      	beq.n	8001938 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80018d2:	4b43      	ldr	r3, [pc, #268]	@ (80019e0 <HAL_RCC_OscConfig+0x274>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a42      	ldr	r2, [pc, #264]	@ (80019e0 <HAL_RCC_OscConfig+0x274>)
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018de:	f7ff fb0f 	bl	8000f00 <HAL_GetTick>
 80018e2:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018e4:	e008      	b.n	80018f8 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018e6:	f7ff fb0b 	bl	8000f00 <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d901      	bls.n	80018f8 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e392      	b.n	800201e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018f8:	4b39      	ldr	r3, [pc, #228]	@ (80019e0 <HAL_RCC_OscConfig+0x274>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d0f0      	beq.n	80018e6 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001904:	4b36      	ldr	r3, [pc, #216]	@ (80019e0 <HAL_RCC_OscConfig+0x274>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a35      	ldr	r2, [pc, #212]	@ (80019e0 <HAL_RCC_OscConfig+0x274>)
 800190a:	f043 0308 	orr.w	r3, r3, #8
 800190e:	6013      	str	r3, [r2, #0]
 8001910:	4b33      	ldr	r3, [pc, #204]	@ (80019e0 <HAL_RCC_OscConfig+0x274>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800191c:	4930      	ldr	r1, [pc, #192]	@ (80019e0 <HAL_RCC_OscConfig+0x274>)
 800191e:	4313      	orrs	r3, r2
 8001920:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001922:	4b2f      	ldr	r3, [pc, #188]	@ (80019e0 <HAL_RCC_OscConfig+0x274>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6a1b      	ldr	r3, [r3, #32]
 800192e:	021b      	lsls	r3, r3, #8
 8001930:	492b      	ldr	r1, [pc, #172]	@ (80019e0 <HAL_RCC_OscConfig+0x274>)
 8001932:	4313      	orrs	r3, r2
 8001934:	604b      	str	r3, [r1, #4]
 8001936:	e01a      	b.n	800196e <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001938:	4b29      	ldr	r3, [pc, #164]	@ (80019e0 <HAL_RCC_OscConfig+0x274>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a28      	ldr	r2, [pc, #160]	@ (80019e0 <HAL_RCC_OscConfig+0x274>)
 800193e:	f023 0301 	bic.w	r3, r3, #1
 8001942:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001944:	f7ff fadc 	bl	8000f00 <HAL_GetTick>
 8001948:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800194c:	f7ff fad8 	bl	8000f00 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e35f      	b.n	800201e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800195e:	4b20      	ldr	r3, [pc, #128]	@ (80019e0 <HAL_RCC_OscConfig+0x274>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1f0      	bne.n	800194c <HAL_RCC_OscConfig+0x1e0>
 800196a:	e000      	b.n	800196e <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800196c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	2b00      	cmp	r3, #0
 8001978:	d073      	beq.n	8001a62 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800197a:	6a3b      	ldr	r3, [r7, #32]
 800197c:	2b08      	cmp	r3, #8
 800197e:	d005      	beq.n	800198c <HAL_RCC_OscConfig+0x220>
 8001980:	6a3b      	ldr	r3, [r7, #32]
 8001982:	2b0c      	cmp	r3, #12
 8001984:	d10e      	bne.n	80019a4 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	2b03      	cmp	r3, #3
 800198a:	d10b      	bne.n	80019a4 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800198c:	4b14      	ldr	r3, [pc, #80]	@ (80019e0 <HAL_RCC_OscConfig+0x274>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d063      	beq.n	8001a60 <HAL_RCC_OscConfig+0x2f4>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d15f      	bne.n	8001a60 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e33c      	b.n	800201e <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019ac:	d106      	bne.n	80019bc <HAL_RCC_OscConfig+0x250>
 80019ae:	4b0c      	ldr	r3, [pc, #48]	@ (80019e0 <HAL_RCC_OscConfig+0x274>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a0b      	ldr	r2, [pc, #44]	@ (80019e0 <HAL_RCC_OscConfig+0x274>)
 80019b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019b8:	6013      	str	r3, [r2, #0]
 80019ba:	e025      	b.n	8001a08 <HAL_RCC_OscConfig+0x29c>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019c4:	d114      	bne.n	80019f0 <HAL_RCC_OscConfig+0x284>
 80019c6:	4b06      	ldr	r3, [pc, #24]	@ (80019e0 <HAL_RCC_OscConfig+0x274>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a05      	ldr	r2, [pc, #20]	@ (80019e0 <HAL_RCC_OscConfig+0x274>)
 80019cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019d0:	6013      	str	r3, [r2, #0]
 80019d2:	4b03      	ldr	r3, [pc, #12]	@ (80019e0 <HAL_RCC_OscConfig+0x274>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a02      	ldr	r2, [pc, #8]	@ (80019e0 <HAL_RCC_OscConfig+0x274>)
 80019d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019dc:	6013      	str	r3, [r2, #0]
 80019de:	e013      	b.n	8001a08 <HAL_RCC_OscConfig+0x29c>
 80019e0:	40021000 	.word	0x40021000
 80019e4:	08003690 	.word	0x08003690
 80019e8:	20000000 	.word	0x20000000
 80019ec:	20000004 	.word	0x20000004
 80019f0:	4b8f      	ldr	r3, [pc, #572]	@ (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a8e      	ldr	r2, [pc, #568]	@ (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 80019f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019fa:	6013      	str	r3, [r2, #0]
 80019fc:	4b8c      	ldr	r3, [pc, #560]	@ (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a8b      	ldr	r2, [pc, #556]	@ (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001a02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d013      	beq.n	8001a38 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a10:	f7ff fa76 	bl	8000f00 <HAL_GetTick>
 8001a14:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a16:	e008      	b.n	8001a2a <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a18:	f7ff fa72 	bl	8000f00 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b64      	cmp	r3, #100	@ 0x64
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e2f9      	b.n	800201e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a2a:	4b81      	ldr	r3, [pc, #516]	@ (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d0f0      	beq.n	8001a18 <HAL_RCC_OscConfig+0x2ac>
 8001a36:	e014      	b.n	8001a62 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a38:	f7ff fa62 	bl	8000f00 <HAL_GetTick>
 8001a3c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a40:	f7ff fa5e 	bl	8000f00 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b64      	cmp	r3, #100	@ 0x64
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e2e5      	b.n	800201e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a52:	4b77      	ldr	r3, [pc, #476]	@ (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d1f0      	bne.n	8001a40 <HAL_RCC_OscConfig+0x2d4>
 8001a5e:	e000      	b.n	8001a62 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d060      	beq.n	8001b30 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a6e:	6a3b      	ldr	r3, [r7, #32]
 8001a70:	2b04      	cmp	r3, #4
 8001a72:	d005      	beq.n	8001a80 <HAL_RCC_OscConfig+0x314>
 8001a74:	6a3b      	ldr	r3, [r7, #32]
 8001a76:	2b0c      	cmp	r3, #12
 8001a78:	d119      	bne.n	8001aae <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d116      	bne.n	8001aae <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a80:	4b6b      	ldr	r3, [pc, #428]	@ (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d005      	beq.n	8001a98 <HAL_RCC_OscConfig+0x32c>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d101      	bne.n	8001a98 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e2c2      	b.n	800201e <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a98:	4b65      	ldr	r3, [pc, #404]	@ (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	691b      	ldr	r3, [r3, #16]
 8001aa4:	061b      	lsls	r3, r3, #24
 8001aa6:	4962      	ldr	r1, [pc, #392]	@ (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001aac:	e040      	b.n	8001b30 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d023      	beq.n	8001afe <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ab6:	4b5e      	ldr	r3, [pc, #376]	@ (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a5d      	ldr	r2, [pc, #372]	@ (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001abc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ac0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac2:	f7ff fa1d 	bl	8000f00 <HAL_GetTick>
 8001ac6:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ac8:	e008      	b.n	8001adc <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aca:	f7ff fa19 	bl	8000f00 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e2a0      	b.n	800201e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001adc:	4b54      	ldr	r3, [pc, #336]	@ (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d0f0      	beq.n	8001aca <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ae8:	4b51      	ldr	r3, [pc, #324]	@ (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	061b      	lsls	r3, r3, #24
 8001af6:	494e      	ldr	r1, [pc, #312]	@ (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001af8:	4313      	orrs	r3, r2
 8001afa:	604b      	str	r3, [r1, #4]
 8001afc:	e018      	b.n	8001b30 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001afe:	4b4c      	ldr	r3, [pc, #304]	@ (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a4b      	ldr	r2, [pc, #300]	@ (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001b04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001b08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b0a:	f7ff f9f9 	bl	8000f00 <HAL_GetTick>
 8001b0e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b10:	e008      	b.n	8001b24 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b12:	f7ff f9f5 	bl	8000f00 <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d901      	bls.n	8001b24 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e27c      	b.n	800201e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b24:	4b42      	ldr	r3, [pc, #264]	@ (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d1f0      	bne.n	8001b12 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0308 	and.w	r3, r3, #8
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	f000 8082 	beq.w	8001c42 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	695b      	ldr	r3, [r3, #20]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d05f      	beq.n	8001c06 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8001b46:	4b3a      	ldr	r3, [pc, #232]	@ (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001b48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b4c:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	699a      	ldr	r2, [r3, #24]
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	f003 0310 	and.w	r3, r3, #16
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d037      	beq.n	8001bcc <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d006      	beq.n	8001b74 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d101      	bne.n	8001b74 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e254      	b.n	800201e <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d01b      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8001b7e:	4b2c      	ldr	r3, [pc, #176]	@ (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001b80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b84:	4a2a      	ldr	r2, [pc, #168]	@ (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001b86:	f023 0301 	bic.w	r3, r3, #1
 8001b8a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b8e:	f7ff f9b7 	bl	8000f00 <HAL_GetTick>
 8001b92:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b94:	e008      	b.n	8001ba8 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b96:	f7ff f9b3 	bl	8000f00 <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2b11      	cmp	r3, #17
 8001ba2:	d901      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e23a      	b.n	800201e <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ba8:	4b21      	ldr	r3, [pc, #132]	@ (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001baa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1ef      	bne.n	8001b96 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8001bb6:	4b1e      	ldr	r3, [pc, #120]	@ (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001bb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bbc:	f023 0210 	bic.w	r2, r3, #16
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	491a      	ldr	r1, [pc, #104]	@ (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bcc:	4b18      	ldr	r3, [pc, #96]	@ (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001bce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bd2:	4a17      	ldr	r2, [pc, #92]	@ (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001bd4:	f043 0301 	orr.w	r3, r3, #1
 8001bd8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bdc:	f7ff f990 	bl	8000f00 <HAL_GetTick>
 8001be0:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001be4:	f7ff f98c 	bl	8000f00 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b11      	cmp	r3, #17
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e213      	b.n	800201e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001bf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bfc:	f003 0302 	and.w	r3, r3, #2
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d0ef      	beq.n	8001be4 <HAL_RCC_OscConfig+0x478>
 8001c04:	e01d      	b.n	8001c42 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c06:	4b0a      	ldr	r3, [pc, #40]	@ (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001c08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c0c:	4a08      	ldr	r2, [pc, #32]	@ (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001c0e:	f023 0301 	bic.w	r3, r3, #1
 8001c12:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c16:	f7ff f973 	bl	8000f00 <HAL_GetTick>
 8001c1a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c1c:	e00a      	b.n	8001c34 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c1e:	f7ff f96f 	bl	8000f00 <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b11      	cmp	r3, #17
 8001c2a:	d903      	bls.n	8001c34 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e1f6      	b.n	800201e <HAL_RCC_OscConfig+0x8b2>
 8001c30:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c34:	4ba9      	ldr	r3, [pc, #676]	@ (8001edc <HAL_RCC_OscConfig+0x770>)
 8001c36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1ed      	bne.n	8001c1e <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0304 	and.w	r3, r3, #4
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f000 80bd 	beq.w	8001dca <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c50:	2300      	movs	r3, #0
 8001c52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001c56:	4ba1      	ldr	r3, [pc, #644]	@ (8001edc <HAL_RCC_OscConfig+0x770>)
 8001c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d10e      	bne.n	8001c80 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c62:	4b9e      	ldr	r3, [pc, #632]	@ (8001edc <HAL_RCC_OscConfig+0x770>)
 8001c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c66:	4a9d      	ldr	r2, [pc, #628]	@ (8001edc <HAL_RCC_OscConfig+0x770>)
 8001c68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c6e:	4b9b      	ldr	r3, [pc, #620]	@ (8001edc <HAL_RCC_OscConfig+0x770>)
 8001c70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c80:	4b97      	ldr	r3, [pc, #604]	@ (8001ee0 <HAL_RCC_OscConfig+0x774>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d118      	bne.n	8001cbe <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c8c:	4b94      	ldr	r3, [pc, #592]	@ (8001ee0 <HAL_RCC_OscConfig+0x774>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a93      	ldr	r2, [pc, #588]	@ (8001ee0 <HAL_RCC_OscConfig+0x774>)
 8001c92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c96:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c98:	f7ff f932 	bl	8000f00 <HAL_GetTick>
 8001c9c:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ca0:	f7ff f92e 	bl	8000f00 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e1b5      	b.n	800201e <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cb2:	4b8b      	ldr	r3, [pc, #556]	@ (8001ee0 <HAL_RCC_OscConfig+0x774>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d0f0      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d02c      	beq.n	8001d24 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8001cca:	4b84      	ldr	r3, [pc, #528]	@ (8001edc <HAL_RCC_OscConfig+0x770>)
 8001ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cd0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cdc:	497f      	ldr	r1, [pc, #508]	@ (8001edc <HAL_RCC_OscConfig+0x770>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f003 0304 	and.w	r3, r3, #4
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d010      	beq.n	8001d12 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001cf0:	4b7a      	ldr	r3, [pc, #488]	@ (8001edc <HAL_RCC_OscConfig+0x770>)
 8001cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cf6:	4a79      	ldr	r2, [pc, #484]	@ (8001edc <HAL_RCC_OscConfig+0x770>)
 8001cf8:	f043 0304 	orr.w	r3, r3, #4
 8001cfc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001d00:	4b76      	ldr	r3, [pc, #472]	@ (8001edc <HAL_RCC_OscConfig+0x770>)
 8001d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d06:	4a75      	ldr	r2, [pc, #468]	@ (8001edc <HAL_RCC_OscConfig+0x770>)
 8001d08:	f043 0301 	orr.w	r3, r3, #1
 8001d0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d10:	e018      	b.n	8001d44 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001d12:	4b72      	ldr	r3, [pc, #456]	@ (8001edc <HAL_RCC_OscConfig+0x770>)
 8001d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d18:	4a70      	ldr	r2, [pc, #448]	@ (8001edc <HAL_RCC_OscConfig+0x770>)
 8001d1a:	f043 0301 	orr.w	r3, r3, #1
 8001d1e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d22:	e00f      	b.n	8001d44 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001d24:	4b6d      	ldr	r3, [pc, #436]	@ (8001edc <HAL_RCC_OscConfig+0x770>)
 8001d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d2a:	4a6c      	ldr	r2, [pc, #432]	@ (8001edc <HAL_RCC_OscConfig+0x770>)
 8001d2c:	f023 0301 	bic.w	r3, r3, #1
 8001d30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001d34:	4b69      	ldr	r3, [pc, #420]	@ (8001edc <HAL_RCC_OscConfig+0x770>)
 8001d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d3a:	4a68      	ldr	r2, [pc, #416]	@ (8001edc <HAL_RCC_OscConfig+0x770>)
 8001d3c:	f023 0304 	bic.w	r3, r3, #4
 8001d40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d016      	beq.n	8001d7a <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d4c:	f7ff f8d8 	bl	8000f00 <HAL_GetTick>
 8001d50:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d52:	e00a      	b.n	8001d6a <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d54:	f7ff f8d4 	bl	8000f00 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e159      	b.n	800201e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d6a:	4b5c      	ldr	r3, [pc, #368]	@ (8001edc <HAL_RCC_OscConfig+0x770>)
 8001d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d0ed      	beq.n	8001d54 <HAL_RCC_OscConfig+0x5e8>
 8001d78:	e01d      	b.n	8001db6 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d7a:	f7ff f8c1 	bl	8000f00 <HAL_GetTick>
 8001d7e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d80:	e00a      	b.n	8001d98 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d82:	f7ff f8bd 	bl	8000f00 <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d901      	bls.n	8001d98 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e142      	b.n	800201e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d98:	4b50      	ldr	r3, [pc, #320]	@ (8001edc <HAL_RCC_OscConfig+0x770>)
 8001d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d1ed      	bne.n	8001d82 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8001da6:	4b4d      	ldr	r3, [pc, #308]	@ (8001edc <HAL_RCC_OscConfig+0x770>)
 8001da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dac:	4a4b      	ldr	r2, [pc, #300]	@ (8001edc <HAL_RCC_OscConfig+0x770>)
 8001dae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001db2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001db6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d105      	bne.n	8001dca <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dbe:	4b47      	ldr	r3, [pc, #284]	@ (8001edc <HAL_RCC_OscConfig+0x770>)
 8001dc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dc2:	4a46      	ldr	r2, [pc, #280]	@ (8001edc <HAL_RCC_OscConfig+0x770>)
 8001dc4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001dc8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0320 	and.w	r3, r3, #32
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d03c      	beq.n	8001e50 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d01c      	beq.n	8001e18 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001dde:	4b3f      	ldr	r3, [pc, #252]	@ (8001edc <HAL_RCC_OscConfig+0x770>)
 8001de0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001de4:	4a3d      	ldr	r2, [pc, #244]	@ (8001edc <HAL_RCC_OscConfig+0x770>)
 8001de6:	f043 0301 	orr.w	r3, r3, #1
 8001dea:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dee:	f7ff f887 	bl	8000f00 <HAL_GetTick>
 8001df2:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001df4:	e008      	b.n	8001e08 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001df6:	f7ff f883 	bl	8000f00 <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d901      	bls.n	8001e08 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	e10a      	b.n	800201e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e08:	4b34      	ldr	r3, [pc, #208]	@ (8001edc <HAL_RCC_OscConfig+0x770>)
 8001e0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d0ef      	beq.n	8001df6 <HAL_RCC_OscConfig+0x68a>
 8001e16:	e01b      	b.n	8001e50 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e18:	4b30      	ldr	r3, [pc, #192]	@ (8001edc <HAL_RCC_OscConfig+0x770>)
 8001e1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001e1e:	4a2f      	ldr	r2, [pc, #188]	@ (8001edc <HAL_RCC_OscConfig+0x770>)
 8001e20:	f023 0301 	bic.w	r3, r3, #1
 8001e24:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e28:	f7ff f86a 	bl	8000f00 <HAL_GetTick>
 8001e2c:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e2e:	e008      	b.n	8001e42 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e30:	f7ff f866 	bl	8000f00 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e0ed      	b.n	800201e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e42:	4b26      	ldr	r3, [pc, #152]	@ (8001edc <HAL_RCC_OscConfig+0x770>)
 8001e44:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001e48:	f003 0302 	and.w	r3, r3, #2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d1ef      	bne.n	8001e30 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f000 80e1 	beq.w	800201c <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	f040 80b5 	bne.w	8001fce <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001e64:	4b1d      	ldr	r3, [pc, #116]	@ (8001edc <HAL_RCC_OscConfig+0x770>)
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	f003 0203 	and.w	r2, r3, #3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d124      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e82:	3b01      	subs	r3, #1
 8001e84:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d11b      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e94:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d113      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ea4:	085b      	lsrs	r3, r3, #1
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d109      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb8:	085b      	lsrs	r3, r3, #1
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d05f      	beq.n	8001f82 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ec2:	6a3b      	ldr	r3, [r7, #32]
 8001ec4:	2b0c      	cmp	r3, #12
 8001ec6:	d05a      	beq.n	8001f7e <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001ec8:	4b04      	ldr	r3, [pc, #16]	@ (8001edc <HAL_RCC_OscConfig+0x770>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a03      	ldr	r2, [pc, #12]	@ (8001edc <HAL_RCC_OscConfig+0x770>)
 8001ece:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ed2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ed4:	f7ff f814 	bl	8000f00 <HAL_GetTick>
 8001ed8:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eda:	e00c      	b.n	8001ef6 <HAL_RCC_OscConfig+0x78a>
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee4:	f7ff f80c 	bl	8000f00 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e093      	b.n	800201e <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ef6:	4b4c      	ldr	r3, [pc, #304]	@ (8002028 <HAL_RCC_OscConfig+0x8bc>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1f0      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f02:	4b49      	ldr	r3, [pc, #292]	@ (8002028 <HAL_RCC_OscConfig+0x8bc>)
 8001f04:	68da      	ldr	r2, [r3, #12]
 8001f06:	4b49      	ldr	r3, [pc, #292]	@ (800202c <HAL_RCC_OscConfig+0x8c0>)
 8001f08:	4013      	ands	r3, r2
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001f12:	3a01      	subs	r2, #1
 8001f14:	0112      	lsls	r2, r2, #4
 8001f16:	4311      	orrs	r1, r2
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001f1c:	0212      	lsls	r2, r2, #8
 8001f1e:	4311      	orrs	r1, r2
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001f24:	0852      	lsrs	r2, r2, #1
 8001f26:	3a01      	subs	r2, #1
 8001f28:	0552      	lsls	r2, r2, #21
 8001f2a:	4311      	orrs	r1, r2
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001f30:	0852      	lsrs	r2, r2, #1
 8001f32:	3a01      	subs	r2, #1
 8001f34:	0652      	lsls	r2, r2, #25
 8001f36:	430a      	orrs	r2, r1
 8001f38:	493b      	ldr	r1, [pc, #236]	@ (8002028 <HAL_RCC_OscConfig+0x8bc>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001f3e:	4b3a      	ldr	r3, [pc, #232]	@ (8002028 <HAL_RCC_OscConfig+0x8bc>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a39      	ldr	r2, [pc, #228]	@ (8002028 <HAL_RCC_OscConfig+0x8bc>)
 8001f44:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f48:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f4a:	4b37      	ldr	r3, [pc, #220]	@ (8002028 <HAL_RCC_OscConfig+0x8bc>)
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	4a36      	ldr	r2, [pc, #216]	@ (8002028 <HAL_RCC_OscConfig+0x8bc>)
 8001f50:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f54:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f56:	f7fe ffd3 	bl	8000f00 <HAL_GetTick>
 8001f5a:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f5c:	e008      	b.n	8001f70 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f5e:	f7fe ffcf 	bl	8000f00 <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d901      	bls.n	8001f70 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e056      	b.n	800201e <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f70:	4b2d      	ldr	r3, [pc, #180]	@ (8002028 <HAL_RCC_OscConfig+0x8bc>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d0f0      	beq.n	8001f5e <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f7c:	e04e      	b.n	800201c <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e04d      	b.n	800201e <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f82:	4b29      	ldr	r3, [pc, #164]	@ (8002028 <HAL_RCC_OscConfig+0x8bc>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d146      	bne.n	800201c <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001f8e:	4b26      	ldr	r3, [pc, #152]	@ (8002028 <HAL_RCC_OscConfig+0x8bc>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a25      	ldr	r2, [pc, #148]	@ (8002028 <HAL_RCC_OscConfig+0x8bc>)
 8001f94:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f98:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f9a:	4b23      	ldr	r3, [pc, #140]	@ (8002028 <HAL_RCC_OscConfig+0x8bc>)
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	4a22      	ldr	r2, [pc, #136]	@ (8002028 <HAL_RCC_OscConfig+0x8bc>)
 8001fa0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001fa4:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001fa6:	f7fe ffab 	bl	8000f00 <HAL_GetTick>
 8001faa:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fac:	e008      	b.n	8001fc0 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fae:	f7fe ffa7 	bl	8000f00 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e02e      	b.n	800201e <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fc0:	4b19      	ldr	r3, [pc, #100]	@ (8002028 <HAL_RCC_OscConfig+0x8bc>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d0f0      	beq.n	8001fae <HAL_RCC_OscConfig+0x842>
 8001fcc:	e026      	b.n	800201c <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fce:	6a3b      	ldr	r3, [r7, #32]
 8001fd0:	2b0c      	cmp	r3, #12
 8001fd2:	d021      	beq.n	8002018 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fd4:	4b14      	ldr	r3, [pc, #80]	@ (8002028 <HAL_RCC_OscConfig+0x8bc>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a13      	ldr	r2, [pc, #76]	@ (8002028 <HAL_RCC_OscConfig+0x8bc>)
 8001fda:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001fde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe0:	f7fe ff8e 	bl	8000f00 <HAL_GetTick>
 8001fe4:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fe6:	e008      	b.n	8001ffa <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fe8:	f7fe ff8a 	bl	8000f00 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e011      	b.n	800201e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ffa:	4b0b      	ldr	r3, [pc, #44]	@ (8002028 <HAL_RCC_OscConfig+0x8bc>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1f0      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8002006:	4b08      	ldr	r3, [pc, #32]	@ (8002028 <HAL_RCC_OscConfig+0x8bc>)
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	4a07      	ldr	r2, [pc, #28]	@ (8002028 <HAL_RCC_OscConfig+0x8bc>)
 800200c:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8002010:	f023 0303 	bic.w	r3, r3, #3
 8002014:	60d3      	str	r3, [r2, #12]
 8002016:	e001      	b.n	800201c <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e000      	b.n	800201e <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3728      	adds	r7, #40	@ 0x28
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	40021000 	.word	0x40021000
 800202c:	f99f808c 	.word	0xf99f808c

08002030 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d101      	bne.n	8002044 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e0e7      	b.n	8002214 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002044:	4b75      	ldr	r3, [pc, #468]	@ (800221c <HAL_RCC_ClockConfig+0x1ec>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0307 	and.w	r3, r3, #7
 800204c:	683a      	ldr	r2, [r7, #0]
 800204e:	429a      	cmp	r2, r3
 8002050:	d910      	bls.n	8002074 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002052:	4b72      	ldr	r3, [pc, #456]	@ (800221c <HAL_RCC_ClockConfig+0x1ec>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f023 0207 	bic.w	r2, r3, #7
 800205a:	4970      	ldr	r1, [pc, #448]	@ (800221c <HAL_RCC_ClockConfig+0x1ec>)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	4313      	orrs	r3, r2
 8002060:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002062:	4b6e      	ldr	r3, [pc, #440]	@ (800221c <HAL_RCC_ClockConfig+0x1ec>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0307 	and.w	r3, r3, #7
 800206a:	683a      	ldr	r2, [r7, #0]
 800206c:	429a      	cmp	r2, r3
 800206e:	d001      	beq.n	8002074 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e0cf      	b.n	8002214 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d010      	beq.n	80020a2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	689a      	ldr	r2, [r3, #8]
 8002084:	4b66      	ldr	r3, [pc, #408]	@ (8002220 <HAL_RCC_ClockConfig+0x1f0>)
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800208c:	429a      	cmp	r2, r3
 800208e:	d908      	bls.n	80020a2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002090:	4b63      	ldr	r3, [pc, #396]	@ (8002220 <HAL_RCC_ClockConfig+0x1f0>)
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	4960      	ldr	r1, [pc, #384]	@ (8002220 <HAL_RCC_ClockConfig+0x1f0>)
 800209e:	4313      	orrs	r3, r2
 80020a0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d04c      	beq.n	8002148 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	2b03      	cmp	r3, #3
 80020b4:	d107      	bne.n	80020c6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020b6:	4b5a      	ldr	r3, [pc, #360]	@ (8002220 <HAL_RCC_ClockConfig+0x1f0>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d121      	bne.n	8002106 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e0a6      	b.n	8002214 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d107      	bne.n	80020de <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020ce:	4b54      	ldr	r3, [pc, #336]	@ (8002220 <HAL_RCC_ClockConfig+0x1f0>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d115      	bne.n	8002106 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e09a      	b.n	8002214 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d107      	bne.n	80020f6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020e6:	4b4e      	ldr	r3, [pc, #312]	@ (8002220 <HAL_RCC_ClockConfig+0x1f0>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d109      	bne.n	8002106 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e08e      	b.n	8002214 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020f6:	4b4a      	ldr	r3, [pc, #296]	@ (8002220 <HAL_RCC_ClockConfig+0x1f0>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e086      	b.n	8002214 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002106:	4b46      	ldr	r3, [pc, #280]	@ (8002220 <HAL_RCC_ClockConfig+0x1f0>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f023 0203 	bic.w	r2, r3, #3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	4943      	ldr	r1, [pc, #268]	@ (8002220 <HAL_RCC_ClockConfig+0x1f0>)
 8002114:	4313      	orrs	r3, r2
 8002116:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002118:	f7fe fef2 	bl	8000f00 <HAL_GetTick>
 800211c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800211e:	e00a      	b.n	8002136 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002120:	f7fe feee 	bl	8000f00 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800212e:	4293      	cmp	r3, r2
 8002130:	d901      	bls.n	8002136 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e06e      	b.n	8002214 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002136:	4b3a      	ldr	r3, [pc, #232]	@ (8002220 <HAL_RCC_ClockConfig+0x1f0>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f003 020c 	and.w	r2, r3, #12
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	429a      	cmp	r2, r3
 8002146:	d1eb      	bne.n	8002120 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d010      	beq.n	8002176 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689a      	ldr	r2, [r3, #8]
 8002158:	4b31      	ldr	r3, [pc, #196]	@ (8002220 <HAL_RCC_ClockConfig+0x1f0>)
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002160:	429a      	cmp	r2, r3
 8002162:	d208      	bcs.n	8002176 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002164:	4b2e      	ldr	r3, [pc, #184]	@ (8002220 <HAL_RCC_ClockConfig+0x1f0>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	492b      	ldr	r1, [pc, #172]	@ (8002220 <HAL_RCC_ClockConfig+0x1f0>)
 8002172:	4313      	orrs	r3, r2
 8002174:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002176:	4b29      	ldr	r3, [pc, #164]	@ (800221c <HAL_RCC_ClockConfig+0x1ec>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0307 	and.w	r3, r3, #7
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	429a      	cmp	r2, r3
 8002182:	d210      	bcs.n	80021a6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002184:	4b25      	ldr	r3, [pc, #148]	@ (800221c <HAL_RCC_ClockConfig+0x1ec>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f023 0207 	bic.w	r2, r3, #7
 800218c:	4923      	ldr	r1, [pc, #140]	@ (800221c <HAL_RCC_ClockConfig+0x1ec>)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	4313      	orrs	r3, r2
 8002192:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002194:	4b21      	ldr	r3, [pc, #132]	@ (800221c <HAL_RCC_ClockConfig+0x1ec>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0307 	and.w	r3, r3, #7
 800219c:	683a      	ldr	r2, [r7, #0]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d001      	beq.n	80021a6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e036      	b.n	8002214 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0304 	and.w	r3, r3, #4
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d008      	beq.n	80021c4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021b2:	4b1b      	ldr	r3, [pc, #108]	@ (8002220 <HAL_RCC_ClockConfig+0x1f0>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	4918      	ldr	r1, [pc, #96]	@ (8002220 <HAL_RCC_ClockConfig+0x1f0>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0308 	and.w	r3, r3, #8
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d009      	beq.n	80021e4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021d0:	4b13      	ldr	r3, [pc, #76]	@ (8002220 <HAL_RCC_ClockConfig+0x1f0>)
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	691b      	ldr	r3, [r3, #16]
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	4910      	ldr	r1, [pc, #64]	@ (8002220 <HAL_RCC_ClockConfig+0x1f0>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021e4:	f000 f824 	bl	8002230 <HAL_RCC_GetSysClockFreq>
 80021e8:	4602      	mov	r2, r0
 80021ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002220 <HAL_RCC_ClockConfig+0x1f0>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	091b      	lsrs	r3, r3, #4
 80021f0:	f003 030f 	and.w	r3, r3, #15
 80021f4:	490b      	ldr	r1, [pc, #44]	@ (8002224 <HAL_RCC_ClockConfig+0x1f4>)
 80021f6:	5ccb      	ldrb	r3, [r1, r3]
 80021f8:	f003 031f 	and.w	r3, r3, #31
 80021fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002200:	4a09      	ldr	r2, [pc, #36]	@ (8002228 <HAL_RCC_ClockConfig+0x1f8>)
 8002202:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002204:	4b09      	ldr	r3, [pc, #36]	@ (800222c <HAL_RCC_ClockConfig+0x1fc>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4618      	mov	r0, r3
 800220a:	f7fe fe29 	bl	8000e60 <HAL_InitTick>
 800220e:	4603      	mov	r3, r0
 8002210:	72fb      	strb	r3, [r7, #11]

  return status;
 8002212:	7afb      	ldrb	r3, [r7, #11]
}
 8002214:	4618      	mov	r0, r3
 8002216:	3710      	adds	r7, #16
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	40022000 	.word	0x40022000
 8002220:	40021000 	.word	0x40021000
 8002224:	08003690 	.word	0x08003690
 8002228:	20000000 	.word	0x20000000
 800222c:	20000004 	.word	0x20000004

08002230 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002230:	b480      	push	{r7}
 8002232:	b089      	sub	sp, #36	@ 0x24
 8002234:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002236:	2300      	movs	r3, #0
 8002238:	61fb      	str	r3, [r7, #28]
 800223a:	2300      	movs	r3, #0
 800223c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800223e:	4b3e      	ldr	r3, [pc, #248]	@ (8002338 <HAL_RCC_GetSysClockFreq+0x108>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f003 030c 	and.w	r3, r3, #12
 8002246:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002248:	4b3b      	ldr	r3, [pc, #236]	@ (8002338 <HAL_RCC_GetSysClockFreq+0x108>)
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	f003 0303 	and.w	r3, r3, #3
 8002250:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d005      	beq.n	8002264 <HAL_RCC_GetSysClockFreq+0x34>
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	2b0c      	cmp	r3, #12
 800225c:	d121      	bne.n	80022a2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d11e      	bne.n	80022a2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002264:	4b34      	ldr	r3, [pc, #208]	@ (8002338 <HAL_RCC_GetSysClockFreq+0x108>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0308 	and.w	r3, r3, #8
 800226c:	2b00      	cmp	r3, #0
 800226e:	d107      	bne.n	8002280 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002270:	4b31      	ldr	r3, [pc, #196]	@ (8002338 <HAL_RCC_GetSysClockFreq+0x108>)
 8002272:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002276:	0a1b      	lsrs	r3, r3, #8
 8002278:	f003 030f 	and.w	r3, r3, #15
 800227c:	61fb      	str	r3, [r7, #28]
 800227e:	e005      	b.n	800228c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002280:	4b2d      	ldr	r3, [pc, #180]	@ (8002338 <HAL_RCC_GetSysClockFreq+0x108>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	091b      	lsrs	r3, r3, #4
 8002286:	f003 030f 	and.w	r3, r3, #15
 800228a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800228c:	4a2b      	ldr	r2, [pc, #172]	@ (800233c <HAL_RCC_GetSysClockFreq+0x10c>)
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002294:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d10d      	bne.n	80022b8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022a0:	e00a      	b.n	80022b8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	2b04      	cmp	r3, #4
 80022a6:	d102      	bne.n	80022ae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80022a8:	4b25      	ldr	r3, [pc, #148]	@ (8002340 <HAL_RCC_GetSysClockFreq+0x110>)
 80022aa:	61bb      	str	r3, [r7, #24]
 80022ac:	e004      	b.n	80022b8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	2b08      	cmp	r3, #8
 80022b2:	d101      	bne.n	80022b8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80022b4:	4b23      	ldr	r3, [pc, #140]	@ (8002344 <HAL_RCC_GetSysClockFreq+0x114>)
 80022b6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	2b0c      	cmp	r3, #12
 80022bc:	d134      	bne.n	8002328 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80022be:	4b1e      	ldr	r3, [pc, #120]	@ (8002338 <HAL_RCC_GetSysClockFreq+0x108>)
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	f003 0303 	and.w	r3, r3, #3
 80022c6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d003      	beq.n	80022d6 <HAL_RCC_GetSysClockFreq+0xa6>
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	2b03      	cmp	r3, #3
 80022d2:	d003      	beq.n	80022dc <HAL_RCC_GetSysClockFreq+0xac>
 80022d4:	e005      	b.n	80022e2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80022d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002340 <HAL_RCC_GetSysClockFreq+0x110>)
 80022d8:	617b      	str	r3, [r7, #20]
      break;
 80022da:	e005      	b.n	80022e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80022dc:	4b19      	ldr	r3, [pc, #100]	@ (8002344 <HAL_RCC_GetSysClockFreq+0x114>)
 80022de:	617b      	str	r3, [r7, #20]
      break;
 80022e0:	e002      	b.n	80022e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	617b      	str	r3, [r7, #20]
      break;
 80022e6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022e8:	4b13      	ldr	r3, [pc, #76]	@ (8002338 <HAL_RCC_GetSysClockFreq+0x108>)
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	091b      	lsrs	r3, r3, #4
 80022ee:	f003 0307 	and.w	r3, r3, #7
 80022f2:	3301      	adds	r3, #1
 80022f4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80022f6:	4b10      	ldr	r3, [pc, #64]	@ (8002338 <HAL_RCC_GetSysClockFreq+0x108>)
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	0a1b      	lsrs	r3, r3, #8
 80022fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002300:	697a      	ldr	r2, [r7, #20]
 8002302:	fb03 f202 	mul.w	r2, r3, r2
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	fbb2 f3f3 	udiv	r3, r2, r3
 800230c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800230e:	4b0a      	ldr	r3, [pc, #40]	@ (8002338 <HAL_RCC_GetSysClockFreq+0x108>)
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	0e5b      	lsrs	r3, r3, #25
 8002314:	f003 0303 	and.w	r3, r3, #3
 8002318:	3301      	adds	r3, #1
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800231e:	697a      	ldr	r2, [r7, #20]
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	fbb2 f3f3 	udiv	r3, r2, r3
 8002326:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002328:	69bb      	ldr	r3, [r7, #24]
}
 800232a:	4618      	mov	r0, r3
 800232c:	3724      	adds	r7, #36	@ 0x24
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	40021000 	.word	0x40021000
 800233c:	080036a8 	.word	0x080036a8
 8002340:	00f42400 	.word	0x00f42400
 8002344:	007a1200 	.word	0x007a1200

08002348 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800234c:	4b03      	ldr	r3, [pc, #12]	@ (800235c <HAL_RCC_GetHCLKFreq+0x14>)
 800234e:	681b      	ldr	r3, [r3, #0]
}
 8002350:	4618      	mov	r0, r3
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	20000000 	.word	0x20000000

08002360 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002364:	f7ff fff0 	bl	8002348 <HAL_RCC_GetHCLKFreq>
 8002368:	4602      	mov	r2, r0
 800236a:	4b06      	ldr	r3, [pc, #24]	@ (8002384 <HAL_RCC_GetPCLK1Freq+0x24>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	0a1b      	lsrs	r3, r3, #8
 8002370:	f003 0307 	and.w	r3, r3, #7
 8002374:	4904      	ldr	r1, [pc, #16]	@ (8002388 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002376:	5ccb      	ldrb	r3, [r1, r3]
 8002378:	f003 031f 	and.w	r3, r3, #31
 800237c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002380:	4618      	mov	r0, r3
 8002382:	bd80      	pop	{r7, pc}
 8002384:	40021000 	.word	0x40021000
 8002388:	080036a0 	.word	0x080036a0

0800238c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002390:	f7ff ffda 	bl	8002348 <HAL_RCC_GetHCLKFreq>
 8002394:	4602      	mov	r2, r0
 8002396:	4b06      	ldr	r3, [pc, #24]	@ (80023b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	0adb      	lsrs	r3, r3, #11
 800239c:	f003 0307 	and.w	r3, r3, #7
 80023a0:	4904      	ldr	r1, [pc, #16]	@ (80023b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80023a2:	5ccb      	ldrb	r3, [r1, r3]
 80023a4:	f003 031f 	and.w	r3, r3, #31
 80023a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	40021000 	.word	0x40021000
 80023b4:	080036a0 	.word	0x080036a0

080023b8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80023c0:	2300      	movs	r3, #0
 80023c2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80023c4:	4b2a      	ldr	r3, [pc, #168]	@ (8002470 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d003      	beq.n	80023d8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80023d0:	f7ff f968 	bl	80016a4 <HAL_PWREx_GetVoltageRange>
 80023d4:	6178      	str	r0, [r7, #20]
 80023d6:	e014      	b.n	8002402 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80023d8:	4b25      	ldr	r3, [pc, #148]	@ (8002470 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023dc:	4a24      	ldr	r2, [pc, #144]	@ (8002470 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80023e4:	4b22      	ldr	r3, [pc, #136]	@ (8002470 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023ec:	60fb      	str	r3, [r7, #12]
 80023ee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80023f0:	f7ff f958 	bl	80016a4 <HAL_PWREx_GetVoltageRange>
 80023f4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80023f6:	4b1e      	ldr	r3, [pc, #120]	@ (8002470 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023fa:	4a1d      	ldr	r2, [pc, #116]	@ (8002470 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002400:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002408:	d10b      	bne.n	8002422 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2b80      	cmp	r3, #128	@ 0x80
 800240e:	d919      	bls.n	8002444 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2ba0      	cmp	r3, #160	@ 0xa0
 8002414:	d902      	bls.n	800241c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002416:	2302      	movs	r3, #2
 8002418:	613b      	str	r3, [r7, #16]
 800241a:	e013      	b.n	8002444 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800241c:	2301      	movs	r3, #1
 800241e:	613b      	str	r3, [r7, #16]
 8002420:	e010      	b.n	8002444 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2b80      	cmp	r3, #128	@ 0x80
 8002426:	d902      	bls.n	800242e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002428:	2303      	movs	r3, #3
 800242a:	613b      	str	r3, [r7, #16]
 800242c:	e00a      	b.n	8002444 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2b80      	cmp	r3, #128	@ 0x80
 8002432:	d102      	bne.n	800243a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002434:	2302      	movs	r3, #2
 8002436:	613b      	str	r3, [r7, #16]
 8002438:	e004      	b.n	8002444 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2b70      	cmp	r3, #112	@ 0x70
 800243e:	d101      	bne.n	8002444 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002440:	2301      	movs	r3, #1
 8002442:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002444:	4b0b      	ldr	r3, [pc, #44]	@ (8002474 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f023 0207 	bic.w	r2, r3, #7
 800244c:	4909      	ldr	r1, [pc, #36]	@ (8002474 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	4313      	orrs	r3, r2
 8002452:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002454:	4b07      	ldr	r3, [pc, #28]	@ (8002474 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0307 	and.w	r3, r3, #7
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	429a      	cmp	r2, r3
 8002460:	d001      	beq.n	8002466 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e000      	b.n	8002468 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002466:	2300      	movs	r3, #0
}
 8002468:	4618      	mov	r0, r3
 800246a:	3718      	adds	r7, #24
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	40021000 	.word	0x40021000
 8002474:	40022000 	.word	0x40022000

08002478 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002480:	2300      	movs	r3, #0
 8002482:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002484:	2300      	movs	r3, #0
 8002486:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002490:	2b00      	cmp	r3, #0
 8002492:	f000 809e 	beq.w	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002496:	2300      	movs	r3, #0
 8002498:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800249a:	4b46      	ldr	r3, [pc, #280]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800249c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800249e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x32>
 80024a6:	2301      	movs	r3, #1
 80024a8:	e000      	b.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x34>
 80024aa:	2300      	movs	r3, #0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d00d      	beq.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024b0:	4b40      	ldr	r3, [pc, #256]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80024b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024b4:	4a3f      	ldr	r2, [pc, #252]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80024b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80024bc:	4b3d      	ldr	r3, [pc, #244]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80024be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024c4:	60bb      	str	r3, [r7, #8]
 80024c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024c8:	2301      	movs	r3, #1
 80024ca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024cc:	4b3a      	ldr	r3, [pc, #232]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a39      	ldr	r2, [pc, #228]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80024d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80024d8:	f7fe fd12 	bl	8000f00 <HAL_GetTick>
 80024dc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024de:	e009      	b.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024e0:	f7fe fd0e 	bl	8000f00 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d902      	bls.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	74fb      	strb	r3, [r7, #19]
        break;
 80024f2:	e005      	b.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024f4:	4b30      	ldr	r3, [pc, #192]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d0ef      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8002500:	7cfb      	ldrb	r3, [r7, #19]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d15a      	bne.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002506:	4b2b      	ldr	r3, [pc, #172]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002508:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800250c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002510:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d01e      	beq.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	429a      	cmp	r2, r3
 8002520:	d019      	beq.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002522:	4b24      	ldr	r3, [pc, #144]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002524:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002528:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800252c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800252e:	4b21      	ldr	r3, [pc, #132]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002530:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002534:	4a1f      	ldr	r2, [pc, #124]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002536:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800253a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800253e:	4b1d      	ldr	r3, [pc, #116]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002540:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002544:	4a1b      	ldr	r2, [pc, #108]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002546:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800254a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800254e:	4a19      	ldr	r2, [pc, #100]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	f003 0301 	and.w	r3, r3, #1
 800255c:	2b00      	cmp	r3, #0
 800255e:	d016      	beq.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002560:	f7fe fcce 	bl	8000f00 <HAL_GetTick>
 8002564:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002566:	e00b      	b.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002568:	f7fe fcca 	bl	8000f00 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002576:	4293      	cmp	r3, r2
 8002578:	d902      	bls.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	74fb      	strb	r3, [r7, #19]
            break;
 800257e:	e006      	b.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002580:	4b0c      	ldr	r3, [pc, #48]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002582:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d0ec      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 800258e:	7cfb      	ldrb	r3, [r7, #19]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d10b      	bne.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002594:	4b07      	ldr	r3, [pc, #28]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002596:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800259a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a2:	4904      	ldr	r1, [pc, #16]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80025aa:	e009      	b.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80025ac:	7cfb      	ldrb	r3, [r7, #19]
 80025ae:	74bb      	strb	r3, [r7, #18]
 80025b0:	e006      	b.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x148>
 80025b2:	bf00      	nop
 80025b4:	40021000 	.word	0x40021000
 80025b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025bc:	7cfb      	ldrb	r3, [r7, #19]
 80025be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025c0:	7c7b      	ldrb	r3, [r7, #17]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d105      	bne.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025c6:	4b6e      	ldr	r3, [pc, #440]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80025c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ca:	4a6d      	ldr	r2, [pc, #436]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80025cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025d0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d00a      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025de:	4b68      	ldr	r3, [pc, #416]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80025e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025e4:	f023 0203 	bic.w	r2, r3, #3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	4964      	ldr	r1, [pc, #400]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d00a      	beq.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002600:	4b5f      	ldr	r3, [pc, #380]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002602:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002606:	f023 020c 	bic.w	r2, r3, #12
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	495c      	ldr	r1, [pc, #368]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002610:	4313      	orrs	r3, r2
 8002612:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0304 	and.w	r3, r3, #4
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00a      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002622:	4b57      	ldr	r3, [pc, #348]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002624:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002628:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	4953      	ldr	r1, [pc, #332]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002632:	4313      	orrs	r3, r2
 8002634:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0320 	and.w	r3, r3, #32
 8002640:	2b00      	cmp	r3, #0
 8002642:	d00a      	beq.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002644:	4b4e      	ldr	r3, [pc, #312]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002646:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800264a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	494b      	ldr	r1, [pc, #300]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002654:	4313      	orrs	r3, r2
 8002656:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00a      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002666:	4b46      	ldr	r3, [pc, #280]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002668:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800266c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a1b      	ldr	r3, [r3, #32]
 8002674:	4942      	ldr	r1, [pc, #264]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002676:	4313      	orrs	r3, r2
 8002678:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002684:	2b00      	cmp	r3, #0
 8002686:	d00a      	beq.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002688:	4b3d      	ldr	r3, [pc, #244]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800268a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800268e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002696:	493a      	ldr	r1, [pc, #232]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002698:	4313      	orrs	r3, r2
 800269a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d00a      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026aa:	4b35      	ldr	r3, [pc, #212]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80026ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026b0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	695b      	ldr	r3, [r3, #20]
 80026b8:	4931      	ldr	r1, [pc, #196]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00a      	beq.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026cc:	4b2c      	ldr	r3, [pc, #176]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80026ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026d2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	699b      	ldr	r3, [r3, #24]
 80026da:	4929      	ldr	r1, [pc, #164]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00a      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026ee:	4b24      	ldr	r3, [pc, #144]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80026f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026f4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	69db      	ldr	r3, [r3, #28]
 80026fc:	4920      	ldr	r1, [pc, #128]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d015      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002710:	4b1b      	ldr	r3, [pc, #108]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002712:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002716:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800271e:	4918      	ldr	r1, [pc, #96]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002720:	4313      	orrs	r3, r2
 8002722:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800272a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800272e:	d105      	bne.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002730:	4b13      	ldr	r3, [pc, #76]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	4a12      	ldr	r2, [pc, #72]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002736:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800273a:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d015      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002748:	4b0d      	ldr	r3, [pc, #52]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800274a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800274e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002756:	490a      	ldr	r1, [pc, #40]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002758:	4313      	orrs	r3, r2
 800275a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002762:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002766:	d105      	bne.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002768:	4b05      	ldr	r3, [pc, #20]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	4a04      	ldr	r2, [pc, #16]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800276e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002772:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002774:	7cbb      	ldrb	r3, [r7, #18]
}
 8002776:	4618      	mov	r0, r3
 8002778:	3718      	adds	r7, #24
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	40021000 	.word	0x40021000

08002784 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e049      	b.n	800282a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d106      	bne.n	80027b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7fe fa08 	bl	8000bc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2202      	movs	r2, #2
 80027b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	3304      	adds	r3, #4
 80027c0:	4619      	mov	r1, r3
 80027c2:	4610      	mov	r0, r2
 80027c4:	f000 f878 	bl	80028b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b082      	sub	sp, #8
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
 800283a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002842:	2b01      	cmp	r3, #1
 8002844:	d101      	bne.n	800284a <HAL_TIM_SlaveConfigSynchro+0x18>
 8002846:	2302      	movs	r3, #2
 8002848:	e031      	b.n	80028ae <HAL_TIM_SlaveConfigSynchro+0x7c>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2201      	movs	r2, #1
 800284e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2202      	movs	r2, #2
 8002856:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800285a:	6839      	ldr	r1, [r7, #0]
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f000 f89b 	bl	8002998 <TIM_SlaveTimer_SetConfig>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d009      	beq.n	800287c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e018      	b.n	80028ae <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68da      	ldr	r2, [r3, #12]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800288a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68da      	ldr	r2, [r3, #12]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800289a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3708      	adds	r7, #8
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
	...

080028b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4a30      	ldr	r2, [pc, #192]	@ (800298c <TIM_Base_SetConfig+0xd4>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d003      	beq.n	80028d8 <TIM_Base_SetConfig+0x20>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028d6:	d108      	bne.n	80028ea <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a27      	ldr	r2, [pc, #156]	@ (800298c <TIM_Base_SetConfig+0xd4>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d00b      	beq.n	800290a <TIM_Base_SetConfig+0x52>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028f8:	d007      	beq.n	800290a <TIM_Base_SetConfig+0x52>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a24      	ldr	r2, [pc, #144]	@ (8002990 <TIM_Base_SetConfig+0xd8>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d003      	beq.n	800290a <TIM_Base_SetConfig+0x52>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a23      	ldr	r2, [pc, #140]	@ (8002994 <TIM_Base_SetConfig+0xdc>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d108      	bne.n	800291c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002910:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	4313      	orrs	r3, r2
 800291a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	695b      	ldr	r3, [r3, #20]
 8002926:	4313      	orrs	r3, r2
 8002928:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	689a      	ldr	r2, [r3, #8]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4a12      	ldr	r2, [pc, #72]	@ (800298c <TIM_Base_SetConfig+0xd4>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d007      	beq.n	8002958 <TIM_Base_SetConfig+0xa0>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4a11      	ldr	r2, [pc, #68]	@ (8002990 <TIM_Base_SetConfig+0xd8>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d003      	beq.n	8002958 <TIM_Base_SetConfig+0xa0>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a10      	ldr	r2, [pc, #64]	@ (8002994 <TIM_Base_SetConfig+0xdc>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d103      	bne.n	8002960 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	691a      	ldr	r2, [r3, #16]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	2b01      	cmp	r3, #1
 8002970:	d105      	bne.n	800297e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	f023 0201 	bic.w	r2, r3, #1
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	611a      	str	r2, [r3, #16]
  }
}
 800297e:	bf00      	nop
 8002980:	3714      	adds	r7, #20
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	40012c00 	.word	0x40012c00
 8002990:	40014000 	.word	0x40014000
 8002994:	40014400 	.word	0x40014400

08002998 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b086      	sub	sp, #24
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029a2:	2300      	movs	r3, #0
 80029a4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029b4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	4313      	orrs	r3, r2
 80029be:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029c6:	f023 0307 	bic.w	r3, r3, #7
 80029ca:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	2b70      	cmp	r3, #112	@ 0x70
 80029e4:	d01a      	beq.n	8002a1c <TIM_SlaveTimer_SetConfig+0x84>
 80029e6:	2b70      	cmp	r3, #112	@ 0x70
 80029e8:	d860      	bhi.n	8002aac <TIM_SlaveTimer_SetConfig+0x114>
 80029ea:	2b60      	cmp	r3, #96	@ 0x60
 80029ec:	d054      	beq.n	8002a98 <TIM_SlaveTimer_SetConfig+0x100>
 80029ee:	2b60      	cmp	r3, #96	@ 0x60
 80029f0:	d85c      	bhi.n	8002aac <TIM_SlaveTimer_SetConfig+0x114>
 80029f2:	2b50      	cmp	r3, #80	@ 0x50
 80029f4:	d046      	beq.n	8002a84 <TIM_SlaveTimer_SetConfig+0xec>
 80029f6:	2b50      	cmp	r3, #80	@ 0x50
 80029f8:	d858      	bhi.n	8002aac <TIM_SlaveTimer_SetConfig+0x114>
 80029fa:	2b40      	cmp	r3, #64	@ 0x40
 80029fc:	d019      	beq.n	8002a32 <TIM_SlaveTimer_SetConfig+0x9a>
 80029fe:	2b40      	cmp	r3, #64	@ 0x40
 8002a00:	d854      	bhi.n	8002aac <TIM_SlaveTimer_SetConfig+0x114>
 8002a02:	2b30      	cmp	r3, #48	@ 0x30
 8002a04:	d055      	beq.n	8002ab2 <TIM_SlaveTimer_SetConfig+0x11a>
 8002a06:	2b30      	cmp	r3, #48	@ 0x30
 8002a08:	d850      	bhi.n	8002aac <TIM_SlaveTimer_SetConfig+0x114>
 8002a0a:	2b20      	cmp	r3, #32
 8002a0c:	d051      	beq.n	8002ab2 <TIM_SlaveTimer_SetConfig+0x11a>
 8002a0e:	2b20      	cmp	r3, #32
 8002a10:	d84c      	bhi.n	8002aac <TIM_SlaveTimer_SetConfig+0x114>
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d04d      	beq.n	8002ab2 <TIM_SlaveTimer_SetConfig+0x11a>
 8002a16:	2b10      	cmp	r3, #16
 8002a18:	d04b      	beq.n	8002ab2 <TIM_SlaveTimer_SetConfig+0x11a>
 8002a1a:	e047      	b.n	8002aac <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8002a2c:	f000 f8a6 	bl	8002b7c <TIM_ETR_SetConfig>
      break;
 8002a30:	e040      	b.n	8002ab4 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2b05      	cmp	r3, #5
 8002a38:	d101      	bne.n	8002a3e <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e03b      	b.n	8002ab6 <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	6a1a      	ldr	r2, [r3, #32]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 0201 	bic.w	r2, r2, #1
 8002a54:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a64:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	011b      	lsls	r3, r3, #4
 8002a6c:	68ba      	ldr	r2, [r7, #8]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68ba      	ldr	r2, [r7, #8]
 8002a78:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68fa      	ldr	r2, [r7, #12]
 8002a80:	621a      	str	r2, [r3, #32]
      break;
 8002a82:	e017      	b.n	8002ab4 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a90:	461a      	mov	r2, r3
 8002a92:	f000 f814 	bl	8002abe <TIM_TI1_ConfigInputStage>
      break;
 8002a96:	e00d      	b.n	8002ab4 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	f000 f839 	bl	8002b1c <TIM_TI2_ConfigInputStage>
      break;
 8002aaa:	e003      	b.n	8002ab4 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	75fb      	strb	r3, [r7, #23]
      break;
 8002ab0:	e000      	b.n	8002ab4 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 8002ab2:	bf00      	nop
  }

  return status;
 8002ab4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3718      	adds	r7, #24
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}

08002abe <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	b087      	sub	sp, #28
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	60f8      	str	r0, [r7, #12]
 8002ac6:	60b9      	str	r1, [r7, #8]
 8002ac8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6a1b      	ldr	r3, [r3, #32]
 8002ace:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6a1b      	ldr	r3, [r3, #32]
 8002ad4:	f023 0201 	bic.w	r2, r3, #1
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	699b      	ldr	r3, [r3, #24]
 8002ae0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002ae8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	011b      	lsls	r3, r3, #4
 8002aee:	693a      	ldr	r2, [r7, #16]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	f023 030a 	bic.w	r3, r3, #10
 8002afa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002afc:	697a      	ldr	r2, [r7, #20]
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	697a      	ldr	r2, [r7, #20]
 8002b0e:	621a      	str	r2, [r3, #32]
}
 8002b10:	bf00      	nop
 8002b12:	371c      	adds	r7, #28
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b087      	sub	sp, #28
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6a1b      	ldr	r3, [r3, #32]
 8002b2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6a1b      	ldr	r3, [r3, #32]
 8002b32:	f023 0210 	bic.w	r2, r3, #16
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002b46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	031b      	lsls	r3, r3, #12
 8002b4c:	693a      	ldr	r2, [r7, #16]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002b58:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	011b      	lsls	r3, r3, #4
 8002b5e:	697a      	ldr	r2, [r7, #20]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	693a      	ldr	r2, [r7, #16]
 8002b68:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	697a      	ldr	r2, [r7, #20]
 8002b6e:	621a      	str	r2, [r3, #32]
}
 8002b70:	bf00      	nop
 8002b72:	371c      	adds	r7, #28
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b087      	sub	sp, #28
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
 8002b88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002b96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	021a      	lsls	r2, r3, #8
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	697a      	ldr	r2, [r7, #20]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	697a      	ldr	r2, [r7, #20]
 8002bae:	609a      	str	r2, [r3, #8]
}
 8002bb0:	bf00      	nop
 8002bb2:	371c      	adds	r7, #28
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d101      	bne.n	8002bd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	e04f      	b.n	8002c74 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2202      	movs	r2, #2
 8002be0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a21      	ldr	r2, [pc, #132]	@ (8002c80 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d108      	bne.n	8002c10 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8002c04:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a14      	ldr	r2, [pc, #80]	@ (8002c80 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d009      	beq.n	8002c48 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c3c:	d004      	beq.n	8002c48 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a10      	ldr	r2, [pc, #64]	@ (8002c84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d10c      	bne.n	8002c62 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c4e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	68ba      	ldr	r2, [r7, #8]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68ba      	ldr	r2, [r7, #8]
 8002c60:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2201      	movs	r2, #1
 8002c66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3714      	adds	r7, #20
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr
 8002c80:	40012c00 	.word	0x40012c00
 8002c84:	40014000 	.word	0x40014000

08002c88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e040      	b.n	8002d1c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d106      	bne.n	8002cb0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f7fd fffc 	bl	8000ca8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2224      	movs	r2, #36	@ 0x24
 8002cb4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f022 0201 	bic.w	r2, r2, #1
 8002cc4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d002      	beq.n	8002cd4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 fa82 	bl	80031d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f000 f825 	bl	8002d24 <UART_SetConfig>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d101      	bne.n	8002ce4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e01b      	b.n	8002d1c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	685a      	ldr	r2, [r3, #4]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002cf2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689a      	ldr	r2, [r3, #8]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002d02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f042 0201 	orr.w	r2, r2, #1
 8002d12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f000 fb01 	bl	800331c <UART_CheckIdleState>
 8002d1a:	4603      	mov	r3, r0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3708      	adds	r7, #8
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d28:	b08a      	sub	sp, #40	@ 0x28
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	689a      	ldr	r2, [r3, #8]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	431a      	orrs	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	695b      	ldr	r3, [r3, #20]
 8002d42:	431a      	orrs	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	69db      	ldr	r3, [r3, #28]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	4b9e      	ldr	r3, [pc, #632]	@ (8002fcc <UART_SetConfig+0x2a8>)
 8002d54:	4013      	ands	r3, r2
 8002d56:	68fa      	ldr	r2, [r7, #12]
 8002d58:	6812      	ldr	r2, [r2, #0]
 8002d5a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d5c:	430b      	orrs	r3, r1
 8002d5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	68da      	ldr	r2, [r3, #12]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	430a      	orrs	r2, r1
 8002d74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	699b      	ldr	r3, [r3, #24]
 8002d7a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a93      	ldr	r2, [pc, #588]	@ (8002fd0 <UART_SetConfig+0x2ac>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d004      	beq.n	8002d90 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002da0:	430a      	orrs	r2, r1
 8002da2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a8a      	ldr	r2, [pc, #552]	@ (8002fd4 <UART_SetConfig+0x2b0>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d126      	bne.n	8002dfc <UART_SetConfig+0xd8>
 8002dae:	4b8a      	ldr	r3, [pc, #552]	@ (8002fd8 <UART_SetConfig+0x2b4>)
 8002db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002db4:	f003 0303 	and.w	r3, r3, #3
 8002db8:	2b03      	cmp	r3, #3
 8002dba:	d81b      	bhi.n	8002df4 <UART_SetConfig+0xd0>
 8002dbc:	a201      	add	r2, pc, #4	@ (adr r2, 8002dc4 <UART_SetConfig+0xa0>)
 8002dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dc2:	bf00      	nop
 8002dc4:	08002dd5 	.word	0x08002dd5
 8002dc8:	08002de5 	.word	0x08002de5
 8002dcc:	08002ddd 	.word	0x08002ddd
 8002dd0:	08002ded 	.word	0x08002ded
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002dda:	e0ab      	b.n	8002f34 <UART_SetConfig+0x210>
 8002ddc:	2302      	movs	r3, #2
 8002dde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002de2:	e0a7      	b.n	8002f34 <UART_SetConfig+0x210>
 8002de4:	2304      	movs	r3, #4
 8002de6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002dea:	e0a3      	b.n	8002f34 <UART_SetConfig+0x210>
 8002dec:	2308      	movs	r3, #8
 8002dee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002df2:	e09f      	b.n	8002f34 <UART_SetConfig+0x210>
 8002df4:	2310      	movs	r3, #16
 8002df6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002dfa:	e09b      	b.n	8002f34 <UART_SetConfig+0x210>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a76      	ldr	r2, [pc, #472]	@ (8002fdc <UART_SetConfig+0x2b8>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d138      	bne.n	8002e78 <UART_SetConfig+0x154>
 8002e06:	4b74      	ldr	r3, [pc, #464]	@ (8002fd8 <UART_SetConfig+0x2b4>)
 8002e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e0c:	f003 030c 	and.w	r3, r3, #12
 8002e10:	2b0c      	cmp	r3, #12
 8002e12:	d82d      	bhi.n	8002e70 <UART_SetConfig+0x14c>
 8002e14:	a201      	add	r2, pc, #4	@ (adr r2, 8002e1c <UART_SetConfig+0xf8>)
 8002e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e1a:	bf00      	nop
 8002e1c:	08002e51 	.word	0x08002e51
 8002e20:	08002e71 	.word	0x08002e71
 8002e24:	08002e71 	.word	0x08002e71
 8002e28:	08002e71 	.word	0x08002e71
 8002e2c:	08002e61 	.word	0x08002e61
 8002e30:	08002e71 	.word	0x08002e71
 8002e34:	08002e71 	.word	0x08002e71
 8002e38:	08002e71 	.word	0x08002e71
 8002e3c:	08002e59 	.word	0x08002e59
 8002e40:	08002e71 	.word	0x08002e71
 8002e44:	08002e71 	.word	0x08002e71
 8002e48:	08002e71 	.word	0x08002e71
 8002e4c:	08002e69 	.word	0x08002e69
 8002e50:	2300      	movs	r3, #0
 8002e52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e56:	e06d      	b.n	8002f34 <UART_SetConfig+0x210>
 8002e58:	2302      	movs	r3, #2
 8002e5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e5e:	e069      	b.n	8002f34 <UART_SetConfig+0x210>
 8002e60:	2304      	movs	r3, #4
 8002e62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e66:	e065      	b.n	8002f34 <UART_SetConfig+0x210>
 8002e68:	2308      	movs	r3, #8
 8002e6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e6e:	e061      	b.n	8002f34 <UART_SetConfig+0x210>
 8002e70:	2310      	movs	r3, #16
 8002e72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e76:	e05d      	b.n	8002f34 <UART_SetConfig+0x210>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a58      	ldr	r2, [pc, #352]	@ (8002fe0 <UART_SetConfig+0x2bc>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d125      	bne.n	8002ece <UART_SetConfig+0x1aa>
 8002e82:	4b55      	ldr	r3, [pc, #340]	@ (8002fd8 <UART_SetConfig+0x2b4>)
 8002e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e88:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002e8c:	2b30      	cmp	r3, #48	@ 0x30
 8002e8e:	d016      	beq.n	8002ebe <UART_SetConfig+0x19a>
 8002e90:	2b30      	cmp	r3, #48	@ 0x30
 8002e92:	d818      	bhi.n	8002ec6 <UART_SetConfig+0x1a2>
 8002e94:	2b20      	cmp	r3, #32
 8002e96:	d00a      	beq.n	8002eae <UART_SetConfig+0x18a>
 8002e98:	2b20      	cmp	r3, #32
 8002e9a:	d814      	bhi.n	8002ec6 <UART_SetConfig+0x1a2>
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d002      	beq.n	8002ea6 <UART_SetConfig+0x182>
 8002ea0:	2b10      	cmp	r3, #16
 8002ea2:	d008      	beq.n	8002eb6 <UART_SetConfig+0x192>
 8002ea4:	e00f      	b.n	8002ec6 <UART_SetConfig+0x1a2>
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002eac:	e042      	b.n	8002f34 <UART_SetConfig+0x210>
 8002eae:	2302      	movs	r3, #2
 8002eb0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002eb4:	e03e      	b.n	8002f34 <UART_SetConfig+0x210>
 8002eb6:	2304      	movs	r3, #4
 8002eb8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ebc:	e03a      	b.n	8002f34 <UART_SetConfig+0x210>
 8002ebe:	2308      	movs	r3, #8
 8002ec0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ec4:	e036      	b.n	8002f34 <UART_SetConfig+0x210>
 8002ec6:	2310      	movs	r3, #16
 8002ec8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ecc:	e032      	b.n	8002f34 <UART_SetConfig+0x210>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a3f      	ldr	r2, [pc, #252]	@ (8002fd0 <UART_SetConfig+0x2ac>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d12a      	bne.n	8002f2e <UART_SetConfig+0x20a>
 8002ed8:	4b3f      	ldr	r3, [pc, #252]	@ (8002fd8 <UART_SetConfig+0x2b4>)
 8002eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ede:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002ee2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002ee6:	d01a      	beq.n	8002f1e <UART_SetConfig+0x1fa>
 8002ee8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002eec:	d81b      	bhi.n	8002f26 <UART_SetConfig+0x202>
 8002eee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ef2:	d00c      	beq.n	8002f0e <UART_SetConfig+0x1ea>
 8002ef4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ef8:	d815      	bhi.n	8002f26 <UART_SetConfig+0x202>
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d003      	beq.n	8002f06 <UART_SetConfig+0x1e2>
 8002efe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f02:	d008      	beq.n	8002f16 <UART_SetConfig+0x1f2>
 8002f04:	e00f      	b.n	8002f26 <UART_SetConfig+0x202>
 8002f06:	2300      	movs	r3, #0
 8002f08:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f0c:	e012      	b.n	8002f34 <UART_SetConfig+0x210>
 8002f0e:	2302      	movs	r3, #2
 8002f10:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f14:	e00e      	b.n	8002f34 <UART_SetConfig+0x210>
 8002f16:	2304      	movs	r3, #4
 8002f18:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f1c:	e00a      	b.n	8002f34 <UART_SetConfig+0x210>
 8002f1e:	2308      	movs	r3, #8
 8002f20:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f24:	e006      	b.n	8002f34 <UART_SetConfig+0x210>
 8002f26:	2310      	movs	r3, #16
 8002f28:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f2c:	e002      	b.n	8002f34 <UART_SetConfig+0x210>
 8002f2e:	2310      	movs	r3, #16
 8002f30:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a25      	ldr	r2, [pc, #148]	@ (8002fd0 <UART_SetConfig+0x2ac>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	f040 808a 	bne.w	8003054 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002f40:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002f44:	2b08      	cmp	r3, #8
 8002f46:	d824      	bhi.n	8002f92 <UART_SetConfig+0x26e>
 8002f48:	a201      	add	r2, pc, #4	@ (adr r2, 8002f50 <UART_SetConfig+0x22c>)
 8002f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f4e:	bf00      	nop
 8002f50:	08002f75 	.word	0x08002f75
 8002f54:	08002f93 	.word	0x08002f93
 8002f58:	08002f7d 	.word	0x08002f7d
 8002f5c:	08002f93 	.word	0x08002f93
 8002f60:	08002f83 	.word	0x08002f83
 8002f64:	08002f93 	.word	0x08002f93
 8002f68:	08002f93 	.word	0x08002f93
 8002f6c:	08002f93 	.word	0x08002f93
 8002f70:	08002f8b 	.word	0x08002f8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f74:	f7ff f9f4 	bl	8002360 <HAL_RCC_GetPCLK1Freq>
 8002f78:	61f8      	str	r0, [r7, #28]
        break;
 8002f7a:	e010      	b.n	8002f9e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f7c:	4b19      	ldr	r3, [pc, #100]	@ (8002fe4 <UART_SetConfig+0x2c0>)
 8002f7e:	61fb      	str	r3, [r7, #28]
        break;
 8002f80:	e00d      	b.n	8002f9e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f82:	f7ff f955 	bl	8002230 <HAL_RCC_GetSysClockFreq>
 8002f86:	61f8      	str	r0, [r7, #28]
        break;
 8002f88:	e009      	b.n	8002f9e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f8e:	61fb      	str	r3, [r7, #28]
        break;
 8002f90:	e005      	b.n	8002f9e <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8002f92:	2300      	movs	r3, #0
 8002f94:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002f9c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f000 8109 	beq.w	80031b8 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	685a      	ldr	r2, [r3, #4]
 8002faa:	4613      	mov	r3, r2
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	4413      	add	r3, r2
 8002fb0:	69fa      	ldr	r2, [r7, #28]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d305      	bcc.n	8002fc2 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002fbc:	69fa      	ldr	r2, [r7, #28]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d912      	bls.n	8002fe8 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002fc8:	e0f6      	b.n	80031b8 <UART_SetConfig+0x494>
 8002fca:	bf00      	nop
 8002fcc:	efff69f3 	.word	0xefff69f3
 8002fd0:	40008000 	.word	0x40008000
 8002fd4:	40013800 	.word	0x40013800
 8002fd8:	40021000 	.word	0x40021000
 8002fdc:	40004400 	.word	0x40004400
 8002fe0:	40004800 	.word	0x40004800
 8002fe4:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	2200      	movs	r2, #0
 8002fec:	461c      	mov	r4, r3
 8002fee:	4615      	mov	r5, r2
 8002ff0:	f04f 0200 	mov.w	r2, #0
 8002ff4:	f04f 0300 	mov.w	r3, #0
 8002ff8:	022b      	lsls	r3, r5, #8
 8002ffa:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002ffe:	0222      	lsls	r2, r4, #8
 8003000:	68f9      	ldr	r1, [r7, #12]
 8003002:	6849      	ldr	r1, [r1, #4]
 8003004:	0849      	lsrs	r1, r1, #1
 8003006:	2000      	movs	r0, #0
 8003008:	4688      	mov	r8, r1
 800300a:	4681      	mov	r9, r0
 800300c:	eb12 0a08 	adds.w	sl, r2, r8
 8003010:	eb43 0b09 	adc.w	fp, r3, r9
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	603b      	str	r3, [r7, #0]
 800301c:	607a      	str	r2, [r7, #4]
 800301e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003022:	4650      	mov	r0, sl
 8003024:	4659      	mov	r1, fp
 8003026:	f7fd f8d1 	bl	80001cc <__aeabi_uldivmod>
 800302a:	4602      	mov	r2, r0
 800302c:	460b      	mov	r3, r1
 800302e:	4613      	mov	r3, r2
 8003030:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003038:	d308      	bcc.n	800304c <UART_SetConfig+0x328>
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003040:	d204      	bcs.n	800304c <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	60da      	str	r2, [r3, #12]
 800304a:	e0b5      	b.n	80031b8 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003052:	e0b1      	b.n	80031b8 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	69db      	ldr	r3, [r3, #28]
 8003058:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800305c:	d15d      	bne.n	800311a <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800305e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003062:	2b08      	cmp	r3, #8
 8003064:	d827      	bhi.n	80030b6 <UART_SetConfig+0x392>
 8003066:	a201      	add	r2, pc, #4	@ (adr r2, 800306c <UART_SetConfig+0x348>)
 8003068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800306c:	08003091 	.word	0x08003091
 8003070:	08003099 	.word	0x08003099
 8003074:	080030a1 	.word	0x080030a1
 8003078:	080030b7 	.word	0x080030b7
 800307c:	080030a7 	.word	0x080030a7
 8003080:	080030b7 	.word	0x080030b7
 8003084:	080030b7 	.word	0x080030b7
 8003088:	080030b7 	.word	0x080030b7
 800308c:	080030af 	.word	0x080030af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003090:	f7ff f966 	bl	8002360 <HAL_RCC_GetPCLK1Freq>
 8003094:	61f8      	str	r0, [r7, #28]
        break;
 8003096:	e014      	b.n	80030c2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003098:	f7ff f978 	bl	800238c <HAL_RCC_GetPCLK2Freq>
 800309c:	61f8      	str	r0, [r7, #28]
        break;
 800309e:	e010      	b.n	80030c2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030a0:	4b4c      	ldr	r3, [pc, #304]	@ (80031d4 <UART_SetConfig+0x4b0>)
 80030a2:	61fb      	str	r3, [r7, #28]
        break;
 80030a4:	e00d      	b.n	80030c2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030a6:	f7ff f8c3 	bl	8002230 <HAL_RCC_GetSysClockFreq>
 80030aa:	61f8      	str	r0, [r7, #28]
        break;
 80030ac:	e009      	b.n	80030c2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80030b2:	61fb      	str	r3, [r7, #28]
        break;
 80030b4:	e005      	b.n	80030c2 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 80030b6:	2300      	movs	r3, #0
 80030b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80030c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d077      	beq.n	80031b8 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	005a      	lsls	r2, r3, #1
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	085b      	lsrs	r3, r3, #1
 80030d2:	441a      	add	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030dc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	2b0f      	cmp	r3, #15
 80030e2:	d916      	bls.n	8003112 <UART_SetConfig+0x3ee>
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030ea:	d212      	bcs.n	8003112 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	f023 030f 	bic.w	r3, r3, #15
 80030f4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	085b      	lsrs	r3, r3, #1
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	f003 0307 	and.w	r3, r3, #7
 8003100:	b29a      	uxth	r2, r3
 8003102:	8afb      	ldrh	r3, [r7, #22]
 8003104:	4313      	orrs	r3, r2
 8003106:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	8afa      	ldrh	r2, [r7, #22]
 800310e:	60da      	str	r2, [r3, #12]
 8003110:	e052      	b.n	80031b8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003118:	e04e      	b.n	80031b8 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800311a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800311e:	2b08      	cmp	r3, #8
 8003120:	d827      	bhi.n	8003172 <UART_SetConfig+0x44e>
 8003122:	a201      	add	r2, pc, #4	@ (adr r2, 8003128 <UART_SetConfig+0x404>)
 8003124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003128:	0800314d 	.word	0x0800314d
 800312c:	08003155 	.word	0x08003155
 8003130:	0800315d 	.word	0x0800315d
 8003134:	08003173 	.word	0x08003173
 8003138:	08003163 	.word	0x08003163
 800313c:	08003173 	.word	0x08003173
 8003140:	08003173 	.word	0x08003173
 8003144:	08003173 	.word	0x08003173
 8003148:	0800316b 	.word	0x0800316b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800314c:	f7ff f908 	bl	8002360 <HAL_RCC_GetPCLK1Freq>
 8003150:	61f8      	str	r0, [r7, #28]
        break;
 8003152:	e014      	b.n	800317e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003154:	f7ff f91a 	bl	800238c <HAL_RCC_GetPCLK2Freq>
 8003158:	61f8      	str	r0, [r7, #28]
        break;
 800315a:	e010      	b.n	800317e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800315c:	4b1d      	ldr	r3, [pc, #116]	@ (80031d4 <UART_SetConfig+0x4b0>)
 800315e:	61fb      	str	r3, [r7, #28]
        break;
 8003160:	e00d      	b.n	800317e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003162:	f7ff f865 	bl	8002230 <HAL_RCC_GetSysClockFreq>
 8003166:	61f8      	str	r0, [r7, #28]
        break;
 8003168:	e009      	b.n	800317e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800316a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800316e:	61fb      	str	r3, [r7, #28]
        break;
 8003170:	e005      	b.n	800317e <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8003172:	2300      	movs	r3, #0
 8003174:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800317c:	bf00      	nop
    }

    if (pclk != 0U)
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d019      	beq.n	80031b8 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	085a      	lsrs	r2, r3, #1
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	441a      	add	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	fbb2 f3f3 	udiv	r3, r2, r3
 8003196:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	2b0f      	cmp	r3, #15
 800319c:	d909      	bls.n	80031b2 <UART_SetConfig+0x48e>
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031a4:	d205      	bcs.n	80031b2 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	60da      	str	r2, [r3, #12]
 80031b0:	e002      	b.n	80031b8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80031c4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3728      	adds	r7, #40	@ 0x28
 80031cc:	46bd      	mov	sp, r7
 80031ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031d2:	bf00      	nop
 80031d4:	00f42400 	.word	0x00f42400

080031d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e4:	f003 0308 	and.w	r3, r3, #8
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d00a      	beq.n	8003202 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	430a      	orrs	r2, r1
 8003200:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00a      	beq.n	8003224 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	430a      	orrs	r2, r1
 8003222:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00a      	beq.n	8003246 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	430a      	orrs	r2, r1
 8003244:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800324a:	f003 0304 	and.w	r3, r3, #4
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00a      	beq.n	8003268 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	430a      	orrs	r2, r1
 8003266:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800326c:	f003 0310 	and.w	r3, r3, #16
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00a      	beq.n	800328a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	430a      	orrs	r2, r1
 8003288:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800328e:	f003 0320 	and.w	r3, r3, #32
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00a      	beq.n	80032ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	430a      	orrs	r2, r1
 80032aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d01a      	beq.n	80032ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	430a      	orrs	r2, r1
 80032cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80032d6:	d10a      	bne.n	80032ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	430a      	orrs	r2, r1
 80032ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00a      	beq.n	8003310 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	430a      	orrs	r2, r1
 800330e:	605a      	str	r2, [r3, #4]
  }
}
 8003310:	bf00      	nop
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b098      	sub	sp, #96	@ 0x60
 8003320:	af02      	add	r7, sp, #8
 8003322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800332c:	f7fd fde8 	bl	8000f00 <HAL_GetTick>
 8003330:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0308 	and.w	r3, r3, #8
 800333c:	2b08      	cmp	r3, #8
 800333e:	d12e      	bne.n	800339e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003340:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003344:	9300      	str	r3, [sp, #0]
 8003346:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003348:	2200      	movs	r2, #0
 800334a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 f88c 	bl	800346c <UART_WaitOnFlagUntilTimeout>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d021      	beq.n	800339e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003362:	e853 3f00 	ldrex	r3, [r3]
 8003366:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003368:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800336a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800336e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	461a      	mov	r2, r3
 8003376:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003378:	647b      	str	r3, [r7, #68]	@ 0x44
 800337a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800337c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800337e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003380:	e841 2300 	strex	r3, r2, [r1]
 8003384:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003386:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003388:	2b00      	cmp	r3, #0
 800338a:	d1e6      	bne.n	800335a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2220      	movs	r2, #32
 8003390:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e062      	b.n	8003464 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0304 	and.w	r3, r3, #4
 80033a8:	2b04      	cmp	r3, #4
 80033aa:	d149      	bne.n	8003440 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80033b0:	9300      	str	r3, [sp, #0]
 80033b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033b4:	2200      	movs	r2, #0
 80033b6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 f856 	bl	800346c <UART_WaitOnFlagUntilTimeout>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d03c      	beq.n	8003440 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ce:	e853 3f00 	ldrex	r3, [r3]
 80033d2:	623b      	str	r3, [r7, #32]
   return(result);
 80033d4:	6a3b      	ldr	r3, [r7, #32]
 80033d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80033da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	461a      	mov	r2, r3
 80033e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80033e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80033e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80033ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033ec:	e841 2300 	strex	r3, r2, [r1]
 80033f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80033f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d1e6      	bne.n	80033c6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	3308      	adds	r3, #8
 80033fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	e853 3f00 	ldrex	r3, [r3]
 8003406:	60fb      	str	r3, [r7, #12]
   return(result);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f023 0301 	bic.w	r3, r3, #1
 800340e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	3308      	adds	r3, #8
 8003416:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003418:	61fa      	str	r2, [r7, #28]
 800341a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800341c:	69b9      	ldr	r1, [r7, #24]
 800341e:	69fa      	ldr	r2, [r7, #28]
 8003420:	e841 2300 	strex	r3, r2, [r1]
 8003424:	617b      	str	r3, [r7, #20]
   return(result);
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1e5      	bne.n	80033f8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2220      	movs	r2, #32
 8003430:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e011      	b.n	8003464 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2220      	movs	r2, #32
 8003444:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2220      	movs	r2, #32
 800344a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003462:	2300      	movs	r3, #0
}
 8003464:	4618      	mov	r0, r3
 8003466:	3758      	adds	r7, #88	@ 0x58
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	603b      	str	r3, [r7, #0]
 8003478:	4613      	mov	r3, r2
 800347a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800347c:	e04f      	b.n	800351e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003484:	d04b      	beq.n	800351e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003486:	f7fd fd3b 	bl	8000f00 <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	429a      	cmp	r2, r3
 8003494:	d302      	bcc.n	800349c <UART_WaitOnFlagUntilTimeout+0x30>
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d101      	bne.n	80034a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e04e      	b.n	800353e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0304 	and.w	r3, r3, #4
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d037      	beq.n	800351e <UART_WaitOnFlagUntilTimeout+0xb2>
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	2b80      	cmp	r3, #128	@ 0x80
 80034b2:	d034      	beq.n	800351e <UART_WaitOnFlagUntilTimeout+0xb2>
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	2b40      	cmp	r3, #64	@ 0x40
 80034b8:	d031      	beq.n	800351e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	69db      	ldr	r3, [r3, #28]
 80034c0:	f003 0308 	and.w	r3, r3, #8
 80034c4:	2b08      	cmp	r3, #8
 80034c6:	d110      	bne.n	80034ea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2208      	movs	r2, #8
 80034ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	f000 f838 	bl	8003546 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2208      	movs	r2, #8
 80034da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e029      	b.n	800353e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	69db      	ldr	r3, [r3, #28]
 80034f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034f8:	d111      	bne.n	800351e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003502:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003504:	68f8      	ldr	r0, [r7, #12]
 8003506:	f000 f81e 	bl	8003546 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2220      	movs	r2, #32
 800350e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e00f      	b.n	800353e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	69da      	ldr	r2, [r3, #28]
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	4013      	ands	r3, r2
 8003528:	68ba      	ldr	r2, [r7, #8]
 800352a:	429a      	cmp	r2, r3
 800352c:	bf0c      	ite	eq
 800352e:	2301      	moveq	r3, #1
 8003530:	2300      	movne	r3, #0
 8003532:	b2db      	uxtb	r3, r3
 8003534:	461a      	mov	r2, r3
 8003536:	79fb      	ldrb	r3, [r7, #7]
 8003538:	429a      	cmp	r2, r3
 800353a:	d0a0      	beq.n	800347e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3710      	adds	r7, #16
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003546:	b480      	push	{r7}
 8003548:	b095      	sub	sp, #84	@ 0x54
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003554:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003556:	e853 3f00 	ldrex	r3, [r3]
 800355a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800355c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800355e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003562:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	461a      	mov	r2, r3
 800356a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800356c:	643b      	str	r3, [r7, #64]	@ 0x40
 800356e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003570:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003572:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003574:	e841 2300 	strex	r3, r2, [r1]
 8003578:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800357a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800357c:	2b00      	cmp	r3, #0
 800357e:	d1e6      	bne.n	800354e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	3308      	adds	r3, #8
 8003586:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003588:	6a3b      	ldr	r3, [r7, #32]
 800358a:	e853 3f00 	ldrex	r3, [r3]
 800358e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	f023 0301 	bic.w	r3, r3, #1
 8003596:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	3308      	adds	r3, #8
 800359e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80035a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80035a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80035a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035a8:	e841 2300 	strex	r3, r2, [r1]
 80035ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80035ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1e5      	bne.n	8003580 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d118      	bne.n	80035ee <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	e853 3f00 	ldrex	r3, [r3]
 80035c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	f023 0310 	bic.w	r3, r3, #16
 80035d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	461a      	mov	r2, r3
 80035d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035da:	61bb      	str	r3, [r7, #24]
 80035dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035de:	6979      	ldr	r1, [r7, #20]
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	e841 2300 	strex	r3, r2, [r1]
 80035e6:	613b      	str	r3, [r7, #16]
   return(result);
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1e6      	bne.n	80035bc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2220      	movs	r2, #32
 80035f2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003602:	bf00      	nop
 8003604:	3754      	adds	r7, #84	@ 0x54
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr

0800360e <memset>:
 800360e:	4402      	add	r2, r0
 8003610:	4603      	mov	r3, r0
 8003612:	4293      	cmp	r3, r2
 8003614:	d100      	bne.n	8003618 <memset+0xa>
 8003616:	4770      	bx	lr
 8003618:	f803 1b01 	strb.w	r1, [r3], #1
 800361c:	e7f9      	b.n	8003612 <memset+0x4>
	...

08003620 <__libc_init_array>:
 8003620:	b570      	push	{r4, r5, r6, lr}
 8003622:	4d0d      	ldr	r5, [pc, #52]	@ (8003658 <__libc_init_array+0x38>)
 8003624:	4c0d      	ldr	r4, [pc, #52]	@ (800365c <__libc_init_array+0x3c>)
 8003626:	1b64      	subs	r4, r4, r5
 8003628:	10a4      	asrs	r4, r4, #2
 800362a:	2600      	movs	r6, #0
 800362c:	42a6      	cmp	r6, r4
 800362e:	d109      	bne.n	8003644 <__libc_init_array+0x24>
 8003630:	4d0b      	ldr	r5, [pc, #44]	@ (8003660 <__libc_init_array+0x40>)
 8003632:	4c0c      	ldr	r4, [pc, #48]	@ (8003664 <__libc_init_array+0x44>)
 8003634:	f000 f818 	bl	8003668 <_init>
 8003638:	1b64      	subs	r4, r4, r5
 800363a:	10a4      	asrs	r4, r4, #2
 800363c:	2600      	movs	r6, #0
 800363e:	42a6      	cmp	r6, r4
 8003640:	d105      	bne.n	800364e <__libc_init_array+0x2e>
 8003642:	bd70      	pop	{r4, r5, r6, pc}
 8003644:	f855 3b04 	ldr.w	r3, [r5], #4
 8003648:	4798      	blx	r3
 800364a:	3601      	adds	r6, #1
 800364c:	e7ee      	b.n	800362c <__libc_init_array+0xc>
 800364e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003652:	4798      	blx	r3
 8003654:	3601      	adds	r6, #1
 8003656:	e7f2      	b.n	800363e <__libc_init_array+0x1e>
 8003658:	080036e0 	.word	0x080036e0
 800365c:	080036e0 	.word	0x080036e0
 8003660:	080036e0 	.word	0x080036e0
 8003664:	080036e4 	.word	0x080036e4

08003668 <_init>:
 8003668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800366a:	bf00      	nop
 800366c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800366e:	bc08      	pop	{r3}
 8003670:	469e      	mov	lr, r3
 8003672:	4770      	bx	lr

08003674 <_fini>:
 8003674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003676:	bf00      	nop
 8003678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800367a:	bc08      	pop	{r3}
 800367c:	469e      	mov	lr, r3
 800367e:	4770      	bx	lr
