
project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001840  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080019cc  080019cc  000029cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a2c  08001a2c  0000300c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001a2c  08001a2c  0000300c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001a2c  08001a2c  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a2c  08001a2c  00002a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001a30  08001a30  00002a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001a34  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001a40  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001a40  0000302c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000468f  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000120b  00000000  00000000  000076cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005b8  00000000  00000000  000088d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000424  00000000  00000000  00008e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000186d1  00000000  00000000  000092b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000619e  00000000  00000000  00021985  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009893e  00000000  00000000  00027b23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c0461  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000014b8  00000000  00000000  000c04a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  000c195c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080019b4 	.word	0x080019b4

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	080019b4 	.word	0x080019b4

080001cc <LCD_Init>:

static void LCD_EnablePulse(void);
static void LCD_Send4Bits(uint8_t data);

void LCD_Init(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
    HAL_Delay(50); // tempo de inicialização
 80001d0:	2032      	movs	r0, #50	@ 0x32
 80001d2:	f000 fa7d 	bl	80006d0 <HAL_Delay>
    LCD_SendCommand(0x33);
 80001d6:	2033      	movs	r0, #51	@ 0x33
 80001d8:	f000 f814 	bl	8000204 <LCD_SendCommand>
    LCD_SendCommand(0x32); // modo 4 bits
 80001dc:	2032      	movs	r0, #50	@ 0x32
 80001de:	f000 f811 	bl	8000204 <LCD_SendCommand>
    LCD_SendCommand(0x28); // 2 linhas, 5x7 font
 80001e2:	2028      	movs	r0, #40	@ 0x28
 80001e4:	f000 f80e 	bl	8000204 <LCD_SendCommand>
    LCD_SendCommand(0x0C); // display on, cursor off
 80001e8:	200c      	movs	r0, #12
 80001ea:	f000 f80b 	bl	8000204 <LCD_SendCommand>
    LCD_SendCommand(0x06); // incrementar cursor
 80001ee:	2006      	movs	r0, #6
 80001f0:	f000 f808 	bl	8000204 <LCD_SendCommand>
    LCD_SendCommand(0x01); // clear display
 80001f4:	2001      	movs	r0, #1
 80001f6:	f000 f805 	bl	8000204 <LCD_SendCommand>
    HAL_Delay(2);
 80001fa:	2002      	movs	r0, #2
 80001fc:	f000 fa68 	bl	80006d0 <HAL_Delay>
}
 8000200:	bf00      	nop
 8000202:	bd80      	pop	{r7, pc}

08000204 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t cmd)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
 800020a:	4603      	mov	r3, r0
 800020c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 800020e:	2200      	movs	r2, #0
 8000210:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000214:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000218:	f000 fcd6 	bl	8000bc8 <HAL_GPIO_WritePin>
    LCD_Send4Bits(cmd >> 4);
 800021c:	79fb      	ldrb	r3, [r7, #7]
 800021e:	091b      	lsrs	r3, r3, #4
 8000220:	b2db      	uxtb	r3, r3
 8000222:	4618      	mov	r0, r3
 8000224:	f000 f862 	bl	80002ec <LCD_Send4Bits>
    LCD_Send4Bits(cmd & 0x0F);
 8000228:	79fb      	ldrb	r3, [r7, #7]
 800022a:	f003 030f 	and.w	r3, r3, #15
 800022e:	b2db      	uxtb	r3, r3
 8000230:	4618      	mov	r0, r3
 8000232:	f000 f85b 	bl	80002ec <LCD_Send4Bits>
    HAL_Delay(2);
 8000236:	2002      	movs	r0, #2
 8000238:	f000 fa4a 	bl	80006d0 <HAL_Delay>
}
 800023c:	bf00      	nop
 800023e:	3708      	adds	r7, #8
 8000240:	46bd      	mov	sp, r7
 8000242:	bd80      	pop	{r7, pc}

08000244 <LCD_SendData>:

void LCD_SendData(uint8_t data)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0
 800024a:	4603      	mov	r3, r0
 800024c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 800024e:	2201      	movs	r2, #1
 8000250:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000254:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000258:	f000 fcb6 	bl	8000bc8 <HAL_GPIO_WritePin>
    LCD_Send4Bits(data >> 4);
 800025c:	79fb      	ldrb	r3, [r7, #7]
 800025e:	091b      	lsrs	r3, r3, #4
 8000260:	b2db      	uxtb	r3, r3
 8000262:	4618      	mov	r0, r3
 8000264:	f000 f842 	bl	80002ec <LCD_Send4Bits>
    LCD_Send4Bits(data & 0x0F);
 8000268:	79fb      	ldrb	r3, [r7, #7]
 800026a:	f003 030f 	and.w	r3, r3, #15
 800026e:	b2db      	uxtb	r3, r3
 8000270:	4618      	mov	r0, r3
 8000272:	f000 f83b 	bl	80002ec <LCD_Send4Bits>
    HAL_Delay(2);
 8000276:	2002      	movs	r0, #2
 8000278:	f000 fa2a 	bl	80006d0 <HAL_Delay>
}
 800027c:	bf00      	nop
 800027e:	3708      	adds	r7, #8
 8000280:	46bd      	mov	sp, r7
 8000282:	bd80      	pop	{r7, pc}

08000284 <LCD_SendString>:

void LCD_SendString(char *str)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b082      	sub	sp, #8
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
    while (*str) {
 800028c:	e006      	b.n	800029c <LCD_SendString+0x18>
        LCD_SendData(*str++);
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	1c5a      	adds	r2, r3, #1
 8000292:	607a      	str	r2, [r7, #4]
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	4618      	mov	r0, r3
 8000298:	f7ff ffd4 	bl	8000244 <LCD_SendData>
    while (*str) {
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d1f4      	bne.n	800028e <LCD_SendString+0xa>
    }
}
 80002a4:	bf00      	nop
 80002a6:	bf00      	nop
 80002a8:	3708      	adds	r7, #8
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}

080002ae <LCD_SetCursor>:

void LCD_SetCursor(uint8_t row, uint8_t col)
{
 80002ae:	b580      	push	{r7, lr}
 80002b0:	b084      	sub	sp, #16
 80002b2:	af00      	add	r7, sp, #0
 80002b4:	4603      	mov	r3, r0
 80002b6:	460a      	mov	r2, r1
 80002b8:	71fb      	strb	r3, [r7, #7]
 80002ba:	4613      	mov	r3, r2
 80002bc:	71bb      	strb	r3, [r7, #6]
    uint8_t pos[] = {0x00, 0x40};
 80002be:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80002c2:	81bb      	strh	r3, [r7, #12]
    LCD_SendCommand(0x80 | (pos[row] + col));
 80002c4:	79fb      	ldrb	r3, [r7, #7]
 80002c6:	3310      	adds	r3, #16
 80002c8:	443b      	add	r3, r7
 80002ca:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 80002ce:	79bb      	ldrb	r3, [r7, #6]
 80002d0:	4413      	add	r3, r2
 80002d2:	b2db      	uxtb	r3, r3
 80002d4:	b25b      	sxtb	r3, r3
 80002d6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80002da:	b25b      	sxtb	r3, r3
 80002dc:	b2db      	uxtb	r3, r3
 80002de:	4618      	mov	r0, r3
 80002e0:	f7ff ff90 	bl	8000204 <LCD_SendCommand>
}
 80002e4:	bf00      	nop
 80002e6:	3710      	adds	r7, #16
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bd80      	pop	{r7, pc}

080002ec <LCD_Send4Bits>:

static void LCD_Send4Bits(uint8_t data)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	4603      	mov	r3, r0
 80002f4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, (data >> 0) & 0x01);
 80002f6:	79fb      	ldrb	r3, [r7, #7]
 80002f8:	f003 0301 	and.w	r3, r3, #1
 80002fc:	b2db      	uxtb	r3, r3
 80002fe:	461a      	mov	r2, r3
 8000300:	2120      	movs	r1, #32
 8000302:	4816      	ldr	r0, [pc, #88]	@ (800035c <LCD_Send4Bits+0x70>)
 8000304:	f000 fc60 	bl	8000bc8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, (data >> 1) & 0x01);
 8000308:	79fb      	ldrb	r3, [r7, #7]
 800030a:	085b      	lsrs	r3, r3, #1
 800030c:	b2db      	uxtb	r3, r3
 800030e:	f003 0301 	and.w	r3, r3, #1
 8000312:	b2db      	uxtb	r3, r3
 8000314:	461a      	mov	r2, r3
 8000316:	2110      	movs	r1, #16
 8000318:	4810      	ldr	r0, [pc, #64]	@ (800035c <LCD_Send4Bits+0x70>)
 800031a:	f000 fc55 	bl	8000bc8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, (data >> 2) & 0x01);
 800031e:	79fb      	ldrb	r3, [r7, #7]
 8000320:	089b      	lsrs	r3, r3, #2
 8000322:	b2db      	uxtb	r3, r3
 8000324:	f003 0301 	and.w	r3, r3, #1
 8000328:	b2db      	uxtb	r3, r3
 800032a:	461a      	mov	r2, r3
 800032c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000330:	480a      	ldr	r0, [pc, #40]	@ (800035c <LCD_Send4Bits+0x70>)
 8000332:	f000 fc49 	bl	8000bc8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, (data >> 3) & 0x01);
 8000336:	79fb      	ldrb	r3, [r7, #7]
 8000338:	08db      	lsrs	r3, r3, #3
 800033a:	b2db      	uxtb	r3, r3
 800033c:	f003 0301 	and.w	r3, r3, #1
 8000340:	b2db      	uxtb	r3, r3
 8000342:	461a      	mov	r2, r3
 8000344:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000348:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800034c:	f000 fc3c 	bl	8000bc8 <HAL_GPIO_WritePin>
    LCD_EnablePulse();
 8000350:	f000 f806 	bl	8000360 <LCD_EnablePulse>
}
 8000354:	bf00      	nop
 8000356:	3708      	adds	r7, #8
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}
 800035c:	48000400 	.word	0x48000400

08000360 <LCD_EnablePulse>:

static void LCD_EnablePulse(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_SET);
 8000364:	2201      	movs	r2, #1
 8000366:	2108      	movs	r1, #8
 8000368:	4807      	ldr	r0, [pc, #28]	@ (8000388 <LCD_EnablePulse+0x28>)
 800036a:	f000 fc2d 	bl	8000bc8 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 800036e:	2014      	movs	r0, #20
 8000370:	f000 f9ae 	bl	80006d0 <HAL_Delay>
    HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8000374:	2200      	movs	r2, #0
 8000376:	2108      	movs	r1, #8
 8000378:	4803      	ldr	r0, [pc, #12]	@ (8000388 <LCD_EnablePulse+0x28>)
 800037a:	f000 fc25 	bl	8000bc8 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 800037e:	2014      	movs	r0, #20
 8000380:	f000 f9a6 	bl	80006d0 <HAL_Delay>
}
 8000384:	bf00      	nop
 8000386:	bd80      	pop	{r7, pc}
 8000388:	48000400 	.word	0x48000400

0800038c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000390:	f000 f929 	bl	80005e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000394:	f000 f81c 	bl	80003d0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_GPIO_Init();
 8000398:	f000 f860 	bl	800045c <MX_GPIO_Init>
  // MX_TIMx_Init(); se precisar de timer
  HAL_Delay(100);
 800039c:	2064      	movs	r0, #100	@ 0x64
 800039e:	f000 f997 	bl	80006d0 <HAL_Delay>

  LCD_Init();
 80003a2:	f7ff ff13 	bl	80001cc <LCD_Init>
  LCD_SetCursor(0, 0);
 80003a6:	2100      	movs	r1, #0
 80003a8:	2000      	movs	r0, #0
 80003aa:	f7ff ff80 	bl	80002ae <LCD_SetCursor>
  LCD_SendString("Hello, STM32!");
 80003ae:	4806      	ldr	r0, [pc, #24]	@ (80003c8 <main+0x3c>)
 80003b0:	f7ff ff68 	bl	8000284 <LCD_SendString>
  LCD_SetCursor(1, 0);
 80003b4:	2100      	movs	r1, #0
 80003b6:	2001      	movs	r0, #1
 80003b8:	f7ff ff79 	bl	80002ae <LCD_SetCursor>
  LCD_SendString("LCD Shield OK!");
 80003bc:	4803      	ldr	r0, [pc, #12]	@ (80003cc <main+0x40>)
 80003be:	f7ff ff61 	bl	8000284 <LCD_SendString>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003c2:	bf00      	nop
 80003c4:	e7fd      	b.n	80003c2 <main+0x36>
 80003c6:	bf00      	nop
 80003c8:	080019cc 	.word	0x080019cc
 80003cc:	080019dc 	.word	0x080019dc

080003d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b096      	sub	sp, #88	@ 0x58
 80003d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003d6:	f107 0314 	add.w	r3, r7, #20
 80003da:	2244      	movs	r2, #68	@ 0x44
 80003dc:	2100      	movs	r1, #0
 80003de:	4618      	mov	r0, r3
 80003e0:	f001 fabc 	bl	800195c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003e4:	463b      	mov	r3, r7
 80003e6:	2200      	movs	r2, #0
 80003e8:	601a      	str	r2, [r3, #0]
 80003ea:	605a      	str	r2, [r3, #4]
 80003ec:	609a      	str	r2, [r3, #8]
 80003ee:	60da      	str	r2, [r3, #12]
 80003f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80003f2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80003f6:	f000 fc0d 	bl	8000c14 <HAL_PWREx_ControlVoltageScaling>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d001      	beq.n	8000404 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000400:	f000 f85c 	bl	80004bc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000404:	2310      	movs	r3, #16
 8000406:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000408:	2301      	movs	r3, #1
 800040a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800040c:	2300      	movs	r3, #0
 800040e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000410:	2360      	movs	r3, #96	@ 0x60
 8000412:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000414:	2300      	movs	r3, #0
 8000416:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000418:	f107 0314 	add.w	r3, r7, #20
 800041c:	4618      	mov	r0, r3
 800041e:	f000 fc4f 	bl	8000cc0 <HAL_RCC_OscConfig>
 8000422:	4603      	mov	r3, r0
 8000424:	2b00      	cmp	r3, #0
 8000426:	d001      	beq.n	800042c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000428:	f000 f848 	bl	80004bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800042c:	230f      	movs	r3, #15
 800042e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000430:	2300      	movs	r3, #0
 8000432:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000434:	2300      	movs	r3, #0
 8000436:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000438:	2300      	movs	r3, #0
 800043a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800043c:	2300      	movs	r3, #0
 800043e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000440:	463b      	mov	r3, r7
 8000442:	2100      	movs	r1, #0
 8000444:	4618      	mov	r0, r3
 8000446:	f001 f89d 	bl	8001584 <HAL_RCC_ClockConfig>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d001      	beq.n	8000454 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000450:	f000 f834 	bl	80004bc <Error_Handler>
  }
}
 8000454:	bf00      	nop
 8000456:	3758      	adds	r7, #88	@ 0x58
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}

0800045c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b086      	sub	sp, #24
 8000460:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000462:	1d3b      	adds	r3, r7, #4
 8000464:	2200      	movs	r2, #0
 8000466:	601a      	str	r2, [r3, #0]
 8000468:	605a      	str	r2, [r3, #4]
 800046a:	609a      	str	r2, [r3, #8]
 800046c:	60da      	str	r2, [r3, #12]
 800046e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000470:	4b11      	ldr	r3, [pc, #68]	@ (80004b8 <MX_GPIO_Init+0x5c>)
 8000472:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000474:	4a10      	ldr	r2, [pc, #64]	@ (80004b8 <MX_GPIO_Init+0x5c>)
 8000476:	f043 0301 	orr.w	r3, r3, #1
 800047a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800047c:	4b0e      	ldr	r3, [pc, #56]	@ (80004b8 <MX_GPIO_Init+0x5c>)
 800047e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000480:	f003 0301 	and.w	r3, r3, #1
 8000484:	603b      	str	r3, [r7, #0]
 8000486:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8000488:	2200      	movs	r2, #0
 800048a:	21f3      	movs	r1, #243	@ 0xf3
 800048c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000490:	f000 fb9a 	bl	8000bc8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA1 PA4 PA5
                           PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8000494:	23f3      	movs	r3, #243	@ 0xf3
 8000496:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000498:	2301      	movs	r3, #1
 800049a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049c:	2300      	movs	r3, #0
 800049e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a0:	2300      	movs	r3, #0
 80004a2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004a4:	1d3b      	adds	r3, r7, #4
 80004a6:	4619      	mov	r1, r3
 80004a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004ac:	f000 fa1a 	bl	80008e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80004b0:	bf00      	nop
 80004b2:	3718      	adds	r7, #24
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	40021000 	.word	0x40021000

080004bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004c0:	b672      	cpsid	i
}
 80004c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004c4:	bf00      	nop
 80004c6:	e7fd      	b.n	80004c4 <Error_Handler+0x8>

080004c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004ce:	4b0f      	ldr	r3, [pc, #60]	@ (800050c <HAL_MspInit+0x44>)
 80004d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80004d2:	4a0e      	ldr	r2, [pc, #56]	@ (800050c <HAL_MspInit+0x44>)
 80004d4:	f043 0301 	orr.w	r3, r3, #1
 80004d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80004da:	4b0c      	ldr	r3, [pc, #48]	@ (800050c <HAL_MspInit+0x44>)
 80004dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80004de:	f003 0301 	and.w	r3, r3, #1
 80004e2:	607b      	str	r3, [r7, #4]
 80004e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004e6:	4b09      	ldr	r3, [pc, #36]	@ (800050c <HAL_MspInit+0x44>)
 80004e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80004ea:	4a08      	ldr	r2, [pc, #32]	@ (800050c <HAL_MspInit+0x44>)
 80004ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80004f2:	4b06      	ldr	r3, [pc, #24]	@ (800050c <HAL_MspInit+0x44>)
 80004f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80004f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004fa:	603b      	str	r3, [r7, #0]
 80004fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004fe:	bf00      	nop
 8000500:	370c      	adds	r7, #12
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	40021000 	.word	0x40021000

08000510 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000514:	bf00      	nop
 8000516:	e7fd      	b.n	8000514 <NMI_Handler+0x4>

08000518 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800051c:	bf00      	nop
 800051e:	e7fd      	b.n	800051c <HardFault_Handler+0x4>

08000520 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000524:	bf00      	nop
 8000526:	e7fd      	b.n	8000524 <MemManage_Handler+0x4>

08000528 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800052c:	bf00      	nop
 800052e:	e7fd      	b.n	800052c <BusFault_Handler+0x4>

08000530 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000534:	bf00      	nop
 8000536:	e7fd      	b.n	8000534 <UsageFault_Handler+0x4>

08000538 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800053c:	bf00      	nop
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr

08000546 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000546:	b480      	push	{r7}
 8000548:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800054a:	bf00      	nop
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr

08000554 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000558:	bf00      	nop
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr

08000562 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000562:	b580      	push	{r7, lr}
 8000564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000566:	f000 f893 	bl	8000690 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800056a:	bf00      	nop
 800056c:	bd80      	pop	{r7, pc}
	...

08000570 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000574:	4b06      	ldr	r3, [pc, #24]	@ (8000590 <SystemInit+0x20>)
 8000576:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800057a:	4a05      	ldr	r2, [pc, #20]	@ (8000590 <SystemInit+0x20>)
 800057c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000580:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000584:	bf00      	nop
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	e000ed00 	.word	0xe000ed00

08000594 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000594:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80005cc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000598:	f7ff ffea 	bl	8000570 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800059c:	480c      	ldr	r0, [pc, #48]	@ (80005d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800059e:	490d      	ldr	r1, [pc, #52]	@ (80005d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005a0:	4a0d      	ldr	r2, [pc, #52]	@ (80005d8 <LoopForever+0xe>)
  movs r3, #0
 80005a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005a4:	e002      	b.n	80005ac <LoopCopyDataInit>

080005a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005aa:	3304      	adds	r3, #4

080005ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005b0:	d3f9      	bcc.n	80005a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005b2:	4a0a      	ldr	r2, [pc, #40]	@ (80005dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80005b4:	4c0a      	ldr	r4, [pc, #40]	@ (80005e0 <LoopForever+0x16>)
  movs r3, #0
 80005b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005b8:	e001      	b.n	80005be <LoopFillZerobss>

080005ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005bc:	3204      	adds	r2, #4

080005be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005c0:	d3fb      	bcc.n	80005ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005c2:	f001 f9d3 	bl	800196c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005c6:	f7ff fee1 	bl	800038c <main>

080005ca <LoopForever>:

LoopForever:
    b LoopForever
 80005ca:	e7fe      	b.n	80005ca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80005cc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80005d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005d4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005d8:	08001a34 	.word	0x08001a34
  ldr r2, =_sbss
 80005dc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005e0:	2000002c 	.word	0x2000002c

080005e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005e4:	e7fe      	b.n	80005e4 <ADC1_2_IRQHandler>

080005e6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005e6:	b580      	push	{r7, lr}
 80005e8:	b082      	sub	sp, #8
 80005ea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005ec:	2300      	movs	r3, #0
 80005ee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005f0:	2003      	movs	r0, #3
 80005f2:	f000 f943 	bl	800087c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005f6:	200f      	movs	r0, #15
 80005f8:	f000 f80e 	bl	8000618 <HAL_InitTick>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d002      	beq.n	8000608 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000602:	2301      	movs	r3, #1
 8000604:	71fb      	strb	r3, [r7, #7]
 8000606:	e001      	b.n	800060c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000608:	f7ff ff5e 	bl	80004c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800060c:	79fb      	ldrb	r3, [r7, #7]
}
 800060e:	4618      	mov	r0, r3
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
	...

08000618 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000620:	2300      	movs	r3, #0
 8000622:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000624:	4b17      	ldr	r3, [pc, #92]	@ (8000684 <HAL_InitTick+0x6c>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d023      	beq.n	8000674 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800062c:	4b16      	ldr	r3, [pc, #88]	@ (8000688 <HAL_InitTick+0x70>)
 800062e:	681a      	ldr	r2, [r3, #0]
 8000630:	4b14      	ldr	r3, [pc, #80]	@ (8000684 <HAL_InitTick+0x6c>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	4619      	mov	r1, r3
 8000636:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800063a:	fbb3 f3f1 	udiv	r3, r3, r1
 800063e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000642:	4618      	mov	r0, r3
 8000644:	f000 f941 	bl	80008ca <HAL_SYSTICK_Config>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d10f      	bne.n	800066e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	2b0f      	cmp	r3, #15
 8000652:	d809      	bhi.n	8000668 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000654:	2200      	movs	r2, #0
 8000656:	6879      	ldr	r1, [r7, #4]
 8000658:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800065c:	f000 f919 	bl	8000892 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000660:	4a0a      	ldr	r2, [pc, #40]	@ (800068c <HAL_InitTick+0x74>)
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	6013      	str	r3, [r2, #0]
 8000666:	e007      	b.n	8000678 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000668:	2301      	movs	r3, #1
 800066a:	73fb      	strb	r3, [r7, #15]
 800066c:	e004      	b.n	8000678 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800066e:	2301      	movs	r3, #1
 8000670:	73fb      	strb	r3, [r7, #15]
 8000672:	e001      	b.n	8000678 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000674:	2301      	movs	r3, #1
 8000676:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000678:	7bfb      	ldrb	r3, [r7, #15]
}
 800067a:	4618      	mov	r0, r3
 800067c:	3710      	adds	r7, #16
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20000008 	.word	0x20000008
 8000688:	20000000 	.word	0x20000000
 800068c:	20000004 	.word	0x20000004

08000690 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000694:	4b06      	ldr	r3, [pc, #24]	@ (80006b0 <HAL_IncTick+0x20>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	461a      	mov	r2, r3
 800069a:	4b06      	ldr	r3, [pc, #24]	@ (80006b4 <HAL_IncTick+0x24>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4413      	add	r3, r2
 80006a0:	4a04      	ldr	r2, [pc, #16]	@ (80006b4 <HAL_IncTick+0x24>)
 80006a2:	6013      	str	r3, [r2, #0]
}
 80006a4:	bf00      	nop
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	20000008 	.word	0x20000008
 80006b4:	20000028 	.word	0x20000028

080006b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  return uwTick;
 80006bc:	4b03      	ldr	r3, [pc, #12]	@ (80006cc <HAL_GetTick+0x14>)
 80006be:	681b      	ldr	r3, [r3, #0]
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	20000028 	.word	0x20000028

080006d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006d8:	f7ff ffee 	bl	80006b8 <HAL_GetTick>
 80006dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80006e8:	d005      	beq.n	80006f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80006ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000714 <HAL_Delay+0x44>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	461a      	mov	r2, r3
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	4413      	add	r3, r2
 80006f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006f6:	bf00      	nop
 80006f8:	f7ff ffde 	bl	80006b8 <HAL_GetTick>
 80006fc:	4602      	mov	r2, r0
 80006fe:	68bb      	ldr	r3, [r7, #8]
 8000700:	1ad3      	subs	r3, r2, r3
 8000702:	68fa      	ldr	r2, [r7, #12]
 8000704:	429a      	cmp	r2, r3
 8000706:	d8f7      	bhi.n	80006f8 <HAL_Delay+0x28>
  {
  }
}
 8000708:	bf00      	nop
 800070a:	bf00      	nop
 800070c:	3710      	adds	r7, #16
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	20000008 	.word	0x20000008

08000718 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000718:	b480      	push	{r7}
 800071a:	b085      	sub	sp, #20
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	f003 0307 	and.w	r3, r3, #7
 8000726:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000728:	4b0c      	ldr	r3, [pc, #48]	@ (800075c <__NVIC_SetPriorityGrouping+0x44>)
 800072a:	68db      	ldr	r3, [r3, #12]
 800072c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800072e:	68ba      	ldr	r2, [r7, #8]
 8000730:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000734:	4013      	ands	r3, r2
 8000736:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000740:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000744:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000748:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800074a:	4a04      	ldr	r2, [pc, #16]	@ (800075c <__NVIC_SetPriorityGrouping+0x44>)
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	60d3      	str	r3, [r2, #12]
}
 8000750:	bf00      	nop
 8000752:	3714      	adds	r7, #20
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr
 800075c:	e000ed00 	.word	0xe000ed00

08000760 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000764:	4b04      	ldr	r3, [pc, #16]	@ (8000778 <__NVIC_GetPriorityGrouping+0x18>)
 8000766:	68db      	ldr	r3, [r3, #12]
 8000768:	0a1b      	lsrs	r3, r3, #8
 800076a:	f003 0307 	and.w	r3, r3, #7
}
 800076e:	4618      	mov	r0, r3
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr
 8000778:	e000ed00 	.word	0xe000ed00

0800077c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	6039      	str	r1, [r7, #0]
 8000786:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800078c:	2b00      	cmp	r3, #0
 800078e:	db0a      	blt.n	80007a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	b2da      	uxtb	r2, r3
 8000794:	490c      	ldr	r1, [pc, #48]	@ (80007c8 <__NVIC_SetPriority+0x4c>)
 8000796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079a:	0112      	lsls	r2, r2, #4
 800079c:	b2d2      	uxtb	r2, r2
 800079e:	440b      	add	r3, r1
 80007a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007a4:	e00a      	b.n	80007bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	b2da      	uxtb	r2, r3
 80007aa:	4908      	ldr	r1, [pc, #32]	@ (80007cc <__NVIC_SetPriority+0x50>)
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	f003 030f 	and.w	r3, r3, #15
 80007b2:	3b04      	subs	r3, #4
 80007b4:	0112      	lsls	r2, r2, #4
 80007b6:	b2d2      	uxtb	r2, r2
 80007b8:	440b      	add	r3, r1
 80007ba:	761a      	strb	r2, [r3, #24]
}
 80007bc:	bf00      	nop
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr
 80007c8:	e000e100 	.word	0xe000e100
 80007cc:	e000ed00 	.word	0xe000ed00

080007d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b089      	sub	sp, #36	@ 0x24
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	60f8      	str	r0, [r7, #12]
 80007d8:	60b9      	str	r1, [r7, #8]
 80007da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	f003 0307 	and.w	r3, r3, #7
 80007e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007e4:	69fb      	ldr	r3, [r7, #28]
 80007e6:	f1c3 0307 	rsb	r3, r3, #7
 80007ea:	2b04      	cmp	r3, #4
 80007ec:	bf28      	it	cs
 80007ee:	2304      	movcs	r3, #4
 80007f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007f2:	69fb      	ldr	r3, [r7, #28]
 80007f4:	3304      	adds	r3, #4
 80007f6:	2b06      	cmp	r3, #6
 80007f8:	d902      	bls.n	8000800 <NVIC_EncodePriority+0x30>
 80007fa:	69fb      	ldr	r3, [r7, #28]
 80007fc:	3b03      	subs	r3, #3
 80007fe:	e000      	b.n	8000802 <NVIC_EncodePriority+0x32>
 8000800:	2300      	movs	r3, #0
 8000802:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000804:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000808:	69bb      	ldr	r3, [r7, #24]
 800080a:	fa02 f303 	lsl.w	r3, r2, r3
 800080e:	43da      	mvns	r2, r3
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	401a      	ands	r2, r3
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000818:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	fa01 f303 	lsl.w	r3, r1, r3
 8000822:	43d9      	mvns	r1, r3
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000828:	4313      	orrs	r3, r2
         );
}
 800082a:	4618      	mov	r0, r3
 800082c:	3724      	adds	r7, #36	@ 0x24
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
	...

08000838 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	3b01      	subs	r3, #1
 8000844:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000848:	d301      	bcc.n	800084e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800084a:	2301      	movs	r3, #1
 800084c:	e00f      	b.n	800086e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800084e:	4a0a      	ldr	r2, [pc, #40]	@ (8000878 <SysTick_Config+0x40>)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	3b01      	subs	r3, #1
 8000854:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000856:	210f      	movs	r1, #15
 8000858:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800085c:	f7ff ff8e 	bl	800077c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000860:	4b05      	ldr	r3, [pc, #20]	@ (8000878 <SysTick_Config+0x40>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000866:	4b04      	ldr	r3, [pc, #16]	@ (8000878 <SysTick_Config+0x40>)
 8000868:	2207      	movs	r2, #7
 800086a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800086c:	2300      	movs	r3, #0
}
 800086e:	4618      	mov	r0, r3
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	e000e010 	.word	0xe000e010

0800087c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000884:	6878      	ldr	r0, [r7, #4]
 8000886:	f7ff ff47 	bl	8000718 <__NVIC_SetPriorityGrouping>
}
 800088a:	bf00      	nop
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}

08000892 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000892:	b580      	push	{r7, lr}
 8000894:	b086      	sub	sp, #24
 8000896:	af00      	add	r7, sp, #0
 8000898:	4603      	mov	r3, r0
 800089a:	60b9      	str	r1, [r7, #8]
 800089c:	607a      	str	r2, [r7, #4]
 800089e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80008a0:	2300      	movs	r3, #0
 80008a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80008a4:	f7ff ff5c 	bl	8000760 <__NVIC_GetPriorityGrouping>
 80008a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008aa:	687a      	ldr	r2, [r7, #4]
 80008ac:	68b9      	ldr	r1, [r7, #8]
 80008ae:	6978      	ldr	r0, [r7, #20]
 80008b0:	f7ff ff8e 	bl	80007d0 <NVIC_EncodePriority>
 80008b4:	4602      	mov	r2, r0
 80008b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008ba:	4611      	mov	r1, r2
 80008bc:	4618      	mov	r0, r3
 80008be:	f7ff ff5d 	bl	800077c <__NVIC_SetPriority>
}
 80008c2:	bf00      	nop
 80008c4:	3718      	adds	r7, #24
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}

080008ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	b082      	sub	sp, #8
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008d2:	6878      	ldr	r0, [r7, #4]
 80008d4:	f7ff ffb0 	bl	8000838 <SysTick_Config>
 80008d8:	4603      	mov	r3, r0
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
	...

080008e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b087      	sub	sp, #28
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008f2:	e14e      	b.n	8000b92 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	681a      	ldr	r2, [r3, #0]
 80008f8:	2101      	movs	r1, #1
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000900:	4013      	ands	r3, r2
 8000902:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	2b00      	cmp	r3, #0
 8000908:	f000 8140 	beq.w	8000b8c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	f003 0303 	and.w	r3, r3, #3
 8000914:	2b01      	cmp	r3, #1
 8000916:	d005      	beq.n	8000924 <HAL_GPIO_Init+0x40>
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	f003 0303 	and.w	r3, r3, #3
 8000920:	2b02      	cmp	r3, #2
 8000922:	d130      	bne.n	8000986 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	689b      	ldr	r3, [r3, #8]
 8000928:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800092a:	697b      	ldr	r3, [r7, #20]
 800092c:	005b      	lsls	r3, r3, #1
 800092e:	2203      	movs	r2, #3
 8000930:	fa02 f303 	lsl.w	r3, r2, r3
 8000934:	43db      	mvns	r3, r3
 8000936:	693a      	ldr	r2, [r7, #16]
 8000938:	4013      	ands	r3, r2
 800093a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	68da      	ldr	r2, [r3, #12]
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	005b      	lsls	r3, r3, #1
 8000944:	fa02 f303 	lsl.w	r3, r2, r3
 8000948:	693a      	ldr	r2, [r7, #16]
 800094a:	4313      	orrs	r3, r2
 800094c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	693a      	ldr	r2, [r7, #16]
 8000952:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800095a:	2201      	movs	r2, #1
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	fa02 f303 	lsl.w	r3, r2, r3
 8000962:	43db      	mvns	r3, r3
 8000964:	693a      	ldr	r2, [r7, #16]
 8000966:	4013      	ands	r3, r2
 8000968:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	685b      	ldr	r3, [r3, #4]
 800096e:	091b      	lsrs	r3, r3, #4
 8000970:	f003 0201 	and.w	r2, r3, #1
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	fa02 f303 	lsl.w	r3, r2, r3
 800097a:	693a      	ldr	r2, [r7, #16]
 800097c:	4313      	orrs	r3, r2
 800097e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	693a      	ldr	r2, [r7, #16]
 8000984:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	f003 0303 	and.w	r3, r3, #3
 800098e:	2b03      	cmp	r3, #3
 8000990:	d017      	beq.n	80009c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	68db      	ldr	r3, [r3, #12]
 8000996:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	005b      	lsls	r3, r3, #1
 800099c:	2203      	movs	r2, #3
 800099e:	fa02 f303 	lsl.w	r3, r2, r3
 80009a2:	43db      	mvns	r3, r3
 80009a4:	693a      	ldr	r2, [r7, #16]
 80009a6:	4013      	ands	r3, r2
 80009a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	689a      	ldr	r2, [r3, #8]
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	005b      	lsls	r3, r3, #1
 80009b2:	fa02 f303 	lsl.w	r3, r2, r3
 80009b6:	693a      	ldr	r2, [r7, #16]
 80009b8:	4313      	orrs	r3, r2
 80009ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	693a      	ldr	r2, [r7, #16]
 80009c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	685b      	ldr	r3, [r3, #4]
 80009c6:	f003 0303 	and.w	r3, r3, #3
 80009ca:	2b02      	cmp	r3, #2
 80009cc:	d123      	bne.n	8000a16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	08da      	lsrs	r2, r3, #3
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	3208      	adds	r2, #8
 80009d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	f003 0307 	and.w	r3, r3, #7
 80009e2:	009b      	lsls	r3, r3, #2
 80009e4:	220f      	movs	r2, #15
 80009e6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ea:	43db      	mvns	r3, r3
 80009ec:	693a      	ldr	r2, [r7, #16]
 80009ee:	4013      	ands	r3, r2
 80009f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	691a      	ldr	r2, [r3, #16]
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	f003 0307 	and.w	r3, r3, #7
 80009fc:	009b      	lsls	r3, r3, #2
 80009fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000a02:	693a      	ldr	r2, [r7, #16]
 8000a04:	4313      	orrs	r3, r2
 8000a06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	08da      	lsrs	r2, r3, #3
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	3208      	adds	r2, #8
 8000a10:	6939      	ldr	r1, [r7, #16]
 8000a12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	005b      	lsls	r3, r3, #1
 8000a20:	2203      	movs	r2, #3
 8000a22:	fa02 f303 	lsl.w	r3, r2, r3
 8000a26:	43db      	mvns	r3, r3
 8000a28:	693a      	ldr	r2, [r7, #16]
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	f003 0203 	and.w	r2, r3, #3
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	005b      	lsls	r3, r3, #1
 8000a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	f000 809a 	beq.w	8000b8c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a58:	4b55      	ldr	r3, [pc, #340]	@ (8000bb0 <HAL_GPIO_Init+0x2cc>)
 8000a5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a5c:	4a54      	ldr	r2, [pc, #336]	@ (8000bb0 <HAL_GPIO_Init+0x2cc>)
 8000a5e:	f043 0301 	orr.w	r3, r3, #1
 8000a62:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a64:	4b52      	ldr	r3, [pc, #328]	@ (8000bb0 <HAL_GPIO_Init+0x2cc>)
 8000a66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a68:	f003 0301 	and.w	r3, r3, #1
 8000a6c:	60bb      	str	r3, [r7, #8]
 8000a6e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a70:	4a50      	ldr	r2, [pc, #320]	@ (8000bb4 <HAL_GPIO_Init+0x2d0>)
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	089b      	lsrs	r3, r3, #2
 8000a76:	3302      	adds	r3, #2
 8000a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	f003 0303 	and.w	r3, r3, #3
 8000a84:	009b      	lsls	r3, r3, #2
 8000a86:	220f      	movs	r2, #15
 8000a88:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8c:	43db      	mvns	r3, r3
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	4013      	ands	r3, r2
 8000a92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000a9a:	d013      	beq.n	8000ac4 <HAL_GPIO_Init+0x1e0>
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4a46      	ldr	r2, [pc, #280]	@ (8000bb8 <HAL_GPIO_Init+0x2d4>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d00d      	beq.n	8000ac0 <HAL_GPIO_Init+0x1dc>
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	4a45      	ldr	r2, [pc, #276]	@ (8000bbc <HAL_GPIO_Init+0x2d8>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d007      	beq.n	8000abc <HAL_GPIO_Init+0x1d8>
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	4a44      	ldr	r2, [pc, #272]	@ (8000bc0 <HAL_GPIO_Init+0x2dc>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d101      	bne.n	8000ab8 <HAL_GPIO_Init+0x1d4>
 8000ab4:	2303      	movs	r3, #3
 8000ab6:	e006      	b.n	8000ac6 <HAL_GPIO_Init+0x1e2>
 8000ab8:	2307      	movs	r3, #7
 8000aba:	e004      	b.n	8000ac6 <HAL_GPIO_Init+0x1e2>
 8000abc:	2302      	movs	r3, #2
 8000abe:	e002      	b.n	8000ac6 <HAL_GPIO_Init+0x1e2>
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	e000      	b.n	8000ac6 <HAL_GPIO_Init+0x1e2>
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	697a      	ldr	r2, [r7, #20]
 8000ac8:	f002 0203 	and.w	r2, r2, #3
 8000acc:	0092      	lsls	r2, r2, #2
 8000ace:	4093      	lsls	r3, r2
 8000ad0:	693a      	ldr	r2, [r7, #16]
 8000ad2:	4313      	orrs	r3, r2
 8000ad4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ad6:	4937      	ldr	r1, [pc, #220]	@ (8000bb4 <HAL_GPIO_Init+0x2d0>)
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	089b      	lsrs	r3, r3, #2
 8000adc:	3302      	adds	r3, #2
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ae4:	4b37      	ldr	r3, [pc, #220]	@ (8000bc4 <HAL_GPIO_Init+0x2e0>)
 8000ae6:	689b      	ldr	r3, [r3, #8]
 8000ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	43db      	mvns	r3, r3
 8000aee:	693a      	ldr	r2, [r7, #16]
 8000af0:	4013      	ands	r3, r2
 8000af2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d003      	beq.n	8000b08 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000b00:	693a      	ldr	r2, [r7, #16]
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	4313      	orrs	r3, r2
 8000b06:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b08:	4a2e      	ldr	r2, [pc, #184]	@ (8000bc4 <HAL_GPIO_Init+0x2e0>)
 8000b0a:	693b      	ldr	r3, [r7, #16]
 8000b0c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000b0e:	4b2d      	ldr	r3, [pc, #180]	@ (8000bc4 <HAL_GPIO_Init+0x2e0>)
 8000b10:	68db      	ldr	r3, [r3, #12]
 8000b12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	43db      	mvns	r3, r3
 8000b18:	693a      	ldr	r2, [r7, #16]
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d003      	beq.n	8000b32 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b32:	4a24      	ldr	r2, [pc, #144]	@ (8000bc4 <HAL_GPIO_Init+0x2e0>)
 8000b34:	693b      	ldr	r3, [r7, #16]
 8000b36:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000b38:	4b22      	ldr	r3, [pc, #136]	@ (8000bc4 <HAL_GPIO_Init+0x2e0>)
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	43db      	mvns	r3, r3
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	4013      	ands	r3, r2
 8000b46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d003      	beq.n	8000b5c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000b54:	693a      	ldr	r2, [r7, #16]
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b5c:	4a19      	ldr	r2, [pc, #100]	@ (8000bc4 <HAL_GPIO_Init+0x2e0>)
 8000b5e:	693b      	ldr	r3, [r7, #16]
 8000b60:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000b62:	4b18      	ldr	r3, [pc, #96]	@ (8000bc4 <HAL_GPIO_Init+0x2e0>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	43db      	mvns	r3, r3
 8000b6c:	693a      	ldr	r2, [r7, #16]
 8000b6e:	4013      	ands	r3, r2
 8000b70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d003      	beq.n	8000b86 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	4313      	orrs	r3, r2
 8000b84:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b86:	4a0f      	ldr	r2, [pc, #60]	@ (8000bc4 <HAL_GPIO_Init+0x2e0>)
 8000b88:	693b      	ldr	r3, [r7, #16]
 8000b8a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	3301      	adds	r3, #1
 8000b90:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	fa22 f303 	lsr.w	r3, r2, r3
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	f47f aea9 	bne.w	80008f4 <HAL_GPIO_Init+0x10>
  }
}
 8000ba2:	bf00      	nop
 8000ba4:	bf00      	nop
 8000ba6:	371c      	adds	r7, #28
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	40021000 	.word	0x40021000
 8000bb4:	40010000 	.word	0x40010000
 8000bb8:	48000400 	.word	0x48000400
 8000bbc:	48000800 	.word	0x48000800
 8000bc0:	48000c00 	.word	0x48000c00
 8000bc4:	40010400 	.word	0x40010400

08000bc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	460b      	mov	r3, r1
 8000bd2:	807b      	strh	r3, [r7, #2]
 8000bd4:	4613      	mov	r3, r2
 8000bd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000bd8:	787b      	ldrb	r3, [r7, #1]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d003      	beq.n	8000be6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000bde:	887a      	ldrh	r2, [r7, #2]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000be4:	e002      	b.n	8000bec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000be6:	887a      	ldrh	r2, [r7, #2]
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000bec:	bf00      	nop
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000bfc:	4b04      	ldr	r3, [pc, #16]	@ (8000c10 <HAL_PWREx_GetVoltageRange+0x18>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	40007000 	.word	0x40007000

08000c14 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000c22:	d130      	bne.n	8000c86 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c24:	4b23      	ldr	r3, [pc, #140]	@ (8000cb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000c2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000c30:	d038      	beq.n	8000ca4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c32:	4b20      	ldr	r3, [pc, #128]	@ (8000cb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000c3a:	4a1e      	ldr	r2, [pc, #120]	@ (8000cb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c3c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c40:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000c42:	4b1d      	ldr	r3, [pc, #116]	@ (8000cb8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	2232      	movs	r2, #50	@ 0x32
 8000c48:	fb02 f303 	mul.w	r3, r2, r3
 8000c4c:	4a1b      	ldr	r2, [pc, #108]	@ (8000cbc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c52:	0c9b      	lsrs	r3, r3, #18
 8000c54:	3301      	adds	r3, #1
 8000c56:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c58:	e002      	b.n	8000c60 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	3b01      	subs	r3, #1
 8000c5e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c60:	4b14      	ldr	r3, [pc, #80]	@ (8000cb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c62:	695b      	ldr	r3, [r3, #20]
 8000c64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c6c:	d102      	bne.n	8000c74 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d1f2      	bne.n	8000c5a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c74:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c76:	695b      	ldr	r3, [r3, #20]
 8000c78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c80:	d110      	bne.n	8000ca4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000c82:	2303      	movs	r3, #3
 8000c84:	e00f      	b.n	8000ca6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000c86:	4b0b      	ldr	r3, [pc, #44]	@ (8000cb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000c8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c92:	d007      	beq.n	8000ca4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c94:	4b07      	ldr	r3, [pc, #28]	@ (8000cb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000c9c:	4a05      	ldr	r2, [pc, #20]	@ (8000cb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c9e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ca2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000ca4:	2300      	movs	r3, #0
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3714      	adds	r7, #20
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	40007000 	.word	0x40007000
 8000cb8:	20000000 	.word	0x20000000
 8000cbc:	431bde83 	.word	0x431bde83

08000cc0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08a      	sub	sp, #40	@ 0x28
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d102      	bne.n	8000cd4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	f000 bc4f 	b.w	8001572 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000cd4:	4b97      	ldr	r3, [pc, #604]	@ (8000f34 <HAL_RCC_OscConfig+0x274>)
 8000cd6:	689b      	ldr	r3, [r3, #8]
 8000cd8:	f003 030c 	and.w	r3, r3, #12
 8000cdc:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000cde:	4b95      	ldr	r3, [pc, #596]	@ (8000f34 <HAL_RCC_OscConfig+0x274>)
 8000ce0:	68db      	ldr	r3, [r3, #12]
 8000ce2:	f003 0303 	and.w	r3, r3, #3
 8000ce6:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f003 0310 	and.w	r3, r3, #16
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	f000 80e6 	beq.w	8000ec2 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000cf6:	6a3b      	ldr	r3, [r7, #32]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d007      	beq.n	8000d0c <HAL_RCC_OscConfig+0x4c>
 8000cfc:	6a3b      	ldr	r3, [r7, #32]
 8000cfe:	2b0c      	cmp	r3, #12
 8000d00:	f040 808d 	bne.w	8000e1e <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	f040 8089 	bne.w	8000e1e <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000d0c:	4b89      	ldr	r3, [pc, #548]	@ (8000f34 <HAL_RCC_OscConfig+0x274>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f003 0302 	and.w	r3, r3, #2
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d006      	beq.n	8000d26 <HAL_RCC_OscConfig+0x66>
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	69db      	ldr	r3, [r3, #28]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d102      	bne.n	8000d26 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8000d20:	2301      	movs	r3, #1
 8000d22:	f000 bc26 	b.w	8001572 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000d2a:	4b82      	ldr	r3, [pc, #520]	@ (8000f34 <HAL_RCC_OscConfig+0x274>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f003 0308 	and.w	r3, r3, #8
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d004      	beq.n	8000d40 <HAL_RCC_OscConfig+0x80>
 8000d36:	4b7f      	ldr	r3, [pc, #508]	@ (8000f34 <HAL_RCC_OscConfig+0x274>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000d3e:	e005      	b.n	8000d4c <HAL_RCC_OscConfig+0x8c>
 8000d40:	4b7c      	ldr	r3, [pc, #496]	@ (8000f34 <HAL_RCC_OscConfig+0x274>)
 8000d42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000d46:	091b      	lsrs	r3, r3, #4
 8000d48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d224      	bcs.n	8000d9a <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d54:	4618      	mov	r0, r3
 8000d56:	f000 fda1 	bl	800189c <RCC_SetFlashLatencyFromMSIRange>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d002      	beq.n	8000d66 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8000d60:	2301      	movs	r3, #1
 8000d62:	f000 bc06 	b.w	8001572 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d66:	4b73      	ldr	r3, [pc, #460]	@ (8000f34 <HAL_RCC_OscConfig+0x274>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a72      	ldr	r2, [pc, #456]	@ (8000f34 <HAL_RCC_OscConfig+0x274>)
 8000d6c:	f043 0308 	orr.w	r3, r3, #8
 8000d70:	6013      	str	r3, [r2, #0]
 8000d72:	4b70      	ldr	r3, [pc, #448]	@ (8000f34 <HAL_RCC_OscConfig+0x274>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d7e:	496d      	ldr	r1, [pc, #436]	@ (8000f34 <HAL_RCC_OscConfig+0x274>)
 8000d80:	4313      	orrs	r3, r2
 8000d82:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d84:	4b6b      	ldr	r3, [pc, #428]	@ (8000f34 <HAL_RCC_OscConfig+0x274>)
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	6a1b      	ldr	r3, [r3, #32]
 8000d90:	021b      	lsls	r3, r3, #8
 8000d92:	4968      	ldr	r1, [pc, #416]	@ (8000f34 <HAL_RCC_OscConfig+0x274>)
 8000d94:	4313      	orrs	r3, r2
 8000d96:	604b      	str	r3, [r1, #4]
 8000d98:	e025      	b.n	8000de6 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d9a:	4b66      	ldr	r3, [pc, #408]	@ (8000f34 <HAL_RCC_OscConfig+0x274>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a65      	ldr	r2, [pc, #404]	@ (8000f34 <HAL_RCC_OscConfig+0x274>)
 8000da0:	f043 0308 	orr.w	r3, r3, #8
 8000da4:	6013      	str	r3, [r2, #0]
 8000da6:	4b63      	ldr	r3, [pc, #396]	@ (8000f34 <HAL_RCC_OscConfig+0x274>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000db2:	4960      	ldr	r1, [pc, #384]	@ (8000f34 <HAL_RCC_OscConfig+0x274>)
 8000db4:	4313      	orrs	r3, r2
 8000db6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000db8:	4b5e      	ldr	r3, [pc, #376]	@ (8000f34 <HAL_RCC_OscConfig+0x274>)
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6a1b      	ldr	r3, [r3, #32]
 8000dc4:	021b      	lsls	r3, r3, #8
 8000dc6:	495b      	ldr	r1, [pc, #364]	@ (8000f34 <HAL_RCC_OscConfig+0x274>)
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000dcc:	6a3b      	ldr	r3, [r7, #32]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d109      	bne.n	8000de6 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f000 fd60 	bl	800189c <RCC_SetFlashLatencyFromMSIRange>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
 8000de4:	e3c5      	b.n	8001572 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000de6:	f000 fccd 	bl	8001784 <HAL_RCC_GetSysClockFreq>
 8000dea:	4602      	mov	r2, r0
 8000dec:	4b51      	ldr	r3, [pc, #324]	@ (8000f34 <HAL_RCC_OscConfig+0x274>)
 8000dee:	689b      	ldr	r3, [r3, #8]
 8000df0:	091b      	lsrs	r3, r3, #4
 8000df2:	f003 030f 	and.w	r3, r3, #15
 8000df6:	4950      	ldr	r1, [pc, #320]	@ (8000f38 <HAL_RCC_OscConfig+0x278>)
 8000df8:	5ccb      	ldrb	r3, [r1, r3]
 8000dfa:	f003 031f 	and.w	r3, r3, #31
 8000dfe:	fa22 f303 	lsr.w	r3, r2, r3
 8000e02:	4a4e      	ldr	r2, [pc, #312]	@ (8000f3c <HAL_RCC_OscConfig+0x27c>)
 8000e04:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000e06:	4b4e      	ldr	r3, [pc, #312]	@ (8000f40 <HAL_RCC_OscConfig+0x280>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff fc04 	bl	8000618 <HAL_InitTick>
 8000e10:	4603      	mov	r3, r0
 8000e12:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8000e14:	7dfb      	ldrb	r3, [r7, #23]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d052      	beq.n	8000ec0 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8000e1a:	7dfb      	ldrb	r3, [r7, #23]
 8000e1c:	e3a9      	b.n	8001572 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	69db      	ldr	r3, [r3, #28]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d032      	beq.n	8000e8c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000e26:	4b43      	ldr	r3, [pc, #268]	@ (8000f34 <HAL_RCC_OscConfig+0x274>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a42      	ldr	r2, [pc, #264]	@ (8000f34 <HAL_RCC_OscConfig+0x274>)
 8000e2c:	f043 0301 	orr.w	r3, r3, #1
 8000e30:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e32:	f7ff fc41 	bl	80006b8 <HAL_GetTick>
 8000e36:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e38:	e008      	b.n	8000e4c <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e3a:	f7ff fc3d 	bl	80006b8 <HAL_GetTick>
 8000e3e:	4602      	mov	r2, r0
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	1ad3      	subs	r3, r2, r3
 8000e44:	2b02      	cmp	r3, #2
 8000e46:	d901      	bls.n	8000e4c <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	e392      	b.n	8001572 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e4c:	4b39      	ldr	r3, [pc, #228]	@ (8000f34 <HAL_RCC_OscConfig+0x274>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f003 0302 	and.w	r3, r3, #2
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d0f0      	beq.n	8000e3a <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e58:	4b36      	ldr	r3, [pc, #216]	@ (8000f34 <HAL_RCC_OscConfig+0x274>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a35      	ldr	r2, [pc, #212]	@ (8000f34 <HAL_RCC_OscConfig+0x274>)
 8000e5e:	f043 0308 	orr.w	r3, r3, #8
 8000e62:	6013      	str	r3, [r2, #0]
 8000e64:	4b33      	ldr	r3, [pc, #204]	@ (8000f34 <HAL_RCC_OscConfig+0x274>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e70:	4930      	ldr	r1, [pc, #192]	@ (8000f34 <HAL_RCC_OscConfig+0x274>)
 8000e72:	4313      	orrs	r3, r2
 8000e74:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e76:	4b2f      	ldr	r3, [pc, #188]	@ (8000f34 <HAL_RCC_OscConfig+0x274>)
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6a1b      	ldr	r3, [r3, #32]
 8000e82:	021b      	lsls	r3, r3, #8
 8000e84:	492b      	ldr	r1, [pc, #172]	@ (8000f34 <HAL_RCC_OscConfig+0x274>)
 8000e86:	4313      	orrs	r3, r2
 8000e88:	604b      	str	r3, [r1, #4]
 8000e8a:	e01a      	b.n	8000ec2 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000e8c:	4b29      	ldr	r3, [pc, #164]	@ (8000f34 <HAL_RCC_OscConfig+0x274>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a28      	ldr	r2, [pc, #160]	@ (8000f34 <HAL_RCC_OscConfig+0x274>)
 8000e92:	f023 0301 	bic.w	r3, r3, #1
 8000e96:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e98:	f7ff fc0e 	bl	80006b8 <HAL_GetTick>
 8000e9c:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e9e:	e008      	b.n	8000eb2 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ea0:	f7ff fc0a 	bl	80006b8 <HAL_GetTick>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	69bb      	ldr	r3, [r7, #24]
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	2b02      	cmp	r3, #2
 8000eac:	d901      	bls.n	8000eb2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	e35f      	b.n	8001572 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000eb2:	4b20      	ldr	r3, [pc, #128]	@ (8000f34 <HAL_RCC_OscConfig+0x274>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f003 0302 	and.w	r3, r3, #2
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d1f0      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x1e0>
 8000ebe:	e000      	b.n	8000ec2 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000ec0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d073      	beq.n	8000fb6 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000ece:	6a3b      	ldr	r3, [r7, #32]
 8000ed0:	2b08      	cmp	r3, #8
 8000ed2:	d005      	beq.n	8000ee0 <HAL_RCC_OscConfig+0x220>
 8000ed4:	6a3b      	ldr	r3, [r7, #32]
 8000ed6:	2b0c      	cmp	r3, #12
 8000ed8:	d10e      	bne.n	8000ef8 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	2b03      	cmp	r3, #3
 8000ede:	d10b      	bne.n	8000ef8 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ee0:	4b14      	ldr	r3, [pc, #80]	@ (8000f34 <HAL_RCC_OscConfig+0x274>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d063      	beq.n	8000fb4 <HAL_RCC_OscConfig+0x2f4>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d15f      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e33c      	b.n	8001572 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f00:	d106      	bne.n	8000f10 <HAL_RCC_OscConfig+0x250>
 8000f02:	4b0c      	ldr	r3, [pc, #48]	@ (8000f34 <HAL_RCC_OscConfig+0x274>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a0b      	ldr	r2, [pc, #44]	@ (8000f34 <HAL_RCC_OscConfig+0x274>)
 8000f08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f0c:	6013      	str	r3, [r2, #0]
 8000f0e:	e025      	b.n	8000f5c <HAL_RCC_OscConfig+0x29c>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000f18:	d114      	bne.n	8000f44 <HAL_RCC_OscConfig+0x284>
 8000f1a:	4b06      	ldr	r3, [pc, #24]	@ (8000f34 <HAL_RCC_OscConfig+0x274>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a05      	ldr	r2, [pc, #20]	@ (8000f34 <HAL_RCC_OscConfig+0x274>)
 8000f20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f24:	6013      	str	r3, [r2, #0]
 8000f26:	4b03      	ldr	r3, [pc, #12]	@ (8000f34 <HAL_RCC_OscConfig+0x274>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a02      	ldr	r2, [pc, #8]	@ (8000f34 <HAL_RCC_OscConfig+0x274>)
 8000f2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f30:	6013      	str	r3, [r2, #0]
 8000f32:	e013      	b.n	8000f5c <HAL_RCC_OscConfig+0x29c>
 8000f34:	40021000 	.word	0x40021000
 8000f38:	080019ec 	.word	0x080019ec
 8000f3c:	20000000 	.word	0x20000000
 8000f40:	20000004 	.word	0x20000004
 8000f44:	4b8f      	ldr	r3, [pc, #572]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a8e      	ldr	r2, [pc, #568]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8000f4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f4e:	6013      	str	r3, [r2, #0]
 8000f50:	4b8c      	ldr	r3, [pc, #560]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a8b      	ldr	r2, [pc, #556]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8000f56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d013      	beq.n	8000f8c <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f64:	f7ff fba8 	bl	80006b8 <HAL_GetTick>
 8000f68:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f6a:	e008      	b.n	8000f7e <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f6c:	f7ff fba4 	bl	80006b8 <HAL_GetTick>
 8000f70:	4602      	mov	r2, r0
 8000f72:	69bb      	ldr	r3, [r7, #24]
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	2b64      	cmp	r3, #100	@ 0x64
 8000f78:	d901      	bls.n	8000f7e <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	e2f9      	b.n	8001572 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f7e:	4b81      	ldr	r3, [pc, #516]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d0f0      	beq.n	8000f6c <HAL_RCC_OscConfig+0x2ac>
 8000f8a:	e014      	b.n	8000fb6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f8c:	f7ff fb94 	bl	80006b8 <HAL_GetTick>
 8000f90:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f92:	e008      	b.n	8000fa6 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f94:	f7ff fb90 	bl	80006b8 <HAL_GetTick>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	2b64      	cmp	r3, #100	@ 0x64
 8000fa0:	d901      	bls.n	8000fa6 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	e2e5      	b.n	8001572 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000fa6:	4b77      	ldr	r3, [pc, #476]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d1f0      	bne.n	8000f94 <HAL_RCC_OscConfig+0x2d4>
 8000fb2:	e000      	b.n	8000fb6 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f003 0302 	and.w	r3, r3, #2
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d060      	beq.n	8001084 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000fc2:	6a3b      	ldr	r3, [r7, #32]
 8000fc4:	2b04      	cmp	r3, #4
 8000fc6:	d005      	beq.n	8000fd4 <HAL_RCC_OscConfig+0x314>
 8000fc8:	6a3b      	ldr	r3, [r7, #32]
 8000fca:	2b0c      	cmp	r3, #12
 8000fcc:	d119      	bne.n	8001002 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d116      	bne.n	8001002 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fd4:	4b6b      	ldr	r3, [pc, #428]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d005      	beq.n	8000fec <HAL_RCC_OscConfig+0x32c>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d101      	bne.n	8000fec <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	e2c2      	b.n	8001572 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fec:	4b65      	ldr	r3, [pc, #404]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	691b      	ldr	r3, [r3, #16]
 8000ff8:	061b      	lsls	r3, r3, #24
 8000ffa:	4962      	ldr	r1, [pc, #392]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001000:	e040      	b.n	8001084 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	68db      	ldr	r3, [r3, #12]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d023      	beq.n	8001052 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800100a:	4b5e      	ldr	r3, [pc, #376]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a5d      	ldr	r2, [pc, #372]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8001010:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001014:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001016:	f7ff fb4f 	bl	80006b8 <HAL_GetTick>
 800101a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800101c:	e008      	b.n	8001030 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800101e:	f7ff fb4b 	bl	80006b8 <HAL_GetTick>
 8001022:	4602      	mov	r2, r0
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	2b02      	cmp	r3, #2
 800102a:	d901      	bls.n	8001030 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 800102c:	2303      	movs	r3, #3
 800102e:	e2a0      	b.n	8001572 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001030:	4b54      	ldr	r3, [pc, #336]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001038:	2b00      	cmp	r3, #0
 800103a:	d0f0      	beq.n	800101e <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800103c:	4b51      	ldr	r3, [pc, #324]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	691b      	ldr	r3, [r3, #16]
 8001048:	061b      	lsls	r3, r3, #24
 800104a:	494e      	ldr	r1, [pc, #312]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 800104c:	4313      	orrs	r3, r2
 800104e:	604b      	str	r3, [r1, #4]
 8001050:	e018      	b.n	8001084 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001052:	4b4c      	ldr	r3, [pc, #304]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a4b      	ldr	r2, [pc, #300]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8001058:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800105c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800105e:	f7ff fb2b 	bl	80006b8 <HAL_GetTick>
 8001062:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001064:	e008      	b.n	8001078 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001066:	f7ff fb27 	bl	80006b8 <HAL_GetTick>
 800106a:	4602      	mov	r2, r0
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	1ad3      	subs	r3, r2, r3
 8001070:	2b02      	cmp	r3, #2
 8001072:	d901      	bls.n	8001078 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8001074:	2303      	movs	r3, #3
 8001076:	e27c      	b.n	8001572 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001078:	4b42      	ldr	r3, [pc, #264]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001080:	2b00      	cmp	r3, #0
 8001082:	d1f0      	bne.n	8001066 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f003 0308 	and.w	r3, r3, #8
 800108c:	2b00      	cmp	r3, #0
 800108e:	f000 8082 	beq.w	8001196 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	695b      	ldr	r3, [r3, #20]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d05f      	beq.n	800115a <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 800109a:	4b3a      	ldr	r3, [pc, #232]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 800109c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010a0:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	699a      	ldr	r2, [r3, #24]
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	f003 0310 	and.w	r3, r3, #16
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d037      	beq.n	8001120 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	f003 0302 	and.w	r3, r3, #2
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d006      	beq.n	80010c8 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d101      	bne.n	80010c8 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80010c4:	2301      	movs	r3, #1
 80010c6:	e254      	b.n	8001572 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d01b      	beq.n	800110a <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 80010d2:	4b2c      	ldr	r3, [pc, #176]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 80010d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010d8:	4a2a      	ldr	r2, [pc, #168]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 80010da:	f023 0301 	bic.w	r3, r3, #1
 80010de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80010e2:	f7ff fae9 	bl	80006b8 <HAL_GetTick>
 80010e6:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80010e8:	e008      	b.n	80010fc <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010ea:	f7ff fae5 	bl	80006b8 <HAL_GetTick>
 80010ee:	4602      	mov	r2, r0
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	1ad3      	subs	r3, r2, r3
 80010f4:	2b11      	cmp	r3, #17
 80010f6:	d901      	bls.n	80010fc <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 80010f8:	2303      	movs	r3, #3
 80010fa:	e23a      	b.n	8001572 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80010fc:	4b21      	ldr	r3, [pc, #132]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 80010fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001102:	f003 0302 	and.w	r3, r3, #2
 8001106:	2b00      	cmp	r3, #0
 8001108:	d1ef      	bne.n	80010ea <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 800110a:	4b1e      	ldr	r3, [pc, #120]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 800110c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001110:	f023 0210 	bic.w	r2, r3, #16
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	699b      	ldr	r3, [r3, #24]
 8001118:	491a      	ldr	r1, [pc, #104]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 800111a:	4313      	orrs	r3, r2
 800111c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001120:	4b18      	ldr	r3, [pc, #96]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8001122:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001126:	4a17      	ldr	r2, [pc, #92]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8001128:	f043 0301 	orr.w	r3, r3, #1
 800112c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001130:	f7ff fac2 	bl	80006b8 <HAL_GetTick>
 8001134:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001136:	e008      	b.n	800114a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001138:	f7ff fabe 	bl	80006b8 <HAL_GetTick>
 800113c:	4602      	mov	r2, r0
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	2b11      	cmp	r3, #17
 8001144:	d901      	bls.n	800114a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001146:	2303      	movs	r3, #3
 8001148:	e213      	b.n	8001572 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800114a:	4b0e      	ldr	r3, [pc, #56]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 800114c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001150:	f003 0302 	and.w	r3, r3, #2
 8001154:	2b00      	cmp	r3, #0
 8001156:	d0ef      	beq.n	8001138 <HAL_RCC_OscConfig+0x478>
 8001158:	e01d      	b.n	8001196 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800115a:	4b0a      	ldr	r3, [pc, #40]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 800115c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001160:	4a08      	ldr	r2, [pc, #32]	@ (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8001162:	f023 0301 	bic.w	r3, r3, #1
 8001166:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800116a:	f7ff faa5 	bl	80006b8 <HAL_GetTick>
 800116e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001170:	e00a      	b.n	8001188 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001172:	f7ff faa1 	bl	80006b8 <HAL_GetTick>
 8001176:	4602      	mov	r2, r0
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	2b11      	cmp	r3, #17
 800117e:	d903      	bls.n	8001188 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8001180:	2303      	movs	r3, #3
 8001182:	e1f6      	b.n	8001572 <HAL_RCC_OscConfig+0x8b2>
 8001184:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001188:	4ba9      	ldr	r3, [pc, #676]	@ (8001430 <HAL_RCC_OscConfig+0x770>)
 800118a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800118e:	f003 0302 	and.w	r3, r3, #2
 8001192:	2b00      	cmp	r3, #0
 8001194:	d1ed      	bne.n	8001172 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f003 0304 	and.w	r3, r3, #4
 800119e:	2b00      	cmp	r3, #0
 80011a0:	f000 80bd 	beq.w	800131e <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011a4:	2300      	movs	r3, #0
 80011a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80011aa:	4ba1      	ldr	r3, [pc, #644]	@ (8001430 <HAL_RCC_OscConfig+0x770>)
 80011ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d10e      	bne.n	80011d4 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011b6:	4b9e      	ldr	r3, [pc, #632]	@ (8001430 <HAL_RCC_OscConfig+0x770>)
 80011b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ba:	4a9d      	ldr	r2, [pc, #628]	@ (8001430 <HAL_RCC_OscConfig+0x770>)
 80011bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80011c2:	4b9b      	ldr	r3, [pc, #620]	@ (8001430 <HAL_RCC_OscConfig+0x770>)
 80011c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80011ce:	2301      	movs	r3, #1
 80011d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011d4:	4b97      	ldr	r3, [pc, #604]	@ (8001434 <HAL_RCC_OscConfig+0x774>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d118      	bne.n	8001212 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80011e0:	4b94      	ldr	r3, [pc, #592]	@ (8001434 <HAL_RCC_OscConfig+0x774>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a93      	ldr	r2, [pc, #588]	@ (8001434 <HAL_RCC_OscConfig+0x774>)
 80011e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011ec:	f7ff fa64 	bl	80006b8 <HAL_GetTick>
 80011f0:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011f2:	e008      	b.n	8001206 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011f4:	f7ff fa60 	bl	80006b8 <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d901      	bls.n	8001206 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8001202:	2303      	movs	r3, #3
 8001204:	e1b5      	b.n	8001572 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001206:	4b8b      	ldr	r3, [pc, #556]	@ (8001434 <HAL_RCC_OscConfig+0x774>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800120e:	2b00      	cmp	r3, #0
 8001210:	d0f0      	beq.n	80011f4 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	2b00      	cmp	r3, #0
 800121c:	d02c      	beq.n	8001278 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 800121e:	4b84      	ldr	r3, [pc, #528]	@ (8001430 <HAL_RCC_OscConfig+0x770>)
 8001220:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001224:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001230:	497f      	ldr	r1, [pc, #508]	@ (8001430 <HAL_RCC_OscConfig+0x770>)
 8001232:	4313      	orrs	r3, r2
 8001234:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	f003 0304 	and.w	r3, r3, #4
 8001240:	2b00      	cmp	r3, #0
 8001242:	d010      	beq.n	8001266 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001244:	4b7a      	ldr	r3, [pc, #488]	@ (8001430 <HAL_RCC_OscConfig+0x770>)
 8001246:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800124a:	4a79      	ldr	r2, [pc, #484]	@ (8001430 <HAL_RCC_OscConfig+0x770>)
 800124c:	f043 0304 	orr.w	r3, r3, #4
 8001250:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001254:	4b76      	ldr	r3, [pc, #472]	@ (8001430 <HAL_RCC_OscConfig+0x770>)
 8001256:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800125a:	4a75      	ldr	r2, [pc, #468]	@ (8001430 <HAL_RCC_OscConfig+0x770>)
 800125c:	f043 0301 	orr.w	r3, r3, #1
 8001260:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001264:	e018      	b.n	8001298 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001266:	4b72      	ldr	r3, [pc, #456]	@ (8001430 <HAL_RCC_OscConfig+0x770>)
 8001268:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800126c:	4a70      	ldr	r2, [pc, #448]	@ (8001430 <HAL_RCC_OscConfig+0x770>)
 800126e:	f043 0301 	orr.w	r3, r3, #1
 8001272:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001276:	e00f      	b.n	8001298 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001278:	4b6d      	ldr	r3, [pc, #436]	@ (8001430 <HAL_RCC_OscConfig+0x770>)
 800127a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800127e:	4a6c      	ldr	r2, [pc, #432]	@ (8001430 <HAL_RCC_OscConfig+0x770>)
 8001280:	f023 0301 	bic.w	r3, r3, #1
 8001284:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001288:	4b69      	ldr	r3, [pc, #420]	@ (8001430 <HAL_RCC_OscConfig+0x770>)
 800128a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800128e:	4a68      	ldr	r2, [pc, #416]	@ (8001430 <HAL_RCC_OscConfig+0x770>)
 8001290:	f023 0304 	bic.w	r3, r3, #4
 8001294:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d016      	beq.n	80012ce <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012a0:	f7ff fa0a 	bl	80006b8 <HAL_GetTick>
 80012a4:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012a6:	e00a      	b.n	80012be <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012a8:	f7ff fa06 	bl	80006b8 <HAL_GetTick>
 80012ac:	4602      	mov	r2, r0
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d901      	bls.n	80012be <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 80012ba:	2303      	movs	r3, #3
 80012bc:	e159      	b.n	8001572 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012be:	4b5c      	ldr	r3, [pc, #368]	@ (8001430 <HAL_RCC_OscConfig+0x770>)
 80012c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80012c4:	f003 0302 	and.w	r3, r3, #2
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d0ed      	beq.n	80012a8 <HAL_RCC_OscConfig+0x5e8>
 80012cc:	e01d      	b.n	800130a <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012ce:	f7ff f9f3 	bl	80006b8 <HAL_GetTick>
 80012d2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012d4:	e00a      	b.n	80012ec <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012d6:	f7ff f9ef 	bl	80006b8 <HAL_GetTick>
 80012da:	4602      	mov	r2, r0
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d901      	bls.n	80012ec <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 80012e8:	2303      	movs	r3, #3
 80012ea:	e142      	b.n	8001572 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012ec:	4b50      	ldr	r3, [pc, #320]	@ (8001430 <HAL_RCC_OscConfig+0x770>)
 80012ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80012f2:	f003 0302 	and.w	r3, r3, #2
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d1ed      	bne.n	80012d6 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 80012fa:	4b4d      	ldr	r3, [pc, #308]	@ (8001430 <HAL_RCC_OscConfig+0x770>)
 80012fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001300:	4a4b      	ldr	r2, [pc, #300]	@ (8001430 <HAL_RCC_OscConfig+0x770>)
 8001302:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001306:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800130a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800130e:	2b01      	cmp	r3, #1
 8001310:	d105      	bne.n	800131e <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001312:	4b47      	ldr	r3, [pc, #284]	@ (8001430 <HAL_RCC_OscConfig+0x770>)
 8001314:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001316:	4a46      	ldr	r2, [pc, #280]	@ (8001430 <HAL_RCC_OscConfig+0x770>)
 8001318:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800131c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0320 	and.w	r3, r3, #32
 8001326:	2b00      	cmp	r3, #0
 8001328:	d03c      	beq.n	80013a4 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800132e:	2b00      	cmp	r3, #0
 8001330:	d01c      	beq.n	800136c <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001332:	4b3f      	ldr	r3, [pc, #252]	@ (8001430 <HAL_RCC_OscConfig+0x770>)
 8001334:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001338:	4a3d      	ldr	r2, [pc, #244]	@ (8001430 <HAL_RCC_OscConfig+0x770>)
 800133a:	f043 0301 	orr.w	r3, r3, #1
 800133e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001342:	f7ff f9b9 	bl	80006b8 <HAL_GetTick>
 8001346:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001348:	e008      	b.n	800135c <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800134a:	f7ff f9b5 	bl	80006b8 <HAL_GetTick>
 800134e:	4602      	mov	r2, r0
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	2b02      	cmp	r3, #2
 8001356:	d901      	bls.n	800135c <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8001358:	2303      	movs	r3, #3
 800135a:	e10a      	b.n	8001572 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800135c:	4b34      	ldr	r3, [pc, #208]	@ (8001430 <HAL_RCC_OscConfig+0x770>)
 800135e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	2b00      	cmp	r3, #0
 8001368:	d0ef      	beq.n	800134a <HAL_RCC_OscConfig+0x68a>
 800136a:	e01b      	b.n	80013a4 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800136c:	4b30      	ldr	r3, [pc, #192]	@ (8001430 <HAL_RCC_OscConfig+0x770>)
 800136e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001372:	4a2f      	ldr	r2, [pc, #188]	@ (8001430 <HAL_RCC_OscConfig+0x770>)
 8001374:	f023 0301 	bic.w	r3, r3, #1
 8001378:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800137c:	f7ff f99c 	bl	80006b8 <HAL_GetTick>
 8001380:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001382:	e008      	b.n	8001396 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001384:	f7ff f998 	bl	80006b8 <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b02      	cmp	r3, #2
 8001390:	d901      	bls.n	8001396 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e0ed      	b.n	8001572 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001396:	4b26      	ldr	r3, [pc, #152]	@ (8001430 <HAL_RCC_OscConfig+0x770>)
 8001398:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800139c:	f003 0302 	and.w	r3, r3, #2
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d1ef      	bne.n	8001384 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	f000 80e1 	beq.w	8001570 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	f040 80b5 	bne.w	8001522 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80013b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001430 <HAL_RCC_OscConfig+0x770>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	f003 0203 	and.w	r2, r3, #3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d124      	bne.n	8001416 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013d6:	3b01      	subs	r3, #1
 80013d8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80013da:	429a      	cmp	r2, r3
 80013dc:	d11b      	bne.n	8001416 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013e8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d113      	bne.n	8001416 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013f8:	085b      	lsrs	r3, r3, #1
 80013fa:	3b01      	subs	r3, #1
 80013fc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80013fe:	429a      	cmp	r2, r3
 8001400:	d109      	bne.n	8001416 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800140c:	085b      	lsrs	r3, r3, #1
 800140e:	3b01      	subs	r3, #1
 8001410:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001412:	429a      	cmp	r2, r3
 8001414:	d05f      	beq.n	80014d6 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001416:	6a3b      	ldr	r3, [r7, #32]
 8001418:	2b0c      	cmp	r3, #12
 800141a:	d05a      	beq.n	80014d2 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800141c:	4b04      	ldr	r3, [pc, #16]	@ (8001430 <HAL_RCC_OscConfig+0x770>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a03      	ldr	r2, [pc, #12]	@ (8001430 <HAL_RCC_OscConfig+0x770>)
 8001422:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001426:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001428:	f7ff f946 	bl	80006b8 <HAL_GetTick>
 800142c:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800142e:	e00c      	b.n	800144a <HAL_RCC_OscConfig+0x78a>
 8001430:	40021000 	.word	0x40021000
 8001434:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001438:	f7ff f93e 	bl	80006b8 <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b02      	cmp	r3, #2
 8001444:	d901      	bls.n	800144a <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e093      	b.n	8001572 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800144a:	4b4c      	ldr	r3, [pc, #304]	@ (800157c <HAL_RCC_OscConfig+0x8bc>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d1f0      	bne.n	8001438 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001456:	4b49      	ldr	r3, [pc, #292]	@ (800157c <HAL_RCC_OscConfig+0x8bc>)
 8001458:	68da      	ldr	r2, [r3, #12]
 800145a:	4b49      	ldr	r3, [pc, #292]	@ (8001580 <HAL_RCC_OscConfig+0x8c0>)
 800145c:	4013      	ands	r3, r2
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001466:	3a01      	subs	r2, #1
 8001468:	0112      	lsls	r2, r2, #4
 800146a:	4311      	orrs	r1, r2
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001470:	0212      	lsls	r2, r2, #8
 8001472:	4311      	orrs	r1, r2
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001478:	0852      	lsrs	r2, r2, #1
 800147a:	3a01      	subs	r2, #1
 800147c:	0552      	lsls	r2, r2, #21
 800147e:	4311      	orrs	r1, r2
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001484:	0852      	lsrs	r2, r2, #1
 8001486:	3a01      	subs	r2, #1
 8001488:	0652      	lsls	r2, r2, #25
 800148a:	430a      	orrs	r2, r1
 800148c:	493b      	ldr	r1, [pc, #236]	@ (800157c <HAL_RCC_OscConfig+0x8bc>)
 800148e:	4313      	orrs	r3, r2
 8001490:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001492:	4b3a      	ldr	r3, [pc, #232]	@ (800157c <HAL_RCC_OscConfig+0x8bc>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a39      	ldr	r2, [pc, #228]	@ (800157c <HAL_RCC_OscConfig+0x8bc>)
 8001498:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800149c:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800149e:	4b37      	ldr	r3, [pc, #220]	@ (800157c <HAL_RCC_OscConfig+0x8bc>)
 80014a0:	68db      	ldr	r3, [r3, #12]
 80014a2:	4a36      	ldr	r2, [pc, #216]	@ (800157c <HAL_RCC_OscConfig+0x8bc>)
 80014a4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80014a8:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80014aa:	f7ff f905 	bl	80006b8 <HAL_GetTick>
 80014ae:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014b0:	e008      	b.n	80014c4 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014b2:	f7ff f901 	bl	80006b8 <HAL_GetTick>
 80014b6:	4602      	mov	r2, r0
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d901      	bls.n	80014c4 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	e056      	b.n	8001572 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014c4:	4b2d      	ldr	r3, [pc, #180]	@ (800157c <HAL_RCC_OscConfig+0x8bc>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d0f0      	beq.n	80014b2 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80014d0:	e04e      	b.n	8001570 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e04d      	b.n	8001572 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014d6:	4b29      	ldr	r3, [pc, #164]	@ (800157c <HAL_RCC_OscConfig+0x8bc>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d146      	bne.n	8001570 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80014e2:	4b26      	ldr	r3, [pc, #152]	@ (800157c <HAL_RCC_OscConfig+0x8bc>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a25      	ldr	r2, [pc, #148]	@ (800157c <HAL_RCC_OscConfig+0x8bc>)
 80014e8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80014ec:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80014ee:	4b23      	ldr	r3, [pc, #140]	@ (800157c <HAL_RCC_OscConfig+0x8bc>)
 80014f0:	68db      	ldr	r3, [r3, #12]
 80014f2:	4a22      	ldr	r2, [pc, #136]	@ (800157c <HAL_RCC_OscConfig+0x8bc>)
 80014f4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80014f8:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80014fa:	f7ff f8dd 	bl	80006b8 <HAL_GetTick>
 80014fe:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001500:	e008      	b.n	8001514 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001502:	f7ff f8d9 	bl	80006b8 <HAL_GetTick>
 8001506:	4602      	mov	r2, r0
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2b02      	cmp	r3, #2
 800150e:	d901      	bls.n	8001514 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e02e      	b.n	8001572 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001514:	4b19      	ldr	r3, [pc, #100]	@ (800157c <HAL_RCC_OscConfig+0x8bc>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d0f0      	beq.n	8001502 <HAL_RCC_OscConfig+0x842>
 8001520:	e026      	b.n	8001570 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001522:	6a3b      	ldr	r3, [r7, #32]
 8001524:	2b0c      	cmp	r3, #12
 8001526:	d021      	beq.n	800156c <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001528:	4b14      	ldr	r3, [pc, #80]	@ (800157c <HAL_RCC_OscConfig+0x8bc>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a13      	ldr	r2, [pc, #76]	@ (800157c <HAL_RCC_OscConfig+0x8bc>)
 800152e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001532:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001534:	f7ff f8c0 	bl	80006b8 <HAL_GetTick>
 8001538:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800153a:	e008      	b.n	800154e <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800153c:	f7ff f8bc 	bl	80006b8 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e011      	b.n	8001572 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800154e:	4b0b      	ldr	r3, [pc, #44]	@ (800157c <HAL_RCC_OscConfig+0x8bc>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d1f0      	bne.n	800153c <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 800155a:	4b08      	ldr	r3, [pc, #32]	@ (800157c <HAL_RCC_OscConfig+0x8bc>)
 800155c:	68db      	ldr	r3, [r3, #12]
 800155e:	4a07      	ldr	r2, [pc, #28]	@ (800157c <HAL_RCC_OscConfig+0x8bc>)
 8001560:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8001564:	f023 0303 	bic.w	r3, r3, #3
 8001568:	60d3      	str	r3, [r2, #12]
 800156a:	e001      	b.n	8001570 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e000      	b.n	8001572 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	3728      	adds	r7, #40	@ 0x28
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40021000 	.word	0x40021000
 8001580:	f99f808c 	.word	0xf99f808c

08001584 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d101      	bne.n	8001598 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e0e7      	b.n	8001768 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001598:	4b75      	ldr	r3, [pc, #468]	@ (8001770 <HAL_RCC_ClockConfig+0x1ec>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0307 	and.w	r3, r3, #7
 80015a0:	683a      	ldr	r2, [r7, #0]
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d910      	bls.n	80015c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015a6:	4b72      	ldr	r3, [pc, #456]	@ (8001770 <HAL_RCC_ClockConfig+0x1ec>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f023 0207 	bic.w	r2, r3, #7
 80015ae:	4970      	ldr	r1, [pc, #448]	@ (8001770 <HAL_RCC_ClockConfig+0x1ec>)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015b6:	4b6e      	ldr	r3, [pc, #440]	@ (8001770 <HAL_RCC_ClockConfig+0x1ec>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0307 	and.w	r3, r3, #7
 80015be:	683a      	ldr	r2, [r7, #0]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d001      	beq.n	80015c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e0cf      	b.n	8001768 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0302 	and.w	r3, r3, #2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d010      	beq.n	80015f6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689a      	ldr	r2, [r3, #8]
 80015d8:	4b66      	ldr	r3, [pc, #408]	@ (8001774 <HAL_RCC_ClockConfig+0x1f0>)
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d908      	bls.n	80015f6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015e4:	4b63      	ldr	r3, [pc, #396]	@ (8001774 <HAL_RCC_ClockConfig+0x1f0>)
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	4960      	ldr	r1, [pc, #384]	@ (8001774 <HAL_RCC_ClockConfig+0x1f0>)
 80015f2:	4313      	orrs	r3, r2
 80015f4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d04c      	beq.n	800169c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	2b03      	cmp	r3, #3
 8001608:	d107      	bne.n	800161a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800160a:	4b5a      	ldr	r3, [pc, #360]	@ (8001774 <HAL_RCC_ClockConfig+0x1f0>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d121      	bne.n	800165a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e0a6      	b.n	8001768 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	2b02      	cmp	r3, #2
 8001620:	d107      	bne.n	8001632 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001622:	4b54      	ldr	r3, [pc, #336]	@ (8001774 <HAL_RCC_ClockConfig+0x1f0>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d115      	bne.n	800165a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e09a      	b.n	8001768 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d107      	bne.n	800164a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800163a:	4b4e      	ldr	r3, [pc, #312]	@ (8001774 <HAL_RCC_ClockConfig+0x1f0>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d109      	bne.n	800165a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e08e      	b.n	8001768 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800164a:	4b4a      	ldr	r3, [pc, #296]	@ (8001774 <HAL_RCC_ClockConfig+0x1f0>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001652:	2b00      	cmp	r3, #0
 8001654:	d101      	bne.n	800165a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e086      	b.n	8001768 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800165a:	4b46      	ldr	r3, [pc, #280]	@ (8001774 <HAL_RCC_ClockConfig+0x1f0>)
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	f023 0203 	bic.w	r2, r3, #3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	4943      	ldr	r1, [pc, #268]	@ (8001774 <HAL_RCC_ClockConfig+0x1f0>)
 8001668:	4313      	orrs	r3, r2
 800166a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800166c:	f7ff f824 	bl	80006b8 <HAL_GetTick>
 8001670:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001672:	e00a      	b.n	800168a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001674:	f7ff f820 	bl	80006b8 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001682:	4293      	cmp	r3, r2
 8001684:	d901      	bls.n	800168a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e06e      	b.n	8001768 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800168a:	4b3a      	ldr	r3, [pc, #232]	@ (8001774 <HAL_RCC_ClockConfig+0x1f0>)
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f003 020c 	and.w	r2, r3, #12
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	429a      	cmp	r2, r3
 800169a:	d1eb      	bne.n	8001674 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d010      	beq.n	80016ca <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689a      	ldr	r2, [r3, #8]
 80016ac:	4b31      	ldr	r3, [pc, #196]	@ (8001774 <HAL_RCC_ClockConfig+0x1f0>)
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d208      	bcs.n	80016ca <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016b8:	4b2e      	ldr	r3, [pc, #184]	@ (8001774 <HAL_RCC_ClockConfig+0x1f0>)
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	492b      	ldr	r1, [pc, #172]	@ (8001774 <HAL_RCC_ClockConfig+0x1f0>)
 80016c6:	4313      	orrs	r3, r2
 80016c8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016ca:	4b29      	ldr	r3, [pc, #164]	@ (8001770 <HAL_RCC_ClockConfig+0x1ec>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0307 	and.w	r3, r3, #7
 80016d2:	683a      	ldr	r2, [r7, #0]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d210      	bcs.n	80016fa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016d8:	4b25      	ldr	r3, [pc, #148]	@ (8001770 <HAL_RCC_ClockConfig+0x1ec>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f023 0207 	bic.w	r2, r3, #7
 80016e0:	4923      	ldr	r1, [pc, #140]	@ (8001770 <HAL_RCC_ClockConfig+0x1ec>)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016e8:	4b21      	ldr	r3, [pc, #132]	@ (8001770 <HAL_RCC_ClockConfig+0x1ec>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0307 	and.w	r3, r3, #7
 80016f0:	683a      	ldr	r2, [r7, #0]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d001      	beq.n	80016fa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e036      	b.n	8001768 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0304 	and.w	r3, r3, #4
 8001702:	2b00      	cmp	r3, #0
 8001704:	d008      	beq.n	8001718 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001706:	4b1b      	ldr	r3, [pc, #108]	@ (8001774 <HAL_RCC_ClockConfig+0x1f0>)
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	4918      	ldr	r1, [pc, #96]	@ (8001774 <HAL_RCC_ClockConfig+0x1f0>)
 8001714:	4313      	orrs	r3, r2
 8001716:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0308 	and.w	r3, r3, #8
 8001720:	2b00      	cmp	r3, #0
 8001722:	d009      	beq.n	8001738 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001724:	4b13      	ldr	r3, [pc, #76]	@ (8001774 <HAL_RCC_ClockConfig+0x1f0>)
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	691b      	ldr	r3, [r3, #16]
 8001730:	00db      	lsls	r3, r3, #3
 8001732:	4910      	ldr	r1, [pc, #64]	@ (8001774 <HAL_RCC_ClockConfig+0x1f0>)
 8001734:	4313      	orrs	r3, r2
 8001736:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001738:	f000 f824 	bl	8001784 <HAL_RCC_GetSysClockFreq>
 800173c:	4602      	mov	r2, r0
 800173e:	4b0d      	ldr	r3, [pc, #52]	@ (8001774 <HAL_RCC_ClockConfig+0x1f0>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	091b      	lsrs	r3, r3, #4
 8001744:	f003 030f 	and.w	r3, r3, #15
 8001748:	490b      	ldr	r1, [pc, #44]	@ (8001778 <HAL_RCC_ClockConfig+0x1f4>)
 800174a:	5ccb      	ldrb	r3, [r1, r3]
 800174c:	f003 031f 	and.w	r3, r3, #31
 8001750:	fa22 f303 	lsr.w	r3, r2, r3
 8001754:	4a09      	ldr	r2, [pc, #36]	@ (800177c <HAL_RCC_ClockConfig+0x1f8>)
 8001756:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001758:	4b09      	ldr	r3, [pc, #36]	@ (8001780 <HAL_RCC_ClockConfig+0x1fc>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4618      	mov	r0, r3
 800175e:	f7fe ff5b 	bl	8000618 <HAL_InitTick>
 8001762:	4603      	mov	r3, r0
 8001764:	72fb      	strb	r3, [r7, #11]

  return status;
 8001766:	7afb      	ldrb	r3, [r7, #11]
}
 8001768:	4618      	mov	r0, r3
 800176a:	3710      	adds	r7, #16
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	40022000 	.word	0x40022000
 8001774:	40021000 	.word	0x40021000
 8001778:	080019ec 	.word	0x080019ec
 800177c:	20000000 	.word	0x20000000
 8001780:	20000004 	.word	0x20000004

08001784 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001784:	b480      	push	{r7}
 8001786:	b089      	sub	sp, #36	@ 0x24
 8001788:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800178a:	2300      	movs	r3, #0
 800178c:	61fb      	str	r3, [r7, #28]
 800178e:	2300      	movs	r3, #0
 8001790:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001792:	4b3e      	ldr	r3, [pc, #248]	@ (800188c <HAL_RCC_GetSysClockFreq+0x108>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f003 030c 	and.w	r3, r3, #12
 800179a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800179c:	4b3b      	ldr	r3, [pc, #236]	@ (800188c <HAL_RCC_GetSysClockFreq+0x108>)
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	f003 0303 	and.w	r3, r3, #3
 80017a4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d005      	beq.n	80017b8 <HAL_RCC_GetSysClockFreq+0x34>
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	2b0c      	cmp	r3, #12
 80017b0:	d121      	bne.n	80017f6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d11e      	bne.n	80017f6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80017b8:	4b34      	ldr	r3, [pc, #208]	@ (800188c <HAL_RCC_GetSysClockFreq+0x108>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0308 	and.w	r3, r3, #8
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d107      	bne.n	80017d4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80017c4:	4b31      	ldr	r3, [pc, #196]	@ (800188c <HAL_RCC_GetSysClockFreq+0x108>)
 80017c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017ca:	0a1b      	lsrs	r3, r3, #8
 80017cc:	f003 030f 	and.w	r3, r3, #15
 80017d0:	61fb      	str	r3, [r7, #28]
 80017d2:	e005      	b.n	80017e0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80017d4:	4b2d      	ldr	r3, [pc, #180]	@ (800188c <HAL_RCC_GetSysClockFreq+0x108>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	091b      	lsrs	r3, r3, #4
 80017da:	f003 030f 	and.w	r3, r3, #15
 80017de:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80017e0:	4a2b      	ldr	r2, [pc, #172]	@ (8001890 <HAL_RCC_GetSysClockFreq+0x10c>)
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017e8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d10d      	bne.n	800180c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017f4:	e00a      	b.n	800180c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	2b04      	cmp	r3, #4
 80017fa:	d102      	bne.n	8001802 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80017fc:	4b25      	ldr	r3, [pc, #148]	@ (8001894 <HAL_RCC_GetSysClockFreq+0x110>)
 80017fe:	61bb      	str	r3, [r7, #24]
 8001800:	e004      	b.n	800180c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	2b08      	cmp	r3, #8
 8001806:	d101      	bne.n	800180c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001808:	4b23      	ldr	r3, [pc, #140]	@ (8001898 <HAL_RCC_GetSysClockFreq+0x114>)
 800180a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	2b0c      	cmp	r3, #12
 8001810:	d134      	bne.n	800187c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001812:	4b1e      	ldr	r3, [pc, #120]	@ (800188c <HAL_RCC_GetSysClockFreq+0x108>)
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	f003 0303 	and.w	r3, r3, #3
 800181a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	2b02      	cmp	r3, #2
 8001820:	d003      	beq.n	800182a <HAL_RCC_GetSysClockFreq+0xa6>
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	2b03      	cmp	r3, #3
 8001826:	d003      	beq.n	8001830 <HAL_RCC_GetSysClockFreq+0xac>
 8001828:	e005      	b.n	8001836 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800182a:	4b1a      	ldr	r3, [pc, #104]	@ (8001894 <HAL_RCC_GetSysClockFreq+0x110>)
 800182c:	617b      	str	r3, [r7, #20]
      break;
 800182e:	e005      	b.n	800183c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001830:	4b19      	ldr	r3, [pc, #100]	@ (8001898 <HAL_RCC_GetSysClockFreq+0x114>)
 8001832:	617b      	str	r3, [r7, #20]
      break;
 8001834:	e002      	b.n	800183c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	617b      	str	r3, [r7, #20]
      break;
 800183a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800183c:	4b13      	ldr	r3, [pc, #76]	@ (800188c <HAL_RCC_GetSysClockFreq+0x108>)
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	091b      	lsrs	r3, r3, #4
 8001842:	f003 0307 	and.w	r3, r3, #7
 8001846:	3301      	adds	r3, #1
 8001848:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800184a:	4b10      	ldr	r3, [pc, #64]	@ (800188c <HAL_RCC_GetSysClockFreq+0x108>)
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	0a1b      	lsrs	r3, r3, #8
 8001850:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001854:	697a      	ldr	r2, [r7, #20]
 8001856:	fb03 f202 	mul.w	r2, r3, r2
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001860:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001862:	4b0a      	ldr	r3, [pc, #40]	@ (800188c <HAL_RCC_GetSysClockFreq+0x108>)
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	0e5b      	lsrs	r3, r3, #25
 8001868:	f003 0303 	and.w	r3, r3, #3
 800186c:	3301      	adds	r3, #1
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001872:	697a      	ldr	r2, [r7, #20]
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	fbb2 f3f3 	udiv	r3, r2, r3
 800187a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800187c:	69bb      	ldr	r3, [r7, #24]
}
 800187e:	4618      	mov	r0, r3
 8001880:	3724      	adds	r7, #36	@ 0x24
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	40021000 	.word	0x40021000
 8001890:	080019fc 	.word	0x080019fc
 8001894:	00f42400 	.word	0x00f42400
 8001898:	007a1200 	.word	0x007a1200

0800189c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80018a4:	2300      	movs	r3, #0
 80018a6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80018a8:	4b2a      	ldr	r3, [pc, #168]	@ (8001954 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d003      	beq.n	80018bc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80018b4:	f7ff f9a0 	bl	8000bf8 <HAL_PWREx_GetVoltageRange>
 80018b8:	6178      	str	r0, [r7, #20]
 80018ba:	e014      	b.n	80018e6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80018bc:	4b25      	ldr	r3, [pc, #148]	@ (8001954 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018c0:	4a24      	ldr	r2, [pc, #144]	@ (8001954 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80018c8:	4b22      	ldr	r3, [pc, #136]	@ (8001954 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80018d4:	f7ff f990 	bl	8000bf8 <HAL_PWREx_GetVoltageRange>
 80018d8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80018da:	4b1e      	ldr	r3, [pc, #120]	@ (8001954 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018de:	4a1d      	ldr	r2, [pc, #116]	@ (8001954 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80018e4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80018ec:	d10b      	bne.n	8001906 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2b80      	cmp	r3, #128	@ 0x80
 80018f2:	d919      	bls.n	8001928 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2ba0      	cmp	r3, #160	@ 0xa0
 80018f8:	d902      	bls.n	8001900 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80018fa:	2302      	movs	r3, #2
 80018fc:	613b      	str	r3, [r7, #16]
 80018fe:	e013      	b.n	8001928 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001900:	2301      	movs	r3, #1
 8001902:	613b      	str	r3, [r7, #16]
 8001904:	e010      	b.n	8001928 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2b80      	cmp	r3, #128	@ 0x80
 800190a:	d902      	bls.n	8001912 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800190c:	2303      	movs	r3, #3
 800190e:	613b      	str	r3, [r7, #16]
 8001910:	e00a      	b.n	8001928 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2b80      	cmp	r3, #128	@ 0x80
 8001916:	d102      	bne.n	800191e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001918:	2302      	movs	r3, #2
 800191a:	613b      	str	r3, [r7, #16]
 800191c:	e004      	b.n	8001928 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2b70      	cmp	r3, #112	@ 0x70
 8001922:	d101      	bne.n	8001928 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001924:	2301      	movs	r3, #1
 8001926:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001928:	4b0b      	ldr	r3, [pc, #44]	@ (8001958 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f023 0207 	bic.w	r2, r3, #7
 8001930:	4909      	ldr	r1, [pc, #36]	@ (8001958 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	4313      	orrs	r3, r2
 8001936:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001938:	4b07      	ldr	r3, [pc, #28]	@ (8001958 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0307 	and.w	r3, r3, #7
 8001940:	693a      	ldr	r2, [r7, #16]
 8001942:	429a      	cmp	r2, r3
 8001944:	d001      	beq.n	800194a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e000      	b.n	800194c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800194a:	2300      	movs	r3, #0
}
 800194c:	4618      	mov	r0, r3
 800194e:	3718      	adds	r7, #24
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40021000 	.word	0x40021000
 8001958:	40022000 	.word	0x40022000

0800195c <memset>:
 800195c:	4402      	add	r2, r0
 800195e:	4603      	mov	r3, r0
 8001960:	4293      	cmp	r3, r2
 8001962:	d100      	bne.n	8001966 <memset+0xa>
 8001964:	4770      	bx	lr
 8001966:	f803 1b01 	strb.w	r1, [r3], #1
 800196a:	e7f9      	b.n	8001960 <memset+0x4>

0800196c <__libc_init_array>:
 800196c:	b570      	push	{r4, r5, r6, lr}
 800196e:	4d0d      	ldr	r5, [pc, #52]	@ (80019a4 <__libc_init_array+0x38>)
 8001970:	4c0d      	ldr	r4, [pc, #52]	@ (80019a8 <__libc_init_array+0x3c>)
 8001972:	1b64      	subs	r4, r4, r5
 8001974:	10a4      	asrs	r4, r4, #2
 8001976:	2600      	movs	r6, #0
 8001978:	42a6      	cmp	r6, r4
 800197a:	d109      	bne.n	8001990 <__libc_init_array+0x24>
 800197c:	4d0b      	ldr	r5, [pc, #44]	@ (80019ac <__libc_init_array+0x40>)
 800197e:	4c0c      	ldr	r4, [pc, #48]	@ (80019b0 <__libc_init_array+0x44>)
 8001980:	f000 f818 	bl	80019b4 <_init>
 8001984:	1b64      	subs	r4, r4, r5
 8001986:	10a4      	asrs	r4, r4, #2
 8001988:	2600      	movs	r6, #0
 800198a:	42a6      	cmp	r6, r4
 800198c:	d105      	bne.n	800199a <__libc_init_array+0x2e>
 800198e:	bd70      	pop	{r4, r5, r6, pc}
 8001990:	f855 3b04 	ldr.w	r3, [r5], #4
 8001994:	4798      	blx	r3
 8001996:	3601      	adds	r6, #1
 8001998:	e7ee      	b.n	8001978 <__libc_init_array+0xc>
 800199a:	f855 3b04 	ldr.w	r3, [r5], #4
 800199e:	4798      	blx	r3
 80019a0:	3601      	adds	r6, #1
 80019a2:	e7f2      	b.n	800198a <__libc_init_array+0x1e>
 80019a4:	08001a2c 	.word	0x08001a2c
 80019a8:	08001a2c 	.word	0x08001a2c
 80019ac:	08001a2c 	.word	0x08001a2c
 80019b0:	08001a30 	.word	0x08001a30

080019b4 <_init>:
 80019b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019b6:	bf00      	nop
 80019b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019ba:	bc08      	pop	{r3}
 80019bc:	469e      	mov	lr, r3
 80019be:	4770      	bx	lr

080019c0 <_fini>:
 80019c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019c2:	bf00      	nop
 80019c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019c6:	bc08      	pop	{r3}
 80019c8:	469e      	mov	lr, r3
 80019ca:	4770      	bx	lr
