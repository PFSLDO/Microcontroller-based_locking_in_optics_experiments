/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "stdio.h"
#include "vector"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;

I2C_HandleTypeDef hi2c1;

TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */
int resolution = 232;               // Inicializa a amplitude do sinal triangular como sendo ~ 3V, armazena o nível de amplitude
int resolutionmax = 255;           // Resolução de 8 bits
int delayUs = 20;                   // Delay em microssegundos entre as amostras
int numReadings = 10;          // Número de leituras para calcular a média
const float referenceVoltage = 3.3; // Tensão de referência (em volts)
unsigned long cycleStartTime = 0;   // Armazena o tempo de início do ciclo
unsigned long cycleEndTime = 0;     // Armazena o tempo de fim do ciclo
int frequency = 10;               // Inicializa a frequência do sinal em 10Hz, armazena a frequência
float amp_step = referenceVoltage/resolutionmax; // Dado necessário para o cálculo da mostra da amplitude
int step = 1;            // Passo para a rapidez do travamento
int averageAdcValue = 0; // Armazena o valor lido no ADC
int lastAdcValue = 0;    // Armazena o último valor lido no ADC
float amp = amp_step*resolution; //Calcula a amplitude
int direction = 1; // Variável para direcionar a aproximação do pico
float  value = 0;    // Variável de saída para o DAC
unsigned long delayInterrupt = 250;
double waiting_time = 1000000/(frequency*resolution*2); //Calcula o periodo esperado dado a frequência escolhida em microsegundos

const int increasePin = 4;   // GPIO4 para aumentar valores
const int decreasePin = 17;  // GPIO17 para diminuir valores
const int modeSwitchPin = 2; // GPIO2 para alternar entre varredura e travamento

bool optionButton = false;
bool increaseButton = false;
bool decreaseButton = false;
bool modeButton = false;

enum ModeSweep {
    MODE_SWEEP_AMPLITUDE,
    MODE_SWEEP_FREQUENCY
};
ModeSweep currentModeSweep = MODE_SWEEP_AMPLITUDE;       // e inicializa na amplitude

enum ModeLock {
    LOCK_STEP,
    LOCK_PEAK,
    LOCK_AMOSTRAS
};
ModeLock currentModeLock = LOCK_STEP;             // e inicializa no step

enum SystemMode {
    SYSTEM_MODE_SWEEP,
    SYSTEM_MODE_LOCK
};
SystemMode currentSystemMode = SYSTEM_MODE_SWEEP;    // e inicializa na varredura

int targetValue = 0; // Armazena o valor do  DAC que representa o inicio do pico de interesse
const int peakThreshold = 40; // Limiar para detectar picos = 50mV
const int resetThreshold = 20; // Limiar para redefinir a detecção de picos = 25mV
bool detectingPeak = false;     // Flag para indicação de detecção de picos
std::vector<unsigned int> peaks_place;  // Vetor para armazenar o valor de pzt respectivos para os picos
int currentPeakIndex = 0;       // Índice do pico atual

void SystemClock_Config();
void updateSweepDisplay();
void updateLockDisplay();
void delayMicroseconds(uint32_t us);
uint32_t micros();

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
static void MX_TIM1_Init(void);
static void MX_TIM2_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_ADC1_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_I2C1_Init();
  MX_TIM1_Init();
  MX_TIM2_Init();
  HAL_TIM_Base_Start(&htim2);
  MX_USART1_UART_Init();
  MX_ADC1_Init();
  HAL_ADC_Start(&hadc1);
  /* USER CODE BEGIN 2 */

    // configura o display oled
  lcd_init();
  lcd_clear();
  lcd_set_cursor(0, 3);
  lcd_print("Travamento");
  lcd_set_cursor(1, 0);
  lcd_print("Cavidade Triang");
  HAL_Delay(2000);
  lcd_clear();
  lcd_set_cursor(0, 0);
  lcd_print("Sweep");
  lcd_set_cursor(0, 6);
  lcd_print("Amp:");
  lcd_print_double(amp);
  lcd_print("V");
  lcd_set_cursor(1, 6);
  lcd_print("Freq:");
  lcd_print_double(frequency);
  lcd_print("Hz");
  lcd_set_cursor(0,5);
  lcd_print(">");

    // Inicializa o valor do DAC
    sendI2CData(DAC_ADRESS, 0);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (currentSystemMode == SYSTEM_MODE_SWEEP) {
	      cycleStartTime = micros(); //Atualiza o valor de início da próxima iteração
	      value += direction;
	      if (value >= resolution) {
	        value = resolution;
	        direction = -1;
	      } else if (value <= 0) {
	        value = 0;
	        direction = 1;
	      }
	      int averageAdcValue = 0;

	      HAL_ADC_Start(&hadc1);
	      HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
	      averageAdcValue = HAL_ADC_GetValue(&hadc1);  // valor entre 0 e 4095 (12 bits)
	      HAL_ADC_Stop(&hadc1);

	      // Detecção de picos (apenas quando a varredura está em direção positiva)
	      if (direction == 1) {
	        if (averageAdcValue > peakThreshold) {
	          if(detectingPeak){
	            peaks_place.pop_back();
	          }
	          peaks_place.push_back(value);
	          detectingPeak = true;
	        }
	      }
	      if (detectingPeak && averageAdcValue < resetThreshold) {
	        detectingPeak = false;
	      }

	      //Atualizações do display após interrupções:
	      if(increaseButton == true) {
	        increaseButton = false;
	        updateSweepDisplay();
	        //display.display();
	      }
	      if(decreaseButton == true) {
	        decreaseButton = false;
	        updateSweepDisplay();
	      }
	        //display.display();}
	      if(optionButton == true) {
	        optionButton = false;
	        updateSweepDisplay();
	        //display.display();
	      }
	      if(modeButton == true) {
	        modeButton = false;
	        switch (currentSystemMode) {
	        	case SYSTEM_MODE_SWEEP:
	        		updateSweepDisplay();
	          //display.display();
	        	  break;
	        	case SYSTEM_MODE_LOCK:
	        		updateLockDisplay();
	          	  //display.display();
	        	break;
	      	  }
	      }
	      cycleEndTime = micros(); // Verifica o tempo que demorou nessa iteração

	      while(cycleEndTime - cycleStartTime < waiting_time) { //Verifica se esse período de nivel ja ocorreu, se não ele continua preso no looping até dar o tempo
	        cycleEndTime = micros();
	      }

	      sendI2CData(DAC_ADRESS, value);

	    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	    } else if (currentSystemMode == SYSTEM_MODE_LOCK) {
	      //Calcula o novo valor a ser passado para o PZT
	      value += direction*step;
	      sendI2CData(DAC_ADRESS, value);

	      //Verifica a resposta do sistema, fazendo uma média na leitura para filtrar o ruído
	      long adcSum = 0;
	      for (int i = 0; i < numReadings; i++) {
		      HAL_ADC_Start(&hadc1);
		      HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
		      adcSum += HAL_ADC_GetValue(&hadc1);  // valor entre 0 e 4095 (12 bits)
		      HAL_ADC_Stop(&hadc1);

	        delayMicroseconds(delayUs);  // Pequeno delay entre leituras para evitar leituras muito rápidas
	      }
	      int averageAdcValue = adcSum / numReadings;

	      // Executa a comparação e ajuste de direção caso necessário
	      if (averageAdcValue > lastAdcValue) {
	        direction = direction;
	      } else if ( averageAdcValue < lastAdcValue) {
	        direction = -direction;
	      }

	      lastAdcValue = averageAdcValue; // Atualiza a variável de última leitura do ADC

	      //Atualizações do display após interrupções:
	      if(increaseButton == true) {
	        increaseButton = false;
	        updateLockDisplay();
	        //display.display();
	      }
	      if(decreaseButton == true) {
	        decreaseButton = false;
	        updateLockDisplay();
	        //display.display();
	      }
	      if(optionButton == true) {
	        optionButton = false;
	        updateLockDisplay();
	        //display.display();
	      }
	      if(modeButton == true) {
	        modeButton = false;
	        switch (currentSystemMode) {
	        case SYSTEM_MODE_SWEEP:
	        	updateSweepDisplay();
	          //display.display();
	        break;
	        case SYSTEM_MODE_LOCK:
	        	updateLockDisplay();
	          //display.display();
	        break;
	        }

	      }
	    }
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.NbrOfConversion = 1;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.DMAContinuousRequests = DISABLE;
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc1.Init.OversamplingMode = DISABLE;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.Timing = 0x00100D14;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 71;     // (72 MHz / 1 MHz) - 1 → 1 tick = 1 µs
  htim1.Init.Period = 0xFFFF;    // Máximo valor para 16 bits, overflow em ~65 ms
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
  sSlaveConfig.TriggerFilter = 0;
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init()
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
    htim2.Init.Prescaler = (SystemCoreClock / 1000000) - 1;                     // 80 MHz / (79 + 1) = 1 MHz → 1 µs por tick
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
    htim2.Init.Period = 0xFFFFFFFF;                 // 32 bits → overflow só após ~1h
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
    HAL_TIM_Base_Init(&htim2);
    HAL_TIM_Base_Start(&htim2);
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
      {
        Error_Handler();
      }

      sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
      if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
      {
        Error_Handler();
      }

      if (HAL_TIM_Base_Start(&htim2) != HAL_OK)
      {
        Error_Handler();
      }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : Decrease_BTN_Pin Increase_BTN_Pin */
  GPIO_InitStruct.Pin = Decrease_BTN_Pin|Increase_BTN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PA2 PA3 PA4 PA5
                           PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : Mode_BTN_Pin Select_BTN_Pin */
  GPIO_InitStruct.Pin = Mode_BTN_Pin|Select_BTN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
uint32_t micros() {
    return __HAL_TIM_GET_COUNTER(&htim2);
}

// Função para gerar o pulso de habilitação
void lcd_enable() {
    HAL_GPIO_WritePin(GPIOA, LCD_E_PIN, GPIO_PIN_SET);
    delayMicroseconds(10);  // Delay ajustado
    HAL_GPIO_WritePin(GPIOA, LCD_E_PIN, GPIO_PIN_RESET);
    delayMicroseconds(10);  // Delay ajustado
}

// Função interna para enviar um byte (comando ou dado)
void lcd_send(uint8_t data) {
    // Enviar nibble alto
    HAL_GPIO_WritePin(GPIOA, LCD_D7_PIN, (GPIO_PinState)((data >> 4) & 0x01));
    HAL_GPIO_WritePin(GPIOA, LCD_D6_PIN, (GPIO_PinState)((data >> 5) & 0x01));
    HAL_GPIO_WritePin(GPIOA, LCD_D5_PIN, (GPIO_PinState)((data >> 6) & 0x01));
    HAL_GPIO_WritePin(GPIOA, LCD_D4_PIN, (GPIO_PinState)((data >> 7) & 0x01));
    lcd_enable();

    // Enviar nibble baixo
    HAL_GPIO_WritePin(GPIOA, LCD_D7_PIN, (GPIO_PinState)((data >> 0) & 0x01));
    HAL_GPIO_WritePin(GPIOA, LCD_D6_PIN, (GPIO_PinState)((data >> 1) & 0x01));
    HAL_GPIO_WritePin(GPIOA, LCD_D5_PIN, (GPIO_PinState)((data >> 2) & 0x01));
    HAL_GPIO_WritePin(GPIOA, LCD_D4_PIN, (GPIO_PinState)((data >> 3) & 0x01));
    lcd_enable();
}

void lcd_send_command(uint8_t cmd) {
    HAL_GPIO_WritePin(GPIOA, LCD_RS_PIN, GPIO_PIN_RESET);
    lcd_send(cmd);
    HAL_Delay(2);  // Delay adicional
}

void lcd_send_data(uint8_t data) {
    HAL_GPIO_WritePin(GPIOA, LCD_RS_PIN, GPIO_PIN_SET);
    lcd_send(data);
    HAL_Delay(2);  // Delay adicional
}

// Inicialização do LCD
void lcd_init() {
    HAL_Delay(50);  // Esperar mais tempo após o boot

    lcd_send_command(0x03);
    HAL_Delay(5);
    lcd_send_command(0x03);
    HAL_Delay(5);
    lcd_send_command(0x03);
    HAL_Delay(5);
    lcd_send_command(0x02);  // Modo 4 bits
    HAL_Delay(5);

    lcd_send_command(LCD_FUNCTION_SET | 0x08);
    lcd_send_command(LCD_DISPLAY_CONTROL | LCD_DISPLAY_ON | LCD_CURSOR_OFF | LCD_BLINK_OFF);
    lcd_send_command(LCD_CLEAR_DISPLAY);
    HAL_Delay(2);
    lcd_send_command(LCD_ENTRY_MODE_SET | LCD_ENTRY_LEFT);
}

// Limpa o display
void lcd_clear(void) {
    lcd_send_command(LCD_CLEAR_DISPLAY);
    HAL_Delay(2);
}

// Define a posição do cursor
void lcd_set_cursor(uint8_t row, uint8_t col) {
    uint8_t address = (row == 0) ? 0x00 : 0x40;
    address += col;
    lcd_send_command(LCD_SET_DDRAM_ADDR | address);
}

// Escreve uma string no LCD
void lcd_print(const char *str) {
    while (*str) {
        lcd_send_data(*str++);
    }
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
	switch (GPIO_Pin) {
	case Decrease_BTN_Pin:
		handleDecreaseButton();
		break;
	case Increase_BTN_Pin:
		handleIncreaseButton();
		break;
	case Select_BTN_Pin:
		handleSelectButton();
		break;
	case Mode_BTN_Pin:
		handleModeButton();
		break;
	default:
		break;
	}
}

void handleSelectButton() {
	static unsigned long lastInterruptTime = 0;
	  unsigned long interruptTime = HAL_GetTick();
	  if (interruptTime - lastInterruptTime > delayInterrupt) {
	    optionButton = true;
	    if (currentSystemMode == SYSTEM_MODE_SWEEP) {
	      currentModeSweep = static_cast<ModeSweep>((currentModeSweep + 1) % 2);  // Alterna entre AMPLITUDE, FREQUENCY
	    }
	    else if (currentSystemMode == SYSTEM_MODE_LOCK) {
	      currentModeLock = static_cast<ModeLock>((currentModeLock + 1) % 3);  // Alterna entre PEAK, STEP, AMOSTRAS
	    }
	  }
	  lastInterruptTime = interruptTime;
}

void handleIncreaseButton() {
	static unsigned long lastInterruptTime = 0;
	  unsigned long interruptTime = HAL_GetTick();
	  if (interruptTime - lastInterruptTime > delayInterrupt) {
	    increaseButton = true;
	    if (currentSystemMode == SYSTEM_MODE_SWEEP) {
	      switch (currentModeSweep) {
	      case MODE_SWEEP_AMPLITUDE:
	        resolution += 4; // Salto de aprox 50mV
	        if (resolution > 255) resolution = 255;
	        amp = amp_step*resolution;
	        break;
	      case MODE_SWEEP_FREQUENCY:
	        frequency += 5;
	        if (frequency > 50) frequency = 50;
	        break;
	      }
	    waiting_time = 1000000/(frequency*resolution*2);
	    }
	    else if (currentSystemMode == SYSTEM_MODE_LOCK) {
	      switch (currentModeLock) {
	        case LOCK_PEAK:
	          if (!peaks_place.empty()) {
	            currentPeakIndex = (currentPeakIndex + 1) % peaks_place.size();
	            targetValue = peaks_place[currentPeakIndex];
	            value = targetValue;
	          }
	          break;
	        case LOCK_STEP:
	          step++;
	          break;
	        case LOCK_AMOSTRAS:
	          numReadings++;
	          break;
	      }
	    }
	  }
	  lastInterruptTime = interruptTime;
}


void handleDecreaseButton() {
	static unsigned long lastInterruptTime = 0;
	  unsigned long interruptTime = HAL_GetTick();
	  if (interruptTime - lastInterruptTime > delayInterrupt) {
	    decreaseButton = true;
	    if (currentSystemMode == SYSTEM_MODE_SWEEP) {
	      switch (currentModeSweep) {
	      case MODE_SWEEP_AMPLITUDE:
	        resolution -= 4; // Salto de aprox 50mV
	        if (resolution < 12) resolution = 12; // Limite  mínimo de amplitude de 150mV
	        amp = amp_step*resolution;
	        break;
	      case MODE_SWEEP_FREQUENCY:
	        frequency -= 5;
	        if (frequency < 5) frequency = 5;
	        break;
	      }
	    waiting_time = 1000000/(frequency*resolution*2);
	    }
	    else if (currentSystemMode == SYSTEM_MODE_LOCK) {
	      switch (currentModeLock) {
	      case LOCK_PEAK:
	        if (!peaks_place.empty()) {
	          currentPeakIndex = (currentPeakIndex - 1 + peaks_place.size()) % peaks_place.size();
	          targetValue = peaks_place[currentPeakIndex];
	          value = targetValue;
	        }
	        break;
	      case LOCK_STEP:
	        step--;
	        if (step < 1) step = 1;
	        break;
	      case LOCK_AMOSTRAS:
	        numReadings--;
	        if (numReadings < 1) numReadings = 1;
	        break;
	      }
	    }
	  }
	  lastInterruptTime = interruptTime;
}


void handleModeButton() {
	  static unsigned long lastInterruptTime = 0;
	  unsigned long interruptTime = HAL_GetTick();
	  if (interruptTime - lastInterruptTime > delayInterrupt) {
	    modeButton = true;
	    currentSystemMode = static_cast<SystemMode>((currentSystemMode + 1) % 2);  // Alterna entre SWEEP e LOCK
	    switch (currentSystemMode) {
	      case SYSTEM_MODE_SWEEP:
	        value = 0;
	        direction = 1;
	        break;
	      case SYSTEM_MODE_LOCK:
	        value = targetValue; // Inicia o sistema no início do pico escolhido
	        lastAdcValue = averageAdcValue - 1; //
	        direction = 1;
	        break;
	    }
	  }
	  lastInterruptTime = interruptTime;
}

void lcd_print_double(double value) {
    char buffer[16];

    int intPart = (int)value;
    int decimalPart = (int)((value - intPart) * 100);

    if (decimalPart < 0) {
    	decimalPart *= -1;
    }

    if (decimalPart == 0) {
    	snprintf(buffer, sizeof(buffer), "%d", intPart);
    }
    else {
    	snprintf(buffer, sizeof(buffer), "%d.%02d", intPart, decimalPart);
    }

    lcd_print(buffer);
}

HAL_StatusTypeDef sendI2CData(uint8_t address, uint16_t data) {
    uint8_t i2cData[2];

    // Formato esperado pelo MCP4725 (modo de escrita rápida)
    i2cData[0] = (data >> 4) & 0xFF;           // Bits D11–D4
    i2cData[1] = (data & 0x0F) << 4;           // Bits D3–D0 deslocados para MSB

    return HAL_I2C_Master_Transmit(&hi2c1, address << 1, i2cData, 2, 100);
}

void updateSweepDisplay() {
	lcd_clear();
	HAL_Delay(2);

    lcd_set_cursor(0, 0);
    lcd_print("Sweep");

    lcd_set_cursor(0, 6);
    lcd_print("Amp:");
    lcd_print_double(amp);
    lcd_print("V");

    lcd_set_cursor(1, 6);
    lcd_print("Freq:");
    lcd_print_double(frequency);
    lcd_print("Hz");

    // Atualiza seta
    lcd_set_cursor(0, 5);
    lcd_print(currentModeSweep == MODE_SWEEP_AMPLITUDE ? ">" : " ");
    lcd_set_cursor(1, 5);
    lcd_print(currentModeSweep == MODE_SWEEP_FREQUENCY ? ">" : " ");
}

void updateLockDisplay() {
    lcd_clear();
    HAL_Delay(2);

    lcd_set_cursor(0, 0);
    lcd_print("Lock");

    lcd_set_cursor(0, 8);
    lcd_print("Steps:");
    lcd_print_double(step);

    lcd_set_cursor(1, 1);
    lcd_print("Peak:");
    lcd_print_double(currentPeakIndex + 1);

    lcd_set_cursor(1, 8);
    lcd_print("NRead:");
    lcd_print_double(numReadings);

    lcd_set_cursor(0, 7);
    lcd_print(currentModeLock == LOCK_STEP ? ">" : " ");

    lcd_set_cursor(1, 0);
    lcd_print(currentModeLock == LOCK_PEAK ? ">" : " ");

    lcd_set_cursor(1, 7);
    lcd_print(currentModeLock == LOCK_AMOSTRAS ? ">" : " ");
}

void delayMicroseconds(uint32_t us)
{
    // Ativa o DWT se ainda não estiver habilitado
    if (!(DWT->CTRL & DWT_CTRL_CYCCNTENA_Msk)) {
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
        DWT->CYCCNT = 0;
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
    }

    uint32_t startTick = DWT->CYCCNT;
    uint32_t delayTicks = us * (SystemCoreClock / 1000000);

    while ((DWT->CYCCNT - startTick) < delayTicks);
}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
