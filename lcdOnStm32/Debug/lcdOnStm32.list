
lcdOnStm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f6c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  080080fc  080080fc  000090fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008204  08008204  0000a08c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008204  08008204  00009204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800820c  0800820c  0000a08c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800820c  0800820c  0000920c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  08008214  08008214  00009214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  0800821c  0000a000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a0  20000090  080082a8  0000a090  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000430  080082a8  0000a430  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a08c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a901  00000000  00000000  0000a0bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030cd  00000000  00000000  000249bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001898  00000000  00000000  00027a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001335  00000000  00000000  00029328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000207c1  00000000  00000000  0002a65d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019ab4  00000000  00000000  0004ae1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c82d7  00000000  00000000  000648d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012cba9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000075a4  00000000  00000000  0012cbec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  00134190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080080e4 	.word	0x080080e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	080080e4 	.word	0x080080e4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	@ 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__gedf2>:
 800083c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000840:	e006      	b.n	8000850 <__cmpdf2+0x4>
 8000842:	bf00      	nop

08000844 <__ledf2>:
 8000844:	f04f 0c01 	mov.w	ip, #1
 8000848:	e002      	b.n	8000850 <__cmpdf2+0x4>
 800084a:	bf00      	nop

0800084c <__cmpdf2>:
 800084c:	f04f 0c01 	mov.w	ip, #1
 8000850:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000854:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000858:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800085c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000860:	bf18      	it	ne
 8000862:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000866:	d01b      	beq.n	80008a0 <__cmpdf2+0x54>
 8000868:	b001      	add	sp, #4
 800086a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800086e:	bf0c      	ite	eq
 8000870:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000874:	ea91 0f03 	teqne	r1, r3
 8000878:	bf02      	ittt	eq
 800087a:	ea90 0f02 	teqeq	r0, r2
 800087e:	2000      	moveq	r0, #0
 8000880:	4770      	bxeq	lr
 8000882:	f110 0f00 	cmn.w	r0, #0
 8000886:	ea91 0f03 	teq	r1, r3
 800088a:	bf58      	it	pl
 800088c:	4299      	cmppl	r1, r3
 800088e:	bf08      	it	eq
 8000890:	4290      	cmpeq	r0, r2
 8000892:	bf2c      	ite	cs
 8000894:	17d8      	asrcs	r0, r3, #31
 8000896:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800089a:	f040 0001 	orr.w	r0, r0, #1
 800089e:	4770      	bx	lr
 80008a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008a8:	d102      	bne.n	80008b0 <__cmpdf2+0x64>
 80008aa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008ae:	d107      	bne.n	80008c0 <__cmpdf2+0x74>
 80008b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008b8:	d1d6      	bne.n	8000868 <__cmpdf2+0x1c>
 80008ba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80008be:	d0d3      	beq.n	8000868 <__cmpdf2+0x1c>
 80008c0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop

080008c8 <__aeabi_cdrcmple>:
 80008c8:	4684      	mov	ip, r0
 80008ca:	4610      	mov	r0, r2
 80008cc:	4662      	mov	r2, ip
 80008ce:	468c      	mov	ip, r1
 80008d0:	4619      	mov	r1, r3
 80008d2:	4663      	mov	r3, ip
 80008d4:	e000      	b.n	80008d8 <__aeabi_cdcmpeq>
 80008d6:	bf00      	nop

080008d8 <__aeabi_cdcmpeq>:
 80008d8:	b501      	push	{r0, lr}
 80008da:	f7ff ffb7 	bl	800084c <__cmpdf2>
 80008de:	2800      	cmp	r0, #0
 80008e0:	bf48      	it	mi
 80008e2:	f110 0f00 	cmnmi.w	r0, #0
 80008e6:	bd01      	pop	{r0, pc}

080008e8 <__aeabi_dcmpeq>:
 80008e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008ec:	f7ff fff4 	bl	80008d8 <__aeabi_cdcmpeq>
 80008f0:	bf0c      	ite	eq
 80008f2:	2001      	moveq	r0, #1
 80008f4:	2000      	movne	r0, #0
 80008f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008fa:	bf00      	nop

080008fc <__aeabi_dcmplt>:
 80008fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000900:	f7ff ffea 	bl	80008d8 <__aeabi_cdcmpeq>
 8000904:	bf34      	ite	cc
 8000906:	2001      	movcc	r0, #1
 8000908:	2000      	movcs	r0, #0
 800090a:	f85d fb08 	ldr.w	pc, [sp], #8
 800090e:	bf00      	nop

08000910 <__aeabi_dcmple>:
 8000910:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000914:	f7ff ffe0 	bl	80008d8 <__aeabi_cdcmpeq>
 8000918:	bf94      	ite	ls
 800091a:	2001      	movls	r0, #1
 800091c:	2000      	movhi	r0, #0
 800091e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000922:	bf00      	nop

08000924 <__aeabi_dcmpge>:
 8000924:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000928:	f7ff ffce 	bl	80008c8 <__aeabi_cdrcmple>
 800092c:	bf94      	ite	ls
 800092e:	2001      	movls	r0, #1
 8000930:	2000      	movhi	r0, #0
 8000932:	f85d fb08 	ldr.w	pc, [sp], #8
 8000936:	bf00      	nop

08000938 <__aeabi_dcmpgt>:
 8000938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800093c:	f7ff ffc4 	bl	80008c8 <__aeabi_cdrcmple>
 8000940:	bf34      	ite	cc
 8000942:	2001      	movcc	r0, #1
 8000944:	2000      	movcs	r0, #0
 8000946:	f85d fb08 	ldr.w	pc, [sp], #8
 800094a:	bf00      	nop

0800094c <__aeabi_d2iz>:
 800094c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000950:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000954:	d215      	bcs.n	8000982 <__aeabi_d2iz+0x36>
 8000956:	d511      	bpl.n	800097c <__aeabi_d2iz+0x30>
 8000958:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800095c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000960:	d912      	bls.n	8000988 <__aeabi_d2iz+0x3c>
 8000962:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000966:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800096a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800096e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000972:	fa23 f002 	lsr.w	r0, r3, r2
 8000976:	bf18      	it	ne
 8000978:	4240      	negne	r0, r0
 800097a:	4770      	bx	lr
 800097c:	f04f 0000 	mov.w	r0, #0
 8000980:	4770      	bx	lr
 8000982:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000986:	d105      	bne.n	8000994 <__aeabi_d2iz+0x48>
 8000988:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 800098c:	bf08      	it	eq
 800098e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_d2uiz>:
 800099c:	004a      	lsls	r2, r1, #1
 800099e:	d211      	bcs.n	80009c4 <__aeabi_d2uiz+0x28>
 80009a0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009a4:	d211      	bcs.n	80009ca <__aeabi_d2uiz+0x2e>
 80009a6:	d50d      	bpl.n	80009c4 <__aeabi_d2uiz+0x28>
 80009a8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b0:	d40e      	bmi.n	80009d0 <__aeabi_d2uiz+0x34>
 80009b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009b6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009be:	fa23 f002 	lsr.w	r0, r3, r2
 80009c2:	4770      	bx	lr
 80009c4:	f04f 0000 	mov.w	r0, #0
 80009c8:	4770      	bx	lr
 80009ca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ce:	d102      	bne.n	80009d6 <__aeabi_d2uiz+0x3a>
 80009d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80009d4:	4770      	bx	lr
 80009d6:	f04f 0000 	mov.w	r0, #0
 80009da:	4770      	bx	lr

080009dc <__aeabi_uldivmod>:
 80009dc:	b953      	cbnz	r3, 80009f4 <__aeabi_uldivmod+0x18>
 80009de:	b94a      	cbnz	r2, 80009f4 <__aeabi_uldivmod+0x18>
 80009e0:	2900      	cmp	r1, #0
 80009e2:	bf08      	it	eq
 80009e4:	2800      	cmpeq	r0, #0
 80009e6:	bf1c      	itt	ne
 80009e8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80009ec:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80009f0:	f000 b988 	b.w	8000d04 <__aeabi_idiv0>
 80009f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009fc:	f000 f806 	bl	8000a0c <__udivmoddi4>
 8000a00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a08:	b004      	add	sp, #16
 8000a0a:	4770      	bx	lr

08000a0c <__udivmoddi4>:
 8000a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a10:	9d08      	ldr	r5, [sp, #32]
 8000a12:	468e      	mov	lr, r1
 8000a14:	4604      	mov	r4, r0
 8000a16:	4688      	mov	r8, r1
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d14a      	bne.n	8000ab2 <__udivmoddi4+0xa6>
 8000a1c:	428a      	cmp	r2, r1
 8000a1e:	4617      	mov	r7, r2
 8000a20:	d962      	bls.n	8000ae8 <__udivmoddi4+0xdc>
 8000a22:	fab2 f682 	clz	r6, r2
 8000a26:	b14e      	cbz	r6, 8000a3c <__udivmoddi4+0x30>
 8000a28:	f1c6 0320 	rsb	r3, r6, #32
 8000a2c:	fa01 f806 	lsl.w	r8, r1, r6
 8000a30:	fa20 f303 	lsr.w	r3, r0, r3
 8000a34:	40b7      	lsls	r7, r6
 8000a36:	ea43 0808 	orr.w	r8, r3, r8
 8000a3a:	40b4      	lsls	r4, r6
 8000a3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a40:	fa1f fc87 	uxth.w	ip, r7
 8000a44:	fbb8 f1fe 	udiv	r1, r8, lr
 8000a48:	0c23      	lsrs	r3, r4, #16
 8000a4a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000a4e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a52:	fb01 f20c 	mul.w	r2, r1, ip
 8000a56:	429a      	cmp	r2, r3
 8000a58:	d909      	bls.n	8000a6e <__udivmoddi4+0x62>
 8000a5a:	18fb      	adds	r3, r7, r3
 8000a5c:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000a60:	f080 80ea 	bcs.w	8000c38 <__udivmoddi4+0x22c>
 8000a64:	429a      	cmp	r2, r3
 8000a66:	f240 80e7 	bls.w	8000c38 <__udivmoddi4+0x22c>
 8000a6a:	3902      	subs	r1, #2
 8000a6c:	443b      	add	r3, r7
 8000a6e:	1a9a      	subs	r2, r3, r2
 8000a70:	b2a3      	uxth	r3, r4
 8000a72:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a76:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a7e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a82:	459c      	cmp	ip, r3
 8000a84:	d909      	bls.n	8000a9a <__udivmoddi4+0x8e>
 8000a86:	18fb      	adds	r3, r7, r3
 8000a88:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000a8c:	f080 80d6 	bcs.w	8000c3c <__udivmoddi4+0x230>
 8000a90:	459c      	cmp	ip, r3
 8000a92:	f240 80d3 	bls.w	8000c3c <__udivmoddi4+0x230>
 8000a96:	443b      	add	r3, r7
 8000a98:	3802      	subs	r0, #2
 8000a9a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a9e:	eba3 030c 	sub.w	r3, r3, ip
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	b11d      	cbz	r5, 8000aae <__udivmoddi4+0xa2>
 8000aa6:	40f3      	lsrs	r3, r6
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	e9c5 3200 	strd	r3, r2, [r5]
 8000aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ab2:	428b      	cmp	r3, r1
 8000ab4:	d905      	bls.n	8000ac2 <__udivmoddi4+0xb6>
 8000ab6:	b10d      	cbz	r5, 8000abc <__udivmoddi4+0xb0>
 8000ab8:	e9c5 0100 	strd	r0, r1, [r5]
 8000abc:	2100      	movs	r1, #0
 8000abe:	4608      	mov	r0, r1
 8000ac0:	e7f5      	b.n	8000aae <__udivmoddi4+0xa2>
 8000ac2:	fab3 f183 	clz	r1, r3
 8000ac6:	2900      	cmp	r1, #0
 8000ac8:	d146      	bne.n	8000b58 <__udivmoddi4+0x14c>
 8000aca:	4573      	cmp	r3, lr
 8000acc:	d302      	bcc.n	8000ad4 <__udivmoddi4+0xc8>
 8000ace:	4282      	cmp	r2, r0
 8000ad0:	f200 8105 	bhi.w	8000cde <__udivmoddi4+0x2d2>
 8000ad4:	1a84      	subs	r4, r0, r2
 8000ad6:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ada:	2001      	movs	r0, #1
 8000adc:	4690      	mov	r8, r2
 8000ade:	2d00      	cmp	r5, #0
 8000ae0:	d0e5      	beq.n	8000aae <__udivmoddi4+0xa2>
 8000ae2:	e9c5 4800 	strd	r4, r8, [r5]
 8000ae6:	e7e2      	b.n	8000aae <__udivmoddi4+0xa2>
 8000ae8:	2a00      	cmp	r2, #0
 8000aea:	f000 8090 	beq.w	8000c0e <__udivmoddi4+0x202>
 8000aee:	fab2 f682 	clz	r6, r2
 8000af2:	2e00      	cmp	r6, #0
 8000af4:	f040 80a4 	bne.w	8000c40 <__udivmoddi4+0x234>
 8000af8:	1a8a      	subs	r2, r1, r2
 8000afa:	0c03      	lsrs	r3, r0, #16
 8000afc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b00:	b280      	uxth	r0, r0
 8000b02:	b2bc      	uxth	r4, r7
 8000b04:	2101      	movs	r1, #1
 8000b06:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b0a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b12:	fb04 f20c 	mul.w	r2, r4, ip
 8000b16:	429a      	cmp	r2, r3
 8000b18:	d907      	bls.n	8000b2a <__udivmoddi4+0x11e>
 8000b1a:	18fb      	adds	r3, r7, r3
 8000b1c:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000b20:	d202      	bcs.n	8000b28 <__udivmoddi4+0x11c>
 8000b22:	429a      	cmp	r2, r3
 8000b24:	f200 80e0 	bhi.w	8000ce8 <__udivmoddi4+0x2dc>
 8000b28:	46c4      	mov	ip, r8
 8000b2a:	1a9b      	subs	r3, r3, r2
 8000b2c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000b30:	fb0e 3312 	mls	r3, lr, r2, r3
 8000b34:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000b38:	fb02 f404 	mul.w	r4, r2, r4
 8000b3c:	429c      	cmp	r4, r3
 8000b3e:	d907      	bls.n	8000b50 <__udivmoddi4+0x144>
 8000b40:	18fb      	adds	r3, r7, r3
 8000b42:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000b46:	d202      	bcs.n	8000b4e <__udivmoddi4+0x142>
 8000b48:	429c      	cmp	r4, r3
 8000b4a:	f200 80ca 	bhi.w	8000ce2 <__udivmoddi4+0x2d6>
 8000b4e:	4602      	mov	r2, r0
 8000b50:	1b1b      	subs	r3, r3, r4
 8000b52:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000b56:	e7a5      	b.n	8000aa4 <__udivmoddi4+0x98>
 8000b58:	f1c1 0620 	rsb	r6, r1, #32
 8000b5c:	408b      	lsls	r3, r1
 8000b5e:	fa22 f706 	lsr.w	r7, r2, r6
 8000b62:	431f      	orrs	r7, r3
 8000b64:	fa0e f401 	lsl.w	r4, lr, r1
 8000b68:	fa20 f306 	lsr.w	r3, r0, r6
 8000b6c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000b70:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000b74:	4323      	orrs	r3, r4
 8000b76:	fa00 f801 	lsl.w	r8, r0, r1
 8000b7a:	fa1f fc87 	uxth.w	ip, r7
 8000b7e:	fbbe f0f9 	udiv	r0, lr, r9
 8000b82:	0c1c      	lsrs	r4, r3, #16
 8000b84:	fb09 ee10 	mls	lr, r9, r0, lr
 8000b88:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000b8c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000b90:	45a6      	cmp	lr, r4
 8000b92:	fa02 f201 	lsl.w	r2, r2, r1
 8000b96:	d909      	bls.n	8000bac <__udivmoddi4+0x1a0>
 8000b98:	193c      	adds	r4, r7, r4
 8000b9a:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000b9e:	f080 809c 	bcs.w	8000cda <__udivmoddi4+0x2ce>
 8000ba2:	45a6      	cmp	lr, r4
 8000ba4:	f240 8099 	bls.w	8000cda <__udivmoddi4+0x2ce>
 8000ba8:	3802      	subs	r0, #2
 8000baa:	443c      	add	r4, r7
 8000bac:	eba4 040e 	sub.w	r4, r4, lr
 8000bb0:	fa1f fe83 	uxth.w	lr, r3
 8000bb4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000bb8:	fb09 4413 	mls	r4, r9, r3, r4
 8000bbc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000bc0:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bc4:	45a4      	cmp	ip, r4
 8000bc6:	d908      	bls.n	8000bda <__udivmoddi4+0x1ce>
 8000bc8:	193c      	adds	r4, r7, r4
 8000bca:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000bce:	f080 8082 	bcs.w	8000cd6 <__udivmoddi4+0x2ca>
 8000bd2:	45a4      	cmp	ip, r4
 8000bd4:	d97f      	bls.n	8000cd6 <__udivmoddi4+0x2ca>
 8000bd6:	3b02      	subs	r3, #2
 8000bd8:	443c      	add	r4, r7
 8000bda:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000bde:	eba4 040c 	sub.w	r4, r4, ip
 8000be2:	fba0 ec02 	umull	lr, ip, r0, r2
 8000be6:	4564      	cmp	r4, ip
 8000be8:	4673      	mov	r3, lr
 8000bea:	46e1      	mov	r9, ip
 8000bec:	d362      	bcc.n	8000cb4 <__udivmoddi4+0x2a8>
 8000bee:	d05f      	beq.n	8000cb0 <__udivmoddi4+0x2a4>
 8000bf0:	b15d      	cbz	r5, 8000c0a <__udivmoddi4+0x1fe>
 8000bf2:	ebb8 0203 	subs.w	r2, r8, r3
 8000bf6:	eb64 0409 	sbc.w	r4, r4, r9
 8000bfa:	fa04 f606 	lsl.w	r6, r4, r6
 8000bfe:	fa22 f301 	lsr.w	r3, r2, r1
 8000c02:	431e      	orrs	r6, r3
 8000c04:	40cc      	lsrs	r4, r1
 8000c06:	e9c5 6400 	strd	r6, r4, [r5]
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	e74f      	b.n	8000aae <__udivmoddi4+0xa2>
 8000c0e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000c12:	0c01      	lsrs	r1, r0, #16
 8000c14:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000c18:	b280      	uxth	r0, r0
 8000c1a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000c1e:	463b      	mov	r3, r7
 8000c20:	4638      	mov	r0, r7
 8000c22:	463c      	mov	r4, r7
 8000c24:	46b8      	mov	r8, r7
 8000c26:	46be      	mov	lr, r7
 8000c28:	2620      	movs	r6, #32
 8000c2a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000c2e:	eba2 0208 	sub.w	r2, r2, r8
 8000c32:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000c36:	e766      	b.n	8000b06 <__udivmoddi4+0xfa>
 8000c38:	4601      	mov	r1, r0
 8000c3a:	e718      	b.n	8000a6e <__udivmoddi4+0x62>
 8000c3c:	4610      	mov	r0, r2
 8000c3e:	e72c      	b.n	8000a9a <__udivmoddi4+0x8e>
 8000c40:	f1c6 0220 	rsb	r2, r6, #32
 8000c44:	fa2e f302 	lsr.w	r3, lr, r2
 8000c48:	40b7      	lsls	r7, r6
 8000c4a:	40b1      	lsls	r1, r6
 8000c4c:	fa20 f202 	lsr.w	r2, r0, r2
 8000c50:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c54:	430a      	orrs	r2, r1
 8000c56:	fbb3 f8fe 	udiv	r8, r3, lr
 8000c5a:	b2bc      	uxth	r4, r7
 8000c5c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000c60:	0c11      	lsrs	r1, r2, #16
 8000c62:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c66:	fb08 f904 	mul.w	r9, r8, r4
 8000c6a:	40b0      	lsls	r0, r6
 8000c6c:	4589      	cmp	r9, r1
 8000c6e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000c72:	b280      	uxth	r0, r0
 8000c74:	d93e      	bls.n	8000cf4 <__udivmoddi4+0x2e8>
 8000c76:	1879      	adds	r1, r7, r1
 8000c78:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000c7c:	d201      	bcs.n	8000c82 <__udivmoddi4+0x276>
 8000c7e:	4589      	cmp	r9, r1
 8000c80:	d81f      	bhi.n	8000cc2 <__udivmoddi4+0x2b6>
 8000c82:	eba1 0109 	sub.w	r1, r1, r9
 8000c86:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c8a:	fb09 f804 	mul.w	r8, r9, r4
 8000c8e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c92:	b292      	uxth	r2, r2
 8000c94:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c98:	4542      	cmp	r2, r8
 8000c9a:	d229      	bcs.n	8000cf0 <__udivmoddi4+0x2e4>
 8000c9c:	18ba      	adds	r2, r7, r2
 8000c9e:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000ca2:	d2c4      	bcs.n	8000c2e <__udivmoddi4+0x222>
 8000ca4:	4542      	cmp	r2, r8
 8000ca6:	d2c2      	bcs.n	8000c2e <__udivmoddi4+0x222>
 8000ca8:	f1a9 0102 	sub.w	r1, r9, #2
 8000cac:	443a      	add	r2, r7
 8000cae:	e7be      	b.n	8000c2e <__udivmoddi4+0x222>
 8000cb0:	45f0      	cmp	r8, lr
 8000cb2:	d29d      	bcs.n	8000bf0 <__udivmoddi4+0x1e4>
 8000cb4:	ebbe 0302 	subs.w	r3, lr, r2
 8000cb8:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000cbc:	3801      	subs	r0, #1
 8000cbe:	46e1      	mov	r9, ip
 8000cc0:	e796      	b.n	8000bf0 <__udivmoddi4+0x1e4>
 8000cc2:	eba7 0909 	sub.w	r9, r7, r9
 8000cc6:	4449      	add	r1, r9
 8000cc8:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ccc:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cd0:	fb09 f804 	mul.w	r8, r9, r4
 8000cd4:	e7db      	b.n	8000c8e <__udivmoddi4+0x282>
 8000cd6:	4673      	mov	r3, lr
 8000cd8:	e77f      	b.n	8000bda <__udivmoddi4+0x1ce>
 8000cda:	4650      	mov	r0, sl
 8000cdc:	e766      	b.n	8000bac <__udivmoddi4+0x1a0>
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e6fd      	b.n	8000ade <__udivmoddi4+0xd2>
 8000ce2:	443b      	add	r3, r7
 8000ce4:	3a02      	subs	r2, #2
 8000ce6:	e733      	b.n	8000b50 <__udivmoddi4+0x144>
 8000ce8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cec:	443b      	add	r3, r7
 8000cee:	e71c      	b.n	8000b2a <__udivmoddi4+0x11e>
 8000cf0:	4649      	mov	r1, r9
 8000cf2:	e79c      	b.n	8000c2e <__udivmoddi4+0x222>
 8000cf4:	eba1 0109 	sub.w	r1, r1, r9
 8000cf8:	46c4      	mov	ip, r8
 8000cfa:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cfe:	fb09 f804 	mul.w	r8, r9, r4
 8000d02:	e7c4      	b.n	8000c8e <__udivmoddi4+0x282>

08000d04 <__aeabi_idiv0>:
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop

08000d08 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	6039      	str	r1, [r7, #0]
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	4618      	mov	r0, r3
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <_ZNSt12_Vector_baseIjSaIjEE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	60fb      	str	r3, [r7, #12]

      __attribute__((__always_inline__))
#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8000d2c:	68f8      	ldr	r0, [r7, #12]
 8000d2e:	f001 fb05 	bl	800233c <_ZNSt15__new_allocatorIjED1Ev>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4618      	mov	r0, r3
 8000d36:	3710      	adds	r7, #16
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <_ZNSt12_Vector_baseIjSaIjEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	4618      	mov	r0, r3
 8000d48:	f001 fa54 	bl	80021f4 <_ZNSt12_Vector_baseIjSaIjEE12_Vector_implC1Ev>
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <_ZNSt6vectorIjSaIjEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b082      	sub	sp, #8
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff ffeb 	bl	8000d3c <_ZNSt12_Vector_baseIjSaIjEEC1Ev>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d70:	b590      	push	{r4, r7, lr}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000d76:	f002 fa9e 	bl	80032b6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d7a:	f000 fc35 	bl	80015e8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d7e:	f000 fe5f 	bl	8001a40 <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 8000d82:	f000 fd0d 	bl	80017a0 <_ZL12MX_I2C1_Initv>
  MX_TIM1_Init();
 8000d86:	f000 fd59 	bl	800183c <_ZL12MX_TIM1_Initv>
  HAL_TIM_Base_Start(&htim2);
 8000d8a:	48a9      	ldr	r0, [pc, #676]	@ (8001030 <main+0x2c0>)
 8000d8c:	f005 fd3a 	bl	8006804 <HAL_TIM_Base_Start>
  MX_USART1_UART_Init();
 8000d90:	f000 fe22 	bl	80019d8 <_ZL19MX_USART1_UART_Initv>
  MX_ADC1_Init();
 8000d94:	f000 fc7e 	bl	8001694 <_ZL12MX_ADC1_Initv>
  HAL_ADC_Start(&hadc1);
 8000d98:	48a6      	ldr	r0, [pc, #664]	@ (8001034 <main+0x2c4>)
 8000d9a:	f002 fe65 	bl	8003a68 <HAL_ADC_Start>
  /* USER CODE BEGIN 2 */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000d9e:	4ba6      	ldr	r3, [pc, #664]	@ (8001038 <main+0x2c8>)
 8000da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000da2:	4aa5      	ldr	r2, [pc, #660]	@ (8001038 <main+0x2c8>)
 8000da4:	f043 0301 	orr.w	r3, r3, #1
 8000da8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000daa:	4ba3      	ldr	r3, [pc, #652]	@ (8001038 <main+0x2c8>)
 8000dac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dae:	f003 0301 	and.w	r3, r3, #1
 8000db2:	603b      	str	r3, [r7, #0]
 8000db4:	683b      	ldr	r3, [r7, #0]
  MX_TIM2_Init();
 8000db6:	f000 fda9 	bl	800190c <_ZL12MX_TIM2_Initv>
  HAL_TIM_Base_Start(&htim2);
 8000dba:	489d      	ldr	r0, [pc, #628]	@ (8001030 <main+0x2c0>)
 8000dbc:	f005 fd22 	bl	8006804 <HAL_TIM_Base_Start>

  lcd_init();
 8000dc0:	f000 ff64 	bl	8001c8c <lcd_init>
  lcd_clear();
 8000dc4:	f000 ff90 	bl	8001ce8 <lcd_clear>
  lcd_set_cursor(0, 3);
 8000dc8:	2103      	movs	r1, #3
 8000dca:	2000      	movs	r0, #0
 8000dcc:	f000 ff96 	bl	8001cfc <lcd_set_cursor>
  lcd_print("Travamento");
 8000dd0:	489a      	ldr	r0, [pc, #616]	@ (800103c <main+0x2cc>)
 8000dd2:	f000 ffb1 	bl	8001d38 <lcd_print>
  lcd_set_cursor(1, 0);
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	2001      	movs	r0, #1
 8000dda:	f000 ff8f 	bl	8001cfc <lcd_set_cursor>
  lcd_print("Cavidade Triang");
 8000dde:	4898      	ldr	r0, [pc, #608]	@ (8001040 <main+0x2d0>)
 8000de0:	f000 ffaa 	bl	8001d38 <lcd_print>
  HAL_Delay(2000);
 8000de4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000de8:	f002 fada 	bl	80033a0 <HAL_Delay>
  lcd_clear();
 8000dec:	f000 ff7c 	bl	8001ce8 <lcd_clear>
  lcd_set_cursor(0, 0);
 8000df0:	2100      	movs	r1, #0
 8000df2:	2000      	movs	r0, #0
 8000df4:	f000 ff82 	bl	8001cfc <lcd_set_cursor>
  lcd_print("Sweep");
 8000df8:	4892      	ldr	r0, [pc, #584]	@ (8001044 <main+0x2d4>)
 8000dfa:	f000 ff9d 	bl	8001d38 <lcd_print>
  lcd_set_cursor(0, 6);
 8000dfe:	2106      	movs	r1, #6
 8000e00:	2000      	movs	r0, #0
 8000e02:	f000 ff7b 	bl	8001cfc <lcd_set_cursor>
  lcd_print("Amp:");
 8000e06:	4890      	ldr	r0, [pc, #576]	@ (8001048 <main+0x2d8>)
 8000e08:	f000 ff96 	bl	8001d38 <lcd_print>
  lcd_print_double(ampSweep);
 8000e0c:	4b8f      	ldr	r3, [pc, #572]	@ (800104c <main+0x2dc>)
 8000e0e:	ed93 7b00 	vldr	d7, [r3]
 8000e12:	eeb0 0a47 	vmov.f32	s0, s14
 8000e16:	eef0 0a67 	vmov.f32	s1, s15
 8000e1a:	f001 f889 	bl	8001f30 <lcd_print_double>
  lcd_print("V");
 8000e1e:	488c      	ldr	r0, [pc, #560]	@ (8001050 <main+0x2e0>)
 8000e20:	f000 ff8a 	bl	8001d38 <lcd_print>
  lcd_set_cursor(1, 6);
 8000e24:	2106      	movs	r1, #6
 8000e26:	2001      	movs	r0, #1
 8000e28:	f000 ff68 	bl	8001cfc <lcd_set_cursor>
  lcd_print("Freq:");
 8000e2c:	4889      	ldr	r0, [pc, #548]	@ (8001054 <main+0x2e4>)
 8000e2e:	f000 ff83 	bl	8001d38 <lcd_print>
  lcd_print_double(frequency);
 8000e32:	4b89      	ldr	r3, [pc, #548]	@ (8001058 <main+0x2e8>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff fc96 	bl	8000768 <__aeabi_i2d>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	460b      	mov	r3, r1
 8000e40:	ec43 2b10 	vmov	d0, r2, r3
 8000e44:	f001 f874 	bl	8001f30 <lcd_print_double>
  lcd_print("Hz");
 8000e48:	4884      	ldr	r0, [pc, #528]	@ (800105c <main+0x2ec>)
 8000e4a:	f000 ff75 	bl	8001d38 <lcd_print>
  lcd_set_cursor(0,5);
 8000e4e:	2105      	movs	r1, #5
 8000e50:	2000      	movs	r0, #0
 8000e52:	f000 ff53 	bl	8001cfc <lcd_set_cursor>
  lcd_print(">");
 8000e56:	4882      	ldr	r0, [pc, #520]	@ (8001060 <main+0x2f0>)
 8000e58:	f000 ff6e 	bl	8001d38 <lcd_print>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if (currentSystemMode == SWEEP) {
 8000e5c:	4b81      	ldr	r3, [pc, #516]	@ (8001064 <main+0x2f4>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	f040 81e8 	bne.w	8001236 <main+0x4c6>
		  //uint32_t cycleStartTime = micros();

	      dacValue += stepDirection;
 8000e66:	4b80      	ldr	r3, [pc, #512]	@ (8001068 <main+0x2f8>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff fc7c 	bl	8000768 <__aeabi_i2d>
 8000e70:	4b7e      	ldr	r3, [pc, #504]	@ (800106c <main+0x2fc>)
 8000e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e76:	f7ff fb2b 	bl	80004d0 <__adddf3>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	497b      	ldr	r1, [pc, #492]	@ (800106c <main+0x2fc>)
 8000e80:	e9c1 2300 	strd	r2, r3, [r1]

	      if (dacValue >= dacResolution) {
 8000e84:	4b79      	ldr	r3, [pc, #484]	@ (800106c <main+0x2fc>)
 8000e86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e8a:	a367      	add	r3, pc, #412	@ (adr r3, 8001028 <main+0x2b8>)
 8000e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e90:	f7ff fd48 	bl	8000924 <__aeabi_dcmpge>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d00a      	beq.n	8000eb0 <main+0x140>
	        dacValue = dacResolution;
 8000e9a:	4974      	ldr	r1, [pc, #464]	@ (800106c <main+0x2fc>)
 8000e9c:	a362      	add	r3, pc, #392	@ (adr r3, 8001028 <main+0x2b8>)
 8000e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ea2:	e9c1 2300 	strd	r2, r3, [r1]
	        stepDirection = -1;
 8000ea6:	4b70      	ldr	r3, [pc, #448]	@ (8001068 <main+0x2f8>)
 8000ea8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	e015      	b.n	8000edc <main+0x16c>
	      } else if (dacValue <= 0) {
 8000eb0:	4b6e      	ldr	r3, [pc, #440]	@ (800106c <main+0x2fc>)
 8000eb2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000eb6:	f04f 0200 	mov.w	r2, #0
 8000eba:	f04f 0300 	mov.w	r3, #0
 8000ebe:	f7ff fd27 	bl	8000910 <__aeabi_dcmple>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d009      	beq.n	8000edc <main+0x16c>
	        dacValue = 0;
 8000ec8:	4968      	ldr	r1, [pc, #416]	@ (800106c <main+0x2fc>)
 8000eca:	f04f 0200 	mov.w	r2, #0
 8000ece:	f04f 0300 	mov.w	r3, #0
 8000ed2:	e9c1 2300 	strd	r2, r3, [r1]
	        stepDirection = 1;
 8000ed6:	4b64      	ldr	r3, [pc, #400]	@ (8001068 <main+0x2f8>)
 8000ed8:	2201      	movs	r2, #1
 8000eda:	601a      	str	r2, [r3, #0]
	      }

	      //int averageAdcValue = adc1_get_raw(adcChannel); //talvez bugue porque antes estava iniciando uma nova variavel
	      if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK) {
 8000edc:	210a      	movs	r1, #10
 8000ede:	4855      	ldr	r0, [pc, #340]	@ (8001034 <main+0x2c4>)
 8000ee0:	f002 fe7c 	bl	8003bdc <HAL_ADC_PollForConversion>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	bf0c      	ite	eq
 8000eea:	2301      	moveq	r3, #1
 8000eec:	2300      	movne	r3, #0
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d006      	beq.n	8000f02 <main+0x192>
	          adcValue = HAL_ADC_GetValue(&hadc1);
 8000ef4:	484f      	ldr	r0, [pc, #316]	@ (8001034 <main+0x2c4>)
 8000ef6:	f002 ff49 	bl	8003d8c <HAL_ADC_GetValue>
 8000efa:	4603      	mov	r3, r0
 8000efc:	461a      	mov	r2, r3
 8000efe:	4b5c      	ldr	r3, [pc, #368]	@ (8001070 <main+0x300>)
 8000f00:	601a      	str	r2, [r3, #0]
	      }

	      // Detecção de picos (apenas quando a varredura está em direção positiva)
	      if (stepDirection == 1) {
 8000f02:	4b59      	ldr	r3, [pc, #356]	@ (8001068 <main+0x2f8>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d121      	bne.n	8000f4e <main+0x1de>
	        if (adcValue > maxThreshold) {
 8000f0a:	4b59      	ldr	r3, [pc, #356]	@ (8001070 <main+0x300>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2b31      	cmp	r3, #49	@ 0x31
 8000f10:	dd1d      	ble.n	8000f4e <main+0x1de>
	          if(detectingPeak){
 8000f12:	4b58      	ldr	r3, [pc, #352]	@ (8001074 <main+0x304>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	bf14      	ite	ne
 8000f1c:	2301      	movne	r3, #1
 8000f1e:	2300      	moveq	r3, #0
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d002      	beq.n	8000f2c <main+0x1bc>
	        	peaksPositions.pop_back();
 8000f26:	4854      	ldr	r0, [pc, #336]	@ (8001078 <main+0x308>)
 8000f28:	f001 f98e 	bl	8002248 <_ZNSt6vectorIjSaIjEE8pop_backEv>
	          }

	          peaksPositions.push_back(dacValue);
 8000f2c:	4b4f      	ldr	r3, [pc, #316]	@ (800106c <main+0x2fc>)
 8000f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f32:	4610      	mov	r0, r2
 8000f34:	4619      	mov	r1, r3
 8000f36:	f7ff fd31 	bl	800099c <__aeabi_d2uiz>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	607b      	str	r3, [r7, #4]
 8000f3e:	1d3b      	adds	r3, r7, #4
 8000f40:	4619      	mov	r1, r3
 8000f42:	484d      	ldr	r0, [pc, #308]	@ (8001078 <main+0x308>)
 8000f44:	f001 f99a 	bl	800227c <_ZNSt6vectorIjSaIjEE9push_backEOj>
	          detectingPeak = 1;
 8000f48:	4b4a      	ldr	r3, [pc, #296]	@ (8001074 <main+0x304>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	701a      	strb	r2, [r3, #0]
	        }
	      }
	      if (detectingPeak && adcValue < minThreshold) {
 8000f4e:	4b49      	ldr	r3, [pc, #292]	@ (8001074 <main+0x304>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d005      	beq.n	8000f64 <main+0x1f4>
 8000f58:	4b45      	ldr	r3, [pc, #276]	@ (8001070 <main+0x300>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2b17      	cmp	r3, #23
 8000f5e:	dc01      	bgt.n	8000f64 <main+0x1f4>
 8000f60:	2301      	movs	r3, #1
 8000f62:	e000      	b.n	8000f66 <main+0x1f6>
 8000f64:	2300      	movs	r3, #0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d002      	beq.n	8000f70 <main+0x200>
	        detectingPeak = 0;
 8000f6a:	4b42      	ldr	r3, [pc, #264]	@ (8001074 <main+0x304>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	701a      	strb	r2, [r3, #0]
	      }

	      if(increaseButton == 1) {
 8000f70:	4b42      	ldr	r3, [pc, #264]	@ (800107c <main+0x30c>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	bf0c      	ite	eq
 8000f7a:	2301      	moveq	r3, #1
 8000f7c:	2300      	movne	r3, #0
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	f000 8091 	beq.w	80010a8 <main+0x338>
	        increaseButton = 0;
 8000f86:	4b3d      	ldr	r3, [pc, #244]	@ (800107c <main+0x30c>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	701a      	strb	r2, [r3, #0]

	        switch (currentSweepMode) {
 8000f8c:	4b3c      	ldr	r3, [pc, #240]	@ (8001080 <main+0x310>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d002      	beq.n	8000f9a <main+0x22a>
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d020      	beq.n	8000fda <main+0x26a>
 8000f98:	e02c      	b.n	8000ff4 <main+0x284>
	              case AMPLITUDE:
	                triangularAmp += stepForAmplitude;
 8000f9a:	4b3a      	ldr	r3, [pc, #232]	@ (8001084 <main+0x314>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a3a      	ldr	r2, [pc, #232]	@ (8001088 <main+0x318>)
 8000fa0:	6812      	ldr	r2, [r2, #0]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	4a37      	ldr	r2, [pc, #220]	@ (8001084 <main+0x314>)
 8000fa6:	6013      	str	r3, [r2, #0]

	                if (triangularAmp > dacResolution) {
 8000fa8:	4b36      	ldr	r3, [pc, #216]	@ (8001084 <main+0x314>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000fb0:	d303      	bcc.n	8000fba <main+0x24a>
	                	triangularAmp = dacResolution;
 8000fb2:	4b34      	ldr	r3, [pc, #208]	@ (8001084 <main+0x314>)
 8000fb4:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000fb8:	601a      	str	r2, [r3, #0]
	                }

	                ampSweep = ampStepSweep * triangularAmp;
 8000fba:	4b32      	ldr	r3, [pc, #200]	@ (8001084 <main+0x314>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff fbc2 	bl	8000748 <__aeabi_ui2d>
 8000fc4:	4b31      	ldr	r3, [pc, #196]	@ (800108c <main+0x31c>)
 8000fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fca:	f7ff f951 	bl	8000270 <__aeabi_dmul>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	491e      	ldr	r1, [pc, #120]	@ (800104c <main+0x2dc>)
 8000fd4:	e9c1 2300 	strd	r2, r3, [r1]
	                break;
 8000fd8:	e00c      	b.n	8000ff4 <main+0x284>
	              case FREQUENCY:
	                frequency += 5;
 8000fda:	4b1f      	ldr	r3, [pc, #124]	@ (8001058 <main+0x2e8>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	3305      	adds	r3, #5
 8000fe0:	4a1d      	ldr	r2, [pc, #116]	@ (8001058 <main+0x2e8>)
 8000fe2:	6013      	str	r3, [r2, #0]

	                if (frequency > 50) {
 8000fe4:	4b1c      	ldr	r3, [pc, #112]	@ (8001058 <main+0x2e8>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2b32      	cmp	r3, #50	@ 0x32
 8000fea:	dd02      	ble.n	8000ff2 <main+0x282>
	                	frequency = 50;
 8000fec:	4b1a      	ldr	r3, [pc, #104]	@ (8001058 <main+0x2e8>)
 8000fee:	2232      	movs	r2, #50	@ 0x32
 8000ff0:	601a      	str	r2, [r3, #0]
	                }
	                break;
 8000ff2:	bf00      	nop
	              }

	        if (triangularAmp > 0) {
 8000ff4:	4b23      	ldr	r3, [pc, #140]	@ (8001084 <main+0x314>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d04d      	beq.n	8001098 <main+0x328>
	            waitingTime = 1000000 / (frequency * triangularAmp * 2);
 8000ffc:	4b16      	ldr	r3, [pc, #88]	@ (8001058 <main+0x2e8>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	461a      	mov	r2, r3
 8001002:	4b20      	ldr	r3, [pc, #128]	@ (8001084 <main+0x314>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	fb02 f303 	mul.w	r3, r2, r3
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	4a20      	ldr	r2, [pc, #128]	@ (8001090 <main+0x320>)
 800100e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff fb98 	bl	8000748 <__aeabi_ui2d>
 8001018:	4602      	mov	r2, r0
 800101a:	460b      	mov	r3, r1
 800101c:	491d      	ldr	r1, [pc, #116]	@ (8001094 <main+0x324>)
 800101e:	e9c1 2300 	strd	r2, r3, [r1]
 8001022:	e03f      	b.n	80010a4 <main+0x334>
 8001024:	f3af 8000 	nop.w
 8001028:	00000000 	.word	0x00000000
 800102c:	40affe00 	.word	0x40affe00
 8001030:	200001b0 	.word	0x200001b0
 8001034:	200000ac 	.word	0x200000ac
 8001038:	40021000 	.word	0x40021000
 800103c:	080080fc 	.word	0x080080fc
 8001040:	08008108 	.word	0x08008108
 8001044:	08008118 	.word	0x08008118
 8001048:	08008120 	.word	0x08008120
 800104c:	20000298 	.word	0x20000298
 8001050:	08008128 	.word	0x08008128
 8001054:	0800812c 	.word	0x0800812c
 8001058:	20000008 	.word	0x20000008
 800105c:	08008134 	.word	0x08008134
 8001060:	08008138 	.word	0x08008138
 8001064:	200002ca 	.word	0x200002ca
 8001068:	20000028 	.word	0x20000028
 800106c:	20000288 	.word	0x20000288
 8001070:	200002a0 	.word	0x200002a0
 8001074:	200002a8 	.word	0x200002a8
 8001078:	200002ac 	.word	0x200002ac
 800107c:	20000284 	.word	0x20000284
 8001080:	200002c8 	.word	0x200002c8
 8001084:	20000004 	.word	0x20000004
 8001088:	20000018 	.word	0x20000018
 800108c:	20000010 	.word	0x20000010
 8001090:	000f4240 	.word	0x000f4240
 8001094:	200002c0 	.word	0x200002c0
	        } else {
	            waitingTime = 1000000; // Ou algum valor padrão seguro
 8001098:	4991      	ldr	r1, [pc, #580]	@ (80012e0 <main+0x570>)
 800109a:	a38f      	add	r3, pc, #572	@ (adr r3, 80012d8 <main+0x568>)
 800109c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a0:	e9c1 2300 	strd	r2, r3, [r1]
	        }

	        updateSweepDisplay();
 80010a4:	f000 ffb8 	bl	8002018 <_Z18updateSweepDisplayv>
	      }
	      if (decreaseButton == 1) {
 80010a8:	4b8e      	ldr	r3, [pc, #568]	@ (80012e4 <main+0x574>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	bf0c      	ite	eq
 80010b2:	2301      	moveq	r3, #1
 80010b4:	2300      	movne	r3, #0
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d05b      	beq.n	8001174 <main+0x404>
	        decreaseButton = 0;
 80010bc:	4b89      	ldr	r3, [pc, #548]	@ (80012e4 <main+0x574>)
 80010be:	2200      	movs	r2, #0
 80010c0:	701a      	strb	r2, [r3, #0]

	        switch (currentSweepMode) {
 80010c2:	4b89      	ldr	r3, [pc, #548]	@ (80012e8 <main+0x578>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d002      	beq.n	80010d0 <main+0x360>
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d025      	beq.n	800111a <main+0x3aa>
 80010ce:	e031      	b.n	8001134 <main+0x3c4>
	              case AMPLITUDE:
	            	  if (triangularAmp > minAmplitude + stepForAmplitude) {
 80010d0:	4b86      	ldr	r3, [pc, #536]	@ (80012ec <main+0x57c>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a86      	ldr	r2, [pc, #536]	@ (80012f0 <main+0x580>)
 80010d6:	6812      	ldr	r2, [r2, #0]
 80010d8:	441a      	add	r2, r3
 80010da:	4b86      	ldr	r3, [pc, #536]	@ (80012f4 <main+0x584>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	429a      	cmp	r2, r3
 80010e0:	d207      	bcs.n	80010f2 <main+0x382>
	            	      triangularAmp -= stepForAmplitude;
 80010e2:	4b84      	ldr	r3, [pc, #528]	@ (80012f4 <main+0x584>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a82      	ldr	r2, [pc, #520]	@ (80012f0 <main+0x580>)
 80010e8:	6812      	ldr	r2, [r2, #0]
 80010ea:	1a9b      	subs	r3, r3, r2
 80010ec:	4a81      	ldr	r2, [pc, #516]	@ (80012f4 <main+0x584>)
 80010ee:	6013      	str	r3, [r2, #0]
 80010f0:	e003      	b.n	80010fa <main+0x38a>
	            	  } else {
	            	      triangularAmp = minAmplitude;
 80010f2:	4b7e      	ldr	r3, [pc, #504]	@ (80012ec <main+0x57c>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a7f      	ldr	r2, [pc, #508]	@ (80012f4 <main+0x584>)
 80010f8:	6013      	str	r3, [r2, #0]
	            	  }

	                ampSweep = ampStepSweep * triangularAmp;
 80010fa:	4b7e      	ldr	r3, [pc, #504]	@ (80012f4 <main+0x584>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff fb22 	bl	8000748 <__aeabi_ui2d>
 8001104:	4b7c      	ldr	r3, [pc, #496]	@ (80012f8 <main+0x588>)
 8001106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110a:	f7ff f8b1 	bl	8000270 <__aeabi_dmul>
 800110e:	4602      	mov	r2, r0
 8001110:	460b      	mov	r3, r1
 8001112:	497a      	ldr	r1, [pc, #488]	@ (80012fc <main+0x58c>)
 8001114:	e9c1 2300 	strd	r2, r3, [r1]
	                break;
 8001118:	e00c      	b.n	8001134 <main+0x3c4>
	              case FREQUENCY:
	                frequency -= 5;
 800111a:	4b79      	ldr	r3, [pc, #484]	@ (8001300 <main+0x590>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	3b05      	subs	r3, #5
 8001120:	4a77      	ldr	r2, [pc, #476]	@ (8001300 <main+0x590>)
 8001122:	6013      	str	r3, [r2, #0]

	                if (frequency < 5) {
 8001124:	4b76      	ldr	r3, [pc, #472]	@ (8001300 <main+0x590>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2b04      	cmp	r3, #4
 800112a:	dc02      	bgt.n	8001132 <main+0x3c2>
	                	frequency = 5;
 800112c:	4b74      	ldr	r3, [pc, #464]	@ (8001300 <main+0x590>)
 800112e:	2205      	movs	r2, #5
 8001130:	601a      	str	r2, [r3, #0]
	                }
	                break;
 8001132:	bf00      	nop
	              }

	        if (triangularAmp > 0) {
 8001134:	4b6f      	ldr	r3, [pc, #444]	@ (80012f4 <main+0x584>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d013      	beq.n	8001164 <main+0x3f4>
	            waitingTime = 1000000 / (frequency * triangularAmp * 2);
 800113c:	4b70      	ldr	r3, [pc, #448]	@ (8001300 <main+0x590>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	461a      	mov	r2, r3
 8001142:	4b6c      	ldr	r3, [pc, #432]	@ (80012f4 <main+0x584>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	fb02 f303 	mul.w	r3, r2, r3
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	4a6d      	ldr	r2, [pc, #436]	@ (8001304 <main+0x594>)
 800114e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff faf8 	bl	8000748 <__aeabi_ui2d>
 8001158:	4602      	mov	r2, r0
 800115a:	460b      	mov	r3, r1
 800115c:	4960      	ldr	r1, [pc, #384]	@ (80012e0 <main+0x570>)
 800115e:	e9c1 2300 	strd	r2, r3, [r1]
 8001162:	e005      	b.n	8001170 <main+0x400>
	        } else {
	            waitingTime = 1000000; // Ou algum valor padrão seguro
 8001164:	495e      	ldr	r1, [pc, #376]	@ (80012e0 <main+0x570>)
 8001166:	a35c      	add	r3, pc, #368	@ (adr r3, 80012d8 <main+0x568>)
 8001168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800116c:	e9c1 2300 	strd	r2, r3, [r1]
	        }

	        updateSweepDisplay();
 8001170:	f000 ff52 	bl	8002018 <_Z18updateSweepDisplayv>
	      }

	      if (selectButton == 1) {
 8001174:	4b64      	ldr	r3, [pc, #400]	@ (8001308 <main+0x598>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	b2db      	uxtb	r3, r3
 800117a:	2b01      	cmp	r3, #1
 800117c:	bf0c      	ite	eq
 800117e:	2301      	moveq	r3, #1
 8001180:	2300      	movne	r3, #0
 8001182:	b2db      	uxtb	r3, r3
 8001184:	2b00      	cmp	r3, #0
 8001186:	d00f      	beq.n	80011a8 <main+0x438>
	          selectButton = 0;
 8001188:	4b5f      	ldr	r3, [pc, #380]	@ (8001308 <main+0x598>)
 800118a:	2200      	movs	r2, #0
 800118c:	701a      	strb	r2, [r3, #0]

	          currentSweepMode = static_cast<SweepMode>((currentSweepMode + 1) % 2);
 800118e:	4b56      	ldr	r3, [pc, #344]	@ (80012e8 <main+0x578>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	3301      	adds	r3, #1
 8001194:	2b00      	cmp	r3, #0
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	bfb8      	it	lt
 800119c:	425b      	neglt	r3, r3
 800119e:	b2da      	uxtb	r2, r3
 80011a0:	4b51      	ldr	r3, [pc, #324]	@ (80012e8 <main+0x578>)
 80011a2:	701a      	strb	r2, [r3, #0]
	          updateSweepDisplay();
 80011a4:	f000 ff38 	bl	8002018 <_Z18updateSweepDisplayv>
	      }

	      if (modeButton == 1) {
 80011a8:	4b58      	ldr	r3, [pc, #352]	@ (800130c <main+0x59c>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	bf0c      	ite	eq
 80011b2:	2301      	moveq	r3, #1
 80011b4:	2300      	movne	r3, #0
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	f43f ae4f 	beq.w	8000e5c <main+0xec>
	    	modeButton = 0;
 80011be:	4b53      	ldr	r3, [pc, #332]	@ (800130c <main+0x59c>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	701a      	strb	r2, [r3, #0]

	        currentSystemMode = static_cast<SystemMode>((currentSystemMode + 1) % 2);
 80011c4:	4b52      	ldr	r3, [pc, #328]	@ (8001310 <main+0x5a0>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	3301      	adds	r3, #1
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	f003 0301 	and.w	r3, r3, #1
 80011d0:	bfb8      	it	lt
 80011d2:	425b      	neglt	r3, r3
 80011d4:	b2da      	uxtb	r2, r3
 80011d6:	4b4e      	ldr	r3, [pc, #312]	@ (8001310 <main+0x5a0>)
 80011d8:	701a      	strb	r2, [r3, #0]

	        switch (currentSystemMode) {
 80011da:	4b4d      	ldr	r3, [pc, #308]	@ (8001310 <main+0x5a0>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d002      	beq.n	80011e8 <main+0x478>
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d00b      	beq.n	80011fe <main+0x48e>
 80011e6:	e019      	b.n	800121c <main+0x4ac>
	          case SWEEP:
	            dacValue = 0;
 80011e8:	494a      	ldr	r1, [pc, #296]	@ (8001314 <main+0x5a4>)
 80011ea:	f04f 0200 	mov.w	r2, #0
 80011ee:	f04f 0300 	mov.w	r3, #0
 80011f2:	e9c1 2300 	strd	r2, r3, [r1]
	            stepDirection = 1;
 80011f6:	4b48      	ldr	r3, [pc, #288]	@ (8001318 <main+0x5a8>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	601a      	str	r2, [r3, #0]
	            break;
 80011fc:	e00e      	b.n	800121c <main+0x4ac>
	          case LOCK:
	        	dacValue = targetDacValue;
 80011fe:	4b47      	ldr	r3, [pc, #284]	@ (800131c <main+0x5ac>)
 8001200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001204:	4943      	ldr	r1, [pc, #268]	@ (8001314 <main+0x5a4>)
 8001206:	e9c1 2300 	strd	r2, r3, [r1]
	            lastAdcValue = adcValue - 1;
 800120a:	4b45      	ldr	r3, [pc, #276]	@ (8001320 <main+0x5b0>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	3b01      	subs	r3, #1
 8001210:	4a44      	ldr	r2, [pc, #272]	@ (8001324 <main+0x5b4>)
 8001212:	6013      	str	r3, [r2, #0]
	            stepDirection = 1;
 8001214:	4b40      	ldr	r3, [pc, #256]	@ (8001318 <main+0x5a8>)
 8001216:	2201      	movs	r2, #1
 8001218:	601a      	str	r2, [r3, #0]
	            break;
 800121a:	bf00      	nop
	        }

	        switch (currentSystemMode) {
 800121c:	4b3c      	ldr	r3, [pc, #240]	@ (8001310 <main+0x5a0>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d002      	beq.n	800122a <main+0x4ba>
 8001224:	2b01      	cmp	r3, #1
 8001226:	d003      	beq.n	8001230 <main+0x4c0>
 8001228:	e1bc      	b.n	80015a4 <main+0x834>
	        case SWEEP:
	        	  updateSweepDisplay();
 800122a:	f000 fef5 	bl	8002018 <_Z18updateSweepDisplayv>
	        break;
 800122e:	e1b9      	b.n	80015a4 <main+0x834>
	        case LOCK:
	        	  updateLockDisplay();
 8001230:	f000 ff58 	bl	80020e4 <_Z17updateLockDisplayv>
	        break;
 8001234:	e1b6      	b.n	80015a4 <main+0x834>
	      //if (dacValue != lastSentDac) {
	      //    sendI2CData(I2C_ADDRESS, dacValue);
	      //    lastSentDac = dacValue;
	      //}
	    }
	  else if (currentSystemMode == LOCK) {
 8001236:	4b36      	ldr	r3, [pc, #216]	@ (8001310 <main+0x5a0>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	2b01      	cmp	r3, #1
 800123c:	f47f ae0e 	bne.w	8000e5c <main+0xec>
	      dacValue += stepDirection * stepsLocking;
 8001240:	4b35      	ldr	r3, [pc, #212]	@ (8001318 <main+0x5a8>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a38      	ldr	r2, [pc, #224]	@ (8001328 <main+0x5b8>)
 8001246:	6812      	ldr	r2, [r2, #0]
 8001248:	fb02 f303 	mul.w	r3, r2, r3
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff fa8b 	bl	8000768 <__aeabi_i2d>
 8001252:	4b30      	ldr	r3, [pc, #192]	@ (8001314 <main+0x5a4>)
 8001254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001258:	f7ff f93a 	bl	80004d0 <__adddf3>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	492c      	ldr	r1, [pc, #176]	@ (8001314 <main+0x5a4>)
 8001262:	e9c1 2300 	strd	r2, r3, [r1]
	      sendI2CData(I2C_ADDRESS, dacValue);
 8001266:	4b31      	ldr	r3, [pc, #196]	@ (800132c <main+0x5bc>)
 8001268:	781c      	ldrb	r4, [r3, #0]
 800126a:	4b2a      	ldr	r3, [pc, #168]	@ (8001314 <main+0x5a4>)
 800126c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001270:	4610      	mov	r0, r2
 8001272:	4619      	mov	r1, r3
 8001274:	f7ff fb92 	bl	800099c <__aeabi_d2uiz>
 8001278:	4603      	mov	r3, r0
 800127a:	b29b      	uxth	r3, r3
 800127c:	4619      	mov	r1, r3
 800127e:	4620      	mov	r0, r4
 8001280:	f000 fea4 	bl	8001fcc <sendI2CData>

	      //Verifica a resposta do sistema, fazendo uma média na leitura para filtrar o ruído
	      long adcSum = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	60fb      	str	r3, [r7, #12]

	      for (int i = 0; i < numReadings; i++) {
 8001288:	2300      	movs	r3, #0
 800128a:	60bb      	str	r3, [r7, #8]
 800128c:	e00c      	b.n	80012a8 <main+0x538>
	        adcSum += HAL_ADC_GetValue(&hadc1);
 800128e:	4828      	ldr	r0, [pc, #160]	@ (8001330 <main+0x5c0>)
 8001290:	f002 fd7c 	bl	8003d8c <HAL_ADC_GetValue>
 8001294:	4602      	mov	r2, r0
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	4413      	add	r3, r2
 800129a:	60fb      	str	r3, [r7, #12]
	        HAL_Delay(5);  // Pequeno delay entre leituras para evitar leituras muito rápidas
 800129c:	2005      	movs	r0, #5
 800129e:	f002 f87f 	bl	80033a0 <HAL_Delay>
	      for (int i = 0; i < numReadings; i++) {
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	3301      	adds	r3, #1
 80012a6:	60bb      	str	r3, [r7, #8]
 80012a8:	4b22      	ldr	r3, [pc, #136]	@ (8001334 <main+0x5c4>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	68ba      	ldr	r2, [r7, #8]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	dbed      	blt.n	800128e <main+0x51e>
	      }

	      adcValue = adcSum / numReadings; //ficou diferente
 80012b2:	4b20      	ldr	r3, [pc, #128]	@ (8001334 <main+0x5c4>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	68fa      	ldr	r2, [r7, #12]
 80012b8:	fb92 f3f3 	sdiv	r3, r2, r3
 80012bc:	4a18      	ldr	r2, [pc, #96]	@ (8001320 <main+0x5b0>)
 80012be:	6013      	str	r3, [r2, #0]

	      // Executa a comparação e ajuste de direção caso necessário
	      if (adcValue > lastAdcValue) {
 80012c0:	4b17      	ldr	r3, [pc, #92]	@ (8001320 <main+0x5b0>)
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	4b17      	ldr	r3, [pc, #92]	@ (8001324 <main+0x5b4>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	dd35      	ble.n	8001338 <main+0x5c8>
	    	stepDirection = stepDirection;
 80012cc:	4b12      	ldr	r3, [pc, #72]	@ (8001318 <main+0x5a8>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a11      	ldr	r2, [pc, #68]	@ (8001318 <main+0x5a8>)
 80012d2:	6013      	str	r3, [r2, #0]
 80012d4:	e03b      	b.n	800134e <main+0x5de>
 80012d6:	bf00      	nop
 80012d8:	00000000 	.word	0x00000000
 80012dc:	412e8480 	.word	0x412e8480
 80012e0:	200002c0 	.word	0x200002c0
 80012e4:	20000285 	.word	0x20000285
 80012e8:	200002c8 	.word	0x200002c8
 80012ec:	2000001c 	.word	0x2000001c
 80012f0:	20000018 	.word	0x20000018
 80012f4:	20000004 	.word	0x20000004
 80012f8:	20000010 	.word	0x20000010
 80012fc:	20000298 	.word	0x20000298
 8001300:	20000008 	.word	0x20000008
 8001304:	000f4240 	.word	0x000f4240
 8001308:	20000286 	.word	0x20000286
 800130c:	20000287 	.word	0x20000287
 8001310:	200002ca 	.word	0x200002ca
 8001314:	20000288 	.word	0x20000288
 8001318:	20000028 	.word	0x20000028
 800131c:	20000290 	.word	0x20000290
 8001320:	200002a0 	.word	0x200002a0
 8001324:	200002a4 	.word	0x200002a4
 8001328:	20000024 	.word	0x20000024
 800132c:	20000000 	.word	0x20000000
 8001330:	200000ac 	.word	0x200000ac
 8001334:	20000020 	.word	0x20000020
	      } else if (adcValue < lastAdcValue) {
 8001338:	4b9b      	ldr	r3, [pc, #620]	@ (80015a8 <main+0x838>)
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	4b9b      	ldr	r3, [pc, #620]	@ (80015ac <main+0x83c>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	429a      	cmp	r2, r3
 8001342:	da04      	bge.n	800134e <main+0x5de>
	    	stepDirection = -stepDirection;
 8001344:	4b9a      	ldr	r3, [pc, #616]	@ (80015b0 <main+0x840>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	425b      	negs	r3, r3
 800134a:	4a99      	ldr	r2, [pc, #612]	@ (80015b0 <main+0x840>)
 800134c:	6013      	str	r3, [r2, #0]
	      }

	      lastAdcValue = adcValue; // Atualiza a variável de última leitura do ADC
 800134e:	4b96      	ldr	r3, [pc, #600]	@ (80015a8 <main+0x838>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a96      	ldr	r2, [pc, #600]	@ (80015ac <main+0x83c>)
 8001354:	6013      	str	r3, [r2, #0]

	      if (increaseButton == 1) {
 8001356:	4b97      	ldr	r3, [pc, #604]	@ (80015b4 <main+0x844>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	b2db      	uxtb	r3, r3
 800135c:	2b01      	cmp	r3, #1
 800135e:	bf0c      	ite	eq
 8001360:	2301      	moveq	r3, #1
 8001362:	2300      	movne	r3, #0
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2b00      	cmp	r3, #0
 8001368:	d04b      	beq.n	8001402 <main+0x692>
	        increaseButton = 0;
 800136a:	4b92      	ldr	r3, [pc, #584]	@ (80015b4 <main+0x844>)
 800136c:	2200      	movs	r2, #0
 800136e:	701a      	strb	r2, [r3, #0]

	        switch (currentLockMode) {
 8001370:	4b91      	ldr	r3, [pc, #580]	@ (80015b8 <main+0x848>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b02      	cmp	r3, #2
 8001376:	d03b      	beq.n	80013f0 <main+0x680>
 8001378:	2b02      	cmp	r3, #2
 800137a:	dc40      	bgt.n	80013fe <main+0x68e>
 800137c:	2b00      	cmp	r3, #0
 800137e:	d031      	beq.n	80013e4 <main+0x674>
 8001380:	2b01      	cmp	r3, #1
 8001382:	d13c      	bne.n	80013fe <main+0x68e>
	                case PEAK:
	                  if (!peaksPositions.empty()) {
 8001384:	488d      	ldr	r0, [pc, #564]	@ (80015bc <main+0x84c>)
 8001386:	f000 ff8a 	bl	800229e <_ZNKSt6vectorIjSaIjEE5emptyEv>
 800138a:	4603      	mov	r3, r0
 800138c:	f083 0301 	eor.w	r3, r3, #1
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	d032      	beq.n	80013fc <main+0x68c>
	                    currentPeakIndex = (currentPeakIndex + 1) % peaksPositions.size();
 8001396:	4b8a      	ldr	r3, [pc, #552]	@ (80015c0 <main+0x850>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	3301      	adds	r3, #1
 800139c:	461c      	mov	r4, r3
 800139e:	4887      	ldr	r0, [pc, #540]	@ (80015bc <main+0x84c>)
 80013a0:	f000 ff98 	bl	80022d4 <_ZNKSt6vectorIjSaIjEE4sizeEv>
 80013a4:	4603      	mov	r3, r0
 80013a6:	fbb4 f2f3 	udiv	r2, r4, r3
 80013aa:	fb02 f303 	mul.w	r3, r2, r3
 80013ae:	1ae3      	subs	r3, r4, r3
 80013b0:	461a      	mov	r2, r3
 80013b2:	4b83      	ldr	r3, [pc, #524]	@ (80015c0 <main+0x850>)
 80013b4:	601a      	str	r2, [r3, #0]
	                    targetDacValue = peaksPositions[currentPeakIndex];
 80013b6:	4b82      	ldr	r3, [pc, #520]	@ (80015c0 <main+0x850>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4619      	mov	r1, r3
 80013bc:	487f      	ldr	r0, [pc, #508]	@ (80015bc <main+0x84c>)
 80013be:	f000 ff99 	bl	80022f4 <_ZNSt6vectorIjSaIjEEixEj>
 80013c2:	4603      	mov	r3, r0
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff f9be 	bl	8000748 <__aeabi_ui2d>
 80013cc:	4602      	mov	r2, r0
 80013ce:	460b      	mov	r3, r1
 80013d0:	497c      	ldr	r1, [pc, #496]	@ (80015c4 <main+0x854>)
 80013d2:	e9c1 2300 	strd	r2, r3, [r1]
	                    dacValue = targetDacValue;
 80013d6:	4b7b      	ldr	r3, [pc, #492]	@ (80015c4 <main+0x854>)
 80013d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013dc:	497a      	ldr	r1, [pc, #488]	@ (80015c8 <main+0x858>)
 80013de:	e9c1 2300 	strd	r2, r3, [r1]
	                  }
	                  break;
 80013e2:	e00b      	b.n	80013fc <main+0x68c>
	                case STEP:
	                	stepsLocking++;
 80013e4:	4b79      	ldr	r3, [pc, #484]	@ (80015cc <main+0x85c>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	3301      	adds	r3, #1
 80013ea:	4a78      	ldr	r2, [pc, #480]	@ (80015cc <main+0x85c>)
 80013ec:	6013      	str	r3, [r2, #0]
	                  break;
 80013ee:	e006      	b.n	80013fe <main+0x68e>
	                case AMOSTRAS:
	                	numReadings++;
 80013f0:	4b77      	ldr	r3, [pc, #476]	@ (80015d0 <main+0x860>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	3301      	adds	r3, #1
 80013f6:	4a76      	ldr	r2, [pc, #472]	@ (80015d0 <main+0x860>)
 80013f8:	6013      	str	r3, [r2, #0]
	                	break;
 80013fa:	e000      	b.n	80013fe <main+0x68e>
	                  break;
 80013fc:	bf00      	nop
	              }

	        updateLockDisplay();
 80013fe:	f000 fe71 	bl	80020e4 <_Z17updateLockDisplayv>
	      }

	      if(decreaseButton == 1) {
 8001402:	4b74      	ldr	r3, [pc, #464]	@ (80015d4 <main+0x864>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	b2db      	uxtb	r3, r3
 8001408:	2b01      	cmp	r3, #1
 800140a:	bf0c      	ite	eq
 800140c:	2301      	moveq	r3, #1
 800140e:	2300      	movne	r3, #0
 8001410:	b2db      	uxtb	r3, r3
 8001412:	2b00      	cmp	r3, #0
 8001414:	d061      	beq.n	80014da <main+0x76a>
	        decreaseButton = 0;
 8001416:	4b6f      	ldr	r3, [pc, #444]	@ (80015d4 <main+0x864>)
 8001418:	2200      	movs	r2, #0
 800141a:	701a      	strb	r2, [r3, #0]

	        switch (currentLockMode) {
 800141c:	4b66      	ldr	r3, [pc, #408]	@ (80015b8 <main+0x848>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b02      	cmp	r3, #2
 8001422:	d046      	beq.n	80014b2 <main+0x742>
 8001424:	2b02      	cmp	r3, #2
 8001426:	dc56      	bgt.n	80014d6 <main+0x766>
 8001428:	2b00      	cmp	r3, #0
 800142a:	d035      	beq.n	8001498 <main+0x728>
 800142c:	2b01      	cmp	r3, #1
 800142e:	d152      	bne.n	80014d6 <main+0x766>
	        case PEAK:
	          if (!peaksPositions.empty()) {
 8001430:	4862      	ldr	r0, [pc, #392]	@ (80015bc <main+0x84c>)
 8001432:	f000 ff34 	bl	800229e <_ZNKSt6vectorIjSaIjEE5emptyEv>
 8001436:	4603      	mov	r3, r0
 8001438:	f083 0301 	eor.w	r3, r3, #1
 800143c:	b2db      	uxtb	r3, r3
 800143e:	2b00      	cmp	r3, #0
 8001440:	d044      	beq.n	80014cc <main+0x75c>
	            currentPeakIndex = (currentPeakIndex - 1 + peaksPositions.size()) % peaksPositions.size();
 8001442:	485e      	ldr	r0, [pc, #376]	@ (80015bc <main+0x84c>)
 8001444:	f000 ff46 	bl	80022d4 <_ZNKSt6vectorIjSaIjEE4sizeEv>
 8001448:	4603      	mov	r3, r0
 800144a:	4a5d      	ldr	r2, [pc, #372]	@ (80015c0 <main+0x850>)
 800144c:	6812      	ldr	r2, [r2, #0]
 800144e:	4413      	add	r3, r2
 8001450:	1e5c      	subs	r4, r3, #1
 8001452:	485a      	ldr	r0, [pc, #360]	@ (80015bc <main+0x84c>)
 8001454:	f000 ff3e 	bl	80022d4 <_ZNKSt6vectorIjSaIjEE4sizeEv>
 8001458:	4603      	mov	r3, r0
 800145a:	fbb4 f2f3 	udiv	r2, r4, r3
 800145e:	fb02 f303 	mul.w	r3, r2, r3
 8001462:	1ae3      	subs	r3, r4, r3
 8001464:	461a      	mov	r2, r3
 8001466:	4b56      	ldr	r3, [pc, #344]	@ (80015c0 <main+0x850>)
 8001468:	601a      	str	r2, [r3, #0]
	            targetDacValue = peaksPositions[currentPeakIndex];
 800146a:	4b55      	ldr	r3, [pc, #340]	@ (80015c0 <main+0x850>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4619      	mov	r1, r3
 8001470:	4852      	ldr	r0, [pc, #328]	@ (80015bc <main+0x84c>)
 8001472:	f000 ff3f 	bl	80022f4 <_ZNSt6vectorIjSaIjEEixEj>
 8001476:	4603      	mov	r3, r0
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff f964 	bl	8000748 <__aeabi_ui2d>
 8001480:	4602      	mov	r2, r0
 8001482:	460b      	mov	r3, r1
 8001484:	494f      	ldr	r1, [pc, #316]	@ (80015c4 <main+0x854>)
 8001486:	e9c1 2300 	strd	r2, r3, [r1]
	            dacValue = targetDacValue;
 800148a:	4b4e      	ldr	r3, [pc, #312]	@ (80015c4 <main+0x854>)
 800148c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001490:	494d      	ldr	r1, [pc, #308]	@ (80015c8 <main+0x858>)
 8001492:	e9c1 2300 	strd	r2, r3, [r1]
	          }
	          break;
 8001496:	e019      	b.n	80014cc <main+0x75c>
	        case STEP:
	      	  stepsLocking--;
 8001498:	4b4c      	ldr	r3, [pc, #304]	@ (80015cc <main+0x85c>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	3b01      	subs	r3, #1
 800149e:	4a4b      	ldr	r2, [pc, #300]	@ (80015cc <main+0x85c>)
 80014a0:	6013      	str	r3, [r2, #0]
	          if (stepsLocking < 1) {
 80014a2:	4b4a      	ldr	r3, [pc, #296]	@ (80015cc <main+0x85c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	dc12      	bgt.n	80014d0 <main+0x760>
	          	stepsLocking = 1;
 80014aa:	4b48      	ldr	r3, [pc, #288]	@ (80015cc <main+0x85c>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	601a      	str	r2, [r3, #0]
	          }
	          break;
 80014b0:	e00e      	b.n	80014d0 <main+0x760>
	        case AMOSTRAS:
	          numReadings--;
 80014b2:	4b47      	ldr	r3, [pc, #284]	@ (80015d0 <main+0x860>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	3b01      	subs	r3, #1
 80014b8:	4a45      	ldr	r2, [pc, #276]	@ (80015d0 <main+0x860>)
 80014ba:	6013      	str	r3, [r2, #0]
	          if (numReadings < 1) {
 80014bc:	4b44      	ldr	r3, [pc, #272]	@ (80015d0 <main+0x860>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	dc07      	bgt.n	80014d4 <main+0x764>
	          	numReadings = 1;
 80014c4:	4b42      	ldr	r3, [pc, #264]	@ (80015d0 <main+0x860>)
 80014c6:	2201      	movs	r2, #1
 80014c8:	601a      	str	r2, [r3, #0]
	          }
	          break;
 80014ca:	e003      	b.n	80014d4 <main+0x764>
	          break;
 80014cc:	bf00      	nop
 80014ce:	e002      	b.n	80014d6 <main+0x766>
	          break;
 80014d0:	bf00      	nop
 80014d2:	e000      	b.n	80014d6 <main+0x766>
	          break;
 80014d4:	bf00      	nop
	        }

	        updateLockDisplay();
 80014d6:	f000 fe05 	bl	80020e4 <_Z17updateLockDisplayv>
	      }

	      if(selectButton == 1) {
 80014da:	4b3f      	ldr	r3, [pc, #252]	@ (80015d8 <main+0x868>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	bf0c      	ite	eq
 80014e4:	2301      	moveq	r3, #1
 80014e6:	2300      	movne	r3, #0
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d013      	beq.n	8001516 <main+0x7a6>
	    	selectButton = 0;
 80014ee:	4b3a      	ldr	r3, [pc, #232]	@ (80015d8 <main+0x868>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	701a      	strb	r2, [r3, #0]

	    	currentLockMode = static_cast<LockMode>((currentLockMode + 1) % 3);
 80014f4:	4b30      	ldr	r3, [pc, #192]	@ (80015b8 <main+0x848>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	1c5a      	adds	r2, r3, #1
 80014fa:	4b38      	ldr	r3, [pc, #224]	@ (80015dc <main+0x86c>)
 80014fc:	fb83 3102 	smull	r3, r1, r3, r2
 8001500:	17d3      	asrs	r3, r2, #31
 8001502:	1ac9      	subs	r1, r1, r3
 8001504:	460b      	mov	r3, r1
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	440b      	add	r3, r1
 800150a:	1ad1      	subs	r1, r2, r3
 800150c:	b2ca      	uxtb	r2, r1
 800150e:	4b2a      	ldr	r3, [pc, #168]	@ (80015b8 <main+0x848>)
 8001510:	701a      	strb	r2, [r3, #0]
	    	updateLockDisplay();
 8001512:	f000 fde7 	bl	80020e4 <_Z17updateLockDisplayv>
	      }

	      if(modeButton == 1) {
 8001516:	4b32      	ldr	r3, [pc, #200]	@ (80015e0 <main+0x870>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	b2db      	uxtb	r3, r3
 800151c:	2b01      	cmp	r3, #1
 800151e:	bf0c      	ite	eq
 8001520:	2301      	moveq	r3, #1
 8001522:	2300      	movne	r3, #0
 8001524:	b2db      	uxtb	r3, r3
 8001526:	2b00      	cmp	r3, #0
 8001528:	f43f ac98 	beq.w	8000e5c <main+0xec>
	        modeButton = 0;
 800152c:	4b2c      	ldr	r3, [pc, #176]	@ (80015e0 <main+0x870>)
 800152e:	2200      	movs	r2, #0
 8001530:	701a      	strb	r2, [r3, #0]

	        currentSystemMode = static_cast<SystemMode>((currentSystemMode + 1) % 2);  //alternates between SWEEP e LOCK
 8001532:	4b2c      	ldr	r3, [pc, #176]	@ (80015e4 <main+0x874>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	3301      	adds	r3, #1
 8001538:	2b00      	cmp	r3, #0
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	bfb8      	it	lt
 8001540:	425b      	neglt	r3, r3
 8001542:	b2da      	uxtb	r2, r3
 8001544:	4b27      	ldr	r3, [pc, #156]	@ (80015e4 <main+0x874>)
 8001546:	701a      	strb	r2, [r3, #0]

	        switch (currentSystemMode) {
 8001548:	4b26      	ldr	r3, [pc, #152]	@ (80015e4 <main+0x874>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d002      	beq.n	8001556 <main+0x7e6>
 8001550:	2b01      	cmp	r3, #1
 8001552:	d00b      	beq.n	800156c <main+0x7fc>
 8001554:	e019      	b.n	800158a <main+0x81a>
	          case SWEEP:
	            dacValue = 0;
 8001556:	491c      	ldr	r1, [pc, #112]	@ (80015c8 <main+0x858>)
 8001558:	f04f 0200 	mov.w	r2, #0
 800155c:	f04f 0300 	mov.w	r3, #0
 8001560:	e9c1 2300 	strd	r2, r3, [r1]
	            stepDirection = 1;
 8001564:	4b12      	ldr	r3, [pc, #72]	@ (80015b0 <main+0x840>)
 8001566:	2201      	movs	r2, #1
 8001568:	601a      	str	r2, [r3, #0]
	            break;
 800156a:	e00e      	b.n	800158a <main+0x81a>
	          case LOCK:
	        	dacValue = targetDacValue;
 800156c:	4b15      	ldr	r3, [pc, #84]	@ (80015c4 <main+0x854>)
 800156e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001572:	4915      	ldr	r1, [pc, #84]	@ (80015c8 <main+0x858>)
 8001574:	e9c1 2300 	strd	r2, r3, [r1]
	            lastAdcValue = adcValue - 1;
 8001578:	4b0b      	ldr	r3, [pc, #44]	@ (80015a8 <main+0x838>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	3b01      	subs	r3, #1
 800157e:	4a0b      	ldr	r2, [pc, #44]	@ (80015ac <main+0x83c>)
 8001580:	6013      	str	r3, [r2, #0]
	            stepDirection = 1;
 8001582:	4b0b      	ldr	r3, [pc, #44]	@ (80015b0 <main+0x840>)
 8001584:	2201      	movs	r2, #1
 8001586:	601a      	str	r2, [r3, #0]
	            break;
 8001588:	bf00      	nop
	        }

	        switch (currentSystemMode) {
 800158a:	4b16      	ldr	r3, [pc, #88]	@ (80015e4 <main+0x874>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d002      	beq.n	8001598 <main+0x828>
 8001592:	2b01      	cmp	r3, #1
 8001594:	d003      	beq.n	800159e <main+0x82e>
 8001596:	e005      	b.n	80015a4 <main+0x834>
	        case SWEEP:
	        	updateSweepDisplay();
 8001598:	f000 fd3e 	bl	8002018 <_Z18updateSweepDisplayv>
	        break;
 800159c:	e002      	b.n	80015a4 <main+0x834>
	        case LOCK:
	        	updateLockDisplay();
 800159e:	f000 fda1 	bl	80020e4 <_Z17updateLockDisplayv>
	          break;
 80015a2:	bf00      	nop
	        }
	      }
	    }
    /* USER CODE BEGIN 3 */
  }
 80015a4:	e45a      	b.n	8000e5c <main+0xec>
 80015a6:	bf00      	nop
 80015a8:	200002a0 	.word	0x200002a0
 80015ac:	200002a4 	.word	0x200002a4
 80015b0:	20000028 	.word	0x20000028
 80015b4:	20000284 	.word	0x20000284
 80015b8:	200002c9 	.word	0x200002c9
 80015bc:	200002ac 	.word	0x200002ac
 80015c0:	200002b8 	.word	0x200002b8
 80015c4:	20000290 	.word	0x20000290
 80015c8:	20000288 	.word	0x20000288
 80015cc:	20000024 	.word	0x20000024
 80015d0:	20000020 	.word	0x20000020
 80015d4:	20000285 	.word	0x20000285
 80015d8:	20000286 	.word	0x20000286
 80015dc:	55555556 	.word	0x55555556
 80015e0:	20000287 	.word	0x20000287
 80015e4:	200002ca 	.word	0x200002ca

080015e8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b096      	sub	sp, #88	@ 0x58
 80015ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ee:	f107 0314 	add.w	r3, r7, #20
 80015f2:	2244      	movs	r2, #68	@ 0x44
 80015f4:	2100      	movs	r1, #0
 80015f6:	4618      	mov	r0, r3
 80015f8:	f006 f97a 	bl	80078f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015fc:	463b      	mov	r3, r7
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	605a      	str	r2, [r3, #4]
 8001604:	609a      	str	r2, [r3, #8]
 8001606:	60da      	str	r2, [r3, #12]
 8001608:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800160a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800160e:	f004 f83f 	bl	8005690 <HAL_PWREx_ControlVoltageScaling>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	bf14      	ite	ne
 8001618:	2301      	movne	r3, #1
 800161a:	2300      	moveq	r3, #0
 800161c:	b2db      	uxtb	r3, r3
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 8001622:	f000 fde1 	bl	80021e8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001626:	2310      	movs	r3, #16
 8001628:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800162a:	2301      	movs	r3, #1
 800162c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800162e:	2300      	movs	r3, #0
 8001630:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001632:	2360      	movs	r3, #96	@ 0x60
 8001634:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001636:	2300      	movs	r3, #0
 8001638:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800163a:	f107 0314 	add.w	r3, r7, #20
 800163e:	4618      	mov	r0, r3
 8001640:	f004 f87c 	bl	800573c <HAL_RCC_OscConfig>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	bf14      	ite	ne
 800164a:	2301      	movne	r3, #1
 800164c:	2300      	moveq	r3, #0
 800164e:	b2db      	uxtb	r3, r3
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8001654:	f000 fdc8 	bl	80021e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001658:	230f      	movs	r3, #15
 800165a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800165c:	2300      	movs	r3, #0
 800165e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001660:	2300      	movs	r3, #0
 8001662:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001664:	2300      	movs	r3, #0
 8001666:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001668:	2300      	movs	r3, #0
 800166a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800166c:	463b      	mov	r3, r7
 800166e:	2100      	movs	r1, #0
 8001670:	4618      	mov	r0, r3
 8001672:	f004 fcc5 	bl	8006000 <HAL_RCC_ClockConfig>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	bf14      	ite	ne
 800167c:	2301      	movne	r3, #1
 800167e:	2300      	moveq	r3, #0
 8001680:	b2db      	uxtb	r3, r3
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8001686:	f000 fdaf 	bl	80021e8 <Error_Handler>
  }
}
 800168a:	bf00      	nop
 800168c:	3758      	adds	r7, #88	@ 0x58
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
	...

08001694 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b08a      	sub	sp, #40	@ 0x28
 8001698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800169a:	f107 031c 	add.w	r3, r7, #28
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	605a      	str	r2, [r3, #4]
 80016a4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80016a6:	1d3b      	adds	r3, r7, #4
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	605a      	str	r2, [r3, #4]
 80016ae:	609a      	str	r2, [r3, #8]
 80016b0:	60da      	str	r2, [r3, #12]
 80016b2:	611a      	str	r2, [r3, #16]
 80016b4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80016b6:	4b37      	ldr	r3, [pc, #220]	@ (8001794 <_ZL12MX_ADC1_Initv+0x100>)
 80016b8:	4a37      	ldr	r2, [pc, #220]	@ (8001798 <_ZL12MX_ADC1_Initv+0x104>)
 80016ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80016bc:	4b35      	ldr	r3, [pc, #212]	@ (8001794 <_ZL12MX_ADC1_Initv+0x100>)
 80016be:	2200      	movs	r2, #0
 80016c0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016c2:	4b34      	ldr	r3, [pc, #208]	@ (8001794 <_ZL12MX_ADC1_Initv+0x100>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016c8:	4b32      	ldr	r3, [pc, #200]	@ (8001794 <_ZL12MX_ADC1_Initv+0x100>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80016ce:	4b31      	ldr	r3, [pc, #196]	@ (8001794 <_ZL12MX_ADC1_Initv+0x100>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016d4:	4b2f      	ldr	r3, [pc, #188]	@ (8001794 <_ZL12MX_ADC1_Initv+0x100>)
 80016d6:	2204      	movs	r2, #4
 80016d8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80016da:	4b2e      	ldr	r3, [pc, #184]	@ (8001794 <_ZL12MX_ADC1_Initv+0x100>)
 80016dc:	2200      	movs	r2, #0
 80016de:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80016e0:	4b2c      	ldr	r3, [pc, #176]	@ (8001794 <_ZL12MX_ADC1_Initv+0x100>)
 80016e2:	2201      	movs	r2, #1
 80016e4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80016e6:	4b2b      	ldr	r3, [pc, #172]	@ (8001794 <_ZL12MX_ADC1_Initv+0x100>)
 80016e8:	2201      	movs	r2, #1
 80016ea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016ec:	4b29      	ldr	r3, [pc, #164]	@ (8001794 <_ZL12MX_ADC1_Initv+0x100>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016f4:	4b27      	ldr	r3, [pc, #156]	@ (8001794 <_ZL12MX_ADC1_Initv+0x100>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016fa:	4b26      	ldr	r3, [pc, #152]	@ (8001794 <_ZL12MX_ADC1_Initv+0x100>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001700:	4b24      	ldr	r3, [pc, #144]	@ (8001794 <_ZL12MX_ADC1_Initv+0x100>)
 8001702:	2200      	movs	r2, #0
 8001704:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001708:	4b22      	ldr	r3, [pc, #136]	@ (8001794 <_ZL12MX_ADC1_Initv+0x100>)
 800170a:	2200      	movs	r2, #0
 800170c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800170e:	4b21      	ldr	r3, [pc, #132]	@ (8001794 <_ZL12MX_ADC1_Initv+0x100>)
 8001710:	2200      	movs	r2, #0
 8001712:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001716:	481f      	ldr	r0, [pc, #124]	@ (8001794 <_ZL12MX_ADC1_Initv+0x100>)
 8001718:	f002 f85c 	bl	80037d4 <HAL_ADC_Init>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	bf14      	ite	ne
 8001722:	2301      	movne	r3, #1
 8001724:	2300      	moveq	r3, #0
 8001726:	b2db      	uxtb	r3, r3
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <_ZL12MX_ADC1_Initv+0x9c>
  {
    Error_Handler();
 800172c:	f000 fd5c 	bl	80021e8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001730:	2300      	movs	r3, #0
 8001732:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001734:	f107 031c 	add.w	r3, r7, #28
 8001738:	4619      	mov	r1, r3
 800173a:	4816      	ldr	r0, [pc, #88]	@ (8001794 <_ZL12MX_ADC1_Initv+0x100>)
 800173c:	f002 ffdc 	bl	80046f8 <HAL_ADCEx_MultiModeConfigChannel>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	bf14      	ite	ne
 8001746:	2301      	movne	r3, #1
 8001748:	2300      	moveq	r3, #0
 800174a:	b2db      	uxtb	r3, r3
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <_ZL12MX_ADC1_Initv+0xc0>
  {
    Error_Handler();
 8001750:	f000 fd4a 	bl	80021e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001754:	4b11      	ldr	r3, [pc, #68]	@ (800179c <_ZL12MX_ADC1_Initv+0x108>)
 8001756:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001758:	2306      	movs	r3, #6
 800175a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800175c:	2300      	movs	r3, #0
 800175e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001760:	237f      	movs	r3, #127	@ 0x7f
 8001762:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001764:	2304      	movs	r3, #4
 8001766:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001768:	2300      	movs	r3, #0
 800176a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800176c:	1d3b      	adds	r3, r7, #4
 800176e:	4619      	mov	r1, r3
 8001770:	4808      	ldr	r0, [pc, #32]	@ (8001794 <_ZL12MX_ADC1_Initv+0x100>)
 8001772:	f002 fb19 	bl	8003da8 <HAL_ADC_ConfigChannel>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	bf14      	ite	ne
 800177c:	2301      	movne	r3, #1
 800177e:	2300      	moveq	r3, #0
 8001780:	b2db      	uxtb	r3, r3
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <_ZL12MX_ADC1_Initv+0xf6>
  {
    Error_Handler();
 8001786:	f000 fd2f 	bl	80021e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800178a:	bf00      	nop
 800178c:	3728      	adds	r7, #40	@ 0x28
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	200000ac 	.word	0x200000ac
 8001798:	50040000 	.word	0x50040000
 800179c:	3ef08000 	.word	0x3ef08000

080017a0 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017a4:	4b22      	ldr	r3, [pc, #136]	@ (8001830 <_ZL12MX_I2C1_Initv+0x90>)
 80017a6:	4a23      	ldr	r2, [pc, #140]	@ (8001834 <_ZL12MX_I2C1_Initv+0x94>)
 80017a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00100D14;
 80017aa:	4b21      	ldr	r3, [pc, #132]	@ (8001830 <_ZL12MX_I2C1_Initv+0x90>)
 80017ac:	4a22      	ldr	r2, [pc, #136]	@ (8001838 <_ZL12MX_I2C1_Initv+0x98>)
 80017ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80017b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001830 <_ZL12MX_I2C1_Initv+0x90>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001830 <_ZL12MX_I2C1_Initv+0x90>)
 80017b8:	2201      	movs	r2, #1
 80017ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001830 <_ZL12MX_I2C1_Initv+0x90>)
 80017be:	2200      	movs	r2, #0
 80017c0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80017c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001830 <_ZL12MX_I2C1_Initv+0x90>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017c8:	4b19      	ldr	r3, [pc, #100]	@ (8001830 <_ZL12MX_I2C1_Initv+0x90>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017ce:	4b18      	ldr	r3, [pc, #96]	@ (8001830 <_ZL12MX_I2C1_Initv+0x90>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017d4:	4b16      	ldr	r3, [pc, #88]	@ (8001830 <_ZL12MX_I2C1_Initv+0x90>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017da:	4815      	ldr	r0, [pc, #84]	@ (8001830 <_ZL12MX_I2C1_Initv+0x90>)
 80017dc:	f003 fae4 	bl	8004da8 <HAL_I2C_Init>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	bf14      	ite	ne
 80017e6:	2301      	movne	r3, #1
 80017e8:	2300      	moveq	r3, #0
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 80017f0:	f000 fcfa 	bl	80021e8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017f4:	2100      	movs	r1, #0
 80017f6:	480e      	ldr	r0, [pc, #56]	@ (8001830 <_ZL12MX_I2C1_Initv+0x90>)
 80017f8:	f003 fea4 	bl	8005544 <HAL_I2CEx_ConfigAnalogFilter>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	bf14      	ite	ne
 8001802:	2301      	movne	r3, #1
 8001804:	2300      	moveq	r3, #0
 8001806:	b2db      	uxtb	r3, r3
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 800180c:	f000 fcec 	bl	80021e8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001810:	2100      	movs	r1, #0
 8001812:	4807      	ldr	r0, [pc, #28]	@ (8001830 <_ZL12MX_I2C1_Initv+0x90>)
 8001814:	f003 fee1 	bl	80055da <HAL_I2CEx_ConfigDigitalFilter>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	bf14      	ite	ne
 800181e:	2301      	movne	r3, #1
 8001820:	2300      	moveq	r3, #0
 8001822:	b2db      	uxtb	r3, r3
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 8001828:	f000 fcde 	bl	80021e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800182c:	bf00      	nop
 800182e:	bd80      	pop	{r7, pc}
 8001830:	20000110 	.word	0x20000110
 8001834:	40005400 	.word	0x40005400
 8001838:	00100d14 	.word	0x00100d14

0800183c <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b088      	sub	sp, #32
 8001840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001842:	f107 030c 	add.w	r3, r7, #12
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	605a      	str	r2, [r3, #4]
 800184c:	609a      	str	r2, [r3, #8]
 800184e:	60da      	str	r2, [r3, #12]
 8001850:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001852:	463b      	mov	r3, r7
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800185c:	4b29      	ldr	r3, [pc, #164]	@ (8001904 <_ZL12MX_TIM1_Initv+0xc8>)
 800185e:	4a2a      	ldr	r2, [pc, #168]	@ (8001908 <_ZL12MX_TIM1_Initv+0xcc>)
 8001860:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001862:	4b28      	ldr	r3, [pc, #160]	@ (8001904 <_ZL12MX_TIM1_Initv+0xc8>)
 8001864:	2200      	movs	r2, #0
 8001866:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001868:	4b26      	ldr	r3, [pc, #152]	@ (8001904 <_ZL12MX_TIM1_Initv+0xc8>)
 800186a:	2200      	movs	r2, #0
 800186c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800186e:	4b25      	ldr	r3, [pc, #148]	@ (8001904 <_ZL12MX_TIM1_Initv+0xc8>)
 8001870:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001874:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001876:	4b23      	ldr	r3, [pc, #140]	@ (8001904 <_ZL12MX_TIM1_Initv+0xc8>)
 8001878:	2200      	movs	r2, #0
 800187a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800187c:	4b21      	ldr	r3, [pc, #132]	@ (8001904 <_ZL12MX_TIM1_Initv+0xc8>)
 800187e:	2200      	movs	r2, #0
 8001880:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001882:	4b20      	ldr	r3, [pc, #128]	@ (8001904 <_ZL12MX_TIM1_Initv+0xc8>)
 8001884:	2200      	movs	r2, #0
 8001886:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001888:	481e      	ldr	r0, [pc, #120]	@ (8001904 <_ZL12MX_TIM1_Initv+0xc8>)
 800188a:	f004 ff63 	bl	8006754 <HAL_TIM_Base_Init>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	bf14      	ite	ne
 8001894:	2301      	movne	r3, #1
 8001896:	2300      	moveq	r3, #0
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <_ZL12MX_TIM1_Initv+0x66>
  {
    Error_Handler();
 800189e:	f000 fca3 	bl	80021e8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80018a2:	2307      	movs	r3, #7
 80018a4:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80018a6:	2350      	movs	r3, #80	@ 0x50
 80018a8:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 80018aa:	2300      	movs	r3, #0
 80018ac:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 80018ae:	2300      	movs	r3, #0
 80018b0:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80018b2:	f107 030c 	add.w	r3, r7, #12
 80018b6:	4619      	mov	r1, r3
 80018b8:	4812      	ldr	r0, [pc, #72]	@ (8001904 <_ZL12MX_TIM1_Initv+0xc8>)
 80018ba:	f004 ffef 	bl	800689c <HAL_TIM_SlaveConfigSynchro>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	bf14      	ite	ne
 80018c4:	2301      	movne	r3, #1
 80018c6:	2300      	moveq	r3, #0
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <_ZL12MX_TIM1_Initv+0x96>
  {
    Error_Handler();
 80018ce:	f000 fc8b 	bl	80021e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018d2:	2300      	movs	r3, #0
 80018d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80018d6:	2300      	movs	r3, #0
 80018d8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018da:	2300      	movs	r3, #0
 80018dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018de:	463b      	mov	r3, r7
 80018e0:	4619      	mov	r1, r3
 80018e2:	4808      	ldr	r0, [pc, #32]	@ (8001904 <_ZL12MX_TIM1_Initv+0xc8>)
 80018e4:	f005 f99e 	bl	8006c24 <HAL_TIMEx_MasterConfigSynchronization>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	bf14      	ite	ne
 80018ee:	2301      	movne	r3, #1
 80018f0:	2300      	moveq	r3, #0
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <_ZL12MX_TIM1_Initv+0xc0>
  {
    Error_Handler();
 80018f8:	f000 fc76 	bl	80021e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80018fc:	bf00      	nop
 80018fe:	3720      	adds	r7, #32
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	20000164 	.word	0x20000164
 8001908:	40012c00 	.word	0x40012c00

0800190c <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b088      	sub	sp, #32
 8001910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001912:	f107 030c 	add.w	r3, r7, #12
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	605a      	str	r2, [r3, #4]
 800191c:	609a      	str	r2, [r3, #8]
 800191e:	60da      	str	r2, [r3, #12]
 8001920:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001922:	463b      	mov	r3, r7
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	605a      	str	r2, [r3, #4]
 800192a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800192c:	4b29      	ldr	r3, [pc, #164]	@ (80019d4 <_ZL12MX_TIM2_Initv+0xc8>)
 800192e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001932:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3;
 8001934:	4b27      	ldr	r3, [pc, #156]	@ (80019d4 <_ZL12MX_TIM2_Initv+0xc8>)
 8001936:	2203      	movs	r2, #3
 8001938:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800193a:	4b26      	ldr	r3, [pc, #152]	@ (80019d4 <_ZL12MX_TIM2_Initv+0xc8>)
 800193c:	2200      	movs	r2, #0
 800193e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFFFFFF;
 8001940:	4b24      	ldr	r3, [pc, #144]	@ (80019d4 <_ZL12MX_TIM2_Initv+0xc8>)
 8001942:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001946:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001948:	4b22      	ldr	r3, [pc, #136]	@ (80019d4 <_ZL12MX_TIM2_Initv+0xc8>)
 800194a:	2200      	movs	r2, #0
 800194c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800194e:	4b21      	ldr	r3, [pc, #132]	@ (80019d4 <_ZL12MX_TIM2_Initv+0xc8>)
 8001950:	2200      	movs	r2, #0
 8001952:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001954:	481f      	ldr	r0, [pc, #124]	@ (80019d4 <_ZL12MX_TIM2_Initv+0xc8>)
 8001956:	f004 fefd 	bl	8006754 <HAL_TIM_Base_Init>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	bf14      	ite	ne
 8001960:	2301      	movne	r3, #1
 8001962:	2300      	moveq	r3, #0
 8001964:	b2db      	uxtb	r3, r3
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <_ZL12MX_TIM2_Initv+0x62>
  {
    Error_Handler();
 800196a:	f000 fc3d 	bl	80021e8 <Error_Handler>
  }

  HAL_TIM_Base_Start(&htim2);
 800196e:	4819      	ldr	r0, [pc, #100]	@ (80019d4 <_ZL12MX_TIM2_Initv+0xc8>)
 8001970:	f004 ff48 	bl	8006804 <HAL_TIM_Base_Start>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8001974:	2307      	movs	r3, #7
 8001976:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001978:	2350      	movs	r3, #80	@ 0x50
 800197a:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 8001980:	2300      	movs	r3, #0
 8001982:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001984:	f107 030c 	add.w	r3, r7, #12
 8001988:	4619      	mov	r1, r3
 800198a:	4812      	ldr	r0, [pc, #72]	@ (80019d4 <_ZL12MX_TIM2_Initv+0xc8>)
 800198c:	f004 ff86 	bl	800689c <HAL_TIM_SlaveConfigSynchro>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	bf14      	ite	ne
 8001996:	2301      	movne	r3, #1
 8001998:	2300      	moveq	r3, #0
 800199a:	b2db      	uxtb	r3, r3
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <_ZL12MX_TIM2_Initv+0x98>
  {
    Error_Handler();
 80019a0:	f000 fc22 	bl	80021e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019a4:	2300      	movs	r3, #0
 80019a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019a8:	2300      	movs	r3, #0
 80019aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019ac:	463b      	mov	r3, r7
 80019ae:	4619      	mov	r1, r3
 80019b0:	4808      	ldr	r0, [pc, #32]	@ (80019d4 <_ZL12MX_TIM2_Initv+0xc8>)
 80019b2:	f005 f937 	bl	8006c24 <HAL_TIMEx_MasterConfigSynchronization>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	bf14      	ite	ne
 80019bc:	2301      	movne	r3, #1
 80019be:	2300      	moveq	r3, #0
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <_ZL12MX_TIM2_Initv+0xbe>
  {
    Error_Handler();
 80019c6:	f000 fc0f 	bl	80021e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019ca:	bf00      	nop
 80019cc:	3720      	adds	r7, #32
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	200001b0 	.word	0x200001b0

080019d8 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019dc:	4b16      	ldr	r3, [pc, #88]	@ (8001a38 <_ZL19MX_USART1_UART_Initv+0x60>)
 80019de:	4a17      	ldr	r2, [pc, #92]	@ (8001a3c <_ZL19MX_USART1_UART_Initv+0x64>)
 80019e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80019e2:	4b15      	ldr	r3, [pc, #84]	@ (8001a38 <_ZL19MX_USART1_UART_Initv+0x60>)
 80019e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019ea:	4b13      	ldr	r3, [pc, #76]	@ (8001a38 <_ZL19MX_USART1_UART_Initv+0x60>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019f0:	4b11      	ldr	r3, [pc, #68]	@ (8001a38 <_ZL19MX_USART1_UART_Initv+0x60>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019f6:	4b10      	ldr	r3, [pc, #64]	@ (8001a38 <_ZL19MX_USART1_UART_Initv+0x60>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001a38 <_ZL19MX_USART1_UART_Initv+0x60>)
 80019fe:	220c      	movs	r2, #12
 8001a00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a02:	4b0d      	ldr	r3, [pc, #52]	@ (8001a38 <_ZL19MX_USART1_UART_Initv+0x60>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a08:	4b0b      	ldr	r3, [pc, #44]	@ (8001a38 <_ZL19MX_USART1_UART_Initv+0x60>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a38 <_ZL19MX_USART1_UART_Initv+0x60>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a14:	4b08      	ldr	r3, [pc, #32]	@ (8001a38 <_ZL19MX_USART1_UART_Initv+0x60>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a1a:	4807      	ldr	r0, [pc, #28]	@ (8001a38 <_ZL19MX_USART1_UART_Initv+0x60>)
 8001a1c:	f005 f968 	bl	8006cf0 <HAL_UART_Init>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	bf14      	ite	ne
 8001a26:	2301      	movne	r3, #1
 8001a28:	2300      	moveq	r3, #0
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8001a30:	f000 fbda 	bl	80021e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a34:	bf00      	nop
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	200001fc 	.word	0x200001fc
 8001a3c:	40013800 	.word	0x40013800

08001a40 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b088      	sub	sp, #32
 8001a44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a46:	f107 030c 	add.w	r3, r7, #12
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	605a      	str	r2, [r3, #4]
 8001a50:	609a      	str	r2, [r3, #8]
 8001a52:	60da      	str	r2, [r3, #12]
 8001a54:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a56:	4b36      	ldr	r3, [pc, #216]	@ (8001b30 <_ZL12MX_GPIO_Initv+0xf0>)
 8001a58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a5a:	4a35      	ldr	r2, [pc, #212]	@ (8001b30 <_ZL12MX_GPIO_Initv+0xf0>)
 8001a5c:	f043 0301 	orr.w	r3, r3, #1
 8001a60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a62:	4b33      	ldr	r3, [pc, #204]	@ (8001b30 <_ZL12MX_GPIO_Initv+0xf0>)
 8001a64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	60bb      	str	r3, [r7, #8]
 8001a6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a6e:	4b30      	ldr	r3, [pc, #192]	@ (8001b30 <_ZL12MX_GPIO_Initv+0xf0>)
 8001a70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a72:	4a2f      	ldr	r2, [pc, #188]	@ (8001b30 <_ZL12MX_GPIO_Initv+0xf0>)
 8001a74:	f043 0302 	orr.w	r3, r3, #2
 8001a78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a7a:	4b2d      	ldr	r3, [pc, #180]	@ (8001b30 <_ZL12MX_GPIO_Initv+0xf0>)
 8001a7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	607b      	str	r3, [r7, #4]
 8001a84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001a86:	2200      	movs	r2, #0
 8001a88:	21fc      	movs	r1, #252	@ 0xfc
 8001a8a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a8e:	f003 f95b 	bl	8004d48 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : Decrease_BTN_Pin Increase_BTN_Pin */
  GPIO_InitStruct.Pin = Decrease_BTN_Pin|Increase_BTN_Pin;
 8001a92:	2303      	movs	r3, #3
 8001a94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a96:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001a9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa0:	f107 030c 	add.w	r3, r7, #12
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001aaa:	f002 ffdb 	bl	8004a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 PA5
                           PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001aae:	23fc      	movs	r3, #252	@ 0xfc
 8001ab0:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aba:	2300      	movs	r3, #0
 8001abc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001abe:	f107 030c 	add.w	r3, r7, #12
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ac8:	f002 ffcc 	bl	8004a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : Mode_BTN_Pin Select_BTN_Pin */
  GPIO_InitStruct.Pin = Mode_BTN_Pin|Select_BTN_Pin;
 8001acc:	2330      	movs	r3, #48	@ 0x30
 8001ace:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ad0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001ad4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ada:	f107 030c 	add.w	r3, r7, #12
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4814      	ldr	r0, [pc, #80]	@ (8001b34 <_ZL12MX_GPIO_Initv+0xf4>)
 8001ae2:	f002 ffbf 	bl	8004a64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	2100      	movs	r1, #0
 8001aea:	2006      	movs	r0, #6
 8001aec:	f002 ff83 	bl	80049f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001af0:	2006      	movs	r0, #6
 8001af2:	f002 ff9c 	bl	8004a2e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001af6:	2200      	movs	r2, #0
 8001af8:	2100      	movs	r1, #0
 8001afa:	2007      	movs	r0, #7
 8001afc:	f002 ff7b 	bl	80049f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001b00:	2007      	movs	r0, #7
 8001b02:	f002 ff94 	bl	8004a2e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001b06:	2200      	movs	r2, #0
 8001b08:	2100      	movs	r1, #0
 8001b0a:	200a      	movs	r0, #10
 8001b0c:	f002 ff73 	bl	80049f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001b10:	200a      	movs	r0, #10
 8001b12:	f002 ff8c 	bl	8004a2e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001b16:	2200      	movs	r2, #0
 8001b18:	2100      	movs	r1, #0
 8001b1a:	2017      	movs	r0, #23
 8001b1c:	f002 ff6b 	bl	80049f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001b20:	2017      	movs	r0, #23
 8001b22:	f002 ff84 	bl	8004a2e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001b26:	bf00      	nop
 8001b28:	3720      	adds	r7, #32
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40021000 	.word	0x40021000
 8001b34:	48000400 	.word	0x48000400

08001b38 <_Z10lcd_enablev>:
uint32_t micros() {
    return __HAL_TIM_GET_COUNTER(&htim2);
}

// Função para gerar o pulso de habilitação
void lcd_enable() {
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, LCD_E_PIN, GPIO_PIN_SET);
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	2104      	movs	r1, #4
 8001b40:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b44:	f003 f900 	bl	8004d48 <HAL_GPIO_WritePin>
    HAL_Delay(2);  // Delay ajustado
 8001b48:	2002      	movs	r0, #2
 8001b4a:	f001 fc29 	bl	80033a0 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA, LCD_E_PIN, GPIO_PIN_RESET);
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2104      	movs	r1, #4
 8001b52:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b56:	f003 f8f7 	bl	8004d48 <HAL_GPIO_WritePin>
    HAL_Delay(2);  // Delay ajustado
 8001b5a:	2002      	movs	r0, #2
 8001b5c:	f001 fc20 	bl	80033a0 <HAL_Delay>
}
 8001b60:	bf00      	nop
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <_Z8lcd_sendh>:

// Função interna para enviar um byte (comando ou dado)
void lcd_send(uint8_t data) {
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	71fb      	strb	r3, [r7, #7]
    // Enviar nibble alto
    HAL_GPIO_WritePin(GPIOA, LCD_D7_PIN, (GPIO_PinState)((data >> 4) & 0x01));
 8001b6e:	79fb      	ldrb	r3, [r7, #7]
 8001b70:	091b      	lsrs	r3, r3, #4
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	f003 0301 	and.w	r3, r3, #1
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	2108      	movs	r1, #8
 8001b7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b82:	f003 f8e1 	bl	8004d48 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, LCD_D6_PIN, (GPIO_PinState)((data >> 5) & 0x01));
 8001b86:	79fb      	ldrb	r3, [r7, #7]
 8001b88:	095b      	lsrs	r3, r3, #5
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	f003 0301 	and.w	r3, r3, #1
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	461a      	mov	r2, r3
 8001b94:	2110      	movs	r1, #16
 8001b96:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b9a:	f003 f8d5 	bl	8004d48 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, LCD_D5_PIN, (GPIO_PinState)((data >> 6) & 0x01));
 8001b9e:	79fb      	ldrb	r3, [r7, #7]
 8001ba0:	099b      	lsrs	r3, r3, #6
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	f003 0301 	and.w	r3, r3, #1
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	461a      	mov	r2, r3
 8001bac:	2120      	movs	r1, #32
 8001bae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bb2:	f003 f8c9 	bl	8004d48 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, LCD_D4_PIN, (GPIO_PinState)((data >> 7) & 0x01));
 8001bb6:	79fb      	ldrb	r3, [r7, #7]
 8001bb8:	09db      	lsrs	r3, r3, #7
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	2140      	movs	r1, #64	@ 0x40
 8001bc0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bc4:	f003 f8c0 	bl	8004d48 <HAL_GPIO_WritePin>
    lcd_enable();
 8001bc8:	f7ff ffb6 	bl	8001b38 <_Z10lcd_enablev>

    // Enviar nibble baixo
    HAL_GPIO_WritePin(GPIOA, LCD_D7_PIN, (GPIO_PinState)((data >> 0) & 0x01));
 8001bcc:	79fb      	ldrb	r3, [r7, #7]
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	2108      	movs	r1, #8
 8001bd8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bdc:	f003 f8b4 	bl	8004d48 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, LCD_D6_PIN, (GPIO_PinState)((data >> 1) & 0x01));
 8001be0:	79fb      	ldrb	r3, [r7, #7]
 8001be2:	085b      	lsrs	r3, r3, #1
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	461a      	mov	r2, r3
 8001bee:	2110      	movs	r1, #16
 8001bf0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bf4:	f003 f8a8 	bl	8004d48 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, LCD_D5_PIN, (GPIO_PinState)((data >> 2) & 0x01));
 8001bf8:	79fb      	ldrb	r3, [r7, #7]
 8001bfa:	089b      	lsrs	r3, r3, #2
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	461a      	mov	r2, r3
 8001c06:	2120      	movs	r1, #32
 8001c08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c0c:	f003 f89c 	bl	8004d48 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, LCD_D4_PIN, (GPIO_PinState)((data >> 3) & 0x01));
 8001c10:	79fb      	ldrb	r3, [r7, #7]
 8001c12:	08db      	lsrs	r3, r3, #3
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	2140      	movs	r1, #64	@ 0x40
 8001c20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c24:	f003 f890 	bl	8004d48 <HAL_GPIO_WritePin>
    lcd_enable();
 8001c28:	f7ff ff86 	bl	8001b38 <_Z10lcd_enablev>
}
 8001c2c:	bf00      	nop
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <lcd_send_command>:

void lcd_send_command(uint8_t cmd) {
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(GPIOA, LCD_RS_PIN, GPIO_PIN_RESET);
 8001c3e:	2200      	movs	r2, #0
 8001c40:	2180      	movs	r1, #128	@ 0x80
 8001c42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c46:	f003 f87f 	bl	8004d48 <HAL_GPIO_WritePin>
    lcd_send(cmd);
 8001c4a:	79fb      	ldrb	r3, [r7, #7]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff ff89 	bl	8001b64 <_Z8lcd_sendh>
    HAL_Delay(2);  // Delay adicional
 8001c52:	2002      	movs	r0, #2
 8001c54:	f001 fba4 	bl	80033a0 <HAL_Delay>
}
 8001c58:	bf00      	nop
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <lcd_send_data>:

void lcd_send_data(uint8_t data) {
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(GPIOA, LCD_RS_PIN, GPIO_PIN_SET);
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	2180      	movs	r1, #128	@ 0x80
 8001c6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c72:	f003 f869 	bl	8004d48 <HAL_GPIO_WritePin>
    lcd_send(data);
 8001c76:	79fb      	ldrb	r3, [r7, #7]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff ff73 	bl	8001b64 <_Z8lcd_sendh>
    HAL_Delay(2);  // Delay adicional
 8001c7e:	2002      	movs	r0, #2
 8001c80:	f001 fb8e 	bl	80033a0 <HAL_Delay>
}
 8001c84:	bf00      	nop
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <lcd_init>:

// Inicialização do LCD
void lcd_init() {
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
    HAL_Delay(50);  // Esperar mais tempo após o boot
 8001c90:	2032      	movs	r0, #50	@ 0x32
 8001c92:	f001 fb85 	bl	80033a0 <HAL_Delay>

    lcd_send_command(0x03);
 8001c96:	2003      	movs	r0, #3
 8001c98:	f7ff ffcc 	bl	8001c34 <lcd_send_command>
    HAL_Delay(5);
 8001c9c:	2005      	movs	r0, #5
 8001c9e:	f001 fb7f 	bl	80033a0 <HAL_Delay>
    lcd_send_command(0x03);
 8001ca2:	2003      	movs	r0, #3
 8001ca4:	f7ff ffc6 	bl	8001c34 <lcd_send_command>
    HAL_Delay(5);
 8001ca8:	2005      	movs	r0, #5
 8001caa:	f001 fb79 	bl	80033a0 <HAL_Delay>
    lcd_send_command(0x03);
 8001cae:	2003      	movs	r0, #3
 8001cb0:	f7ff ffc0 	bl	8001c34 <lcd_send_command>
    HAL_Delay(5);
 8001cb4:	2005      	movs	r0, #5
 8001cb6:	f001 fb73 	bl	80033a0 <HAL_Delay>
    lcd_send_command(0x02);  // Modo 4 bits
 8001cba:	2002      	movs	r0, #2
 8001cbc:	f7ff ffba 	bl	8001c34 <lcd_send_command>
    HAL_Delay(5);
 8001cc0:	2005      	movs	r0, #5
 8001cc2:	f001 fb6d 	bl	80033a0 <HAL_Delay>

    lcd_send_command(LCD_FUNCTION_SET | 0x08);
 8001cc6:	2028      	movs	r0, #40	@ 0x28
 8001cc8:	f7ff ffb4 	bl	8001c34 <lcd_send_command>
    lcd_send_command(LCD_DISPLAY_CONTROL | LCD_DISPLAY_ON | LCD_CURSOR_OFF | LCD_BLINK_OFF);
 8001ccc:	200c      	movs	r0, #12
 8001cce:	f7ff ffb1 	bl	8001c34 <lcd_send_command>
    lcd_send_command(LCD_CLEAR_DISPLAY);
 8001cd2:	2001      	movs	r0, #1
 8001cd4:	f7ff ffae 	bl	8001c34 <lcd_send_command>
    HAL_Delay(2);
 8001cd8:	2002      	movs	r0, #2
 8001cda:	f001 fb61 	bl	80033a0 <HAL_Delay>
    lcd_send_command(LCD_ENTRY_MODE_SET | LCD_ENTRY_LEFT);
 8001cde:	2006      	movs	r0, #6
 8001ce0:	f7ff ffa8 	bl	8001c34 <lcd_send_command>
}
 8001ce4:	bf00      	nop
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <lcd_clear>:

// Limpa o display
void lcd_clear(void) {
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
    lcd_send_command(LCD_CLEAR_DISPLAY);
 8001cec:	2001      	movs	r0, #1
 8001cee:	f7ff ffa1 	bl	8001c34 <lcd_send_command>
    HAL_Delay(2);
 8001cf2:	2002      	movs	r0, #2
 8001cf4:	f001 fb54 	bl	80033a0 <HAL_Delay>
}
 8001cf8:	bf00      	nop
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <lcd_set_cursor>:

// Define a posição do cursor
void lcd_set_cursor(uint8_t row, uint8_t col) {
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	460a      	mov	r2, r1
 8001d06:	71fb      	strb	r3, [r7, #7]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	71bb      	strb	r3, [r7, #6]
    uint8_t address = (row == 0) ? 0x00 : 0x40;
 8001d0c:	79fb      	ldrb	r3, [r7, #7]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d101      	bne.n	8001d16 <lcd_set_cursor+0x1a>
 8001d12:	2300      	movs	r3, #0
 8001d14:	e000      	b.n	8001d18 <lcd_set_cursor+0x1c>
 8001d16:	2340      	movs	r3, #64	@ 0x40
 8001d18:	73fb      	strb	r3, [r7, #15]
    address += col;
 8001d1a:	7bfa      	ldrb	r2, [r7, #15]
 8001d1c:	79bb      	ldrb	r3, [r7, #6]
 8001d1e:	4413      	add	r3, r2
 8001d20:	73fb      	strb	r3, [r7, #15]
    lcd_send_command(LCD_SET_DDRAM_ADDR | address);
 8001d22:	7bfb      	ldrb	r3, [r7, #15]
 8001d24:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7ff ff82 	bl	8001c34 <lcd_send_command>
}
 8001d30:	bf00      	nop
 8001d32:	3710      	adds	r7, #16
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <lcd_print>:

// Escreve uma string no LCD
void lcd_print(const char *str) {
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
    while (*str) {
 8001d40:	e006      	b.n	8001d50 <lcd_print+0x18>
        lcd_send_data(*str++);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	1c5a      	adds	r2, r3, #1
 8001d46:	607a      	str	r2, [r7, #4]
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff ff88 	bl	8001c60 <lcd_send_data>
    while (*str) {
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d1f4      	bne.n	8001d42 <lcd_print+0xa>
    }
}
 8001d58:	bf00      	nop
 8001d5a:	bf00      	nop
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
	...

08001d64 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 8001d6e:	88fb      	ldrh	r3, [r7, #6]
 8001d70:	3b01      	subs	r3, #1
 8001d72:	2b1f      	cmp	r3, #31
 8001d74:	d84e      	bhi.n	8001e14 <HAL_GPIO_EXTI_Callback+0xb0>
 8001d76:	a201      	add	r2, pc, #4	@ (adr r2, 8001d7c <HAL_GPIO_EXTI_Callback+0x18>)
 8001d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d7c:	08001dfd 	.word	0x08001dfd
 8001d80:	08001e03 	.word	0x08001e03
 8001d84:	08001e15 	.word	0x08001e15
 8001d88:	08001e15 	.word	0x08001e15
 8001d8c:	08001e15 	.word	0x08001e15
 8001d90:	08001e15 	.word	0x08001e15
 8001d94:	08001e15 	.word	0x08001e15
 8001d98:	08001e15 	.word	0x08001e15
 8001d9c:	08001e15 	.word	0x08001e15
 8001da0:	08001e15 	.word	0x08001e15
 8001da4:	08001e15 	.word	0x08001e15
 8001da8:	08001e15 	.word	0x08001e15
 8001dac:	08001e15 	.word	0x08001e15
 8001db0:	08001e15 	.word	0x08001e15
 8001db4:	08001e15 	.word	0x08001e15
 8001db8:	08001e0f 	.word	0x08001e0f
 8001dbc:	08001e15 	.word	0x08001e15
 8001dc0:	08001e15 	.word	0x08001e15
 8001dc4:	08001e15 	.word	0x08001e15
 8001dc8:	08001e15 	.word	0x08001e15
 8001dcc:	08001e15 	.word	0x08001e15
 8001dd0:	08001e15 	.word	0x08001e15
 8001dd4:	08001e15 	.word	0x08001e15
 8001dd8:	08001e15 	.word	0x08001e15
 8001ddc:	08001e15 	.word	0x08001e15
 8001de0:	08001e15 	.word	0x08001e15
 8001de4:	08001e15 	.word	0x08001e15
 8001de8:	08001e15 	.word	0x08001e15
 8001dec:	08001e15 	.word	0x08001e15
 8001df0:	08001e15 	.word	0x08001e15
 8001df4:	08001e15 	.word	0x08001e15
 8001df8:	08001e09 	.word	0x08001e09
	case Decrease_BTN_Pin:
		handleDecreaseButton();
 8001dfc:	f000 f854 	bl	8001ea8 <handleDecreaseButton>
		break;
 8001e00:	e009      	b.n	8001e16 <HAL_GPIO_EXTI_Callback+0xb2>
	case Increase_BTN_Pin:
		handleIncreaseButton();
 8001e02:	f000 f82f 	bl	8001e64 <handleIncreaseButton>
		break;
 8001e06:	e006      	b.n	8001e16 <HAL_GPIO_EXTI_Callback+0xb2>
	case Select_BTN_Pin:
		handleSelectButton();
 8001e08:	f000 f80a 	bl	8001e20 <handleSelectButton>
		break;
 8001e0c:	e003      	b.n	8001e16 <HAL_GPIO_EXTI_Callback+0xb2>
	case Mode_BTN_Pin:
		handleModeButton();
 8001e0e:	f000 f86d 	bl	8001eec <handleModeButton>
		break;
 8001e12:	e000      	b.n	8001e16 <HAL_GPIO_EXTI_Callback+0xb2>
	default:
		break;
 8001e14:	bf00      	nop
	}
}
 8001e16:	bf00      	nop
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop

08001e20 <handleSelectButton>:

void handleSelectButton() {
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  static unsigned long lastInterruptTime = 0;

  if (HAL_GetTick() - lastInterruptTime > delayInterrupt) {
 8001e24:	f001 fab0 	bl	8003388 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e58 <handleSelectButton+0x38>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	1ad2      	subs	r2, r2, r3
 8001e30:	4b0a      	ldr	r3, [pc, #40]	@ (8001e5c <handleSelectButton+0x3c>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	bf8c      	ite	hi
 8001e38:	2301      	movhi	r3, #1
 8001e3a:	2300      	movls	r3, #0
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d007      	beq.n	8001e52 <handleSelectButton+0x32>
	selectButton = 1;
 8001e42:	4b07      	ldr	r3, [pc, #28]	@ (8001e60 <handleSelectButton+0x40>)
 8001e44:	2201      	movs	r2, #1
 8001e46:	701a      	strb	r2, [r3, #0]
	lastInterruptTime = HAL_GetTick();
 8001e48:	f001 fa9e 	bl	8003388 <HAL_GetTick>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	4a02      	ldr	r2, [pc, #8]	@ (8001e58 <handleSelectButton+0x38>)
 8001e50:	6013      	str	r3, [r2, #0]
  }
}
 8001e52:	bf00      	nop
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	200002cc 	.word	0x200002cc
 8001e5c:	2000002c 	.word	0x2000002c
 8001e60:	20000286 	.word	0x20000286

08001e64 <handleIncreaseButton>:

void handleIncreaseButton() {
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  static unsigned long lastInterruptTime = 0;

  if (HAL_GetTick() - lastInterruptTime > delayInterrupt) {
 8001e68:	f001 fa8e 	bl	8003388 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	4b0b      	ldr	r3, [pc, #44]	@ (8001e9c <handleIncreaseButton+0x38>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	1ad2      	subs	r2, r2, r3
 8001e74:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea0 <handleIncreaseButton+0x3c>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	bf8c      	ite	hi
 8001e7c:	2301      	movhi	r3, #1
 8001e7e:	2300      	movls	r3, #0
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d007      	beq.n	8001e96 <handleIncreaseButton+0x32>
	  increaseButton = 1;
 8001e86:	4b07      	ldr	r3, [pc, #28]	@ (8001ea4 <handleIncreaseButton+0x40>)
 8001e88:	2201      	movs	r2, #1
 8001e8a:	701a      	strb	r2, [r3, #0]
	  lastInterruptTime = HAL_GetTick();
 8001e8c:	f001 fa7c 	bl	8003388 <HAL_GetTick>
 8001e90:	4603      	mov	r3, r0
 8001e92:	4a02      	ldr	r2, [pc, #8]	@ (8001e9c <handleIncreaseButton+0x38>)
 8001e94:	6013      	str	r3, [r2, #0]
    }
}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	200002d0 	.word	0x200002d0
 8001ea0:	2000002c 	.word	0x2000002c
 8001ea4:	20000284 	.word	0x20000284

08001ea8 <handleDecreaseButton>:


void handleDecreaseButton() {
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  static unsigned long lastInterruptTime = 0;

  if (HAL_GetTick() - lastInterruptTime > delayInterrupt) {
 8001eac:	f001 fa6c 	bl	8003388 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee0 <handleDecreaseButton+0x38>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	1ad2      	subs	r2, r2, r3
 8001eb8:	4b0a      	ldr	r3, [pc, #40]	@ (8001ee4 <handleDecreaseButton+0x3c>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	bf8c      	ite	hi
 8001ec0:	2301      	movhi	r3, #1
 8001ec2:	2300      	movls	r3, #0
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d007      	beq.n	8001eda <handleDecreaseButton+0x32>
    decreaseButton = 1;
 8001eca:	4b07      	ldr	r3, [pc, #28]	@ (8001ee8 <handleDecreaseButton+0x40>)
 8001ecc:	2201      	movs	r2, #1
 8001ece:	701a      	strb	r2, [r3, #0]
    lastInterruptTime = HAL_GetTick();
 8001ed0:	f001 fa5a 	bl	8003388 <HAL_GetTick>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	4a02      	ldr	r2, [pc, #8]	@ (8001ee0 <handleDecreaseButton+0x38>)
 8001ed8:	6013      	str	r3, [r2, #0]
  }
}
 8001eda:	bf00      	nop
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	200002d4 	.word	0x200002d4
 8001ee4:	2000002c 	.word	0x2000002c
 8001ee8:	20000285 	.word	0x20000285

08001eec <handleModeButton>:


void handleModeButton() {
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  static unsigned long lastInterruptTime = 0;

  if (HAL_GetTick() - lastInterruptTime > delayInterrupt) {
 8001ef0:	f001 fa4a 	bl	8003388 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	4b0b      	ldr	r3, [pc, #44]	@ (8001f24 <handleModeButton+0x38>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	1ad2      	subs	r2, r2, r3
 8001efc:	4b0a      	ldr	r3, [pc, #40]	@ (8001f28 <handleModeButton+0x3c>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	bf8c      	ite	hi
 8001f04:	2301      	movhi	r3, #1
 8001f06:	2300      	movls	r3, #0
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d007      	beq.n	8001f1e <handleModeButton+0x32>
    modeButton = 1;
 8001f0e:	4b07      	ldr	r3, [pc, #28]	@ (8001f2c <handleModeButton+0x40>)
 8001f10:	2201      	movs	r2, #1
 8001f12:	701a      	strb	r2, [r3, #0]
    lastInterruptTime = HAL_GetTick();
 8001f14:	f001 fa38 	bl	8003388 <HAL_GetTick>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	4a02      	ldr	r2, [pc, #8]	@ (8001f24 <handleModeButton+0x38>)
 8001f1c:	6013      	str	r3, [r2, #0]
  }
}
 8001f1e:	bf00      	nop
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	200002d8 	.word	0x200002d8
 8001f28:	2000002c 	.word	0x2000002c
 8001f2c:	20000287 	.word	0x20000287

08001f30 <lcd_print_double>:

void lcd_print_double(double value) {
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b08a      	sub	sp, #40	@ 0x28
 8001f34:	af02      	add	r7, sp, #8
 8001f36:	ed87 0b00 	vstr	d0, [r7]
    char buffer[16];

    int intPart = (int)value;
 8001f3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f3e:	f7fe fd05 	bl	800094c <__aeabi_d2iz>
 8001f42:	4603      	mov	r3, r0
 8001f44:	61bb      	str	r3, [r7, #24]
    int decimalPart = (int)((value - intPart) * 100);
 8001f46:	69b8      	ldr	r0, [r7, #24]
 8001f48:	f7fe fc0e 	bl	8000768 <__aeabi_i2d>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	460b      	mov	r3, r1
 8001f50:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f54:	f7fe faba 	bl	80004cc <__aeabi_dsub>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	4610      	mov	r0, r2
 8001f5e:	4619      	mov	r1, r3
 8001f60:	f04f 0200 	mov.w	r2, #0
 8001f64:	4b16      	ldr	r3, [pc, #88]	@ (8001fc0 <lcd_print_double+0x90>)
 8001f66:	f7fe f983 	bl	8000270 <__aeabi_dmul>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	4610      	mov	r0, r2
 8001f70:	4619      	mov	r1, r3
 8001f72:	f7fe fceb 	bl	800094c <__aeabi_d2iz>
 8001f76:	4603      	mov	r3, r0
 8001f78:	61fb      	str	r3, [r7, #28]

    if (decimalPart < 0) {
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	da02      	bge.n	8001f86 <lcd_print_double+0x56>
    	decimalPart *= -1;
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	425b      	negs	r3, r3
 8001f84:	61fb      	str	r3, [r7, #28]
    }

    if (decimalPart == 0) {
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d107      	bne.n	8001f9c <lcd_print_double+0x6c>
    	snprintf(buffer, sizeof(buffer), "%d", intPart);
 8001f8c:	f107 0008 	add.w	r0, r7, #8
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	4a0c      	ldr	r2, [pc, #48]	@ (8001fc4 <lcd_print_double+0x94>)
 8001f94:	2110      	movs	r1, #16
 8001f96:	f005 fc4f 	bl	8007838 <sniprintf>
 8001f9a:	e008      	b.n	8001fae <lcd_print_double+0x7e>
    }
    else {
    	snprintf(buffer, sizeof(buffer), "%d.%02d", intPart, decimalPart);
 8001f9c:	f107 0008 	add.w	r0, r7, #8
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	9300      	str	r3, [sp, #0]
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	4a08      	ldr	r2, [pc, #32]	@ (8001fc8 <lcd_print_double+0x98>)
 8001fa8:	2110      	movs	r1, #16
 8001faa:	f005 fc45 	bl	8007838 <sniprintf>
    }

    lcd_print(buffer);
 8001fae:	f107 0308 	add.w	r3, r7, #8
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff fec0 	bl	8001d38 <lcd_print>
}
 8001fb8:	bf00      	nop
 8001fba:	3720      	adds	r7, #32
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40590000 	.word	0x40590000
 8001fc4:	0800813c 	.word	0x0800813c
 8001fc8:	08008140 	.word	0x08008140

08001fcc <sendI2CData>:

HAL_StatusTypeDef sendI2CData(uint8_t address, uint16_t data) {
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af02      	add	r7, sp, #8
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	460a      	mov	r2, r1
 8001fd6:	71fb      	strb	r3, [r7, #7]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	80bb      	strh	r3, [r7, #4]
    uint8_t i2cData[2];

    // Formato esperado pelo MCP4725 (modo de escrita rápida)
    i2cData[0] = (data >> 4) & 0xFF;           // Bits D11–D4
 8001fdc:	88bb      	ldrh	r3, [r7, #4]
 8001fde:	091b      	lsrs	r3, r3, #4
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	733b      	strb	r3, [r7, #12]
    i2cData[1] = (data & 0x0F) << 4;           // Bits D3–D0 deslocados para MSB
 8001fe6:	88bb      	ldrh	r3, [r7, #4]
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	011b      	lsls	r3, r3, #4
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	737b      	strb	r3, [r7, #13]

    return HAL_I2C_Master_Transmit(&hi2c1, address << 1, i2cData, 2, 10);
 8001ff0:	79fb      	ldrb	r3, [r7, #7]
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	b299      	uxth	r1, r3
 8001ff8:	f107 020c 	add.w	r2, r7, #12
 8001ffc:	230a      	movs	r3, #10
 8001ffe:	9300      	str	r3, [sp, #0]
 8002000:	2302      	movs	r3, #2
 8002002:	4804      	ldr	r0, [pc, #16]	@ (8002014 <sendI2CData+0x48>)
 8002004:	f002 ff6c 	bl	8004ee0 <HAL_I2C_Master_Transmit>
 8002008:	4603      	mov	r3, r0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3710      	adds	r7, #16
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	20000110 	.word	0x20000110

08002018 <_Z18updateSweepDisplayv>:

void updateSweepDisplay() {
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
	lcd_clear();
 800201c:	f7ff fe64 	bl	8001ce8 <lcd_clear>

    lcd_set_cursor(0, 0);
 8002020:	2100      	movs	r1, #0
 8002022:	2000      	movs	r0, #0
 8002024:	f7ff fe6a 	bl	8001cfc <lcd_set_cursor>
    lcd_print("Sweep");
 8002028:	4824      	ldr	r0, [pc, #144]	@ (80020bc <_Z18updateSweepDisplayv+0xa4>)
 800202a:	f7ff fe85 	bl	8001d38 <lcd_print>

    lcd_set_cursor(0, 6);
 800202e:	2106      	movs	r1, #6
 8002030:	2000      	movs	r0, #0
 8002032:	f7ff fe63 	bl	8001cfc <lcd_set_cursor>
    lcd_print("Amp:");
 8002036:	4822      	ldr	r0, [pc, #136]	@ (80020c0 <_Z18updateSweepDisplayv+0xa8>)
 8002038:	f7ff fe7e 	bl	8001d38 <lcd_print>
    lcd_print_double(ampSweep);
 800203c:	4b21      	ldr	r3, [pc, #132]	@ (80020c4 <_Z18updateSweepDisplayv+0xac>)
 800203e:	ed93 7b00 	vldr	d7, [r3]
 8002042:	eeb0 0a47 	vmov.f32	s0, s14
 8002046:	eef0 0a67 	vmov.f32	s1, s15
 800204a:	f7ff ff71 	bl	8001f30 <lcd_print_double>
    lcd_print("V");
 800204e:	481e      	ldr	r0, [pc, #120]	@ (80020c8 <_Z18updateSweepDisplayv+0xb0>)
 8002050:	f7ff fe72 	bl	8001d38 <lcd_print>

    lcd_set_cursor(1, 6);
 8002054:	2106      	movs	r1, #6
 8002056:	2001      	movs	r0, #1
 8002058:	f7ff fe50 	bl	8001cfc <lcd_set_cursor>
    lcd_print("Freq:");
 800205c:	481b      	ldr	r0, [pc, #108]	@ (80020cc <_Z18updateSweepDisplayv+0xb4>)
 800205e:	f7ff fe6b 	bl	8001d38 <lcd_print>
    lcd_print_double(frequency);
 8002062:	4b1b      	ldr	r3, [pc, #108]	@ (80020d0 <_Z18updateSweepDisplayv+0xb8>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4618      	mov	r0, r3
 8002068:	f7fe fb7e 	bl	8000768 <__aeabi_i2d>
 800206c:	4602      	mov	r2, r0
 800206e:	460b      	mov	r3, r1
 8002070:	ec43 2b10 	vmov	d0, r2, r3
 8002074:	f7ff ff5c 	bl	8001f30 <lcd_print_double>
    lcd_print("Hz");
 8002078:	4816      	ldr	r0, [pc, #88]	@ (80020d4 <_Z18updateSweepDisplayv+0xbc>)
 800207a:	f7ff fe5d 	bl	8001d38 <lcd_print>

    // Atualiza seta
    lcd_set_cursor(0, 5);
 800207e:	2105      	movs	r1, #5
 8002080:	2000      	movs	r0, #0
 8002082:	f7ff fe3b 	bl	8001cfc <lcd_set_cursor>
    lcd_print(currentSweepMode == AMPLITUDE ? ">" : " ");
 8002086:	4b14      	ldr	r3, [pc, #80]	@ (80020d8 <_Z18updateSweepDisplayv+0xc0>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <_Z18updateSweepDisplayv+0x7a>
 800208e:	4b13      	ldr	r3, [pc, #76]	@ (80020dc <_Z18updateSweepDisplayv+0xc4>)
 8002090:	e000      	b.n	8002094 <_Z18updateSweepDisplayv+0x7c>
 8002092:	4b13      	ldr	r3, [pc, #76]	@ (80020e0 <_Z18updateSweepDisplayv+0xc8>)
 8002094:	4618      	mov	r0, r3
 8002096:	f7ff fe4f 	bl	8001d38 <lcd_print>
    lcd_set_cursor(1, 5);
 800209a:	2105      	movs	r1, #5
 800209c:	2001      	movs	r0, #1
 800209e:	f7ff fe2d 	bl	8001cfc <lcd_set_cursor>
    lcd_print(currentSweepMode == FREQUENCY ? ">" : " ");
 80020a2:	4b0d      	ldr	r3, [pc, #52]	@ (80020d8 <_Z18updateSweepDisplayv+0xc0>)
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d101      	bne.n	80020ae <_Z18updateSweepDisplayv+0x96>
 80020aa:	4b0c      	ldr	r3, [pc, #48]	@ (80020dc <_Z18updateSweepDisplayv+0xc4>)
 80020ac:	e000      	b.n	80020b0 <_Z18updateSweepDisplayv+0x98>
 80020ae:	4b0c      	ldr	r3, [pc, #48]	@ (80020e0 <_Z18updateSweepDisplayv+0xc8>)
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7ff fe41 	bl	8001d38 <lcd_print>
}
 80020b6:	bf00      	nop
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	08008118 	.word	0x08008118
 80020c0:	08008120 	.word	0x08008120
 80020c4:	20000298 	.word	0x20000298
 80020c8:	08008128 	.word	0x08008128
 80020cc:	0800812c 	.word	0x0800812c
 80020d0:	20000008 	.word	0x20000008
 80020d4:	08008134 	.word	0x08008134
 80020d8:	200002c8 	.word	0x200002c8
 80020dc:	08008138 	.word	0x08008138
 80020e0:	08008148 	.word	0x08008148

080020e4 <_Z17updateLockDisplayv>:

void updateLockDisplay() {
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
    lcd_clear();
 80020e8:	f7ff fdfe 	bl	8001ce8 <lcd_clear>

    lcd_set_cursor(0, 0);
 80020ec:	2100      	movs	r1, #0
 80020ee:	2000      	movs	r0, #0
 80020f0:	f7ff fe04 	bl	8001cfc <lcd_set_cursor>
    lcd_print("Lock");
 80020f4:	4832      	ldr	r0, [pc, #200]	@ (80021c0 <_Z17updateLockDisplayv+0xdc>)
 80020f6:	f7ff fe1f 	bl	8001d38 <lcd_print>

    lcd_set_cursor(0, 8);
 80020fa:	2108      	movs	r1, #8
 80020fc:	2000      	movs	r0, #0
 80020fe:	f7ff fdfd 	bl	8001cfc <lcd_set_cursor>
    lcd_print("Steps:");
 8002102:	4830      	ldr	r0, [pc, #192]	@ (80021c4 <_Z17updateLockDisplayv+0xe0>)
 8002104:	f7ff fe18 	bl	8001d38 <lcd_print>
    lcd_print_double(stepsLocking);
 8002108:	4b2f      	ldr	r3, [pc, #188]	@ (80021c8 <_Z17updateLockDisplayv+0xe4>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4618      	mov	r0, r3
 800210e:	f7fe fb2b 	bl	8000768 <__aeabi_i2d>
 8002112:	4602      	mov	r2, r0
 8002114:	460b      	mov	r3, r1
 8002116:	ec43 2b10 	vmov	d0, r2, r3
 800211a:	f7ff ff09 	bl	8001f30 <lcd_print_double>

    lcd_set_cursor(1, 1);
 800211e:	2101      	movs	r1, #1
 8002120:	2001      	movs	r0, #1
 8002122:	f7ff fdeb 	bl	8001cfc <lcd_set_cursor>
    lcd_print("Peak:");
 8002126:	4829      	ldr	r0, [pc, #164]	@ (80021cc <_Z17updateLockDisplayv+0xe8>)
 8002128:	f7ff fe06 	bl	8001d38 <lcd_print>
    lcd_print_double(currentPeakIndex + 1);
 800212c:	4b28      	ldr	r3, [pc, #160]	@ (80021d0 <_Z17updateLockDisplayv+0xec>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	3301      	adds	r3, #1
 8002132:	4618      	mov	r0, r3
 8002134:	f7fe fb18 	bl	8000768 <__aeabi_i2d>
 8002138:	4602      	mov	r2, r0
 800213a:	460b      	mov	r3, r1
 800213c:	ec43 2b10 	vmov	d0, r2, r3
 8002140:	f7ff fef6 	bl	8001f30 <lcd_print_double>

    lcd_set_cursor(1, 8);
 8002144:	2108      	movs	r1, #8
 8002146:	2001      	movs	r0, #1
 8002148:	f7ff fdd8 	bl	8001cfc <lcd_set_cursor>
    lcd_print("NRead:");
 800214c:	4821      	ldr	r0, [pc, #132]	@ (80021d4 <_Z17updateLockDisplayv+0xf0>)
 800214e:	f7ff fdf3 	bl	8001d38 <lcd_print>
    lcd_print_double(numReadings);
 8002152:	4b21      	ldr	r3, [pc, #132]	@ (80021d8 <_Z17updateLockDisplayv+0xf4>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4618      	mov	r0, r3
 8002158:	f7fe fb06 	bl	8000768 <__aeabi_i2d>
 800215c:	4602      	mov	r2, r0
 800215e:	460b      	mov	r3, r1
 8002160:	ec43 2b10 	vmov	d0, r2, r3
 8002164:	f7ff fee4 	bl	8001f30 <lcd_print_double>

    lcd_set_cursor(0, 7);
 8002168:	2107      	movs	r1, #7
 800216a:	2000      	movs	r0, #0
 800216c:	f7ff fdc6 	bl	8001cfc <lcd_set_cursor>
    lcd_print(currentLockMode == STEP ? ">" : " ");
 8002170:	4b1a      	ldr	r3, [pc, #104]	@ (80021dc <_Z17updateLockDisplayv+0xf8>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d101      	bne.n	800217c <_Z17updateLockDisplayv+0x98>
 8002178:	4b19      	ldr	r3, [pc, #100]	@ (80021e0 <_Z17updateLockDisplayv+0xfc>)
 800217a:	e000      	b.n	800217e <_Z17updateLockDisplayv+0x9a>
 800217c:	4b19      	ldr	r3, [pc, #100]	@ (80021e4 <_Z17updateLockDisplayv+0x100>)
 800217e:	4618      	mov	r0, r3
 8002180:	f7ff fdda 	bl	8001d38 <lcd_print>

    lcd_set_cursor(1, 0);
 8002184:	2100      	movs	r1, #0
 8002186:	2001      	movs	r0, #1
 8002188:	f7ff fdb8 	bl	8001cfc <lcd_set_cursor>
    lcd_print(currentLockMode == PEAK ? ">" : " ");
 800218c:	4b13      	ldr	r3, [pc, #76]	@ (80021dc <_Z17updateLockDisplayv+0xf8>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d101      	bne.n	8002198 <_Z17updateLockDisplayv+0xb4>
 8002194:	4b12      	ldr	r3, [pc, #72]	@ (80021e0 <_Z17updateLockDisplayv+0xfc>)
 8002196:	e000      	b.n	800219a <_Z17updateLockDisplayv+0xb6>
 8002198:	4b12      	ldr	r3, [pc, #72]	@ (80021e4 <_Z17updateLockDisplayv+0x100>)
 800219a:	4618      	mov	r0, r3
 800219c:	f7ff fdcc 	bl	8001d38 <lcd_print>

    lcd_set_cursor(1, 7);
 80021a0:	2107      	movs	r1, #7
 80021a2:	2001      	movs	r0, #1
 80021a4:	f7ff fdaa 	bl	8001cfc <lcd_set_cursor>
    lcd_print(currentLockMode == AMOSTRAS ? ">" : " ");
 80021a8:	4b0c      	ldr	r3, [pc, #48]	@ (80021dc <_Z17updateLockDisplayv+0xf8>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d101      	bne.n	80021b4 <_Z17updateLockDisplayv+0xd0>
 80021b0:	4b0b      	ldr	r3, [pc, #44]	@ (80021e0 <_Z17updateLockDisplayv+0xfc>)
 80021b2:	e000      	b.n	80021b6 <_Z17updateLockDisplayv+0xd2>
 80021b4:	4b0b      	ldr	r3, [pc, #44]	@ (80021e4 <_Z17updateLockDisplayv+0x100>)
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff fdbe 	bl	8001d38 <lcd_print>
}
 80021bc:	bf00      	nop
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	0800814c 	.word	0x0800814c
 80021c4:	08008154 	.word	0x08008154
 80021c8:	20000024 	.word	0x20000024
 80021cc:	0800815c 	.word	0x0800815c
 80021d0:	200002b8 	.word	0x200002b8
 80021d4:	08008164 	.word	0x08008164
 80021d8:	20000020 	.word	0x20000020
 80021dc:	200002c9 	.word	0x200002c9
 80021e0:	08008138 	.word	0x08008138
 80021e4:	08008148 	.word	0x08008148

080021e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021ec:	b672      	cpsid	i
}
 80021ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021f0:	bf00      	nop
 80021f2:	e7fd      	b.n	80021f0 <Error_Handler+0x8>

080021f4 <_ZNSt12_Vector_baseIjSaIjEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	60bb      	str	r3, [r7, #8]
	: _Tp_alloc_type()
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	4618      	mov	r0, r3
 8002208:	f000 f884 	bl	8002314 <_ZNSt12_Vector_baseIjSaIjEE17_Vector_impl_dataC1Ev>
	{ }
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4618      	mov	r0, r3
 8002210:	3710      	adds	r7, #16
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <_ZNSt12_Vector_baseIjSaIjEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8002216:	b580      	push	{r7, lr}
 8002218:	b082      	sub	sp, #8
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	689a      	ldr	r2, [r3, #8]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 800222e:	461a      	mov	r2, r3
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f000 f88e 	bl	8002352 <_ZNSt12_Vector_baseIjSaIjEE13_M_deallocateEPjj>
      }
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4618      	mov	r0, r3
 800223a:	f7fe fd71 	bl	8000d20 <_ZNSt12_Vector_baseIjSaIjEE12_Vector_implD1Ev>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4618      	mov	r0, r3
 8002242:	3708      	adds	r7, #8
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <_ZNSt6vectorIjSaIjEE8pop_backEv>:
       *  data is needed, it should be retrieved before pop_back() is
       *  called.
       */
      _GLIBCXX20_CONSTEXPR
      void
      pop_back() _GLIBCXX_NOEXCEPT
 8002248:	b480      	push	{r7}
 800224a:	b087      	sub	sp, #28
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	--this->_M_impl._M_finish;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	1f1a      	subs	r2, r3, #4
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	605a      	str	r2, [r3, #4]
	_Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	617a      	str	r2, [r7, #20]
 8002262:	613b      	str	r3, [r7, #16]
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	60fb      	str	r3, [r7, #12]
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	60bb      	str	r3, [r7, #8]
      template<typename _Up>
	__attribute__((__always_inline__))
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 800226c:	bf00      	nop
#if __cplusplus <= 201703L
	  __a.destroy(__p);
#else
	  std::destroy_at(__p);
#endif
	}
 800226e:	bf00      	nop
	_GLIBCXX_ASAN_ANNOTATE_SHRINK(1);
      }
 8002270:	bf00      	nop
 8002272:	371c      	adds	r7, #28
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <_ZNSt6vectorIjSaIjEE9push_backEOj>:
      push_back(value_type&& __x)
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8002286:	6838      	ldr	r0, [r7, #0]
 8002288:	f000 f87c 	bl	8002384 <_ZSt4moveIRjEONSt16remove_referenceIT_E4typeEOS2_>
 800228c:	4603      	mov	r3, r0
 800228e:	4619      	mov	r1, r3
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f000 f882 	bl	800239a <_ZNSt6vectorIjSaIjEE12emplace_backIJjEEEvDpOT_>
 8002296:	bf00      	nop
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <_ZNKSt6vectorIjSaIjEE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 800229e:	b580      	push	{r7, lr}
 80022a0:	b084      	sub	sp, #16
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
      { return begin() == end(); }
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 f8ba 	bl	8002420 <_ZNKSt6vectorIjSaIjEE5beginEv>
 80022ac:	4603      	mov	r3, r0
 80022ae:	60bb      	str	r3, [r7, #8]
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f000 f8c5 	bl	8002440 <_ZNKSt6vectorIjSaIjEE3endEv>
 80022b6:	4603      	mov	r3, r0
 80022b8:	60fb      	str	r3, [r7, #12]
 80022ba:	f107 020c 	add.w	r2, r7, #12
 80022be:	f107 0308 	add.w	r3, r7, #8
 80022c2:	4611      	mov	r1, r2
 80022c4:	4618      	mov	r0, r3
 80022c6:	f000 f8cc 	bl	8002462 <_ZN9__gnu_cxxeqIPKjSt6vectorIjSaIjEEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
 80022ca:	4603      	mov	r3, r0
 80022cc:	4618      	mov	r0, r3
 80022ce:	3710      	adds	r7, #16
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <_ZNKSt6vectorIjSaIjEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685a      	ldr	r2, [r3, #4]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	109b      	asrs	r3, r3, #2
 80022e8:	4618      	mov	r0, r3
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <_ZNSt6vectorIjSaIjEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	4413      	add	r3, r2
      }
 8002308:	4618      	mov	r0, r3
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <_ZNSt12_Vector_baseIjSaIjEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	601a      	str	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	605a      	str	r2, [r3, #4]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	609a      	str	r2, [r3, #8]
	{ }
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4618      	mov	r0, r3
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <_ZNSt15__new_allocatorIjED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	4618      	mov	r0, r3
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr

08002352 <_ZNSt12_Vector_baseIjSaIjEE13_M_deallocateEPjj>:
      _M_deallocate(pointer __p, size_t __n)
 8002352:	b580      	push	{r7, lr}
 8002354:	b088      	sub	sp, #32
 8002356:	af00      	add	r7, sp, #0
 8002358:	60f8      	str	r0, [r7, #12]
 800235a:	60b9      	str	r1, [r7, #8]
 800235c:	607a      	str	r2, [r7, #4]
	if (__p)
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d00b      	beq.n	800237c <_ZNSt12_Vector_baseIjSaIjEE13_M_deallocateEPjj+0x2a>
	  _Tr::deallocate(_M_impl, __p, __n);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	61fb      	str	r3, [r7, #28]
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	61bb      	str	r3, [r7, #24]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	617b      	str	r3, [r7, #20]
      { __a.deallocate(__p, __n); }
 8002370:	697a      	ldr	r2, [r7, #20]
 8002372:	69b9      	ldr	r1, [r7, #24]
 8002374:	69f8      	ldr	r0, [r7, #28]
 8002376:	f000 f9b0 	bl	80026da <_ZNSt15__new_allocatorIjE10deallocateEPjj>
 800237a:	bf00      	nop
      }
 800237c:	bf00      	nop
 800237e:	3720      	adds	r7, #32
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <_ZSt4moveIRjEONSt16remove_referenceIT_E4typeEOS2_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4618      	mov	r0, r3
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr

0800239a <_ZNSt6vectorIjSaIjEE12emplace_backIJjEEEvDpOT_>:
      _GLIBCXX20_CONSTEXPR
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 800239a:	b5b0      	push	{r4, r5, r7, lr}
 800239c:	b088      	sub	sp, #32
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
 80023a2:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685a      	ldr	r2, [r3, #4]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d026      	beq.n	80023fe <_ZNSt6vectorIjSaIjEE12emplace_backIJjEEEvDpOT_+0x64>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80023b0:	687d      	ldr	r5, [r7, #4]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685c      	ldr	r4, [r3, #4]
 80023b6:	6838      	ldr	r0, [r7, #0]
 80023b8:	f000 f86b 	bl	8002492 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80023bc:	4603      	mov	r3, r0
 80023be:	61fd      	str	r5, [r7, #28]
 80023c0:	61bc      	str	r4, [r7, #24]
 80023c2:	617b      	str	r3, [r7, #20]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80023c4:	6978      	ldr	r0, [r7, #20]
 80023c6:	f000 f864 	bl	8002492 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80023ca:	4602      	mov	r2, r0
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	613b      	str	r3, [r7, #16]
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	60fb      	str	r3, [r7, #12]
 80023d4:	60ba      	str	r2, [r7, #8]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	4619      	mov	r1, r3
 80023da:	2004      	movs	r0, #4
 80023dc:	f7fe fc94 	bl	8000d08 <_ZnwjPv>
 80023e0:	4604      	mov	r4, r0
 80023e2:	68b8      	ldr	r0, [r7, #8]
 80023e4:	f000 f855 	bl	8002492 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80023e8:	4603      	mov	r3, r0
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6023      	str	r3, [r4, #0]
 80023ee:	bf00      	nop
	}
 80023f0:	bf00      	nop
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	1d1a      	adds	r2, r3, #4
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	605a      	str	r2, [r3, #4]
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 80023fc:	e00c      	b.n	8002418 <_ZNSt6vectorIjSaIjEE12emplace_backIJjEEEvDpOT_+0x7e>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 f852 	bl	80024a8 <_ZNSt6vectorIjSaIjEE3endEv>
 8002404:	4604      	mov	r4, r0
 8002406:	6838      	ldr	r0, [r7, #0]
 8002408:	f000 f843 	bl	8002492 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800240c:	4603      	mov	r3, r0
 800240e:	461a      	mov	r2, r3
 8002410:	4621      	mov	r1, r4
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 f870 	bl	80024f8 <_ZNSt6vectorIjSaIjEE17_M_realloc_insertIJjEEEvN9__gnu_cxx17__normal_iteratorIPjS1_EEDpOT_>
      }
 8002418:	bf00      	nop
 800241a:	3720      	adds	r7, #32
 800241c:	46bd      	mov	sp, r7
 800241e:	bdb0      	pop	{r4, r5, r7, pc}

08002420 <_ZNKSt6vectorIjSaIjEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	f107 030c 	add.w	r3, r7, #12
 800242e:	4611      	mov	r1, r2
 8002430:	4618      	mov	r0, r3
 8002432:	f000 f937 	bl	80026a4 <_ZN9__gnu_cxx17__normal_iteratorIPKjSt6vectorIjSaIjEEEC1ERKS2_>
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	4618      	mov	r0, r3
 800243a:	3710      	adds	r7, #16
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <_ZNKSt6vectorIjSaIjEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	1d1a      	adds	r2, r3, #4
 800244c:	f107 030c 	add.w	r3, r7, #12
 8002450:	4611      	mov	r1, r2
 8002452:	4618      	mov	r0, r3
 8002454:	f000 f926 	bl	80026a4 <_ZN9__gnu_cxx17__normal_iteratorIPKjSt6vectorIjSaIjEEEC1ERKS2_>
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	4618      	mov	r0, r3
 800245c:	3710      	adds	r7, #16
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <_ZN9__gnu_cxxeqIPKjSt6vectorIjSaIjEEEEbRKNS_17__normal_iteratorIT_T0_EESB_>:
    { return __lhs.base() == __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline bool
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 8002462:	b590      	push	{r4, r7, lr}
 8002464:	b083      	sub	sp, #12
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
 800246a:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() == __rhs.base(); }
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f000 f929 	bl	80026c4 <_ZNK9__gnu_cxx17__normal_iteratorIPKjSt6vectorIjSaIjEEE4baseEv>
 8002472:	4603      	mov	r3, r0
 8002474:	681c      	ldr	r4, [r3, #0]
 8002476:	6838      	ldr	r0, [r7, #0]
 8002478:	f000 f924 	bl	80026c4 <_ZNK9__gnu_cxx17__normal_iteratorIPKjSt6vectorIjSaIjEEE4baseEv>
 800247c:	4603      	mov	r3, r0
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	429c      	cmp	r4, r3
 8002482:	bf0c      	ite	eq
 8002484:	2301      	moveq	r3, #1
 8002486:	2300      	movne	r3, #0
 8002488:	b2db      	uxtb	r3, r3
 800248a:	4618      	mov	r0, r3
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	bd90      	pop	{r4, r7, pc}

08002492 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002492:	b480      	push	{r7}
 8002494:	b083      	sub	sp, #12
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4618      	mov	r0, r3
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <_ZNSt6vectorIjSaIjEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	1d1a      	adds	r2, r3, #4
 80024b4:	f107 030c 	add.w	r3, r7, #12
 80024b8:	4611      	mov	r1, r2
 80024ba:	4618      	mov	r0, r3
 80024bc:	f000 f91d 	bl	80026fa <_ZN9__gnu_cxx17__normal_iteratorIPjSt6vectorIjSaIjEEEC1ERKS1_>
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	4618      	mov	r0, r3
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <_ZNSt6vectorIjSaIjEE15_S_use_relocateEv>:
      _S_use_relocate()
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b082      	sub	sp, #8
 80024ce:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 80024d0:	4618      	mov	r0, r3
 80024d2:	f000 f805 	bl	80024e0 <_ZNSt6vectorIjSaIjEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 80024d6:	4603      	mov	r3, r0
      }
 80024d8:	4618      	mov	r0, r3
 80024da:	3708      	adds	r7, #8
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <_ZNSt6vectorIjSaIjEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 80024e8:	2301      	movs	r3, #1
      }
 80024ea:	4618      	mov	r0, r3
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
	...

080024f8 <_ZNSt6vectorIjSaIjEE17_M_realloc_insertIJjEEEvN9__gnu_cxx17__normal_iteratorIPjS1_EEDpOT_>:
#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      _GLIBCXX20_CONSTEXPR
      void
      vector<_Tp, _Alloc>::
 80024f8:	b5b0      	push	{r4, r5, r7, lr}
 80024fa:	b094      	sub	sp, #80	@ 0x50
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8002504:	4a66      	ldr	r2, [pc, #408]	@ (80026a0 <_ZNSt6vectorIjSaIjEE17_M_realloc_insertIJjEEEvN9__gnu_cxx17__normal_iteratorIPjS1_EEDpOT_+0x1a8>)
 8002506:	2101      	movs	r1, #1
 8002508:	68f8      	ldr	r0, [r7, #12]
 800250a:	f000 f906 	bl	800271a <_ZNKSt6vectorIjSaIjEE12_M_check_lenEjPKc>
 800250e:	64b8      	str	r0, [r7, #72]	@ 0x48
      pointer __old_start = this->_M_impl._M_start;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	647b      	str	r3, [r7, #68]	@ 0x44
      pointer __old_finish = this->_M_impl._M_finish;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	643b      	str	r3, [r7, #64]	@ 0x40
      const size_type __elems_before = __position - begin();
 800251c:	68f8      	ldr	r0, [r7, #12]
 800251e:	f000 f943 	bl	80027a8 <_ZNSt6vectorIjSaIjEE5beginEv>
 8002522:	4603      	mov	r3, r0
 8002524:	613b      	str	r3, [r7, #16]
 8002526:	f107 0210 	add.w	r2, r7, #16
 800252a:	f107 0308 	add.w	r3, r7, #8
 800252e:	4611      	mov	r1, r2
 8002530:	4618      	mov	r0, r3
 8002532:	f000 f949 	bl	80027c8 <_ZN9__gnu_cxxmiIPjSt6vectorIjSaIjEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8002536:	4603      	mov	r3, r0
 8002538:	63fb      	str	r3, [r7, #60]	@ 0x3c
      pointer __new_start(this->_M_allocate(__len));
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800253e:	4618      	mov	r0, r3
 8002540:	f000 f957 	bl	80027f2 <_ZNSt12_Vector_baseIjSaIjEE11_M_allocateEj>
 8002544:	63b8      	str	r0, [r7, #56]	@ 0x38
      pointer __new_finish(__new_start);
 8002546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002548:	64fb      	str	r3, [r7, #76]	@ 0x4c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 800254a:	68fd      	ldr	r5, [r7, #12]
				   __new_start + __elems_before,
 800254c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800254e:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8002550:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002552:	18d4      	adds	r4, r2, r3
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f7ff ff9c 	bl	8002492 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800255a:	4603      	mov	r3, r0
 800255c:	637d      	str	r5, [r7, #52]	@ 0x34
 800255e:	633c      	str	r4, [r7, #48]	@ 0x30
 8002560:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8002562:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002564:	f7ff ff95 	bl	8002492 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8002568:	4602      	mov	r2, r0
 800256a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800256c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800256e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002570:	627b      	str	r3, [r7, #36]	@ 0x24
 8002572:	623a      	str	r2, [r7, #32]
 8002574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002576:	4619      	mov	r1, r3
 8002578:	2004      	movs	r0, #4
 800257a:	f7fe fbc5 	bl	8000d08 <_ZnwjPv>
 800257e:	4604      	mov	r4, r0
 8002580:	6a38      	ldr	r0, [r7, #32]
 8002582:	f7ff ff86 	bl	8002492 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8002586:	4603      	mov	r3, r0
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	6023      	str	r3, [r4, #0]
 800258c:	bf00      	nop
	}
 800258e:	bf00      	nop
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8002590:	2300      	movs	r3, #0
 8002592:	64fb      	str	r3, [r7, #76]	@ 0x4c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8002594:	f7ff ff99 	bl	80024ca <_ZNSt6vectorIjSaIjEE15_S_use_relocateEv>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d027      	beq.n	80025ee <_ZNSt6vectorIjSaIjEE17_M_realloc_insertIJjEEEvN9__gnu_cxx17__normal_iteratorIPjS1_EEDpOT_+0xf6>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800259e:	f107 0308 	add.w	r3, r7, #8
 80025a2:	4618      	mov	r0, r3
 80025a4:	f000 f952 	bl	800284c <_ZNK9__gnu_cxx17__normal_iteratorIPjSt6vectorIjSaIjEEE4baseEv>
 80025a8:	4603      	mov	r3, r0
 80025aa:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f000 f957 	bl	8002862 <_ZNSt12_Vector_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 80025b4:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80025b6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80025b8:	4621      	mov	r1, r4
 80025ba:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80025bc:	f000 f932 	bl	8002824 <_ZNSt6vectorIjSaIjEE11_S_relocateEPjS2_S2_RS0_>
 80025c0:	64f8      	str	r0, [r7, #76]	@ 0x4c

	      ++__new_finish;
 80025c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80025c4:	3304      	adds	r3, #4
 80025c6:	64fb      	str	r3, [r7, #76]	@ 0x4c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80025c8:	f107 0308 	add.w	r3, r7, #8
 80025cc:	4618      	mov	r0, r3
 80025ce:	f000 f93d 	bl	800284c <_ZNK9__gnu_cxx17__normal_iteratorIPjSt6vectorIjSaIjEEE4baseEv>
 80025d2:	4603      	mov	r3, r0
 80025d4:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	4618      	mov	r0, r3
 80025da:	f000 f942 	bl	8002862 <_ZNSt12_Vector_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 80025de:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80025e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80025e2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80025e4:	4620      	mov	r0, r4
 80025e6:	f000 f91d 	bl	8002824 <_ZNSt6vectorIjSaIjEE11_S_relocateEPjS2_S2_RS0_>
 80025ea:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80025ec:	e026      	b.n	800263c <_ZNSt6vectorIjSaIjEE17_M_realloc_insertIJjEEEvN9__gnu_cxx17__normal_iteratorIPjS1_EEDpOT_+0x144>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 80025ee:	f107 0308 	add.w	r3, r7, #8
 80025f2:	4618      	mov	r0, r3
 80025f4:	f000 f92a 	bl	800284c <_ZNK9__gnu_cxx17__normal_iteratorIPjSt6vectorIjSaIjEEE4baseEv>
 80025f8:	4603      	mov	r3, r0
 80025fa:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	4618      	mov	r0, r3
 8002600:	f000 f92f 	bl	8002862 <_ZNSt12_Vector_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 8002604:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8002606:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002608:	4621      	mov	r1, r4
 800260a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800260c:	f000 f934 	bl	8002878 <_ZSt34__uninitialized_move_if_noexcept_aIPjS0_SaIjEET0_T_S3_S2_RT1_>
 8002610:	64f8      	str	r0, [r7, #76]	@ 0x4c

	      ++__new_finish;
 8002612:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002614:	3304      	adds	r3, #4
 8002616:	64fb      	str	r3, [r7, #76]	@ 0x4c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 8002618:	f107 0308 	add.w	r3, r7, #8
 800261c:	4618      	mov	r0, r3
 800261e:	f000 f915 	bl	800284c <_ZNK9__gnu_cxx17__normal_iteratorIPjSt6vectorIjSaIjEEE4baseEv>
 8002622:	4603      	mov	r3, r0
 8002624:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	4618      	mov	r0, r3
 800262a:	f000 f91a 	bl	8002862 <_ZNSt12_Vector_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 800262e:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8002630:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002632:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002634:	4620      	mov	r0, r4
 8002636:	f000 f91f 	bl	8002878 <_ZSt34__uninitialized_move_if_noexcept_aIPjS0_SaIjEET0_T_S3_S2_RT1_>
 800263a:	64f8      	str	r0, [r7, #76]	@ 0x4c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 800263c:	f7ff ff45 	bl	80024ca <_ZNSt6vectorIjSaIjEE15_S_use_relocateEv>
 8002640:	4603      	mov	r3, r0
 8002642:	f083 0301 	eor.w	r3, r3, #1
 8002646:	b2db      	uxtb	r3, r3
 8002648:	2b00      	cmp	r3, #0
 800264a:	d00e      	beq.n	800266a <_ZNSt6vectorIjSaIjEE17_M_realloc_insertIJjEEEvN9__gnu_cxx17__normal_iteratorIPjS1_EEDpOT_+0x172>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	4618      	mov	r0, r3
 8002650:	f000 f907 	bl	8002862 <_ZNSt12_Vector_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 8002654:	4602      	mov	r2, r0
 8002656:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002658:	61fb      	str	r3, [r7, #28]
 800265a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800265c:	61bb      	str	r3, [r7, #24]
 800265e:	617a      	str	r2, [r7, #20]
    __attribute__((__always_inline__)) _GLIBCXX20_CONSTEXPR
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
	     allocator<_Tp>&)
    {
      std::_Destroy(__first, __last);
 8002660:	69b9      	ldr	r1, [r7, #24]
 8002662:	69f8      	ldr	r0, [r7, #28]
 8002664:	f000 f978 	bl	8002958 <_ZSt8_DestroyIPjEvT_S1_>
    }
 8002668:	bf00      	nop
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 800266a:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	689a      	ldr	r2, [r3, #8]
 8002670:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8002676:	461a      	mov	r2, r3
 8002678:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800267a:	f7ff fe6a 	bl	8002352 <_ZNSt12_Vector_baseIjSaIjEE13_M_deallocateEPjj>
      this->_M_impl._M_start = __new_start;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002682:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002688:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800268a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002690:	441a      	add	r2, r3
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	609a      	str	r2, [r3, #8]
    }
 8002696:	bf00      	nop
 8002698:	3750      	adds	r7, #80	@ 0x50
 800269a:	46bd      	mov	sp, r7
 800269c:	bdb0      	pop	{r4, r5, r7, pc}
 800269e:	bf00      	nop
 80026a0:	0800816c 	.word	0x0800816c

080026a4 <_ZN9__gnu_cxx17__normal_iteratorIPKjSt6vectorIjSaIjEEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	601a      	str	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4618      	mov	r0, r3
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <_ZNK9__gnu_cxx17__normal_iteratorIPKjSt6vectorIjSaIjEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	4618      	mov	r0, r3
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr

080026da <_ZNSt15__new_allocatorIjE10deallocateEPjj>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 80026da:	b580      	push	{r7, lr}
 80026dc:	b084      	sub	sp, #16
 80026de:	af00      	add	r7, sp, #0
 80026e0:	60f8      	str	r0, [r7, #12]
 80026e2:	60b9      	str	r1, [r7, #8]
 80026e4:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	4619      	mov	r1, r3
 80026ec:	68b8      	ldr	r0, [r7, #8]
 80026ee:	f004 ffc2 	bl	8007676 <_ZdlPvj>
      }
 80026f2:	bf00      	nop
 80026f4:	3710      	adds	r7, #16
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <_ZN9__gnu_cxx17__normal_iteratorIPjSt6vectorIjSaIjEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80026fa:	b480      	push	{r7}
 80026fc:	b083      	sub	sp, #12
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
 8002702:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4618      	mov	r0, r3
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr

0800271a <_ZNKSt6vectorIjSaIjEE12_M_check_lenEjPKc>:
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      _GLIBCXX20_CONSTEXPR
      size_type
      _M_check_len(size_type __n, const char* __s) const
 800271a:	b590      	push	{r4, r7, lr}
 800271c:	b087      	sub	sp, #28
 800271e:	af00      	add	r7, sp, #0
 8002720:	60f8      	str	r0, [r7, #12]
 8002722:	60b9      	str	r1, [r7, #8]
 8002724:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 8002726:	68f8      	ldr	r0, [r7, #12]
 8002728:	f000 f8bf 	bl	80028aa <_ZNKSt6vectorIjSaIjEE8max_sizeEv>
 800272c:	4604      	mov	r4, r0
 800272e:	68f8      	ldr	r0, [r7, #12]
 8002730:	f7ff fdd0 	bl	80022d4 <_ZNKSt6vectorIjSaIjEE4sizeEv>
 8002734:	4603      	mov	r3, r0
 8002736:	1ae2      	subs	r2, r4, r3
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	429a      	cmp	r2, r3
 800273c:	bf34      	ite	cc
 800273e:	2301      	movcc	r3, #1
 8002740:	2300      	movcs	r3, #0
 8002742:	b2db      	uxtb	r3, r3
 8002744:	2b00      	cmp	r3, #0
 8002746:	d002      	beq.n	800274e <_ZNKSt6vectorIjSaIjEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f004 ffad 	bl	80076a8 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	f7ff fdc0 	bl	80022d4 <_ZNKSt6vectorIjSaIjEE4sizeEv>
 8002754:	4604      	mov	r4, r0
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f7ff fdbc 	bl	80022d4 <_ZNKSt6vectorIjSaIjEE4sizeEv>
 800275c:	4603      	mov	r3, r0
 800275e:	613b      	str	r3, [r7, #16]
 8002760:	f107 0208 	add.w	r2, r7, #8
 8002764:	f107 0310 	add.w	r3, r7, #16
 8002768:	4611      	mov	r1, r2
 800276a:	4618      	mov	r0, r3
 800276c:	f000 f8ae 	bl	80028cc <_ZSt3maxIjERKT_S2_S2_>
 8002770:	4603      	mov	r3, r0
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4423      	add	r3, r4
 8002776:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f7ff fdab 	bl	80022d4 <_ZNKSt6vectorIjSaIjEE4sizeEv>
 800277e:	4602      	mov	r2, r0
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	4293      	cmp	r3, r2
 8002784:	d306      	bcc.n	8002794 <_ZNKSt6vectorIjSaIjEE12_M_check_lenEjPKc+0x7a>
 8002786:	68f8      	ldr	r0, [r7, #12]
 8002788:	f000 f88f 	bl	80028aa <_ZNKSt6vectorIjSaIjEE8max_sizeEv>
 800278c:	4602      	mov	r2, r0
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	4293      	cmp	r3, r2
 8002792:	d904      	bls.n	800279e <_ZNKSt6vectorIjSaIjEE12_M_check_lenEjPKc+0x84>
 8002794:	68f8      	ldr	r0, [r7, #12]
 8002796:	f000 f888 	bl	80028aa <_ZNKSt6vectorIjSaIjEE8max_sizeEv>
 800279a:	4603      	mov	r3, r0
 800279c:	e000      	b.n	80027a0 <_ZNKSt6vectorIjSaIjEE12_M_check_lenEjPKc+0x86>
 800279e:	697b      	ldr	r3, [r7, #20]
      }
 80027a0:	4618      	mov	r0, r3
 80027a2:	371c      	adds	r7, #28
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd90      	pop	{r4, r7, pc}

080027a8 <_ZNSt6vectorIjSaIjEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	f107 030c 	add.w	r3, r7, #12
 80027b6:	4611      	mov	r1, r2
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff ff9e 	bl	80026fa <_ZN9__gnu_cxx17__normal_iteratorIPjSt6vectorIjSaIjEEEC1ERKS1_>
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	4618      	mov	r0, r3
 80027c2:	3710      	adds	r7, #16
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <_ZN9__gnu_cxxmiIPjSt6vectorIjSaIjEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80027c8:	b590      	push	{r4, r7, lr}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 f83a 	bl	800284c <_ZNK9__gnu_cxx17__normal_iteratorIPjSt6vectorIjSaIjEEE4baseEv>
 80027d8:	4603      	mov	r3, r0
 80027da:	681c      	ldr	r4, [r3, #0]
 80027dc:	6838      	ldr	r0, [r7, #0]
 80027de:	f000 f835 	bl	800284c <_ZNK9__gnu_cxx17__normal_iteratorIPjSt6vectorIjSaIjEEE4baseEv>
 80027e2:	4603      	mov	r3, r0
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	1ae3      	subs	r3, r4, r3
 80027e8:	109b      	asrs	r3, r3, #2
 80027ea:	4618      	mov	r0, r3
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd90      	pop	{r4, r7, pc}

080027f2 <_ZNSt12_Vector_baseIjSaIjEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b084      	sub	sp, #16
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
 80027fa:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00b      	beq.n	800281a <_ZNSt12_Vector_baseIjSaIjEE11_M_allocateEj+0x28>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	60fb      	str	r3, [r7, #12]
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	60bb      	str	r3, [r7, #8]
      { return __a.allocate(__n); }
 800280a:	2200      	movs	r2, #0
 800280c:	68b9      	ldr	r1, [r7, #8]
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f000 f8da 	bl	80029c8 <_ZNSt15__new_allocatorIjE8allocateEjPKv>
 8002814:	4603      	mov	r3, r0
 8002816:	bf00      	nop
 8002818:	e000      	b.n	800281c <_ZNSt12_Vector_baseIjSaIjEE11_M_allocateEj+0x2a>
 800281a:	2300      	movs	r3, #0
      }
 800281c:	4618      	mov	r0, r3
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <_ZNSt6vectorIjSaIjEE11_S_relocateEPjS2_S2_RS0_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8002824:	b590      	push	{r4, r7, lr}
 8002826:	b087      	sub	sp, #28
 8002828:	af02      	add	r7, sp, #8
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	607a      	str	r2, [r7, #4]
 8002830:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8002832:	f88d 4000 	strb.w	r4, [sp]
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	68b9      	ldr	r1, [r7, #8]
 800283c:	68f8      	ldr	r0, [r7, #12]
 800283e:	f000 f859 	bl	80028f4 <_ZNSt6vectorIjSaIjEE14_S_do_relocateEPjS2_S2_RS0_St17integral_constantIbLb1EE>
 8002842:	4603      	mov	r3, r0
      }
 8002844:	4618      	mov	r0, r3
 8002846:	3714      	adds	r7, #20
 8002848:	46bd      	mov	sp, r7
 800284a:	bd90      	pop	{r4, r7, pc}

0800284c <_ZNK9__gnu_cxx17__normal_iteratorIPjSt6vectorIjSaIjEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4618      	mov	r0, r3
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr

08002862 <_ZNSt12_Vector_baseIjSaIjEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8002862:	b480      	push	{r7}
 8002864:	b083      	sub	sp, #12
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4618      	mov	r0, r3
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <_ZSt34__uninitialized_move_if_noexcept_aIPjS0_SaIjEET0_T_S3_S2_RT1_>:

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8002878:	b590      	push	{r4, r7, lr}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
 8002884:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8002886:	68f8      	ldr	r0, [r7, #12]
 8002888:	f000 f846 	bl	8002918 <_ZSt32__make_move_if_noexcept_iteratorIjSt13move_iteratorIPjEET0_PT_>
 800288c:	4604      	mov	r4, r0
 800288e:	68b8      	ldr	r0, [r7, #8]
 8002890:	f000 f842 	bl	8002918 <_ZSt32__make_move_if_noexcept_iteratorIjSt13move_iteratorIPjEET0_PT_>
 8002894:	4601      	mov	r1, r0
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	4620      	mov	r0, r4
 800289c:	f000 f84b 	bl	8002936 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPjES1_jET0_T_S4_S3_RSaIT1_E>
 80028a0:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 80028a2:	4618      	mov	r0, r3
 80028a4:	3714      	adds	r7, #20
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd90      	pop	{r4, r7, pc}

080028aa <_ZNKSt6vectorIjSaIjEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b082      	sub	sp, #8
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f000 f87c 	bl	80029b2 <_ZNKSt12_Vector_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 80028ba:	4603      	mov	r3, r0
 80028bc:	4618      	mov	r0, r3
 80028be:	f000 f858 	bl	8002972 <_ZNSt6vectorIjSaIjEE11_S_max_sizeERKS0_>
 80028c2:	4603      	mov	r3, r0
 80028c4:	4618      	mov	r0, r3
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d201      	bcs.n	80028e6 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	e000      	b.n	80028e8 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 80028e6:	687b      	ldr	r3, [r7, #4]
    }
 80028e8:	4618      	mov	r0, r3
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <_ZNSt6vectorIjSaIjEE14_S_do_relocateEPjS2_S2_RS0_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
 8002900:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	68b9      	ldr	r1, [r7, #8]
 8002908:	68f8      	ldr	r0, [r7, #12]
 800290a:	f000 f886 	bl	8002a1a <_ZSt12__relocate_aIPjS0_SaIjEET0_T_S3_S2_RT1_>
 800290e:	4603      	mov	r3, r0
      }
 8002910:	4618      	mov	r0, r3
 8002912:	3710      	adds	r7, #16
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <_ZSt32__make_move_if_noexcept_iteratorIjSt13move_iteratorIPjEET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = __conditional_t<__move_if_noexcept_cond<_Tp>::value,
		      const _Tp*, move_iterator<_Tp*>>>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8002920:	f107 030c 	add.w	r3, r7, #12
 8002924:	6879      	ldr	r1, [r7, #4]
 8002926:	4618      	mov	r0, r3
 8002928:	f000 f894 	bl	8002a54 <_ZNSt13move_iteratorIPjEC1ES0_>
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	4618      	mov	r0, r3
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPjES1_jET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8002936:	b580      	push	{r7, lr}
 8002938:	b084      	sub	sp, #16
 800293a:	af00      	add	r7, sp, #0
 800293c:	60f8      	str	r0, [r7, #12]
 800293e:	60b9      	str	r1, [r7, #8]
 8002940:	607a      	str	r2, [r7, #4]
 8002942:	603b      	str	r3, [r7, #0]
      return std::uninitialized_copy(__first, __last, __result);
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	68b9      	ldr	r1, [r7, #8]
 8002948:	68f8      	ldr	r0, [r7, #12]
 800294a:	f000 f895 	bl	8002a78 <_ZSt18uninitialized_copyISt13move_iteratorIPjES1_ET0_T_S4_S3_>
 800294e:	4603      	mov	r3, r0
    }
 8002950:	4618      	mov	r0, r3
 8002952:	3710      	adds	r7, #16
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <_ZSt8_DestroyIPjEvT_S1_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
	return std::_Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8002962:	6839      	ldr	r1, [r7, #0]
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f000 f89b 	bl	8002aa0 <_ZNSt12_Destroy_auxILb1EE9__destroyIPjEEvT_S3_>
    }
 800296a:	bf00      	nop
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <_ZNSt6vectorIjSaIjEE11_S_max_sizeERKS0_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static _GLIBCXX20_CONSTEXPR size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8002972:	b580      	push	{r7, lr}
 8002974:	b088      	sub	sp, #32
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 800297a:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 800297e:	613b      	str	r3, [r7, #16]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	61fb      	str	r3, [r7, #28]
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	61bb      	str	r3, [r7, #24]
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	617b      	str	r3, [r7, #20]
      __attribute__((__always_inline__))
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800298c:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
      { return _M_max_size(); }
 8002990:	bf00      	nop
	return __a.max_size();
 8002992:	bf00      	nop
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8002994:	60fb      	str	r3, [r7, #12]
	return (std::min)(__diffmax, __allocmax);
 8002996:	f107 020c 	add.w	r2, r7, #12
 800299a:	f107 0310 	add.w	r3, r7, #16
 800299e:	4611      	mov	r1, r2
 80029a0:	4618      	mov	r0, r3
 80029a2:	f000 f888 	bl	8002ab6 <_ZSt3minIjERKT_S2_S2_>
 80029a6:	4603      	mov	r3, r0
 80029a8:	681b      	ldr	r3, [r3, #0]
      }
 80029aa:	4618      	mov	r0, r3
 80029ac:	3720      	adds	r7, #32
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <_ZNKSt12_Vector_baseIjSaIjEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80029b2:	b480      	push	{r7}
 80029b4:	b083      	sub	sp, #12
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4618      	mov	r0, r3
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <_ZNSt15__new_allocatorIjE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	617b      	str	r3, [r7, #20]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80029d8:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	4293      	cmp	r3, r2
 80029e0:	bf8c      	ite	hi
 80029e2:	2301      	movhi	r3, #1
 80029e4:	2300      	movls	r3, #0
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	bf14      	ite	ne
 80029ec:	2301      	movne	r3, #1
 80029ee:	2300      	moveq	r3, #0
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d007      	beq.n	8002a06 <_ZNSt15__new_allocatorIjE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029fc:	d301      	bcc.n	8002a02 <_ZNSt15__new_allocatorIjE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 80029fe:	f004 fe50 	bl	80076a2 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8002a02:	f004 fe4b 	bl	800769c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f004 fe35 	bl	800767a <_Znwj>
 8002a10:	4603      	mov	r3, r0
      }
 8002a12:	4618      	mov	r0, r3
 8002a14:	3718      	adds	r7, #24
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <_ZSt12__relocate_aIPjS0_SaIjEET0_T_S3_S2_RT1_>:

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8002a1a:	b5b0      	push	{r4, r5, r7, lr}
 8002a1c:	b084      	sub	sp, #16
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	60f8      	str	r0, [r7, #12]
 8002a22:	60b9      	str	r1, [r7, #8]
 8002a24:	607a      	str	r2, [r7, #4]
 8002a26:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return std::__relocate_a_1(std::__niter_base(__first),
 8002a28:	68f8      	ldr	r0, [r7, #12]
 8002a2a:	f000 f858 	bl	8002ade <_ZSt12__niter_baseIPjET_S1_>
 8002a2e:	4604      	mov	r4, r0
 8002a30:	68b8      	ldr	r0, [r7, #8]
 8002a32:	f000 f854 	bl	8002ade <_ZSt12__niter_baseIPjET_S1_>
 8002a36:	4605      	mov	r5, r0
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f000 f850 	bl	8002ade <_ZSt12__niter_baseIPjET_S1_>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	4629      	mov	r1, r5
 8002a44:	4620      	mov	r0, r4
 8002a46:	f000 f855 	bl	8002af4 <_ZSt14__relocate_a_1IjjENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>
 8002a4a:	4603      	mov	r3, r0
				 std::__niter_base(__last),
				 std::__niter_base(__result), __alloc);
    }
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3710      	adds	r7, #16
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bdb0      	pop	{r4, r5, r7, pc}

08002a54 <_ZNSt13move_iteratorIPjEC1ES0_>:
      move_iterator(iterator_type __i)
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8002a5e:	463b      	mov	r3, r7
 8002a60:	4618      	mov	r0, r3
 8002a62:	f000 f865 	bl	8002b30 <_ZSt4moveIRPjEONSt16remove_referenceIT_E4typeEOS3_>
 8002a66:	4603      	mov	r3, r0
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	601a      	str	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4618      	mov	r0, r3
 8002a72:	3708      	adds	r7, #8
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <_ZSt18uninitialized_copyISt13move_iteratorIPjES1_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
      const bool __can_memmove = __is_trivial(_ValueType1);
 8002a84:	2301      	movs	r3, #1
 8002a86:	75fb      	strb	r3, [r7, #23]
      const bool __assignable
 8002a88:	2301      	movs	r3, #1
 8002a8a:	75bb      	strb	r3, [r7, #22]
	__uninit_copy(__first, __last, __result);
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	68b9      	ldr	r1, [r7, #8]
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	f000 f858 	bl	8002b46 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPjES3_EET0_T_S6_S5_>
 8002a96:	4603      	mov	r3, r0
    }
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3718      	adds	r7, #24
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <_ZNSt12_Destroy_auxILb1EE9__destroyIPjEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
 8002aaa:	bf00      	nop
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr

08002ab6 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8002ab6:	b480      	push	{r7}
 8002ab8:	b083      	sub	sp, #12
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
 8002abe:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d201      	bcs.n	8002ad0 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	e000      	b.n	8002ad2 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8002ad0:	687b      	ldr	r3, [r7, #4]
    }
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr

08002ade <_ZSt12__niter_baseIPjET_S1_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __niter_base(_Iterator __it)
 8002ade:	b480      	push	{r7}
 8002ae0:	b083      	sub	sp, #12
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr

08002af4 <_ZSt14__relocate_a_1IjjENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
 8002b00:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8002b02:	68ba      	ldr	r2, [r7, #8]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	109b      	asrs	r3, r3, #2
 8002b0a:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	dd06      	ble.n	8002b20 <_ZSt14__relocate_a_1IjjENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x2c>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	461a      	mov	r2, r3
 8002b18:	68f9      	ldr	r1, [r7, #12]
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f004 fece 	bl	80078bc <memmove>
      return __result + __count;
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	4413      	add	r3, r2
    }
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3718      	adds	r7, #24
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <_ZSt4moveIRPjEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr

08002b46 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPjES3_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b084      	sub	sp, #16
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	60f8      	str	r0, [r7, #12]
 8002b4e:	60b9      	str	r1, [r7, #8]
 8002b50:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	68b9      	ldr	r1, [r7, #8]
 8002b56:	68f8      	ldr	r0, [r7, #12]
 8002b58:	f000 f805 	bl	8002b66 <_ZSt4copyISt13move_iteratorIPjES1_ET0_T_S4_S3_>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <_ZSt4copyISt13move_iteratorIPjES1_ET0_T_S4_S3_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8002b66:	b590      	push	{r4, r7, lr}
 8002b68:	b085      	sub	sp, #20
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	60f8      	str	r0, [r7, #12]
 8002b6e:	60b9      	str	r1, [r7, #8]
 8002b70:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::reference>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8002b72:	68f8      	ldr	r0, [r7, #12]
 8002b74:	f000 f80f 	bl	8002b96 <_ZSt12__miter_baseIPjEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8002b78:	4604      	mov	r4, r0
 8002b7a:	68b8      	ldr	r0, [r7, #8]
 8002b7c:	f000 f80b 	bl	8002b96 <_ZSt12__miter_baseIPjEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8002b80:	4603      	mov	r3, r0
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	4619      	mov	r1, r3
 8002b86:	4620      	mov	r0, r4
 8002b88:	f000 f816 	bl	8002bb8 <_ZSt13__copy_move_aILb1EPjS0_ET1_T0_S2_S1_>
 8002b8c:	4603      	mov	r3, r0
    }
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3714      	adds	r7, #20
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd90      	pop	{r4, r7, pc}

08002b96 <_ZSt12__miter_baseIPjEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    };

  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b082      	sub	sp, #8
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8002b9e:	1d3b      	adds	r3, r7, #4
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f000 f82c 	bl	8002bfe <_ZNKSt13move_iteratorIPjE4baseEv>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f000 f834 	bl	8002c16 <_ZSt12__miter_baseIPjET_S1_>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3708      	adds	r7, #8
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <_ZSt13__copy_move_aILb1EPjS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8002bb8:	b5b0      	push	{r4, r5, r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8002bc4:	68f8      	ldr	r0, [r7, #12]
 8002bc6:	f7ff ff8a 	bl	8002ade <_ZSt12__niter_baseIPjET_S1_>
 8002bca:	4604      	mov	r4, r0
 8002bcc:	68b8      	ldr	r0, [r7, #8]
 8002bce:	f7ff ff86 	bl	8002ade <_ZSt12__niter_baseIPjET_S1_>
 8002bd2:	4605      	mov	r5, r0
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7ff ff81 	bl	8002ade <_ZSt12__niter_baseIPjET_S1_>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	461a      	mov	r2, r3
 8002be0:	4629      	mov	r1, r5
 8002be2:	4620      	mov	r0, r4
 8002be4:	f000 f822 	bl	8002c2c <_ZSt14__copy_move_a1ILb1EPjS0_ET1_T0_S2_S1_>
 8002be8:	4602      	mov	r2, r0
 8002bea:	1d3b      	adds	r3, r7, #4
 8002bec:	4611      	mov	r1, r2
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f000 f82c 	bl	8002c4c <_ZSt12__niter_wrapIPjET_RKS1_S1_>
 8002bf4:	4603      	mov	r3, r0
    }
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bdb0      	pop	{r4, r5, r7, pc}

08002bfe <_ZNKSt13move_iteratorIPjE4baseEv>:
      base() const
 8002bfe:	b480      	push	{r7}
 8002c00:	b083      	sub	sp, #12
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr

08002c16 <_ZSt12__miter_baseIPjET_S1_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8002c16:	b480      	push	{r7}
 8002c18:	b083      	sub	sp, #12
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
    { return __it; }
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4618      	mov	r0, r3
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <_ZSt14__copy_move_a1ILb1EPjS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	68b9      	ldr	r1, [r7, #8]
 8002c3c:	68f8      	ldr	r0, [r7, #12]
 8002c3e:	f000 f811 	bl	8002c64 <_ZSt14__copy_move_a2ILb1EPjS0_ET1_T0_S2_S1_>
 8002c42:	4603      	mov	r3, r0
 8002c44:	4618      	mov	r0, r3
 8002c46:	3710      	adds	r7, #16
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <_ZSt12__niter_wrapIPjET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
    { return __res; }
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <_ZSt14__copy_move_a2ILb1EPjS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	68b9      	ldr	r1, [r7, #8]
 8002c74:	68f8      	ldr	r0, [r7, #12]
 8002c76:	f000 f805 	bl	8002c84 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIjjEEPT0_PT_S6_S4_>
 8002c7a:	4603      	mov	r3, r0
    }
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3710      	adds	r7, #16
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIjjEEPT0_PT_S6_S4_>:
	__copy_m(_Tp* __first, _Tp* __last, _Up* __result)
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b086      	sub	sp, #24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8002c90:	68ba      	ldr	r2, [r7, #8]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	109b      	asrs	r3, r3, #2
 8002c98:	617b      	str	r3, [r7, #20]
	  if (__builtin_expect(_Num > 1, true))
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	bfcc      	ite	gt
 8002ca0:	2301      	movgt	r3, #1
 8002ca2:	2300      	movle	r3, #0
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d007      	beq.n	8002cba <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIjjEEPT0_PT_S6_S4_+0x36>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	461a      	mov	r2, r3
 8002cb0:	68f9      	ldr	r1, [r7, #12]
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f004 fe02 	bl	80078bc <memmove>
 8002cb8:	e006      	b.n	8002cc8 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIjjEEPT0_PT_S6_S4_+0x44>
	  else if (_Num == 1)
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d103      	bne.n	8002cc8 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIjjEEPT0_PT_S6_S4_+0x44>
	      __assign_one(__result, __first);
 8002cc0:	68f9      	ldr	r1, [r7, #12]
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f000 f808 	bl	8002cd8 <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE12__assign_oneIjjEEvPT_PT0_>
	  return __result + _Num;
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	4413      	add	r3, r2
	}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3718      	adds	r7, #24
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE12__assign_oneIjjEEvPT_PT0_>:
	__assign_one(_Tp* __to, _Up* __from)
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
	{ *__to = std::move(*__from); }
 8002ce2:	6838      	ldr	r0, [r7, #0]
 8002ce4:	f7ff fb4e 	bl	8002384 <_ZSt4moveIRjEONSt16remove_referenceIT_E4typeEOS2_>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	601a      	str	r2, [r3, #0]
 8002cf0:	bf00      	nop
 8002cf2:	3708      	adds	r7, #8
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <_Z41__static_initialization_and_destruction_0v>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
volatile double ampSweep = ampStepSweep * triangularAmp;
 8002cfc:	4b13      	ldr	r3, [pc, #76]	@ (8002d4c <_Z41__static_initialization_and_destruction_0v+0x54>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7fd fd21 	bl	8000748 <__aeabi_ui2d>
 8002d06:	4b12      	ldr	r3, [pc, #72]	@ (8002d50 <_Z41__static_initialization_and_destruction_0v+0x58>)
 8002d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d0c:	f7fd fab0 	bl	8000270 <__aeabi_dmul>
 8002d10:	4602      	mov	r2, r0
 8002d12:	460b      	mov	r3, r1
 8002d14:	490f      	ldr	r1, [pc, #60]	@ (8002d54 <_Z41__static_initialization_and_destruction_0v+0x5c>)
 8002d16:	e9c1 2300 	strd	r2, r3, [r1]
std::vector<unsigned int> peaksPositions;
 8002d1a:	480f      	ldr	r0, [pc, #60]	@ (8002d58 <_Z41__static_initialization_and_destruction_0v+0x60>)
 8002d1c:	f7fe f81b 	bl	8000d56 <_ZNSt6vectorIjSaIjEEC1Ev>
double waitingTime = 1000000/(frequency * triangularAmp * 2);
 8002d20:	4b0e      	ldr	r3, [pc, #56]	@ (8002d5c <_Z41__static_initialization_and_destruction_0v+0x64>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	461a      	mov	r2, r3
 8002d26:	4b09      	ldr	r3, [pc, #36]	@ (8002d4c <_Z41__static_initialization_and_destruction_0v+0x54>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	fb02 f303 	mul.w	r3, r2, r3
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	4a0b      	ldr	r2, [pc, #44]	@ (8002d60 <_Z41__static_initialization_and_destruction_0v+0x68>)
 8002d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7fd fd06 	bl	8000748 <__aeabi_ui2d>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	460b      	mov	r3, r1
 8002d40:	4908      	ldr	r1, [pc, #32]	@ (8002d64 <_Z41__static_initialization_and_destruction_0v+0x6c>)
 8002d42:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002d46:	bf00      	nop
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	20000004 	.word	0x20000004
 8002d50:	20000010 	.word	0x20000010
 8002d54:	20000298 	.word	0x20000298
 8002d58:	200002ac 	.word	0x200002ac
 8002d5c:	20000008 	.word	0x20000008
 8002d60:	000f4240 	.word	0x000f4240
 8002d64:	200002c0 	.word	0x200002c0

08002d68 <_Z41__static_initialization_and_destruction_1v>:
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0
std::vector<unsigned int> peaksPositions;
 8002d6c:	4802      	ldr	r0, [pc, #8]	@ (8002d78 <_Z41__static_initialization_and_destruction_1v+0x10>)
 8002d6e:	f000 f805 	bl	8002d7c <_ZNSt6vectorIjSaIjEED1Ev>
}
 8002d72:	bf00      	nop
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	200002ac 	.word	0x200002ac

08002d7c <_ZNSt6vectorIjSaIjEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8002d7c:	b5b0      	push	{r4, r5, r7, lr}
 8002d7e:	b086      	sub	sp, #24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681d      	ldr	r5, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685c      	ldr	r4, [r3, #4]
		      _M_get_Tp_allocator());
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7ff fd67 	bl	8002862 <_ZNSt12_Vector_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 8002d94:	4603      	mov	r3, r0
 8002d96:	617d      	str	r5, [r7, #20]
 8002d98:	613c      	str	r4, [r7, #16]
 8002d9a:	60fb      	str	r3, [r7, #12]
      std::_Destroy(__first, __last);
 8002d9c:	6939      	ldr	r1, [r7, #16]
 8002d9e:	6978      	ldr	r0, [r7, #20]
 8002da0:	f7ff fdda 	bl	8002958 <_ZSt8_DestroyIPjEvT_S1_>
    }
 8002da4:	bf00      	nop
      }
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7ff fa34 	bl	8002216 <_ZNSt12_Vector_baseIjSaIjEED1Ev>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4618      	mov	r0, r3
 8002db2:	3718      	adds	r7, #24
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bdb0      	pop	{r4, r5, r7, pc}

08002db8 <_GLOBAL__sub_I_hadc1>:
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	f7ff ff9c 	bl	8002cf8 <_Z41__static_initialization_and_destruction_0v>
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <_GLOBAL__sub_D_hadc1>:
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	f7ff ffcf 	bl	8002d68 <_Z41__static_initialization_and_destruction_1v>
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dd2:	4b0f      	ldr	r3, [pc, #60]	@ (8002e10 <HAL_MspInit+0x44>)
 8002dd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dd6:	4a0e      	ldr	r2, [pc, #56]	@ (8002e10 <HAL_MspInit+0x44>)
 8002dd8:	f043 0301 	orr.w	r3, r3, #1
 8002ddc:	6613      	str	r3, [r2, #96]	@ 0x60
 8002dde:	4b0c      	ldr	r3, [pc, #48]	@ (8002e10 <HAL_MspInit+0x44>)
 8002de0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	607b      	str	r3, [r7, #4]
 8002de8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dea:	4b09      	ldr	r3, [pc, #36]	@ (8002e10 <HAL_MspInit+0x44>)
 8002dec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dee:	4a08      	ldr	r2, [pc, #32]	@ (8002e10 <HAL_MspInit+0x44>)
 8002df0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002df4:	6593      	str	r3, [r2, #88]	@ 0x58
 8002df6:	4b06      	ldr	r3, [pc, #24]	@ (8002e10 <HAL_MspInit+0x44>)
 8002df8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dfe:	603b      	str	r3, [r7, #0]
 8002e00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e02:	bf00      	nop
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	40021000 	.word	0x40021000

08002e14 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b08a      	sub	sp, #40	@ 0x28
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e1c:	f107 0314 	add.w	r3, r7, #20
 8002e20:	2200      	movs	r2, #0
 8002e22:	601a      	str	r2, [r3, #0]
 8002e24:	605a      	str	r2, [r3, #4]
 8002e26:	609a      	str	r2, [r3, #8]
 8002e28:	60da      	str	r2, [r3, #12]
 8002e2a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a15      	ldr	r2, [pc, #84]	@ (8002e88 <HAL_ADC_MspInit+0x74>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d123      	bne.n	8002e7e <HAL_ADC_MspInit+0x6a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002e36:	4b15      	ldr	r3, [pc, #84]	@ (8002e8c <HAL_ADC_MspInit+0x78>)
 8002e38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e3a:	4a14      	ldr	r2, [pc, #80]	@ (8002e8c <HAL_ADC_MspInit+0x78>)
 8002e3c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002e40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e42:	4b12      	ldr	r3, [pc, #72]	@ (8002e8c <HAL_ADC_MspInit+0x78>)
 8002e44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e46:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e4a:	613b      	str	r3, [r7, #16]
 8002e4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e4e:	4b0f      	ldr	r3, [pc, #60]	@ (8002e8c <HAL_ADC_MspInit+0x78>)
 8002e50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e52:	4a0e      	ldr	r2, [pc, #56]	@ (8002e8c <HAL_ADC_MspInit+0x78>)
 8002e54:	f043 0302 	orr.w	r3, r3, #2
 8002e58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e5a:	4b0c      	ldr	r3, [pc, #48]	@ (8002e8c <HAL_ADC_MspInit+0x78>)
 8002e5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	60fb      	str	r3, [r7, #12]
 8002e64:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002e66:	2301      	movs	r3, #1
 8002e68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002e6a:	230b      	movs	r3, #11
 8002e6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e72:	f107 0314 	add.w	r3, r7, #20
 8002e76:	4619      	mov	r1, r3
 8002e78:	4805      	ldr	r0, [pc, #20]	@ (8002e90 <HAL_ADC_MspInit+0x7c>)
 8002e7a:	f001 fdf3 	bl	8004a64 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002e7e:	bf00      	nop
 8002e80:	3728      	adds	r7, #40	@ 0x28
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	50040000 	.word	0x50040000
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	48000400 	.word	0x48000400

08002e94 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b096      	sub	sp, #88	@ 0x58
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e9c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	601a      	str	r2, [r3, #0]
 8002ea4:	605a      	str	r2, [r3, #4]
 8002ea6:	609a      	str	r2, [r3, #8]
 8002ea8:	60da      	str	r2, [r3, #12]
 8002eaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002eac:	f107 0310 	add.w	r3, r7, #16
 8002eb0:	2234      	movs	r2, #52	@ 0x34
 8002eb2:	2100      	movs	r1, #0
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f004 fd1b 	bl	80078f0 <memset>
  if(hi2c->Instance==I2C1)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a24      	ldr	r2, [pc, #144]	@ (8002f50 <HAL_I2C_MspInit+0xbc>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d141      	bne.n	8002f48 <HAL_I2C_MspInit+0xb4>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002ec4:	2340      	movs	r3, #64	@ 0x40
 8002ec6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ecc:	f107 0310 	add.w	r3, r7, #16
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f003 fab9 	bl	8006448 <HAL_RCCEx_PeriphCLKConfig>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d001      	beq.n	8002ee0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002edc:	f7ff f984 	bl	80021e8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ee0:	4b1c      	ldr	r3, [pc, #112]	@ (8002f54 <HAL_I2C_MspInit+0xc0>)
 8002ee2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ee4:	4a1b      	ldr	r2, [pc, #108]	@ (8002f54 <HAL_I2C_MspInit+0xc0>)
 8002ee6:	f043 0302 	orr.w	r3, r3, #2
 8002eea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002eec:	4b19      	ldr	r3, [pc, #100]	@ (8002f54 <HAL_I2C_MspInit+0xc0>)
 8002eee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	60fb      	str	r3, [r7, #12]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002ef8:	23c0      	movs	r3, #192	@ 0xc0
 8002efa:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002efc:	2312      	movs	r3, #18
 8002efe:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f00:	2300      	movs	r3, #0
 8002f02:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f04:	2303      	movs	r3, #3
 8002f06:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002f08:	2304      	movs	r3, #4
 8002f0a:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f0c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002f10:	4619      	mov	r1, r3
 8002f12:	4811      	ldr	r0, [pc, #68]	@ (8002f58 <HAL_I2C_MspInit+0xc4>)
 8002f14:	f001 fda6 	bl	8004a64 <HAL_GPIO_Init>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB6);
 8002f18:	4b10      	ldr	r3, [pc, #64]	@ (8002f5c <HAL_I2C_MspInit+0xc8>)
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	4a0f      	ldr	r2, [pc, #60]	@ (8002f5c <HAL_I2C_MspInit+0xc8>)
 8002f1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f22:	6053      	str	r3, [r2, #4]

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB7);
 8002f24:	4b0d      	ldr	r3, [pc, #52]	@ (8002f5c <HAL_I2C_MspInit+0xc8>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	4a0c      	ldr	r2, [pc, #48]	@ (8002f5c <HAL_I2C_MspInit+0xc8>)
 8002f2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f2e:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002f30:	4b08      	ldr	r3, [pc, #32]	@ (8002f54 <HAL_I2C_MspInit+0xc0>)
 8002f32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f34:	4a07      	ldr	r2, [pc, #28]	@ (8002f54 <HAL_I2C_MspInit+0xc0>)
 8002f36:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002f3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f3c:	4b05      	ldr	r3, [pc, #20]	@ (8002f54 <HAL_I2C_MspInit+0xc0>)
 8002f3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f44:	60bb      	str	r3, [r7, #8]
 8002f46:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002f48:	bf00      	nop
 8002f4a:	3758      	adds	r7, #88	@ 0x58
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	40005400 	.word	0x40005400
 8002f54:	40021000 	.word	0x40021000
 8002f58:	48000400 	.word	0x48000400
 8002f5c:	40010000 	.word	0x40010000

08002f60 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b08c      	sub	sp, #48	@ 0x30
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f68:	f107 031c 	add.w	r3, r7, #28
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	601a      	str	r2, [r3, #0]
 8002f70:	605a      	str	r2, [r3, #4]
 8002f72:	609a      	str	r2, [r3, #8]
 8002f74:	60da      	str	r2, [r3, #12]
 8002f76:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a30      	ldr	r2, [pc, #192]	@ (8003040 <HAL_TIM_Base_MspInit+0xe0>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d12a      	bne.n	8002fd8 <HAL_TIM_Base_MspInit+0x78>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f82:	4b30      	ldr	r3, [pc, #192]	@ (8003044 <HAL_TIM_Base_MspInit+0xe4>)
 8002f84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f86:	4a2f      	ldr	r2, [pc, #188]	@ (8003044 <HAL_TIM_Base_MspInit+0xe4>)
 8002f88:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002f8c:	6613      	str	r3, [r2, #96]	@ 0x60
 8002f8e:	4b2d      	ldr	r3, [pc, #180]	@ (8003044 <HAL_TIM_Base_MspInit+0xe4>)
 8002f90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f96:	61bb      	str	r3, [r7, #24]
 8002f98:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f9a:	4b2a      	ldr	r3, [pc, #168]	@ (8003044 <HAL_TIM_Base_MspInit+0xe4>)
 8002f9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f9e:	4a29      	ldr	r2, [pc, #164]	@ (8003044 <HAL_TIM_Base_MspInit+0xe4>)
 8002fa0:	f043 0301 	orr.w	r3, r3, #1
 8002fa4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002fa6:	4b27      	ldr	r3, [pc, #156]	@ (8003044 <HAL_TIM_Base_MspInit+0xe4>)
 8002fa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	617b      	str	r3, [r7, #20]
 8002fb0:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002fb2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002fb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fb8:	2302      	movs	r3, #2
 8002fba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fc8:	f107 031c 	add.w	r3, r7, #28
 8002fcc:	4619      	mov	r1, r3
 8002fce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002fd2:	f001 fd47 	bl	8004a64 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002fd6:	e02e      	b.n	8003036 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM2)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fe0:	d129      	bne.n	8003036 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002fe2:	4b18      	ldr	r3, [pc, #96]	@ (8003044 <HAL_TIM_Base_MspInit+0xe4>)
 8002fe4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fe6:	4a17      	ldr	r2, [pc, #92]	@ (8003044 <HAL_TIM_Base_MspInit+0xe4>)
 8002fe8:	f043 0301 	orr.w	r3, r3, #1
 8002fec:	6593      	str	r3, [r2, #88]	@ 0x58
 8002fee:	4b15      	ldr	r3, [pc, #84]	@ (8003044 <HAL_TIM_Base_MspInit+0xe4>)
 8002ff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	613b      	str	r3, [r7, #16]
 8002ff8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ffa:	4b12      	ldr	r3, [pc, #72]	@ (8003044 <HAL_TIM_Base_MspInit+0xe4>)
 8002ffc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ffe:	4a11      	ldr	r2, [pc, #68]	@ (8003044 <HAL_TIM_Base_MspInit+0xe4>)
 8003000:	f043 0301 	orr.w	r3, r3, #1
 8003004:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003006:	4b0f      	ldr	r3, [pc, #60]	@ (8003044 <HAL_TIM_Base_MspInit+0xe4>)
 8003008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	60fb      	str	r3, [r7, #12]
 8003010:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003012:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003016:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003018:	2302      	movs	r3, #2
 800301a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800301c:	2300      	movs	r3, #0
 800301e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003020:	2300      	movs	r3, #0
 8003022:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003024:	2301      	movs	r3, #1
 8003026:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003028:	f107 031c 	add.w	r3, r7, #28
 800302c:	4619      	mov	r1, r3
 800302e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003032:	f001 fd17 	bl	8004a64 <HAL_GPIO_Init>
}
 8003036:	bf00      	nop
 8003038:	3730      	adds	r7, #48	@ 0x30
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	40012c00 	.word	0x40012c00
 8003044:	40021000 	.word	0x40021000

08003048 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b096      	sub	sp, #88	@ 0x58
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003050:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003054:	2200      	movs	r2, #0
 8003056:	601a      	str	r2, [r3, #0]
 8003058:	605a      	str	r2, [r3, #4]
 800305a:	609a      	str	r2, [r3, #8]
 800305c:	60da      	str	r2, [r3, #12]
 800305e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003060:	f107 0310 	add.w	r3, r7, #16
 8003064:	2234      	movs	r2, #52	@ 0x34
 8003066:	2100      	movs	r1, #0
 8003068:	4618      	mov	r0, r3
 800306a:	f004 fc41 	bl	80078f0 <memset>
  if(huart->Instance==USART1)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a1f      	ldr	r2, [pc, #124]	@ (80030f0 <HAL_UART_MspInit+0xa8>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d137      	bne.n	80030e8 <HAL_UART_MspInit+0xa0>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003078:	2301      	movs	r3, #1
 800307a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800307c:	2300      	movs	r3, #0
 800307e:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003080:	f107 0310 	add.w	r3, r7, #16
 8003084:	4618      	mov	r0, r3
 8003086:	f003 f9df 	bl	8006448 <HAL_RCCEx_PeriphCLKConfig>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d001      	beq.n	8003094 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003090:	f7ff f8aa 	bl	80021e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003094:	4b17      	ldr	r3, [pc, #92]	@ (80030f4 <HAL_UART_MspInit+0xac>)
 8003096:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003098:	4a16      	ldr	r2, [pc, #88]	@ (80030f4 <HAL_UART_MspInit+0xac>)
 800309a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800309e:	6613      	str	r3, [r2, #96]	@ 0x60
 80030a0:	4b14      	ldr	r3, [pc, #80]	@ (80030f4 <HAL_UART_MspInit+0xac>)
 80030a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030a8:	60fb      	str	r3, [r7, #12]
 80030aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ac:	4b11      	ldr	r3, [pc, #68]	@ (80030f4 <HAL_UART_MspInit+0xac>)
 80030ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030b0:	4a10      	ldr	r2, [pc, #64]	@ (80030f4 <HAL_UART_MspInit+0xac>)
 80030b2:	f043 0301 	orr.w	r3, r3, #1
 80030b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030b8:	4b0e      	ldr	r3, [pc, #56]	@ (80030f4 <HAL_UART_MspInit+0xac>)
 80030ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030bc:	f003 0301 	and.w	r3, r3, #1
 80030c0:	60bb      	str	r3, [r7, #8]
 80030c2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80030c4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80030c8:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ca:	2302      	movs	r3, #2
 80030cc:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ce:	2300      	movs	r3, #0
 80030d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030d2:	2303      	movs	r3, #3
 80030d4:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80030d6:	2307      	movs	r3, #7
 80030d8:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030da:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80030de:	4619      	mov	r1, r3
 80030e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80030e4:	f001 fcbe 	bl	8004a64 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80030e8:	bf00      	nop
 80030ea:	3758      	adds	r7, #88	@ 0x58
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	40013800 	.word	0x40013800
 80030f4:	40021000 	.word	0x40021000

080030f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030f8:	b480      	push	{r7}
 80030fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80030fc:	bf00      	nop
 80030fe:	e7fd      	b.n	80030fc <NMI_Handler+0x4>

08003100 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003104:	bf00      	nop
 8003106:	e7fd      	b.n	8003104 <HardFault_Handler+0x4>

08003108 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800310c:	bf00      	nop
 800310e:	e7fd      	b.n	800310c <MemManage_Handler+0x4>

08003110 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003114:	bf00      	nop
 8003116:	e7fd      	b.n	8003114 <BusFault_Handler+0x4>

08003118 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800311c:	bf00      	nop
 800311e:	e7fd      	b.n	800311c <UsageFault_Handler+0x4>

08003120 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003120:	b480      	push	{r7}
 8003122:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003124:	bf00      	nop
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr

0800312e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800312e:	b480      	push	{r7}
 8003130:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003132:	bf00      	nop
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003140:	bf00      	nop
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr

0800314a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800314a:	b580      	push	{r7, lr}
 800314c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800314e:	f000 f907 	bl	8003360 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003152:	bf00      	nop
 8003154:	bd80      	pop	{r7, pc}

08003156 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003156:	b580      	push	{r7, lr}
 8003158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Decrease_BTN_Pin);
 800315a:	2001      	movs	r0, #1
 800315c:	f001 fe0c 	bl	8004d78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003160:	bf00      	nop
 8003162:	bd80      	pop	{r7, pc}

08003164 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Increase_BTN_Pin);
 8003168:	2002      	movs	r0, #2
 800316a:	f001 fe05 	bl	8004d78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800316e:	bf00      	nop
 8003170:	bd80      	pop	{r7, pc}

08003172 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Mode_BTN_Pin);
 8003176:	2010      	movs	r0, #16
 8003178:	f001 fdfe 	bl	8004d78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800317c:	bf00      	nop
 800317e:	bd80      	pop	{r7, pc}

08003180 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Select_BTN_Pin);
 8003184:	2020      	movs	r0, #32
 8003186:	f001 fdf7 	bl	8004d78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800318a:	bf00      	nop
 800318c:	bd80      	pop	{r7, pc}

0800318e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800318e:	b480      	push	{r7}
 8003190:	af00      	add	r7, sp, #0
  return 1;
 8003192:	2301      	movs	r3, #1
}
 8003194:	4618      	mov	r0, r3
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <_kill>:

int _kill(int pid, int sig)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b082      	sub	sp, #8
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
 80031a6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80031a8:	f004 fbfe 	bl	80079a8 <__errno>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2216      	movs	r2, #22
 80031b0:	601a      	str	r2, [r3, #0]
  return -1;
 80031b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3708      	adds	r7, #8
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <_exit>:

void _exit (int status)
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b082      	sub	sp, #8
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80031c6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f7ff ffe7 	bl	800319e <_kill>
  while (1) {}    /* Make sure we hang here */
 80031d0:	bf00      	nop
 80031d2:	e7fd      	b.n	80031d0 <_exit+0x12>

080031d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b086      	sub	sp, #24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031dc:	4a14      	ldr	r2, [pc, #80]	@ (8003230 <_sbrk+0x5c>)
 80031de:	4b15      	ldr	r3, [pc, #84]	@ (8003234 <_sbrk+0x60>)
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031e8:	4b13      	ldr	r3, [pc, #76]	@ (8003238 <_sbrk+0x64>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d102      	bne.n	80031f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031f0:	4b11      	ldr	r3, [pc, #68]	@ (8003238 <_sbrk+0x64>)
 80031f2:	4a12      	ldr	r2, [pc, #72]	@ (800323c <_sbrk+0x68>)
 80031f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031f6:	4b10      	ldr	r3, [pc, #64]	@ (8003238 <_sbrk+0x64>)
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4413      	add	r3, r2
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	429a      	cmp	r2, r3
 8003202:	d207      	bcs.n	8003214 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003204:	f004 fbd0 	bl	80079a8 <__errno>
 8003208:	4603      	mov	r3, r0
 800320a:	220c      	movs	r2, #12
 800320c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800320e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003212:	e009      	b.n	8003228 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003214:	4b08      	ldr	r3, [pc, #32]	@ (8003238 <_sbrk+0x64>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800321a:	4b07      	ldr	r3, [pc, #28]	@ (8003238 <_sbrk+0x64>)
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4413      	add	r3, r2
 8003222:	4a05      	ldr	r2, [pc, #20]	@ (8003238 <_sbrk+0x64>)
 8003224:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003226:	68fb      	ldr	r3, [r7, #12]
}
 8003228:	4618      	mov	r0, r3
 800322a:	3718      	adds	r7, #24
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	20008000 	.word	0x20008000
 8003234:	00000400 	.word	0x00000400
 8003238:	200002dc 	.word	0x200002dc
 800323c:	20000430 	.word	0x20000430

08003240 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003240:	b480      	push	{r7}
 8003242:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003244:	4b06      	ldr	r3, [pc, #24]	@ (8003260 <SystemInit+0x20>)
 8003246:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800324a:	4a05      	ldr	r2, [pc, #20]	@ (8003260 <SystemInit+0x20>)
 800324c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003250:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8003254:	bf00      	nop
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	e000ed00 	.word	0xe000ed00

08003264 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003264:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800329c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003268:	f7ff ffea 	bl	8003240 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800326c:	480c      	ldr	r0, [pc, #48]	@ (80032a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800326e:	490d      	ldr	r1, [pc, #52]	@ (80032a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003270:	4a0d      	ldr	r2, [pc, #52]	@ (80032a8 <LoopForever+0xe>)
  movs r3, #0
 8003272:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003274:	e002      	b.n	800327c <LoopCopyDataInit>

08003276 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003276:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003278:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800327a:	3304      	adds	r3, #4

0800327c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800327c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800327e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003280:	d3f9      	bcc.n	8003276 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003282:	4a0a      	ldr	r2, [pc, #40]	@ (80032ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8003284:	4c0a      	ldr	r4, [pc, #40]	@ (80032b0 <LoopForever+0x16>)
  movs r3, #0
 8003286:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003288:	e001      	b.n	800328e <LoopFillZerobss>

0800328a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800328a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800328c:	3204      	adds	r2, #4

0800328e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800328e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003290:	d3fb      	bcc.n	800328a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003292:	f004 fb8f 	bl	80079b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003296:	f7fd fd6b 	bl	8000d70 <main>

0800329a <LoopForever>:

LoopForever:
    b LoopForever
 800329a:	e7fe      	b.n	800329a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800329c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80032a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032a4:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80032a8:	0800821c 	.word	0x0800821c
  ldr r2, =_sbss
 80032ac:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80032b0:	20000430 	.word	0x20000430

080032b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80032b4:	e7fe      	b.n	80032b4 <ADC1_2_IRQHandler>

080032b6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b082      	sub	sp, #8
 80032ba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80032bc:	2300      	movs	r3, #0
 80032be:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032c0:	2003      	movs	r0, #3
 80032c2:	f001 fb8d 	bl	80049e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80032c6:	200f      	movs	r0, #15
 80032c8:	f000 f80e 	bl	80032e8 <HAL_InitTick>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d002      	beq.n	80032d8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	71fb      	strb	r3, [r7, #7]
 80032d6:	e001      	b.n	80032dc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80032d8:	f7ff fd78 	bl	8002dcc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80032dc:	79fb      	ldrb	r3, [r7, #7]
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3708      	adds	r7, #8
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
	...

080032e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80032f0:	2300      	movs	r3, #0
 80032f2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80032f4:	4b17      	ldr	r3, [pc, #92]	@ (8003354 <HAL_InitTick+0x6c>)
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d023      	beq.n	8003344 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80032fc:	4b16      	ldr	r3, [pc, #88]	@ (8003358 <HAL_InitTick+0x70>)
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	4b14      	ldr	r3, [pc, #80]	@ (8003354 <HAL_InitTick+0x6c>)
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	4619      	mov	r1, r3
 8003306:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800330a:	fbb3 f3f1 	udiv	r3, r3, r1
 800330e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003312:	4618      	mov	r0, r3
 8003314:	f001 fb99 	bl	8004a4a <HAL_SYSTICK_Config>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d10f      	bne.n	800333e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2b0f      	cmp	r3, #15
 8003322:	d809      	bhi.n	8003338 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003324:	2200      	movs	r2, #0
 8003326:	6879      	ldr	r1, [r7, #4]
 8003328:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800332c:	f001 fb63 	bl	80049f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003330:	4a0a      	ldr	r2, [pc, #40]	@ (800335c <HAL_InitTick+0x74>)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6013      	str	r3, [r2, #0]
 8003336:	e007      	b.n	8003348 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	73fb      	strb	r3, [r7, #15]
 800333c:	e004      	b.n	8003348 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	73fb      	strb	r3, [r7, #15]
 8003342:	e001      	b.n	8003348 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003348:	7bfb      	ldrb	r3, [r7, #15]
}
 800334a:	4618      	mov	r0, r3
 800334c:	3710      	adds	r7, #16
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	20000038 	.word	0x20000038
 8003358:	20000030 	.word	0x20000030
 800335c:	20000034 	.word	0x20000034

08003360 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003364:	4b06      	ldr	r3, [pc, #24]	@ (8003380 <HAL_IncTick+0x20>)
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	461a      	mov	r2, r3
 800336a:	4b06      	ldr	r3, [pc, #24]	@ (8003384 <HAL_IncTick+0x24>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4413      	add	r3, r2
 8003370:	4a04      	ldr	r2, [pc, #16]	@ (8003384 <HAL_IncTick+0x24>)
 8003372:	6013      	str	r3, [r2, #0]
}
 8003374:	bf00      	nop
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	20000038 	.word	0x20000038
 8003384:	200002e0 	.word	0x200002e0

08003388 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  return uwTick;
 800338c:	4b03      	ldr	r3, [pc, #12]	@ (800339c <HAL_GetTick+0x14>)
 800338e:	681b      	ldr	r3, [r3, #0]
}
 8003390:	4618      	mov	r0, r3
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	200002e0 	.word	0x200002e0

080033a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033a8:	f7ff ffee 	bl	8003388 <HAL_GetTick>
 80033ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80033b8:	d005      	beq.n	80033c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80033ba:	4b0a      	ldr	r3, [pc, #40]	@ (80033e4 <HAL_Delay+0x44>)
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	461a      	mov	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	4413      	add	r3, r2
 80033c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80033c6:	bf00      	nop
 80033c8:	f7ff ffde 	bl	8003388 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	68fa      	ldr	r2, [r7, #12]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d8f7      	bhi.n	80033c8 <HAL_Delay+0x28>
  {
  }
}
 80033d8:	bf00      	nop
 80033da:	bf00      	nop
 80033dc:	3710      	adds	r7, #16
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	20000038 	.word	0x20000038

080033e8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	431a      	orrs	r2, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	609a      	str	r2, [r3, #8]
}
 8003402:	bf00      	nop
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr

0800340e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800340e:	b480      	push	{r7}
 8003410:	b083      	sub	sp, #12
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
 8003416:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	431a      	orrs	r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	609a      	str	r2, [r3, #8]
}
 8003428:	bf00      	nop
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003444:	4618      	mov	r0, r3
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003450:	b480      	push	{r7}
 8003452:	b087      	sub	sp, #28
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	607a      	str	r2, [r7, #4]
 800345c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	3360      	adds	r3, #96	@ 0x60
 8003462:	461a      	mov	r2, r3
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	4413      	add	r3, r2
 800346a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	4b08      	ldr	r3, [pc, #32]	@ (8003494 <LL_ADC_SetOffset+0x44>)
 8003472:	4013      	ands	r3, r2
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800347a:	683a      	ldr	r2, [r7, #0]
 800347c:	430a      	orrs	r2, r1
 800347e:	4313      	orrs	r3, r2
 8003480:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003488:	bf00      	nop
 800348a:	371c      	adds	r7, #28
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr
 8003494:	03fff000 	.word	0x03fff000

08003498 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003498:	b480      	push	{r7}
 800349a:	b085      	sub	sp, #20
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	3360      	adds	r3, #96	@ 0x60
 80034a6:	461a      	mov	r2, r3
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	4413      	add	r3, r2
 80034ae:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3714      	adds	r7, #20
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b087      	sub	sp, #28
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	3360      	adds	r3, #96	@ 0x60
 80034d4:	461a      	mov	r2, r3
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	4413      	add	r3, r2
 80034dc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	431a      	orrs	r2, r3
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80034ee:	bf00      	nop
 80034f0:	371c      	adds	r7, #28
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr

080034fa <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80034fa:	b480      	push	{r7}
 80034fc:	b083      	sub	sp, #12
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
 8003502:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	695b      	ldr	r3, [r3, #20]
 8003508:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	431a      	orrs	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	615a      	str	r2, [r3, #20]
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003530:	2b00      	cmp	r3, #0
 8003532:	d101      	bne.n	8003538 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003534:	2301      	movs	r3, #1
 8003536:	e000      	b.n	800353a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	370c      	adds	r7, #12
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr

08003546 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003546:	b480      	push	{r7}
 8003548:	b087      	sub	sp, #28
 800354a:	af00      	add	r7, sp, #0
 800354c:	60f8      	str	r0, [r7, #12]
 800354e:	60b9      	str	r1, [r7, #8]
 8003550:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	3330      	adds	r3, #48	@ 0x30
 8003556:	461a      	mov	r2, r3
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	0a1b      	lsrs	r3, r3, #8
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	f003 030c 	and.w	r3, r3, #12
 8003562:	4413      	add	r3, r2
 8003564:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	f003 031f 	and.w	r3, r3, #31
 8003570:	211f      	movs	r1, #31
 8003572:	fa01 f303 	lsl.w	r3, r1, r3
 8003576:	43db      	mvns	r3, r3
 8003578:	401a      	ands	r2, r3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	0e9b      	lsrs	r3, r3, #26
 800357e:	f003 011f 	and.w	r1, r3, #31
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	f003 031f 	and.w	r3, r3, #31
 8003588:	fa01 f303 	lsl.w	r3, r1, r3
 800358c:	431a      	orrs	r2, r3
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003592:	bf00      	nop
 8003594:	371c      	adds	r7, #28
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr

0800359e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800359e:	b480      	push	{r7}
 80035a0:	b087      	sub	sp, #28
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	60f8      	str	r0, [r7, #12]
 80035a6:	60b9      	str	r1, [r7, #8]
 80035a8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	3314      	adds	r3, #20
 80035ae:	461a      	mov	r2, r3
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	0e5b      	lsrs	r3, r3, #25
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	f003 0304 	and.w	r3, r3, #4
 80035ba:	4413      	add	r3, r2
 80035bc:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	0d1b      	lsrs	r3, r3, #20
 80035c6:	f003 031f 	and.w	r3, r3, #31
 80035ca:	2107      	movs	r1, #7
 80035cc:	fa01 f303 	lsl.w	r3, r1, r3
 80035d0:	43db      	mvns	r3, r3
 80035d2:	401a      	ands	r2, r3
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	0d1b      	lsrs	r3, r3, #20
 80035d8:	f003 031f 	and.w	r3, r3, #31
 80035dc:	6879      	ldr	r1, [r7, #4]
 80035de:	fa01 f303 	lsl.w	r3, r1, r3
 80035e2:	431a      	orrs	r2, r3
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80035e8:	bf00      	nop
 80035ea:	371c      	adds	r7, #28
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800360c:	43db      	mvns	r3, r3
 800360e:	401a      	ands	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f003 0318 	and.w	r3, r3, #24
 8003616:	4908      	ldr	r1, [pc, #32]	@ (8003638 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003618:	40d9      	lsrs	r1, r3
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	400b      	ands	r3, r1
 800361e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003622:	431a      	orrs	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800362a:	bf00      	nop
 800362c:	3714      	adds	r7, #20
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	0007ffff 	.word	0x0007ffff

0800363c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f003 031f 	and.w	r3, r3, #31
}
 800364c:	4618      	mov	r0, r3
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8003668:	4618      	mov	r0, r3
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003684:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	6093      	str	r3, [r2, #8]
}
 800368c:	bf00      	nop
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80036a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80036ac:	d101      	bne.n	80036b2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80036ae:	2301      	movs	r3, #1
 80036b0:	e000      	b.n	80036b4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80036d0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80036d4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80036fc:	d101      	bne.n	8003702 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80036fe:	2301      	movs	r3, #1
 8003700:	e000      	b.n	8003704 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003702:	2300      	movs	r3, #0
}
 8003704:	4618      	mov	r0, r3
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003720:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003724:	f043 0201 	orr.w	r2, r3, #1
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f003 0301 	and.w	r3, r3, #1
 8003748:	2b01      	cmp	r3, #1
 800374a:	d101      	bne.n	8003750 <LL_ADC_IsEnabled+0x18>
 800374c:	2301      	movs	r3, #1
 800374e:	e000      	b.n	8003752 <LL_ADC_IsEnabled+0x1a>
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	370c      	adds	r7, #12
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr

0800375e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800375e:	b480      	push	{r7}
 8003760:	b083      	sub	sp, #12
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800376e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003772:	f043 0204 	orr.w	r2, r3, #4
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800377a:	bf00      	nop
 800377c:	370c      	adds	r7, #12
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr

08003786 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003786:	b480      	push	{r7}
 8003788:	b083      	sub	sp, #12
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f003 0304 	and.w	r3, r3, #4
 8003796:	2b04      	cmp	r3, #4
 8003798:	d101      	bne.n	800379e <LL_ADC_REG_IsConversionOngoing+0x18>
 800379a:	2301      	movs	r3, #1
 800379c:	e000      	b.n	80037a0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f003 0308 	and.w	r3, r3, #8
 80037bc:	2b08      	cmp	r3, #8
 80037be:	d101      	bne.n	80037c4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80037c0:	2301      	movs	r3, #1
 80037c2:	e000      	b.n	80037c6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	370c      	adds	r7, #12
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
	...

080037d4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80037d4:	b590      	push	{r4, r7, lr}
 80037d6:	b089      	sub	sp, #36	@ 0x24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037dc:	2300      	movs	r3, #0
 80037de:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80037e0:	2300      	movs	r3, #0
 80037e2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d101      	bne.n	80037ee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e12b      	b.n	8003a46 <HAL_ADC_Init+0x272>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d109      	bne.n	8003810 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f7ff fb09 	bl	8002e14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4618      	mov	r0, r3
 8003816:	f7ff ff3f 	bl	8003698 <LL_ADC_IsDeepPowerDownEnabled>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d004      	beq.n	800382a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4618      	mov	r0, r3
 8003826:	f7ff ff25 	bl	8003674 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4618      	mov	r0, r3
 8003830:	f7ff ff5a 	bl	80036e8 <LL_ADC_IsInternalRegulatorEnabled>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d115      	bne.n	8003866 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4618      	mov	r0, r3
 8003840:	f7ff ff3e 	bl	80036c0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003844:	4b82      	ldr	r3, [pc, #520]	@ (8003a50 <HAL_ADC_Init+0x27c>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	099b      	lsrs	r3, r3, #6
 800384a:	4a82      	ldr	r2, [pc, #520]	@ (8003a54 <HAL_ADC_Init+0x280>)
 800384c:	fba2 2303 	umull	r2, r3, r2, r3
 8003850:	099b      	lsrs	r3, r3, #6
 8003852:	3301      	adds	r3, #1
 8003854:	005b      	lsls	r3, r3, #1
 8003856:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003858:	e002      	b.n	8003860 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	3b01      	subs	r3, #1
 800385e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d1f9      	bne.n	800385a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4618      	mov	r0, r3
 800386c:	f7ff ff3c 	bl	80036e8 <LL_ADC_IsInternalRegulatorEnabled>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d10d      	bne.n	8003892 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800387a:	f043 0210 	orr.w	r2, r3, #16
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003886:	f043 0201 	orr.w	r2, r3, #1
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4618      	mov	r0, r3
 8003898:	f7ff ff75 	bl	8003786 <LL_ADC_REG_IsConversionOngoing>
 800389c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038a2:	f003 0310 	and.w	r3, r3, #16
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	f040 80c4 	bne.w	8003a34 <HAL_ADC_Init+0x260>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	f040 80c0 	bne.w	8003a34 <HAL_ADC_Init+0x260>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038b8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80038bc:	f043 0202 	orr.w	r2, r3, #2
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7ff ff35 	bl	8003738 <LL_ADC_IsEnabled>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d110      	bne.n	80038f6 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80038d4:	4860      	ldr	r0, [pc, #384]	@ (8003a58 <HAL_ADC_Init+0x284>)
 80038d6:	f7ff ff2f 	bl	8003738 <LL_ADC_IsEnabled>
 80038da:	4604      	mov	r4, r0
 80038dc:	485f      	ldr	r0, [pc, #380]	@ (8003a5c <HAL_ADC_Init+0x288>)
 80038de:	f7ff ff2b 	bl	8003738 <LL_ADC_IsEnabled>
 80038e2:	4603      	mov	r3, r0
 80038e4:	4323      	orrs	r3, r4
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d105      	bne.n	80038f6 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	4619      	mov	r1, r3
 80038f0:	485b      	ldr	r0, [pc, #364]	@ (8003a60 <HAL_ADC_Init+0x28c>)
 80038f2:	f7ff fd79 	bl	80033e8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	7e5b      	ldrb	r3, [r3, #25]
 80038fa:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003900:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003906:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800390c:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003914:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003916:	4313      	orrs	r3, r2
 8003918:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003920:	2b01      	cmp	r3, #1
 8003922:	d106      	bne.n	8003932 <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003928:	3b01      	subs	r3, #1
 800392a:	045b      	lsls	r3, r3, #17
 800392c:	69ba      	ldr	r2, [r7, #24]
 800392e:	4313      	orrs	r3, r2
 8003930:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003936:	2b00      	cmp	r3, #0
 8003938:	d009      	beq.n	800394e <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800393e:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003946:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003948:	69ba      	ldr	r2, [r7, #24]
 800394a:	4313      	orrs	r3, r2
 800394c:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68da      	ldr	r2, [r3, #12]
 8003954:	4b43      	ldr	r3, [pc, #268]	@ (8003a64 <HAL_ADC_Init+0x290>)
 8003956:	4013      	ands	r3, r2
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	6812      	ldr	r2, [r2, #0]
 800395c:	69b9      	ldr	r1, [r7, #24]
 800395e:	430b      	orrs	r3, r1
 8003960:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4618      	mov	r0, r3
 8003968:	f7ff ff20 	bl	80037ac <LL_ADC_INJ_IsConversionOngoing>
 800396c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d13d      	bne.n	80039f0 <HAL_ADC_Init+0x21c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d13a      	bne.n	80039f0 <HAL_ADC_Init+0x21c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800397e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003986:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003988:	4313      	orrs	r3, r2
 800398a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003996:	f023 0302 	bic.w	r3, r3, #2
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	6812      	ldr	r2, [r2, #0]
 800399e:	69b9      	ldr	r1, [r7, #24]
 80039a0:	430b      	orrs	r3, r1
 80039a2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d118      	bne.n	80039e0 <HAL_ADC_Init+0x20c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80039b8:	f023 0304 	bic.w	r3, r3, #4
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80039c4:	4311      	orrs	r1, r2
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80039ca:	4311      	orrs	r1, r2
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80039d0:	430a      	orrs	r2, r1
 80039d2:	431a      	orrs	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f042 0201 	orr.w	r2, r2, #1
 80039dc:	611a      	str	r2, [r3, #16]
 80039de:	e007      	b.n	80039f0 <HAL_ADC_Init+0x21c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	691a      	ldr	r2, [r3, #16]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f022 0201 	bic.w	r2, r2, #1
 80039ee:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	691b      	ldr	r3, [r3, #16]
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d10c      	bne.n	8003a12 <HAL_ADC_Init+0x23e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039fe:	f023 010f 	bic.w	r1, r3, #15
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	69db      	ldr	r3, [r3, #28]
 8003a06:	1e5a      	subs	r2, r3, #1
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003a10:	e007      	b.n	8003a22 <HAL_ADC_Init+0x24e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f022 020f 	bic.w	r2, r2, #15
 8003a20:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a26:	f023 0303 	bic.w	r3, r3, #3
 8003a2a:	f043 0201 	orr.w	r2, r3, #1
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	655a      	str	r2, [r3, #84]	@ 0x54
 8003a32:	e007      	b.n	8003a44 <HAL_ADC_Init+0x270>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a38:	f043 0210 	orr.w	r2, r3, #16
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003a44:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3724      	adds	r7, #36	@ 0x24
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd90      	pop	{r4, r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	20000030 	.word	0x20000030
 8003a54:	053e2d63 	.word	0x053e2d63
 8003a58:	50040000 	.word	0x50040000
 8003a5c:	50040100 	.word	0x50040100
 8003a60:	50040300 	.word	0x50040300
 8003a64:	fff0c007 	.word	0xfff0c007

08003a68 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b086      	sub	sp, #24
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a70:	4857      	ldr	r0, [pc, #348]	@ (8003bd0 <HAL_ADC_Start+0x168>)
 8003a72:	f7ff fde3 	bl	800363c <LL_ADC_GetMultimode>
 8003a76:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f7ff fe82 	bl	8003786 <LL_ADC_REG_IsConversionOngoing>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	f040 809c 	bne.w	8003bc2 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d101      	bne.n	8003a98 <HAL_ADC_Start+0x30>
 8003a94:	2302      	movs	r3, #2
 8003a96:	e097      	b.n	8003bc8 <HAL_ADC_Start+0x160>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f000 fd7d 	bl	80045a0 <ADC_Enable>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003aaa:	7dfb      	ldrb	r3, [r7, #23]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	f040 8083 	bne.w	8003bb8 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ab6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003aba:	f023 0301 	bic.w	r3, r3, #1
 8003abe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a42      	ldr	r2, [pc, #264]	@ (8003bd4 <HAL_ADC_Start+0x16c>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d002      	beq.n	8003ad6 <HAL_ADC_Start+0x6e>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	e000      	b.n	8003ad8 <HAL_ADC_Start+0x70>
 8003ad6:	4b40      	ldr	r3, [pc, #256]	@ (8003bd8 <HAL_ADC_Start+0x170>)
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	6812      	ldr	r2, [r2, #0]
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d002      	beq.n	8003ae6 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d105      	bne.n	8003af2 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aea:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003af6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003afa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003afe:	d106      	bne.n	8003b0e <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b04:	f023 0206 	bic.w	r2, r3, #6
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	659a      	str	r2, [r3, #88]	@ 0x58
 8003b0c:	e002      	b.n	8003b14 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	221c      	movs	r2, #28
 8003b1a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a2a      	ldr	r2, [pc, #168]	@ (8003bd4 <HAL_ADC_Start+0x16c>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d002      	beq.n	8003b34 <HAL_ADC_Start+0xcc>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	e000      	b.n	8003b36 <HAL_ADC_Start+0xce>
 8003b34:	4b28      	ldr	r3, [pc, #160]	@ (8003bd8 <HAL_ADC_Start+0x170>)
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	6812      	ldr	r2, [r2, #0]
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d008      	beq.n	8003b50 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d005      	beq.n	8003b50 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	2b05      	cmp	r3, #5
 8003b48:	d002      	beq.n	8003b50 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	2b09      	cmp	r3, #9
 8003b4e:	d114      	bne.n	8003b7a <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d007      	beq.n	8003b6e <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b62:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003b66:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7ff fdf3 	bl	800375e <LL_ADC_REG_StartConversion>
 8003b78:	e025      	b.n	8003bc6 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b7e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a12      	ldr	r2, [pc, #72]	@ (8003bd4 <HAL_ADC_Start+0x16c>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d002      	beq.n	8003b96 <HAL_ADC_Start+0x12e>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	e000      	b.n	8003b98 <HAL_ADC_Start+0x130>
 8003b96:	4b10      	ldr	r3, [pc, #64]	@ (8003bd8 <HAL_ADC_Start+0x170>)
 8003b98:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00f      	beq.n	8003bc6 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003baa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003bae:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	655a      	str	r2, [r3, #84]	@ 0x54
 8003bb6:	e006      	b.n	8003bc6 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8003bc0:	e001      	b.n	8003bc6 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003bc2:	2302      	movs	r3, #2
 8003bc4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003bc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3718      	adds	r7, #24
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	50040300 	.word	0x50040300
 8003bd4:	50040100 	.word	0x50040100
 8003bd8:	50040000 	.word	0x50040000

08003bdc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b088      	sub	sp, #32
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003be6:	4866      	ldr	r0, [pc, #408]	@ (8003d80 <HAL_ADC_PollForConversion+0x1a4>)
 8003be8:	f7ff fd28 	bl	800363c <LL_ADC_GetMultimode>
 8003bec:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	695b      	ldr	r3, [r3, #20]
 8003bf2:	2b08      	cmp	r3, #8
 8003bf4:	d102      	bne.n	8003bfc <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003bf6:	2308      	movs	r3, #8
 8003bf8:	61fb      	str	r3, [r7, #28]
 8003bfa:	e02a      	b.n	8003c52 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d005      	beq.n	8003c0e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	2b05      	cmp	r3, #5
 8003c06:	d002      	beq.n	8003c0e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	2b09      	cmp	r3, #9
 8003c0c:	d111      	bne.n	8003c32 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	f003 0301 	and.w	r3, r3, #1
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d007      	beq.n	8003c2c <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c20:	f043 0220 	orr.w	r2, r3, #32
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e0a4      	b.n	8003d76 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003c2c:	2304      	movs	r3, #4
 8003c2e:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003c30:	e00f      	b.n	8003c52 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003c32:	4853      	ldr	r0, [pc, #332]	@ (8003d80 <HAL_ADC_PollForConversion+0x1a4>)
 8003c34:	f7ff fd10 	bl	8003658 <LL_ADC_GetMultiDMATransfer>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d007      	beq.n	8003c4e <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c42:	f043 0220 	orr.w	r2, r3, #32
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e093      	b.n	8003d76 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003c4e:	2304      	movs	r3, #4
 8003c50:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003c52:	f7ff fb99 	bl	8003388 <HAL_GetTick>
 8003c56:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003c58:	e021      	b.n	8003c9e <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c60:	d01d      	beq.n	8003c9e <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003c62:	f7ff fb91 	bl	8003388 <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	683a      	ldr	r2, [r7, #0]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d302      	bcc.n	8003c78 <HAL_ADC_PollForConversion+0x9c>
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d112      	bne.n	8003c9e <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	4013      	ands	r3, r2
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d10b      	bne.n	8003c9e <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c8a:	f043 0204 	orr.w	r2, r3, #4
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e06b      	b.n	8003d76 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d0d6      	beq.n	8003c5a <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cb0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7ff fc2f 	bl	8003520 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d01c      	beq.n	8003d02 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	7e5b      	ldrb	r3, [r3, #25]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d118      	bne.n	8003d02 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0308 	and.w	r3, r3, #8
 8003cda:	2b08      	cmp	r3, #8
 8003cdc:	d111      	bne.n	8003d02 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ce2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d105      	bne.n	8003d02 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cfa:	f043 0201 	orr.w	r2, r3, #1
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a1f      	ldr	r2, [pc, #124]	@ (8003d84 <HAL_ADC_PollForConversion+0x1a8>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d002      	beq.n	8003d12 <HAL_ADC_PollForConversion+0x136>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	e000      	b.n	8003d14 <HAL_ADC_PollForConversion+0x138>
 8003d12:	4b1d      	ldr	r3, [pc, #116]	@ (8003d88 <HAL_ADC_PollForConversion+0x1ac>)
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	6812      	ldr	r2, [r2, #0]
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d008      	beq.n	8003d2e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d005      	beq.n	8003d2e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	2b05      	cmp	r3, #5
 8003d26:	d002      	beq.n	8003d2e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	2b09      	cmp	r3, #9
 8003d2c:	d104      	bne.n	8003d38 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	61bb      	str	r3, [r7, #24]
 8003d36:	e00c      	b.n	8003d52 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a11      	ldr	r2, [pc, #68]	@ (8003d84 <HAL_ADC_PollForConversion+0x1a8>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d002      	beq.n	8003d48 <HAL_ADC_PollForConversion+0x16c>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	e000      	b.n	8003d4a <HAL_ADC_PollForConversion+0x16e>
 8003d48:	4b0f      	ldr	r3, [pc, #60]	@ (8003d88 <HAL_ADC_PollForConversion+0x1ac>)
 8003d4a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	2b08      	cmp	r3, #8
 8003d56:	d104      	bne.n	8003d62 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2208      	movs	r2, #8
 8003d5e:	601a      	str	r2, [r3, #0]
 8003d60:	e008      	b.n	8003d74 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d103      	bne.n	8003d74 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	220c      	movs	r2, #12
 8003d72:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3720      	adds	r7, #32
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	50040300 	.word	0x50040300
 8003d84:	50040100 	.word	0x50040100
 8003d88:	50040000 	.word	0x50040000

08003d8c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	370c      	adds	r7, #12
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
	...

08003da8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b0b6      	sub	sp, #216	@ 0xd8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003db2:	2300      	movs	r3, #0
 8003db4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003db8:	2300      	movs	r3, #0
 8003dba:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d101      	bne.n	8003dca <HAL_ADC_ConfigChannel+0x22>
 8003dc6:	2302      	movs	r3, #2
 8003dc8:	e3d5      	b.n	8004576 <HAL_ADC_ConfigChannel+0x7ce>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f7ff fcd5 	bl	8003786 <LL_ADC_REG_IsConversionOngoing>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	f040 83ba 	bne.w	8004558 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	2b05      	cmp	r3, #5
 8003df2:	d824      	bhi.n	8003e3e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	3b02      	subs	r3, #2
 8003dfa:	2b03      	cmp	r3, #3
 8003dfc:	d81b      	bhi.n	8003e36 <HAL_ADC_ConfigChannel+0x8e>
 8003dfe:	a201      	add	r2, pc, #4	@ (adr r2, 8003e04 <HAL_ADC_ConfigChannel+0x5c>)
 8003e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e04:	08003e15 	.word	0x08003e15
 8003e08:	08003e1d 	.word	0x08003e1d
 8003e0c:	08003e25 	.word	0x08003e25
 8003e10:	08003e2d 	.word	0x08003e2d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8003e14:	230c      	movs	r3, #12
 8003e16:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003e1a:	e010      	b.n	8003e3e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8003e1c:	2312      	movs	r3, #18
 8003e1e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003e22:	e00c      	b.n	8003e3e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8003e24:	2318      	movs	r3, #24
 8003e26:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003e2a:	e008      	b.n	8003e3e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8003e2c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003e30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003e34:	e003      	b.n	8003e3e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8003e36:	2306      	movs	r3, #6
 8003e38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003e3c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6818      	ldr	r0, [r3, #0]
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	461a      	mov	r2, r3
 8003e48:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8003e4c:	f7ff fb7b 	bl	8003546 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7ff fc96 	bl	8003786 <LL_ADC_REG_IsConversionOngoing>
 8003e5a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4618      	mov	r0, r3
 8003e64:	f7ff fca2 	bl	80037ac <LL_ADC_INJ_IsConversionOngoing>
 8003e68:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003e6c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	f040 81bf 	bne.w	80041f4 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003e76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	f040 81ba 	bne.w	80041f4 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e88:	d10f      	bne.n	8003eaa <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6818      	ldr	r0, [r3, #0]
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2200      	movs	r2, #0
 8003e94:	4619      	mov	r1, r3
 8003e96:	f7ff fb82 	bl	800359e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7ff fb29 	bl	80034fa <LL_ADC_SetSamplingTimeCommonConfig>
 8003ea8:	e00e      	b.n	8003ec8 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6818      	ldr	r0, [r3, #0]
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	6819      	ldr	r1, [r3, #0]
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	f7ff fb71 	bl	800359e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2100      	movs	r1, #0
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7ff fb19 	bl	80034fa <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	695a      	ldr	r2, [r3, #20]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	08db      	lsrs	r3, r3, #3
 8003ed4:	f003 0303 	and.w	r3, r3, #3
 8003ed8:	005b      	lsls	r3, r3, #1
 8003eda:	fa02 f303 	lsl.w	r3, r2, r3
 8003ede:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	2b04      	cmp	r3, #4
 8003ee8:	d00a      	beq.n	8003f00 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6818      	ldr	r0, [r3, #0]
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	6919      	ldr	r1, [r3, #16]
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003efa:	f7ff faa9 	bl	8003450 <LL_ADC_SetOffset>
 8003efe:	e179      	b.n	80041f4 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2100      	movs	r1, #0
 8003f06:	4618      	mov	r0, r3
 8003f08:	f7ff fac6 	bl	8003498 <LL_ADC_GetOffsetChannel>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d10a      	bne.n	8003f2c <HAL_ADC_ConfigChannel+0x184>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2100      	movs	r1, #0
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f7ff fabb 	bl	8003498 <LL_ADC_GetOffsetChannel>
 8003f22:	4603      	mov	r3, r0
 8003f24:	0e9b      	lsrs	r3, r3, #26
 8003f26:	f003 021f 	and.w	r2, r3, #31
 8003f2a:	e01e      	b.n	8003f6a <HAL_ADC_ConfigChannel+0x1c2>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2100      	movs	r1, #0
 8003f32:	4618      	mov	r0, r3
 8003f34:	f7ff fab0 	bl	8003498 <LL_ADC_GetOffsetChannel>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003f42:	fa93 f3a3 	rbit	r3, r3
 8003f46:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003f4a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003f4e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003f52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d101      	bne.n	8003f5e <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8003f5a:	2320      	movs	r3, #32
 8003f5c:	e004      	b.n	8003f68 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8003f5e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003f62:	fab3 f383 	clz	r3, r3
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d105      	bne.n	8003f82 <HAL_ADC_ConfigChannel+0x1da>
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	0e9b      	lsrs	r3, r3, #26
 8003f7c:	f003 031f 	and.w	r3, r3, #31
 8003f80:	e018      	b.n	8003fb4 <HAL_ADC_ConfigChannel+0x20c>
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003f8e:	fa93 f3a3 	rbit	r3, r3
 8003f92:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003f96:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003f9a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003f9e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d101      	bne.n	8003faa <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8003fa6:	2320      	movs	r3, #32
 8003fa8:	e004      	b.n	8003fb4 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8003faa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003fae:	fab3 f383 	clz	r3, r3
 8003fb2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d106      	bne.n	8003fc6 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	2100      	movs	r1, #0
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7ff fa7f 	bl	80034c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2101      	movs	r1, #1
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f7ff fa63 	bl	8003498 <LL_ADC_GetOffsetChannel>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d10a      	bne.n	8003ff2 <HAL_ADC_ConfigChannel+0x24a>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2101      	movs	r1, #1
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7ff fa58 	bl	8003498 <LL_ADC_GetOffsetChannel>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	0e9b      	lsrs	r3, r3, #26
 8003fec:	f003 021f 	and.w	r2, r3, #31
 8003ff0:	e01e      	b.n	8004030 <HAL_ADC_ConfigChannel+0x288>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2101      	movs	r1, #1
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f7ff fa4d 	bl	8003498 <LL_ADC_GetOffsetChannel>
 8003ffe:	4603      	mov	r3, r0
 8004000:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004004:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004008:	fa93 f3a3 	rbit	r3, r3
 800400c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8004010:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004014:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8004018:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800401c:	2b00      	cmp	r3, #0
 800401e:	d101      	bne.n	8004024 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8004020:	2320      	movs	r3, #32
 8004022:	e004      	b.n	800402e <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8004024:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004028:	fab3 f383 	clz	r3, r3
 800402c:	b2db      	uxtb	r3, r3
 800402e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004038:	2b00      	cmp	r3, #0
 800403a:	d105      	bne.n	8004048 <HAL_ADC_ConfigChannel+0x2a0>
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	0e9b      	lsrs	r3, r3, #26
 8004042:	f003 031f 	and.w	r3, r3, #31
 8004046:	e018      	b.n	800407a <HAL_ADC_ConfigChannel+0x2d2>
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004050:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004054:	fa93 f3a3 	rbit	r3, r3
 8004058:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800405c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004060:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8004064:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004068:	2b00      	cmp	r3, #0
 800406a:	d101      	bne.n	8004070 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 800406c:	2320      	movs	r3, #32
 800406e:	e004      	b.n	800407a <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8004070:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004074:	fab3 f383 	clz	r3, r3
 8004078:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800407a:	429a      	cmp	r2, r3
 800407c:	d106      	bne.n	800408c <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2200      	movs	r2, #0
 8004084:	2101      	movs	r1, #1
 8004086:	4618      	mov	r0, r3
 8004088:	f7ff fa1c 	bl	80034c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2102      	movs	r1, #2
 8004092:	4618      	mov	r0, r3
 8004094:	f7ff fa00 	bl	8003498 <LL_ADC_GetOffsetChannel>
 8004098:	4603      	mov	r3, r0
 800409a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10a      	bne.n	80040b8 <HAL_ADC_ConfigChannel+0x310>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2102      	movs	r1, #2
 80040a8:	4618      	mov	r0, r3
 80040aa:	f7ff f9f5 	bl	8003498 <LL_ADC_GetOffsetChannel>
 80040ae:	4603      	mov	r3, r0
 80040b0:	0e9b      	lsrs	r3, r3, #26
 80040b2:	f003 021f 	and.w	r2, r3, #31
 80040b6:	e01e      	b.n	80040f6 <HAL_ADC_ConfigChannel+0x34e>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2102      	movs	r1, #2
 80040be:	4618      	mov	r0, r3
 80040c0:	f7ff f9ea 	bl	8003498 <LL_ADC_GetOffsetChannel>
 80040c4:	4603      	mov	r3, r0
 80040c6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80040ce:	fa93 f3a3 	rbit	r3, r3
 80040d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80040d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80040da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80040de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d101      	bne.n	80040ea <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 80040e6:	2320      	movs	r3, #32
 80040e8:	e004      	b.n	80040f4 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 80040ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040ee:	fab3 f383 	clz	r3, r3
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d105      	bne.n	800410e <HAL_ADC_ConfigChannel+0x366>
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	0e9b      	lsrs	r3, r3, #26
 8004108:	f003 031f 	and.w	r3, r3, #31
 800410c:	e014      	b.n	8004138 <HAL_ADC_ConfigChannel+0x390>
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004114:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004116:	fa93 f3a3 	rbit	r3, r3
 800411a:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800411c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800411e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8004122:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004126:	2b00      	cmp	r3, #0
 8004128:	d101      	bne.n	800412e <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 800412a:	2320      	movs	r3, #32
 800412c:	e004      	b.n	8004138 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 800412e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004132:	fab3 f383 	clz	r3, r3
 8004136:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004138:	429a      	cmp	r2, r3
 800413a:	d106      	bne.n	800414a <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2200      	movs	r2, #0
 8004142:	2102      	movs	r1, #2
 8004144:	4618      	mov	r0, r3
 8004146:	f7ff f9bd 	bl	80034c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2103      	movs	r1, #3
 8004150:	4618      	mov	r0, r3
 8004152:	f7ff f9a1 	bl	8003498 <LL_ADC_GetOffsetChannel>
 8004156:	4603      	mov	r3, r0
 8004158:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800415c:	2b00      	cmp	r3, #0
 800415e:	d10a      	bne.n	8004176 <HAL_ADC_ConfigChannel+0x3ce>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2103      	movs	r1, #3
 8004166:	4618      	mov	r0, r3
 8004168:	f7ff f996 	bl	8003498 <LL_ADC_GetOffsetChannel>
 800416c:	4603      	mov	r3, r0
 800416e:	0e9b      	lsrs	r3, r3, #26
 8004170:	f003 021f 	and.w	r2, r3, #31
 8004174:	e017      	b.n	80041a6 <HAL_ADC_ConfigChannel+0x3fe>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2103      	movs	r1, #3
 800417c:	4618      	mov	r0, r3
 800417e:	f7ff f98b 	bl	8003498 <LL_ADC_GetOffsetChannel>
 8004182:	4603      	mov	r3, r0
 8004184:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004186:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004188:	fa93 f3a3 	rbit	r3, r3
 800418c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800418e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004190:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8004192:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004194:	2b00      	cmp	r3, #0
 8004196:	d101      	bne.n	800419c <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8004198:	2320      	movs	r3, #32
 800419a:	e003      	b.n	80041a4 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 800419c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800419e:	fab3 f383 	clz	r3, r3
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d105      	bne.n	80041be <HAL_ADC_ConfigChannel+0x416>
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	0e9b      	lsrs	r3, r3, #26
 80041b8:	f003 031f 	and.w	r3, r3, #31
 80041bc:	e011      	b.n	80041e2 <HAL_ADC_ConfigChannel+0x43a>
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041c6:	fa93 f3a3 	rbit	r3, r3
 80041ca:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80041cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80041ce:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80041d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d101      	bne.n	80041da <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 80041d6:	2320      	movs	r3, #32
 80041d8:	e003      	b.n	80041e2 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 80041da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80041dc:	fab3 f383 	clz	r3, r3
 80041e0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d106      	bne.n	80041f4 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2200      	movs	r2, #0
 80041ec:	2103      	movs	r1, #3
 80041ee:	4618      	mov	r0, r3
 80041f0:	f7ff f968 	bl	80034c4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4618      	mov	r0, r3
 80041fa:	f7ff fa9d 	bl	8003738 <LL_ADC_IsEnabled>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	f040 813f 	bne.w	8004484 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6818      	ldr	r0, [r3, #0]
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	6819      	ldr	r1, [r3, #0]
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	461a      	mov	r2, r3
 8004214:	f7ff f9ee 	bl	80035f4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	4a8e      	ldr	r2, [pc, #568]	@ (8004458 <HAL_ADC_ConfigChannel+0x6b0>)
 800421e:	4293      	cmp	r3, r2
 8004220:	f040 8130 	bne.w	8004484 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004230:	2b00      	cmp	r3, #0
 8004232:	d10b      	bne.n	800424c <HAL_ADC_ConfigChannel+0x4a4>
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	0e9b      	lsrs	r3, r3, #26
 800423a:	3301      	adds	r3, #1
 800423c:	f003 031f 	and.w	r3, r3, #31
 8004240:	2b09      	cmp	r3, #9
 8004242:	bf94      	ite	ls
 8004244:	2301      	movls	r3, #1
 8004246:	2300      	movhi	r3, #0
 8004248:	b2db      	uxtb	r3, r3
 800424a:	e019      	b.n	8004280 <HAL_ADC_ConfigChannel+0x4d8>
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004252:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004254:	fa93 f3a3 	rbit	r3, r3
 8004258:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800425a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800425c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800425e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004260:	2b00      	cmp	r3, #0
 8004262:	d101      	bne.n	8004268 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8004264:	2320      	movs	r3, #32
 8004266:	e003      	b.n	8004270 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8004268:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800426a:	fab3 f383 	clz	r3, r3
 800426e:	b2db      	uxtb	r3, r3
 8004270:	3301      	adds	r3, #1
 8004272:	f003 031f 	and.w	r3, r3, #31
 8004276:	2b09      	cmp	r3, #9
 8004278:	bf94      	ite	ls
 800427a:	2301      	movls	r3, #1
 800427c:	2300      	movhi	r3, #0
 800427e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004280:	2b00      	cmp	r3, #0
 8004282:	d079      	beq.n	8004378 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800428c:	2b00      	cmp	r3, #0
 800428e:	d107      	bne.n	80042a0 <HAL_ADC_ConfigChannel+0x4f8>
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	0e9b      	lsrs	r3, r3, #26
 8004296:	3301      	adds	r3, #1
 8004298:	069b      	lsls	r3, r3, #26
 800429a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800429e:	e015      	b.n	80042cc <HAL_ADC_ConfigChannel+0x524>
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042a8:	fa93 f3a3 	rbit	r3, r3
 80042ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80042ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042b0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80042b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d101      	bne.n	80042bc <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 80042b8:	2320      	movs	r3, #32
 80042ba:	e003      	b.n	80042c4 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 80042bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042be:	fab3 f383 	clz	r3, r3
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	3301      	adds	r3, #1
 80042c6:	069b      	lsls	r3, r3, #26
 80042c8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d109      	bne.n	80042ec <HAL_ADC_ConfigChannel+0x544>
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	0e9b      	lsrs	r3, r3, #26
 80042de:	3301      	adds	r3, #1
 80042e0:	f003 031f 	and.w	r3, r3, #31
 80042e4:	2101      	movs	r1, #1
 80042e6:	fa01 f303 	lsl.w	r3, r1, r3
 80042ea:	e017      	b.n	800431c <HAL_ADC_ConfigChannel+0x574>
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042f4:	fa93 f3a3 	rbit	r3, r3
 80042f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80042fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042fc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80042fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004300:	2b00      	cmp	r3, #0
 8004302:	d101      	bne.n	8004308 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8004304:	2320      	movs	r3, #32
 8004306:	e003      	b.n	8004310 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8004308:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800430a:	fab3 f383 	clz	r3, r3
 800430e:	b2db      	uxtb	r3, r3
 8004310:	3301      	adds	r3, #1
 8004312:	f003 031f 	and.w	r3, r3, #31
 8004316:	2101      	movs	r1, #1
 8004318:	fa01 f303 	lsl.w	r3, r1, r3
 800431c:	ea42 0103 	orr.w	r1, r2, r3
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004328:	2b00      	cmp	r3, #0
 800432a:	d10a      	bne.n	8004342 <HAL_ADC_ConfigChannel+0x59a>
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	0e9b      	lsrs	r3, r3, #26
 8004332:	3301      	adds	r3, #1
 8004334:	f003 021f 	and.w	r2, r3, #31
 8004338:	4613      	mov	r3, r2
 800433a:	005b      	lsls	r3, r3, #1
 800433c:	4413      	add	r3, r2
 800433e:	051b      	lsls	r3, r3, #20
 8004340:	e018      	b.n	8004374 <HAL_ADC_ConfigChannel+0x5cc>
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004348:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800434a:	fa93 f3a3 	rbit	r3, r3
 800434e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004352:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004356:	2b00      	cmp	r3, #0
 8004358:	d101      	bne.n	800435e <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 800435a:	2320      	movs	r3, #32
 800435c:	e003      	b.n	8004366 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 800435e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004360:	fab3 f383 	clz	r3, r3
 8004364:	b2db      	uxtb	r3, r3
 8004366:	3301      	adds	r3, #1
 8004368:	f003 021f 	and.w	r2, r3, #31
 800436c:	4613      	mov	r3, r2
 800436e:	005b      	lsls	r3, r3, #1
 8004370:	4413      	add	r3, r2
 8004372:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004374:	430b      	orrs	r3, r1
 8004376:	e080      	b.n	800447a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004380:	2b00      	cmp	r3, #0
 8004382:	d107      	bne.n	8004394 <HAL_ADC_ConfigChannel+0x5ec>
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	0e9b      	lsrs	r3, r3, #26
 800438a:	3301      	adds	r3, #1
 800438c:	069b      	lsls	r3, r3, #26
 800438e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004392:	e015      	b.n	80043c0 <HAL_ADC_ConfigChannel+0x618>
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800439a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800439c:	fa93 f3a3 	rbit	r3, r3
 80043a0:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80043a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80043a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d101      	bne.n	80043b0 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 80043ac:	2320      	movs	r3, #32
 80043ae:	e003      	b.n	80043b8 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 80043b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043b2:	fab3 f383 	clz	r3, r3
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	3301      	adds	r3, #1
 80043ba:	069b      	lsls	r3, r3, #26
 80043bc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d109      	bne.n	80043e0 <HAL_ADC_ConfigChannel+0x638>
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	0e9b      	lsrs	r3, r3, #26
 80043d2:	3301      	adds	r3, #1
 80043d4:	f003 031f 	and.w	r3, r3, #31
 80043d8:	2101      	movs	r1, #1
 80043da:	fa01 f303 	lsl.w	r3, r1, r3
 80043de:	e017      	b.n	8004410 <HAL_ADC_ConfigChannel+0x668>
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	fa93 f3a3 	rbit	r3, r3
 80043ec:	61bb      	str	r3, [r7, #24]
  return result;
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80043f2:	6a3b      	ldr	r3, [r7, #32]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d101      	bne.n	80043fc <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80043f8:	2320      	movs	r3, #32
 80043fa:	e003      	b.n	8004404 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80043fc:	6a3b      	ldr	r3, [r7, #32]
 80043fe:	fab3 f383 	clz	r3, r3
 8004402:	b2db      	uxtb	r3, r3
 8004404:	3301      	adds	r3, #1
 8004406:	f003 031f 	and.w	r3, r3, #31
 800440a:	2101      	movs	r1, #1
 800440c:	fa01 f303 	lsl.w	r3, r1, r3
 8004410:	ea42 0103 	orr.w	r1, r2, r3
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800441c:	2b00      	cmp	r3, #0
 800441e:	d10d      	bne.n	800443c <HAL_ADC_ConfigChannel+0x694>
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	0e9b      	lsrs	r3, r3, #26
 8004426:	3301      	adds	r3, #1
 8004428:	f003 021f 	and.w	r2, r3, #31
 800442c:	4613      	mov	r3, r2
 800442e:	005b      	lsls	r3, r3, #1
 8004430:	4413      	add	r3, r2
 8004432:	3b1e      	subs	r3, #30
 8004434:	051b      	lsls	r3, r3, #20
 8004436:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800443a:	e01d      	b.n	8004478 <HAL_ADC_ConfigChannel+0x6d0>
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	fa93 f3a3 	rbit	r3, r3
 8004448:	60fb      	str	r3, [r7, #12]
  return result;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d103      	bne.n	800445c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8004454:	2320      	movs	r3, #32
 8004456:	e005      	b.n	8004464 <HAL_ADC_ConfigChannel+0x6bc>
 8004458:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	fab3 f383 	clz	r3, r3
 8004462:	b2db      	uxtb	r3, r3
 8004464:	3301      	adds	r3, #1
 8004466:	f003 021f 	and.w	r2, r3, #31
 800446a:	4613      	mov	r3, r2
 800446c:	005b      	lsls	r3, r3, #1
 800446e:	4413      	add	r3, r2
 8004470:	3b1e      	subs	r3, #30
 8004472:	051b      	lsls	r3, r3, #20
 8004474:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004478:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800447a:	683a      	ldr	r2, [r7, #0]
 800447c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800447e:	4619      	mov	r1, r3
 8004480:	f7ff f88d 	bl	800359e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	4b3d      	ldr	r3, [pc, #244]	@ (8004580 <HAL_ADC_ConfigChannel+0x7d8>)
 800448a:	4013      	ands	r3, r2
 800448c:	2b00      	cmp	r3, #0
 800448e:	d06c      	beq.n	800456a <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004490:	483c      	ldr	r0, [pc, #240]	@ (8004584 <HAL_ADC_ConfigChannel+0x7dc>)
 8004492:	f7fe ffcf 	bl	8003434 <LL_ADC_GetCommonPathInternalCh>
 8004496:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a3a      	ldr	r2, [pc, #232]	@ (8004588 <HAL_ADC_ConfigChannel+0x7e0>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d127      	bne.n	80044f4 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80044a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80044a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d121      	bne.n	80044f4 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a35      	ldr	r2, [pc, #212]	@ (800458c <HAL_ADC_ConfigChannel+0x7e4>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d157      	bne.n	800456a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80044ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80044be:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80044c2:	4619      	mov	r1, r3
 80044c4:	482f      	ldr	r0, [pc, #188]	@ (8004584 <HAL_ADC_ConfigChannel+0x7dc>)
 80044c6:	f7fe ffa2 	bl	800340e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80044ca:	4b31      	ldr	r3, [pc, #196]	@ (8004590 <HAL_ADC_ConfigChannel+0x7e8>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	099b      	lsrs	r3, r3, #6
 80044d0:	4a30      	ldr	r2, [pc, #192]	@ (8004594 <HAL_ADC_ConfigChannel+0x7ec>)
 80044d2:	fba2 2303 	umull	r2, r3, r2, r3
 80044d6:	099b      	lsrs	r3, r3, #6
 80044d8:	1c5a      	adds	r2, r3, #1
 80044da:	4613      	mov	r3, r2
 80044dc:	005b      	lsls	r3, r3, #1
 80044de:	4413      	add	r3, r2
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80044e4:	e002      	b.n	80044ec <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	3b01      	subs	r3, #1
 80044ea:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1f9      	bne.n	80044e6 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80044f2:	e03a      	b.n	800456a <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a27      	ldr	r2, [pc, #156]	@ (8004598 <HAL_ADC_ConfigChannel+0x7f0>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d113      	bne.n	8004526 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80044fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004502:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d10d      	bne.n	8004526 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a1f      	ldr	r2, [pc, #124]	@ (800458c <HAL_ADC_ConfigChannel+0x7e4>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d12a      	bne.n	800456a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004514:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004518:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800451c:	4619      	mov	r1, r3
 800451e:	4819      	ldr	r0, [pc, #100]	@ (8004584 <HAL_ADC_ConfigChannel+0x7dc>)
 8004520:	f7fe ff75 	bl	800340e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004524:	e021      	b.n	800456a <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a1c      	ldr	r2, [pc, #112]	@ (800459c <HAL_ADC_ConfigChannel+0x7f4>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d11c      	bne.n	800456a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004530:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004534:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004538:	2b00      	cmp	r3, #0
 800453a:	d116      	bne.n	800456a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a12      	ldr	r2, [pc, #72]	@ (800458c <HAL_ADC_ConfigChannel+0x7e4>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d111      	bne.n	800456a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004546:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800454a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800454e:	4619      	mov	r1, r3
 8004550:	480c      	ldr	r0, [pc, #48]	@ (8004584 <HAL_ADC_ConfigChannel+0x7dc>)
 8004552:	f7fe ff5c 	bl	800340e <LL_ADC_SetCommonPathInternalCh>
 8004556:	e008      	b.n	800456a <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800455c:	f043 0220 	orr.w	r2, r3, #32
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004572:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004576:	4618      	mov	r0, r3
 8004578:	37d8      	adds	r7, #216	@ 0xd8
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	80080000 	.word	0x80080000
 8004584:	50040300 	.word	0x50040300
 8004588:	c7520000 	.word	0xc7520000
 800458c:	50040000 	.word	0x50040000
 8004590:	20000030 	.word	0x20000030
 8004594:	053e2d63 	.word	0x053e2d63
 8004598:	cb840000 	.word	0xcb840000
 800459c:	80000001 	.word	0x80000001

080045a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80045a8:	2300      	movs	r3, #0
 80045aa:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4618      	mov	r0, r3
 80045b2:	f7ff f8c1 	bl	8003738 <LL_ADC_IsEnabled>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d169      	bne.n	8004690 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	689a      	ldr	r2, [r3, #8]
 80045c2:	4b36      	ldr	r3, [pc, #216]	@ (800469c <ADC_Enable+0xfc>)
 80045c4:	4013      	ands	r3, r2
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00d      	beq.n	80045e6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045ce:	f043 0210 	orr.w	r2, r3, #16
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045da:	f043 0201 	orr.w	r2, r3, #1
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e055      	b.n	8004692 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7ff f890 	bl	8003710 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80045f0:	482b      	ldr	r0, [pc, #172]	@ (80046a0 <ADC_Enable+0x100>)
 80045f2:	f7fe ff1f 	bl	8003434 <LL_ADC_GetCommonPathInternalCh>
 80045f6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80045f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d013      	beq.n	8004628 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004600:	4b28      	ldr	r3, [pc, #160]	@ (80046a4 <ADC_Enable+0x104>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	099b      	lsrs	r3, r3, #6
 8004606:	4a28      	ldr	r2, [pc, #160]	@ (80046a8 <ADC_Enable+0x108>)
 8004608:	fba2 2303 	umull	r2, r3, r2, r3
 800460c:	099b      	lsrs	r3, r3, #6
 800460e:	1c5a      	adds	r2, r3, #1
 8004610:	4613      	mov	r3, r2
 8004612:	005b      	lsls	r3, r3, #1
 8004614:	4413      	add	r3, r2
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800461a:	e002      	b.n	8004622 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	3b01      	subs	r3, #1
 8004620:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d1f9      	bne.n	800461c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004628:	f7fe feae 	bl	8003388 <HAL_GetTick>
 800462c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800462e:	e028      	b.n	8004682 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4618      	mov	r0, r3
 8004636:	f7ff f87f 	bl	8003738 <LL_ADC_IsEnabled>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d104      	bne.n	800464a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4618      	mov	r0, r3
 8004646:	f7ff f863 	bl	8003710 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800464a:	f7fe fe9d 	bl	8003388 <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	2b02      	cmp	r3, #2
 8004656:	d914      	bls.n	8004682 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0301 	and.w	r3, r3, #1
 8004662:	2b01      	cmp	r3, #1
 8004664:	d00d      	beq.n	8004682 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800466a:	f043 0210 	orr.w	r2, r3, #16
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004676:	f043 0201 	orr.w	r2, r3, #1
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e007      	b.n	8004692 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0301 	and.w	r3, r3, #1
 800468c:	2b01      	cmp	r3, #1
 800468e:	d1cf      	bne.n	8004630 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	3710      	adds	r7, #16
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	8000003f 	.word	0x8000003f
 80046a0:	50040300 	.word	0x50040300
 80046a4:	20000030 	.word	0x20000030
 80046a8:	053e2d63 	.word	0x053e2d63

080046ac <LL_ADC_IsEnabled>:
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f003 0301 	and.w	r3, r3, #1
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d101      	bne.n	80046c4 <LL_ADC_IsEnabled+0x18>
 80046c0:	2301      	movs	r3, #1
 80046c2:	e000      	b.n	80046c6 <LL_ADC_IsEnabled+0x1a>
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	370c      	adds	r7, #12
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr

080046d2 <LL_ADC_REG_IsConversionOngoing>:
{
 80046d2:	b480      	push	{r7}
 80046d4:	b083      	sub	sp, #12
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f003 0304 	and.w	r3, r3, #4
 80046e2:	2b04      	cmp	r3, #4
 80046e4:	d101      	bne.n	80046ea <LL_ADC_REG_IsConversionOngoing+0x18>
 80046e6:	2301      	movs	r3, #1
 80046e8:	e000      	b.n	80046ec <LL_ADC_REG_IsConversionOngoing+0x1a>
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80046f8:	b590      	push	{r4, r7, lr}
 80046fa:	b09f      	sub	sp, #124	@ 0x7c
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004702:	2300      	movs	r3, #0
 8004704:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800470e:	2b01      	cmp	r3, #1
 8004710:	d101      	bne.n	8004716 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004712:	2302      	movs	r3, #2
 8004714:	e089      	b.n	800482a <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2201      	movs	r2, #1
 800471a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800471e:	2300      	movs	r3, #0
 8004720:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004722:	2300      	movs	r3, #0
 8004724:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a42      	ldr	r2, [pc, #264]	@ (8004834 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d102      	bne.n	8004736 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004730:	4b41      	ldr	r3, [pc, #260]	@ (8004838 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004732:	60bb      	str	r3, [r7, #8]
 8004734:	e001      	b.n	800473a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004736:	2300      	movs	r3, #0
 8004738:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d10b      	bne.n	8004758 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004744:	f043 0220 	orr.w	r2, r3, #32
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e068      	b.n	800482a <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	4618      	mov	r0, r3
 800475c:	f7ff ffb9 	bl	80046d2 <LL_ADC_REG_IsConversionOngoing>
 8004760:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4618      	mov	r0, r3
 8004768:	f7ff ffb3 	bl	80046d2 <LL_ADC_REG_IsConversionOngoing>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d14a      	bne.n	8004808 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004772:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004774:	2b00      	cmp	r3, #0
 8004776:	d147      	bne.n	8004808 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004778:	4b30      	ldr	r3, [pc, #192]	@ (800483c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800477a:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d027      	beq.n	80047d4 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004784:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	6859      	ldr	r1, [r3, #4]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004796:	035b      	lsls	r3, r3, #13
 8004798:	430b      	orrs	r3, r1
 800479a:	431a      	orrs	r2, r3
 800479c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800479e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80047a0:	4824      	ldr	r0, [pc, #144]	@ (8004834 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80047a2:	f7ff ff83 	bl	80046ac <LL_ADC_IsEnabled>
 80047a6:	4604      	mov	r4, r0
 80047a8:	4823      	ldr	r0, [pc, #140]	@ (8004838 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80047aa:	f7ff ff7f 	bl	80046ac <LL_ADC_IsEnabled>
 80047ae:	4603      	mov	r3, r0
 80047b0:	4323      	orrs	r3, r4
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d132      	bne.n	800481c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80047b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80047be:	f023 030f 	bic.w	r3, r3, #15
 80047c2:	683a      	ldr	r2, [r7, #0]
 80047c4:	6811      	ldr	r1, [r2, #0]
 80047c6:	683a      	ldr	r2, [r7, #0]
 80047c8:	6892      	ldr	r2, [r2, #8]
 80047ca:	430a      	orrs	r2, r1
 80047cc:	431a      	orrs	r2, r3
 80047ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047d0:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80047d2:	e023      	b.n	800481c <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80047d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80047dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047de:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80047e0:	4814      	ldr	r0, [pc, #80]	@ (8004834 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80047e2:	f7ff ff63 	bl	80046ac <LL_ADC_IsEnabled>
 80047e6:	4604      	mov	r4, r0
 80047e8:	4813      	ldr	r0, [pc, #76]	@ (8004838 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80047ea:	f7ff ff5f 	bl	80046ac <LL_ADC_IsEnabled>
 80047ee:	4603      	mov	r3, r0
 80047f0:	4323      	orrs	r3, r4
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d112      	bne.n	800481c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80047f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80047fe:	f023 030f 	bic.w	r3, r3, #15
 8004802:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004804:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004806:	e009      	b.n	800481c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800480c:	f043 0220 	orr.w	r2, r3, #32
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800481a:	e000      	b.n	800481e <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800481c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004826:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800482a:	4618      	mov	r0, r3
 800482c:	377c      	adds	r7, #124	@ 0x7c
 800482e:	46bd      	mov	sp, r7
 8004830:	bd90      	pop	{r4, r7, pc}
 8004832:	bf00      	nop
 8004834:	50040000 	.word	0x50040000
 8004838:	50040100 	.word	0x50040100
 800483c:	50040300 	.word	0x50040300

08004840 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004840:	b480      	push	{r7}
 8004842:	b085      	sub	sp, #20
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f003 0307 	and.w	r3, r3, #7
 800484e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004850:	4b0c      	ldr	r3, [pc, #48]	@ (8004884 <__NVIC_SetPriorityGrouping+0x44>)
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004856:	68ba      	ldr	r2, [r7, #8]
 8004858:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800485c:	4013      	ands	r3, r2
 800485e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004868:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800486c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004870:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004872:	4a04      	ldr	r2, [pc, #16]	@ (8004884 <__NVIC_SetPriorityGrouping+0x44>)
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	60d3      	str	r3, [r2, #12]
}
 8004878:	bf00      	nop
 800487a:	3714      	adds	r7, #20
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr
 8004884:	e000ed00 	.word	0xe000ed00

08004888 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004888:	b480      	push	{r7}
 800488a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800488c:	4b04      	ldr	r3, [pc, #16]	@ (80048a0 <__NVIC_GetPriorityGrouping+0x18>)
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	0a1b      	lsrs	r3, r3, #8
 8004892:	f003 0307 	and.w	r3, r3, #7
}
 8004896:	4618      	mov	r0, r3
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr
 80048a0:	e000ed00 	.word	0xe000ed00

080048a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	4603      	mov	r3, r0
 80048ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	db0b      	blt.n	80048ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048b6:	79fb      	ldrb	r3, [r7, #7]
 80048b8:	f003 021f 	and.w	r2, r3, #31
 80048bc:	4907      	ldr	r1, [pc, #28]	@ (80048dc <__NVIC_EnableIRQ+0x38>)
 80048be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048c2:	095b      	lsrs	r3, r3, #5
 80048c4:	2001      	movs	r0, #1
 80048c6:	fa00 f202 	lsl.w	r2, r0, r2
 80048ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80048ce:	bf00      	nop
 80048d0:	370c      	adds	r7, #12
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	e000e100 	.word	0xe000e100

080048e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	4603      	mov	r3, r0
 80048e8:	6039      	str	r1, [r7, #0]
 80048ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	db0a      	blt.n	800490a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	b2da      	uxtb	r2, r3
 80048f8:	490c      	ldr	r1, [pc, #48]	@ (800492c <__NVIC_SetPriority+0x4c>)
 80048fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048fe:	0112      	lsls	r2, r2, #4
 8004900:	b2d2      	uxtb	r2, r2
 8004902:	440b      	add	r3, r1
 8004904:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004908:	e00a      	b.n	8004920 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	b2da      	uxtb	r2, r3
 800490e:	4908      	ldr	r1, [pc, #32]	@ (8004930 <__NVIC_SetPriority+0x50>)
 8004910:	79fb      	ldrb	r3, [r7, #7]
 8004912:	f003 030f 	and.w	r3, r3, #15
 8004916:	3b04      	subs	r3, #4
 8004918:	0112      	lsls	r2, r2, #4
 800491a:	b2d2      	uxtb	r2, r2
 800491c:	440b      	add	r3, r1
 800491e:	761a      	strb	r2, [r3, #24]
}
 8004920:	bf00      	nop
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr
 800492c:	e000e100 	.word	0xe000e100
 8004930:	e000ed00 	.word	0xe000ed00

08004934 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004934:	b480      	push	{r7}
 8004936:	b089      	sub	sp, #36	@ 0x24
 8004938:	af00      	add	r7, sp, #0
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f003 0307 	and.w	r3, r3, #7
 8004946:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	f1c3 0307 	rsb	r3, r3, #7
 800494e:	2b04      	cmp	r3, #4
 8004950:	bf28      	it	cs
 8004952:	2304      	movcs	r3, #4
 8004954:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	3304      	adds	r3, #4
 800495a:	2b06      	cmp	r3, #6
 800495c:	d902      	bls.n	8004964 <NVIC_EncodePriority+0x30>
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	3b03      	subs	r3, #3
 8004962:	e000      	b.n	8004966 <NVIC_EncodePriority+0x32>
 8004964:	2300      	movs	r3, #0
 8004966:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004968:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	fa02 f303 	lsl.w	r3, r2, r3
 8004972:	43da      	mvns	r2, r3
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	401a      	ands	r2, r3
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800497c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	fa01 f303 	lsl.w	r3, r1, r3
 8004986:	43d9      	mvns	r1, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800498c:	4313      	orrs	r3, r2
         );
}
 800498e:	4618      	mov	r0, r3
 8004990:	3724      	adds	r7, #36	@ 0x24
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
	...

0800499c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	3b01      	subs	r3, #1
 80049a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80049ac:	d301      	bcc.n	80049b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80049ae:	2301      	movs	r3, #1
 80049b0:	e00f      	b.n	80049d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80049b2:	4a0a      	ldr	r2, [pc, #40]	@ (80049dc <SysTick_Config+0x40>)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	3b01      	subs	r3, #1
 80049b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80049ba:	210f      	movs	r1, #15
 80049bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80049c0:	f7ff ff8e 	bl	80048e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80049c4:	4b05      	ldr	r3, [pc, #20]	@ (80049dc <SysTick_Config+0x40>)
 80049c6:	2200      	movs	r2, #0
 80049c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80049ca:	4b04      	ldr	r3, [pc, #16]	@ (80049dc <SysTick_Config+0x40>)
 80049cc:	2207      	movs	r2, #7
 80049ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3708      	adds	r7, #8
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	e000e010 	.word	0xe000e010

080049e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f7ff ff29 	bl	8004840 <__NVIC_SetPriorityGrouping>
}
 80049ee:	bf00      	nop
 80049f0:	3708      	adds	r7, #8
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}

080049f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049f6:	b580      	push	{r7, lr}
 80049f8:	b086      	sub	sp, #24
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	4603      	mov	r3, r0
 80049fe:	60b9      	str	r1, [r7, #8]
 8004a00:	607a      	str	r2, [r7, #4]
 8004a02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004a04:	2300      	movs	r3, #0
 8004a06:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004a08:	f7ff ff3e 	bl	8004888 <__NVIC_GetPriorityGrouping>
 8004a0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	68b9      	ldr	r1, [r7, #8]
 8004a12:	6978      	ldr	r0, [r7, #20]
 8004a14:	f7ff ff8e 	bl	8004934 <NVIC_EncodePriority>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a1e:	4611      	mov	r1, r2
 8004a20:	4618      	mov	r0, r3
 8004a22:	f7ff ff5d 	bl	80048e0 <__NVIC_SetPriority>
}
 8004a26:	bf00      	nop
 8004a28:	3718      	adds	r7, #24
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}

08004a2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a2e:	b580      	push	{r7, lr}
 8004a30:	b082      	sub	sp, #8
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	4603      	mov	r3, r0
 8004a36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f7ff ff31 	bl	80048a4 <__NVIC_EnableIRQ>
}
 8004a42:	bf00      	nop
 8004a44:	3708      	adds	r7, #8
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}

08004a4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a4a:	b580      	push	{r7, lr}
 8004a4c:	b082      	sub	sp, #8
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f7ff ffa2 	bl	800499c <SysTick_Config>
 8004a58:	4603      	mov	r3, r0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3708      	adds	r7, #8
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
	...

08004a64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b087      	sub	sp, #28
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a72:	e14e      	b.n	8004d12 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	2101      	movs	r1, #1
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a80:	4013      	ands	r3, r2
 8004a82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	f000 8140 	beq.w	8004d0c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	f003 0303 	and.w	r3, r3, #3
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d005      	beq.n	8004aa4 <HAL_GPIO_Init+0x40>
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f003 0303 	and.w	r3, r3, #3
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d130      	bne.n	8004b06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	005b      	lsls	r3, r3, #1
 8004aae:	2203      	movs	r2, #3
 8004ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab4:	43db      	mvns	r3, r3
 8004ab6:	693a      	ldr	r2, [r7, #16]
 8004ab8:	4013      	ands	r3, r2
 8004aba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	68da      	ldr	r2, [r3, #12]
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	005b      	lsls	r3, r3, #1
 8004ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac8:	693a      	ldr	r2, [r7, #16]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	693a      	ldr	r2, [r7, #16]
 8004ad2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004ada:	2201      	movs	r2, #1
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae2:	43db      	mvns	r3, r3
 8004ae4:	693a      	ldr	r2, [r7, #16]
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	091b      	lsrs	r3, r3, #4
 8004af0:	f003 0201 	and.w	r2, r3, #1
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	fa02 f303 	lsl.w	r3, r2, r3
 8004afa:	693a      	ldr	r2, [r7, #16]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	693a      	ldr	r2, [r7, #16]
 8004b04:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f003 0303 	and.w	r3, r3, #3
 8004b0e:	2b03      	cmp	r3, #3
 8004b10:	d017      	beq.n	8004b42 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	005b      	lsls	r3, r3, #1
 8004b1c:	2203      	movs	r2, #3
 8004b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b22:	43db      	mvns	r3, r3
 8004b24:	693a      	ldr	r2, [r7, #16]
 8004b26:	4013      	ands	r3, r2
 8004b28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	689a      	ldr	r2, [r3, #8]
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	005b      	lsls	r3, r3, #1
 8004b32:	fa02 f303 	lsl.w	r3, r2, r3
 8004b36:	693a      	ldr	r2, [r7, #16]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f003 0303 	and.w	r3, r3, #3
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d123      	bne.n	8004b96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	08da      	lsrs	r2, r3, #3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	3208      	adds	r2, #8
 8004b56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	f003 0307 	and.w	r3, r3, #7
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	220f      	movs	r2, #15
 8004b66:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6a:	43db      	mvns	r3, r3
 8004b6c:	693a      	ldr	r2, [r7, #16]
 8004b6e:	4013      	ands	r3, r2
 8004b70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	691a      	ldr	r2, [r3, #16]
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	f003 0307 	and.w	r3, r3, #7
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b82:	693a      	ldr	r2, [r7, #16]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	08da      	lsrs	r2, r3, #3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	3208      	adds	r2, #8
 8004b90:	6939      	ldr	r1, [r7, #16]
 8004b92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	005b      	lsls	r3, r3, #1
 8004ba0:	2203      	movs	r2, #3
 8004ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba6:	43db      	mvns	r3, r3
 8004ba8:	693a      	ldr	r2, [r7, #16]
 8004baa:	4013      	ands	r3, r2
 8004bac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	f003 0203 	and.w	r2, r3, #3
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	005b      	lsls	r3, r3, #1
 8004bba:	fa02 f303 	lsl.w	r3, r2, r3
 8004bbe:	693a      	ldr	r2, [r7, #16]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	693a      	ldr	r2, [r7, #16]
 8004bc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	f000 809a 	beq.w	8004d0c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bd8:	4b55      	ldr	r3, [pc, #340]	@ (8004d30 <HAL_GPIO_Init+0x2cc>)
 8004bda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bdc:	4a54      	ldr	r2, [pc, #336]	@ (8004d30 <HAL_GPIO_Init+0x2cc>)
 8004bde:	f043 0301 	orr.w	r3, r3, #1
 8004be2:	6613      	str	r3, [r2, #96]	@ 0x60
 8004be4:	4b52      	ldr	r3, [pc, #328]	@ (8004d30 <HAL_GPIO_Init+0x2cc>)
 8004be6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004be8:	f003 0301 	and.w	r3, r3, #1
 8004bec:	60bb      	str	r3, [r7, #8]
 8004bee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004bf0:	4a50      	ldr	r2, [pc, #320]	@ (8004d34 <HAL_GPIO_Init+0x2d0>)
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	089b      	lsrs	r3, r3, #2
 8004bf6:	3302      	adds	r3, #2
 8004bf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	f003 0303 	and.w	r3, r3, #3
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	220f      	movs	r2, #15
 8004c08:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0c:	43db      	mvns	r3, r3
 8004c0e:	693a      	ldr	r2, [r7, #16]
 8004c10:	4013      	ands	r3, r2
 8004c12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004c1a:	d013      	beq.n	8004c44 <HAL_GPIO_Init+0x1e0>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a46      	ldr	r2, [pc, #280]	@ (8004d38 <HAL_GPIO_Init+0x2d4>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d00d      	beq.n	8004c40 <HAL_GPIO_Init+0x1dc>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a45      	ldr	r2, [pc, #276]	@ (8004d3c <HAL_GPIO_Init+0x2d8>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d007      	beq.n	8004c3c <HAL_GPIO_Init+0x1d8>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4a44      	ldr	r2, [pc, #272]	@ (8004d40 <HAL_GPIO_Init+0x2dc>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d101      	bne.n	8004c38 <HAL_GPIO_Init+0x1d4>
 8004c34:	2303      	movs	r3, #3
 8004c36:	e006      	b.n	8004c46 <HAL_GPIO_Init+0x1e2>
 8004c38:	2307      	movs	r3, #7
 8004c3a:	e004      	b.n	8004c46 <HAL_GPIO_Init+0x1e2>
 8004c3c:	2302      	movs	r3, #2
 8004c3e:	e002      	b.n	8004c46 <HAL_GPIO_Init+0x1e2>
 8004c40:	2301      	movs	r3, #1
 8004c42:	e000      	b.n	8004c46 <HAL_GPIO_Init+0x1e2>
 8004c44:	2300      	movs	r3, #0
 8004c46:	697a      	ldr	r2, [r7, #20]
 8004c48:	f002 0203 	and.w	r2, r2, #3
 8004c4c:	0092      	lsls	r2, r2, #2
 8004c4e:	4093      	lsls	r3, r2
 8004c50:	693a      	ldr	r2, [r7, #16]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004c56:	4937      	ldr	r1, [pc, #220]	@ (8004d34 <HAL_GPIO_Init+0x2d0>)
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	089b      	lsrs	r3, r3, #2
 8004c5c:	3302      	adds	r3, #2
 8004c5e:	693a      	ldr	r2, [r7, #16]
 8004c60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004c64:	4b37      	ldr	r3, [pc, #220]	@ (8004d44 <HAL_GPIO_Init+0x2e0>)
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	43db      	mvns	r3, r3
 8004c6e:	693a      	ldr	r2, [r7, #16]
 8004c70:	4013      	ands	r3, r2
 8004c72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d003      	beq.n	8004c88 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8004c80:	693a      	ldr	r2, [r7, #16]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004c88:	4a2e      	ldr	r2, [pc, #184]	@ (8004d44 <HAL_GPIO_Init+0x2e0>)
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004c8e:	4b2d      	ldr	r3, [pc, #180]	@ (8004d44 <HAL_GPIO_Init+0x2e0>)
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	43db      	mvns	r3, r3
 8004c98:	693a      	ldr	r2, [r7, #16]
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d003      	beq.n	8004cb2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8004caa:	693a      	ldr	r2, [r7, #16]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004cb2:	4a24      	ldr	r2, [pc, #144]	@ (8004d44 <HAL_GPIO_Init+0x2e0>)
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004cb8:	4b22      	ldr	r3, [pc, #136]	@ (8004d44 <HAL_GPIO_Init+0x2e0>)
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	43db      	mvns	r3, r3
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d003      	beq.n	8004cdc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8004cd4:	693a      	ldr	r2, [r7, #16]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004cdc:	4a19      	ldr	r2, [pc, #100]	@ (8004d44 <HAL_GPIO_Init+0x2e0>)
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004ce2:	4b18      	ldr	r3, [pc, #96]	@ (8004d44 <HAL_GPIO_Init+0x2e0>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	43db      	mvns	r3, r3
 8004cec:	693a      	ldr	r2, [r7, #16]
 8004cee:	4013      	ands	r3, r2
 8004cf0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d003      	beq.n	8004d06 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8004cfe:	693a      	ldr	r2, [r7, #16]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004d06:	4a0f      	ldr	r2, [pc, #60]	@ (8004d44 <HAL_GPIO_Init+0x2e0>)
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	3301      	adds	r3, #1
 8004d10:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	fa22 f303 	lsr.w	r3, r2, r3
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	f47f aea9 	bne.w	8004a74 <HAL_GPIO_Init+0x10>
  }
}
 8004d22:	bf00      	nop
 8004d24:	bf00      	nop
 8004d26:	371c      	adds	r7, #28
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr
 8004d30:	40021000 	.word	0x40021000
 8004d34:	40010000 	.word	0x40010000
 8004d38:	48000400 	.word	0x48000400
 8004d3c:	48000800 	.word	0x48000800
 8004d40:	48000c00 	.word	0x48000c00
 8004d44:	40010400 	.word	0x40010400

08004d48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	460b      	mov	r3, r1
 8004d52:	807b      	strh	r3, [r7, #2]
 8004d54:	4613      	mov	r3, r2
 8004d56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004d58:	787b      	ldrb	r3, [r7, #1]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d003      	beq.n	8004d66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004d5e:	887a      	ldrh	r2, [r7, #2]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004d64:	e002      	b.n	8004d6c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004d66:	887a      	ldrh	r2, [r7, #2]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004d6c:	bf00      	nop
 8004d6e:	370c      	adds	r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr

08004d78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	4603      	mov	r3, r0
 8004d80:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004d82:	4b08      	ldr	r3, [pc, #32]	@ (8004da4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d84:	695a      	ldr	r2, [r3, #20]
 8004d86:	88fb      	ldrh	r3, [r7, #6]
 8004d88:	4013      	ands	r3, r2
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d006      	beq.n	8004d9c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004d8e:	4a05      	ldr	r2, [pc, #20]	@ (8004da4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d90:	88fb      	ldrh	r3, [r7, #6]
 8004d92:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004d94:	88fb      	ldrh	r3, [r7, #6]
 8004d96:	4618      	mov	r0, r3
 8004d98:	f7fc ffe4 	bl	8001d64 <HAL_GPIO_EXTI_Callback>
  }
}
 8004d9c:	bf00      	nop
 8004d9e:	3708      	adds	r7, #8
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	40010400 	.word	0x40010400

08004da8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d101      	bne.n	8004dba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e08d      	b.n	8004ed6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d106      	bne.n	8004dd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f7fe f860 	bl	8002e94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2224      	movs	r2, #36	@ 0x24
 8004dd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f022 0201 	bic.w	r2, r2, #1
 8004dea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	685a      	ldr	r2, [r3, #4]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004df8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	689a      	ldr	r2, [r3, #8]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004e08:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d107      	bne.n	8004e22 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	689a      	ldr	r2, [r3, #8]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004e1e:	609a      	str	r2, [r3, #8]
 8004e20:	e006      	b.n	8004e30 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	689a      	ldr	r2, [r3, #8]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004e2e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d108      	bne.n	8004e4a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	685a      	ldr	r2, [r3, #4]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e46:	605a      	str	r2, [r3, #4]
 8004e48:	e007      	b.n	8004e5a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	685a      	ldr	r2, [r3, #4]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e58:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	6812      	ldr	r2, [r2, #0]
 8004e64:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004e68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e6c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68da      	ldr	r2, [r3, #12]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004e7c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	691a      	ldr	r2, [r3, #16]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	699b      	ldr	r3, [r3, #24]
 8004e8e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	430a      	orrs	r2, r1
 8004e96:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	69d9      	ldr	r1, [r3, #28]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a1a      	ldr	r2, [r3, #32]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	430a      	orrs	r2, r1
 8004ea6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f042 0201 	orr.w	r2, r2, #1
 8004eb6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2220      	movs	r2, #32
 8004ec2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3708      	adds	r7, #8
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
	...

08004ee0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b088      	sub	sp, #32
 8004ee4:	af02      	add	r7, sp, #8
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	607a      	str	r2, [r7, #4]
 8004eea:	461a      	mov	r2, r3
 8004eec:	460b      	mov	r3, r1
 8004eee:	817b      	strh	r3, [r7, #10]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	2b20      	cmp	r3, #32
 8004efe:	f040 80fd 	bne.w	80050fc <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d101      	bne.n	8004f10 <HAL_I2C_Master_Transmit+0x30>
 8004f0c:	2302      	movs	r3, #2
 8004f0e:	e0f6      	b.n	80050fe <HAL_I2C_Master_Transmit+0x21e>
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004f18:	f7fe fa36 	bl	8003388 <HAL_GetTick>
 8004f1c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	9300      	str	r3, [sp, #0]
 8004f22:	2319      	movs	r3, #25
 8004f24:	2201      	movs	r2, #1
 8004f26:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004f2a:	68f8      	ldr	r0, [r7, #12]
 8004f2c:	f000 f914 	bl	8005158 <I2C_WaitOnFlagUntilTimeout>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d001      	beq.n	8004f3a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e0e1      	b.n	80050fe <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2221      	movs	r2, #33	@ 0x21
 8004f3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2210      	movs	r2, #16
 8004f46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	893a      	ldrh	r2, [r7, #8]
 8004f5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	2bff      	cmp	r3, #255	@ 0xff
 8004f6a:	d906      	bls.n	8004f7a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	22ff      	movs	r2, #255	@ 0xff
 8004f70:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004f72:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004f76:	617b      	str	r3, [r7, #20]
 8004f78:	e007      	b.n	8004f8a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f7e:	b29a      	uxth	r2, r3
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004f84:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004f88:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d024      	beq.n	8004fdc <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f96:	781a      	ldrb	r2, [r3, #0]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa2:	1c5a      	adds	r2, r3, #1
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	b29a      	uxth	r2, r3
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fba:	3b01      	subs	r3, #1
 8004fbc:	b29a      	uxth	r2, r3
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	3301      	adds	r3, #1
 8004fca:	b2da      	uxtb	r2, r3
 8004fcc:	8979      	ldrh	r1, [r7, #10]
 8004fce:	4b4e      	ldr	r3, [pc, #312]	@ (8005108 <HAL_I2C_Master_Transmit+0x228>)
 8004fd0:	9300      	str	r3, [sp, #0]
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	68f8      	ldr	r0, [r7, #12]
 8004fd6:	f000 fa83 	bl	80054e0 <I2C_TransferConfig>
 8004fda:	e066      	b.n	80050aa <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fe0:	b2da      	uxtb	r2, r3
 8004fe2:	8979      	ldrh	r1, [r7, #10]
 8004fe4:	4b48      	ldr	r3, [pc, #288]	@ (8005108 <HAL_I2C_Master_Transmit+0x228>)
 8004fe6:	9300      	str	r3, [sp, #0]
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	68f8      	ldr	r0, [r7, #12]
 8004fec:	f000 fa78 	bl	80054e0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004ff0:	e05b      	b.n	80050aa <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ff2:	693a      	ldr	r2, [r7, #16]
 8004ff4:	6a39      	ldr	r1, [r7, #32]
 8004ff6:	68f8      	ldr	r0, [r7, #12]
 8004ff8:	f000 f907 	bl	800520a <I2C_WaitOnTXISFlagUntilTimeout>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d001      	beq.n	8005006 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e07b      	b.n	80050fe <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800500a:	781a      	ldrb	r2, [r3, #0]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005016:	1c5a      	adds	r2, r3, #1
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005020:	b29b      	uxth	r3, r3
 8005022:	3b01      	subs	r3, #1
 8005024:	b29a      	uxth	r2, r3
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800502e:	3b01      	subs	r3, #1
 8005030:	b29a      	uxth	r2, r3
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800503a:	b29b      	uxth	r3, r3
 800503c:	2b00      	cmp	r3, #0
 800503e:	d034      	beq.n	80050aa <HAL_I2C_Master_Transmit+0x1ca>
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005044:	2b00      	cmp	r3, #0
 8005046:	d130      	bne.n	80050aa <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	9300      	str	r3, [sp, #0]
 800504c:	6a3b      	ldr	r3, [r7, #32]
 800504e:	2200      	movs	r2, #0
 8005050:	2180      	movs	r1, #128	@ 0x80
 8005052:	68f8      	ldr	r0, [r7, #12]
 8005054:	f000 f880 	bl	8005158 <I2C_WaitOnFlagUntilTimeout>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d001      	beq.n	8005062 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e04d      	b.n	80050fe <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005066:	b29b      	uxth	r3, r3
 8005068:	2bff      	cmp	r3, #255	@ 0xff
 800506a:	d90e      	bls.n	800508a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	22ff      	movs	r2, #255	@ 0xff
 8005070:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005076:	b2da      	uxtb	r2, r3
 8005078:	8979      	ldrh	r1, [r7, #10]
 800507a:	2300      	movs	r3, #0
 800507c:	9300      	str	r3, [sp, #0]
 800507e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005082:	68f8      	ldr	r0, [r7, #12]
 8005084:	f000 fa2c 	bl	80054e0 <I2C_TransferConfig>
 8005088:	e00f      	b.n	80050aa <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800508e:	b29a      	uxth	r2, r3
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005098:	b2da      	uxtb	r2, r3
 800509a:	8979      	ldrh	r1, [r7, #10]
 800509c:	2300      	movs	r3, #0
 800509e:	9300      	str	r3, [sp, #0]
 80050a0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80050a4:	68f8      	ldr	r0, [r7, #12]
 80050a6:	f000 fa1b 	bl	80054e0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d19e      	bne.n	8004ff2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050b4:	693a      	ldr	r2, [r7, #16]
 80050b6:	6a39      	ldr	r1, [r7, #32]
 80050b8:	68f8      	ldr	r0, [r7, #12]
 80050ba:	f000 f8ed 	bl	8005298 <I2C_WaitOnSTOPFlagUntilTimeout>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d001      	beq.n	80050c8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e01a      	b.n	80050fe <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2220      	movs	r2, #32
 80050ce:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	6859      	ldr	r1, [r3, #4]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	4b0c      	ldr	r3, [pc, #48]	@ (800510c <HAL_I2C_Master_Transmit+0x22c>)
 80050dc:	400b      	ands	r3, r1
 80050de:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2220      	movs	r2, #32
 80050e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80050f8:	2300      	movs	r3, #0
 80050fa:	e000      	b.n	80050fe <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80050fc:	2302      	movs	r3, #2
  }
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3718      	adds	r7, #24
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	80002000 	.word	0x80002000
 800510c:	fe00e800 	.word	0xfe00e800

08005110 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	f003 0302 	and.w	r3, r3, #2
 8005122:	2b02      	cmp	r3, #2
 8005124:	d103      	bne.n	800512e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	2200      	movs	r2, #0
 800512c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	699b      	ldr	r3, [r3, #24]
 8005134:	f003 0301 	and.w	r3, r3, #1
 8005138:	2b01      	cmp	r3, #1
 800513a:	d007      	beq.n	800514c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	699a      	ldr	r2, [r3, #24]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f042 0201 	orr.w	r2, r2, #1
 800514a:	619a      	str	r2, [r3, #24]
  }
}
 800514c:	bf00      	nop
 800514e:	370c      	adds	r7, #12
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	603b      	str	r3, [r7, #0]
 8005164:	4613      	mov	r3, r2
 8005166:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005168:	e03b      	b.n	80051e2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800516a:	69ba      	ldr	r2, [r7, #24]
 800516c:	6839      	ldr	r1, [r7, #0]
 800516e:	68f8      	ldr	r0, [r7, #12]
 8005170:	f000 f8d6 	bl	8005320 <I2C_IsErrorOccurred>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d001      	beq.n	800517e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e041      	b.n	8005202 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005184:	d02d      	beq.n	80051e2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005186:	f7fe f8ff 	bl	8003388 <HAL_GetTick>
 800518a:	4602      	mov	r2, r0
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	683a      	ldr	r2, [r7, #0]
 8005192:	429a      	cmp	r2, r3
 8005194:	d302      	bcc.n	800519c <I2C_WaitOnFlagUntilTimeout+0x44>
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d122      	bne.n	80051e2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	699a      	ldr	r2, [r3, #24]
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	4013      	ands	r3, r2
 80051a6:	68ba      	ldr	r2, [r7, #8]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	bf0c      	ite	eq
 80051ac:	2301      	moveq	r3, #1
 80051ae:	2300      	movne	r3, #0
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	461a      	mov	r2, r3
 80051b4:	79fb      	ldrb	r3, [r7, #7]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d113      	bne.n	80051e2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051be:	f043 0220 	orr.w	r2, r3, #32
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2220      	movs	r2, #32
 80051ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e00f      	b.n	8005202 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	699a      	ldr	r2, [r3, #24]
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	4013      	ands	r3, r2
 80051ec:	68ba      	ldr	r2, [r7, #8]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	bf0c      	ite	eq
 80051f2:	2301      	moveq	r3, #1
 80051f4:	2300      	movne	r3, #0
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	461a      	mov	r2, r3
 80051fa:	79fb      	ldrb	r3, [r7, #7]
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d0b4      	beq.n	800516a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3710      	adds	r7, #16
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}

0800520a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800520a:	b580      	push	{r7, lr}
 800520c:	b084      	sub	sp, #16
 800520e:	af00      	add	r7, sp, #0
 8005210:	60f8      	str	r0, [r7, #12]
 8005212:	60b9      	str	r1, [r7, #8]
 8005214:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005216:	e033      	b.n	8005280 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	68b9      	ldr	r1, [r7, #8]
 800521c:	68f8      	ldr	r0, [r7, #12]
 800521e:	f000 f87f 	bl	8005320 <I2C_IsErrorOccurred>
 8005222:	4603      	mov	r3, r0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d001      	beq.n	800522c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e031      	b.n	8005290 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005232:	d025      	beq.n	8005280 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005234:	f7fe f8a8 	bl	8003388 <HAL_GetTick>
 8005238:	4602      	mov	r2, r0
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	1ad3      	subs	r3, r2, r3
 800523e:	68ba      	ldr	r2, [r7, #8]
 8005240:	429a      	cmp	r2, r3
 8005242:	d302      	bcc.n	800524a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d11a      	bne.n	8005280 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	699b      	ldr	r3, [r3, #24]
 8005250:	f003 0302 	and.w	r3, r3, #2
 8005254:	2b02      	cmp	r3, #2
 8005256:	d013      	beq.n	8005280 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800525c:	f043 0220 	orr.w	r2, r3, #32
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2220      	movs	r2, #32
 8005268:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2200      	movs	r2, #0
 8005270:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2200      	movs	r2, #0
 8005278:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e007      	b.n	8005290 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	699b      	ldr	r3, [r3, #24]
 8005286:	f003 0302 	and.w	r3, r3, #2
 800528a:	2b02      	cmp	r3, #2
 800528c:	d1c4      	bne.n	8005218 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	3710      	adds	r7, #16
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80052a4:	e02f      	b.n	8005306 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	68b9      	ldr	r1, [r7, #8]
 80052aa:	68f8      	ldr	r0, [r7, #12]
 80052ac:	f000 f838 	bl	8005320 <I2C_IsErrorOccurred>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d001      	beq.n	80052ba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e02d      	b.n	8005316 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052ba:	f7fe f865 	bl	8003388 <HAL_GetTick>
 80052be:	4602      	mov	r2, r0
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	68ba      	ldr	r2, [r7, #8]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d302      	bcc.n	80052d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d11a      	bne.n	8005306 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	699b      	ldr	r3, [r3, #24]
 80052d6:	f003 0320 	and.w	r3, r3, #32
 80052da:	2b20      	cmp	r3, #32
 80052dc:	d013      	beq.n	8005306 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052e2:	f043 0220 	orr.w	r2, r3, #32
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2220      	movs	r2, #32
 80052ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e007      	b.n	8005316 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	699b      	ldr	r3, [r3, #24]
 800530c:	f003 0320 	and.w	r3, r3, #32
 8005310:	2b20      	cmp	r3, #32
 8005312:	d1c8      	bne.n	80052a6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3710      	adds	r7, #16
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
	...

08005320 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b08a      	sub	sp, #40	@ 0x28
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800532c:	2300      	movs	r3, #0
 800532e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	699b      	ldr	r3, [r3, #24]
 8005338:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800533a:	2300      	movs	r3, #0
 800533c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005342:	69bb      	ldr	r3, [r7, #24]
 8005344:	f003 0310 	and.w	r3, r3, #16
 8005348:	2b00      	cmp	r3, #0
 800534a:	d068      	beq.n	800541e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2210      	movs	r2, #16
 8005352:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005354:	e049      	b.n	80053ea <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800535c:	d045      	beq.n	80053ea <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800535e:	f7fe f813 	bl	8003388 <HAL_GetTick>
 8005362:	4602      	mov	r2, r0
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	1ad3      	subs	r3, r2, r3
 8005368:	68ba      	ldr	r2, [r7, #8]
 800536a:	429a      	cmp	r2, r3
 800536c:	d302      	bcc.n	8005374 <I2C_IsErrorOccurred+0x54>
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d13a      	bne.n	80053ea <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800537e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005386:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005392:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005396:	d121      	bne.n	80053dc <I2C_IsErrorOccurred+0xbc>
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800539e:	d01d      	beq.n	80053dc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80053a0:	7cfb      	ldrb	r3, [r7, #19]
 80053a2:	2b20      	cmp	r3, #32
 80053a4:	d01a      	beq.n	80053dc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	685a      	ldr	r2, [r3, #4]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80053b4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80053b6:	f7fd ffe7 	bl	8003388 <HAL_GetTick>
 80053ba:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80053bc:	e00e      	b.n	80053dc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80053be:	f7fd ffe3 	bl	8003388 <HAL_GetTick>
 80053c2:	4602      	mov	r2, r0
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	1ad3      	subs	r3, r2, r3
 80053c8:	2b19      	cmp	r3, #25
 80053ca:	d907      	bls.n	80053dc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80053cc:	6a3b      	ldr	r3, [r7, #32]
 80053ce:	f043 0320 	orr.w	r3, r3, #32
 80053d2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80053da:	e006      	b.n	80053ea <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	699b      	ldr	r3, [r3, #24]
 80053e2:	f003 0320 	and.w	r3, r3, #32
 80053e6:	2b20      	cmp	r3, #32
 80053e8:	d1e9      	bne.n	80053be <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	699b      	ldr	r3, [r3, #24]
 80053f0:	f003 0320 	and.w	r3, r3, #32
 80053f4:	2b20      	cmp	r3, #32
 80053f6:	d003      	beq.n	8005400 <I2C_IsErrorOccurred+0xe0>
 80053f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d0aa      	beq.n	8005356 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005400:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005404:	2b00      	cmp	r3, #0
 8005406:	d103      	bne.n	8005410 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2220      	movs	r2, #32
 800540e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005410:	6a3b      	ldr	r3, [r7, #32]
 8005412:	f043 0304 	orr.w	r3, r3, #4
 8005416:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	699b      	ldr	r3, [r3, #24]
 8005424:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005426:	69bb      	ldr	r3, [r7, #24]
 8005428:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800542c:	2b00      	cmp	r3, #0
 800542e:	d00b      	beq.n	8005448 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005430:	6a3b      	ldr	r3, [r7, #32]
 8005432:	f043 0301 	orr.w	r3, r3, #1
 8005436:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005440:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00b      	beq.n	800546a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005452:	6a3b      	ldr	r3, [r7, #32]
 8005454:	f043 0308 	orr.w	r3, r3, #8
 8005458:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005462:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005470:	2b00      	cmp	r3, #0
 8005472:	d00b      	beq.n	800548c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005474:	6a3b      	ldr	r3, [r7, #32]
 8005476:	f043 0302 	orr.w	r3, r3, #2
 800547a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005484:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800548c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005490:	2b00      	cmp	r3, #0
 8005492:	d01c      	beq.n	80054ce <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005494:	68f8      	ldr	r0, [r7, #12]
 8005496:	f7ff fe3b 	bl	8005110 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	6859      	ldr	r1, [r3, #4]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	4b0d      	ldr	r3, [pc, #52]	@ (80054dc <I2C_IsErrorOccurred+0x1bc>)
 80054a6:	400b      	ands	r3, r1
 80054a8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80054ae:	6a3b      	ldr	r3, [r7, #32]
 80054b0:	431a      	orrs	r2, r3
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2220      	movs	r2, #32
 80054ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80054ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3728      	adds	r7, #40	@ 0x28
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	fe00e800 	.word	0xfe00e800

080054e0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b087      	sub	sp, #28
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	607b      	str	r3, [r7, #4]
 80054ea:	460b      	mov	r3, r1
 80054ec:	817b      	strh	r3, [r7, #10]
 80054ee:	4613      	mov	r3, r2
 80054f0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80054f2:	897b      	ldrh	r3, [r7, #10]
 80054f4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80054f8:	7a7b      	ldrb	r3, [r7, #9]
 80054fa:	041b      	lsls	r3, r3, #16
 80054fc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005500:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005506:	6a3b      	ldr	r3, [r7, #32]
 8005508:	4313      	orrs	r3, r2
 800550a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800550e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	685a      	ldr	r2, [r3, #4]
 8005516:	6a3b      	ldr	r3, [r7, #32]
 8005518:	0d5b      	lsrs	r3, r3, #21
 800551a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800551e:	4b08      	ldr	r3, [pc, #32]	@ (8005540 <I2C_TransferConfig+0x60>)
 8005520:	430b      	orrs	r3, r1
 8005522:	43db      	mvns	r3, r3
 8005524:	ea02 0103 	and.w	r1, r2, r3
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	697a      	ldr	r2, [r7, #20]
 800552e:	430a      	orrs	r2, r1
 8005530:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005532:	bf00      	nop
 8005534:	371c      	adds	r7, #28
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop
 8005540:	03ff63ff 	.word	0x03ff63ff

08005544 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005544:	b480      	push	{r7}
 8005546:	b083      	sub	sp, #12
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005554:	b2db      	uxtb	r3, r3
 8005556:	2b20      	cmp	r3, #32
 8005558:	d138      	bne.n	80055cc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005560:	2b01      	cmp	r3, #1
 8005562:	d101      	bne.n	8005568 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005564:	2302      	movs	r3, #2
 8005566:	e032      	b.n	80055ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2224      	movs	r2, #36	@ 0x24
 8005574:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f022 0201 	bic.w	r2, r2, #1
 8005586:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005596:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	6819      	ldr	r1, [r3, #0]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	683a      	ldr	r2, [r7, #0]
 80055a4:	430a      	orrs	r2, r1
 80055a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f042 0201 	orr.w	r2, r2, #1
 80055b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2220      	movs	r2, #32
 80055bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80055c8:	2300      	movs	r3, #0
 80055ca:	e000      	b.n	80055ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80055cc:	2302      	movs	r3, #2
  }
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	370c      	adds	r7, #12
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr

080055da <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80055da:	b480      	push	{r7}
 80055dc:	b085      	sub	sp, #20
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
 80055e2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	2b20      	cmp	r3, #32
 80055ee:	d139      	bne.n	8005664 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d101      	bne.n	80055fe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80055fa:	2302      	movs	r3, #2
 80055fc:	e033      	b.n	8005666 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2201      	movs	r2, #1
 8005602:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2224      	movs	r2, #36	@ 0x24
 800560a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f022 0201 	bic.w	r2, r2, #1
 800561c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800562c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	021b      	lsls	r3, r3, #8
 8005632:	68fa      	ldr	r2, [r7, #12]
 8005634:	4313      	orrs	r3, r2
 8005636:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f042 0201 	orr.w	r2, r2, #1
 800564e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2220      	movs	r2, #32
 8005654:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005660:	2300      	movs	r3, #0
 8005662:	e000      	b.n	8005666 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005664:	2302      	movs	r3, #2
  }
}
 8005666:	4618      	mov	r0, r3
 8005668:	3714      	adds	r7, #20
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr
	...

08005674 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005674:	b480      	push	{r7}
 8005676:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005678:	4b04      	ldr	r3, [pc, #16]	@ (800568c <HAL_PWREx_GetVoltageRange+0x18>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8005680:	4618      	mov	r0, r3
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr
 800568a:	bf00      	nop
 800568c:	40007000 	.word	0x40007000

08005690 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005690:	b480      	push	{r7}
 8005692:	b085      	sub	sp, #20
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800569e:	d130      	bne.n	8005702 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80056a0:	4b23      	ldr	r3, [pc, #140]	@ (8005730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80056a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056ac:	d038      	beq.n	8005720 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80056ae:	4b20      	ldr	r3, [pc, #128]	@ (8005730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80056b6:	4a1e      	ldr	r2, [pc, #120]	@ (8005730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80056b8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80056bc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80056be:	4b1d      	ldr	r3, [pc, #116]	@ (8005734 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	2232      	movs	r2, #50	@ 0x32
 80056c4:	fb02 f303 	mul.w	r3, r2, r3
 80056c8:	4a1b      	ldr	r2, [pc, #108]	@ (8005738 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80056ca:	fba2 2303 	umull	r2, r3, r2, r3
 80056ce:	0c9b      	lsrs	r3, r3, #18
 80056d0:	3301      	adds	r3, #1
 80056d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80056d4:	e002      	b.n	80056dc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	3b01      	subs	r3, #1
 80056da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80056dc:	4b14      	ldr	r3, [pc, #80]	@ (8005730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80056de:	695b      	ldr	r3, [r3, #20]
 80056e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056e8:	d102      	bne.n	80056f0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d1f2      	bne.n	80056d6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80056f0:	4b0f      	ldr	r3, [pc, #60]	@ (8005730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80056f2:	695b      	ldr	r3, [r3, #20]
 80056f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056fc:	d110      	bne.n	8005720 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	e00f      	b.n	8005722 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005702:	4b0b      	ldr	r3, [pc, #44]	@ (8005730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800570a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800570e:	d007      	beq.n	8005720 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005710:	4b07      	ldr	r3, [pc, #28]	@ (8005730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005718:	4a05      	ldr	r2, [pc, #20]	@ (8005730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800571a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800571e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005720:	2300      	movs	r3, #0
}
 8005722:	4618      	mov	r0, r3
 8005724:	3714      	adds	r7, #20
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr
 800572e:	bf00      	nop
 8005730:	40007000 	.word	0x40007000
 8005734:	20000030 	.word	0x20000030
 8005738:	431bde83 	.word	0x431bde83

0800573c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b08a      	sub	sp, #40	@ 0x28
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d102      	bne.n	8005750 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	f000 bc4f 	b.w	8005fee <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005750:	4b97      	ldr	r3, [pc, #604]	@ (80059b0 <HAL_RCC_OscConfig+0x274>)
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	f003 030c 	and.w	r3, r3, #12
 8005758:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800575a:	4b95      	ldr	r3, [pc, #596]	@ (80059b0 <HAL_RCC_OscConfig+0x274>)
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	f003 0303 	and.w	r3, r3, #3
 8005762:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 0310 	and.w	r3, r3, #16
 800576c:	2b00      	cmp	r3, #0
 800576e:	f000 80e6 	beq.w	800593e <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005772:	6a3b      	ldr	r3, [r7, #32]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d007      	beq.n	8005788 <HAL_RCC_OscConfig+0x4c>
 8005778:	6a3b      	ldr	r3, [r7, #32]
 800577a:	2b0c      	cmp	r3, #12
 800577c:	f040 808d 	bne.w	800589a <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	2b01      	cmp	r3, #1
 8005784:	f040 8089 	bne.w	800589a <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005788:	4b89      	ldr	r3, [pc, #548]	@ (80059b0 <HAL_RCC_OscConfig+0x274>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 0302 	and.w	r3, r3, #2
 8005790:	2b00      	cmp	r3, #0
 8005792:	d006      	beq.n	80057a2 <HAL_RCC_OscConfig+0x66>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	69db      	ldr	r3, [r3, #28]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d102      	bne.n	80057a2 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	f000 bc26 	b.w	8005fee <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80057a6:	4b82      	ldr	r3, [pc, #520]	@ (80059b0 <HAL_RCC_OscConfig+0x274>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 0308 	and.w	r3, r3, #8
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d004      	beq.n	80057bc <HAL_RCC_OscConfig+0x80>
 80057b2:	4b7f      	ldr	r3, [pc, #508]	@ (80059b0 <HAL_RCC_OscConfig+0x274>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80057ba:	e005      	b.n	80057c8 <HAL_RCC_OscConfig+0x8c>
 80057bc:	4b7c      	ldr	r3, [pc, #496]	@ (80059b0 <HAL_RCC_OscConfig+0x274>)
 80057be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057c2:	091b      	lsrs	r3, r3, #4
 80057c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d224      	bcs.n	8005816 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057d0:	4618      	mov	r0, r3
 80057d2:	f000 fdd9 	bl	8006388 <RCC_SetFlashLatencyFromMSIRange>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d002      	beq.n	80057e2 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	f000 bc06 	b.w	8005fee <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80057e2:	4b73      	ldr	r3, [pc, #460]	@ (80059b0 <HAL_RCC_OscConfig+0x274>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a72      	ldr	r2, [pc, #456]	@ (80059b0 <HAL_RCC_OscConfig+0x274>)
 80057e8:	f043 0308 	orr.w	r3, r3, #8
 80057ec:	6013      	str	r3, [r2, #0]
 80057ee:	4b70      	ldr	r3, [pc, #448]	@ (80059b0 <HAL_RCC_OscConfig+0x274>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057fa:	496d      	ldr	r1, [pc, #436]	@ (80059b0 <HAL_RCC_OscConfig+0x274>)
 80057fc:	4313      	orrs	r3, r2
 80057fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005800:	4b6b      	ldr	r3, [pc, #428]	@ (80059b0 <HAL_RCC_OscConfig+0x274>)
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a1b      	ldr	r3, [r3, #32]
 800580c:	021b      	lsls	r3, r3, #8
 800580e:	4968      	ldr	r1, [pc, #416]	@ (80059b0 <HAL_RCC_OscConfig+0x274>)
 8005810:	4313      	orrs	r3, r2
 8005812:	604b      	str	r3, [r1, #4]
 8005814:	e025      	b.n	8005862 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005816:	4b66      	ldr	r3, [pc, #408]	@ (80059b0 <HAL_RCC_OscConfig+0x274>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a65      	ldr	r2, [pc, #404]	@ (80059b0 <HAL_RCC_OscConfig+0x274>)
 800581c:	f043 0308 	orr.w	r3, r3, #8
 8005820:	6013      	str	r3, [r2, #0]
 8005822:	4b63      	ldr	r3, [pc, #396]	@ (80059b0 <HAL_RCC_OscConfig+0x274>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800582e:	4960      	ldr	r1, [pc, #384]	@ (80059b0 <HAL_RCC_OscConfig+0x274>)
 8005830:	4313      	orrs	r3, r2
 8005832:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005834:	4b5e      	ldr	r3, [pc, #376]	@ (80059b0 <HAL_RCC_OscConfig+0x274>)
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6a1b      	ldr	r3, [r3, #32]
 8005840:	021b      	lsls	r3, r3, #8
 8005842:	495b      	ldr	r1, [pc, #364]	@ (80059b0 <HAL_RCC_OscConfig+0x274>)
 8005844:	4313      	orrs	r3, r2
 8005846:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005848:	6a3b      	ldr	r3, [r7, #32]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d109      	bne.n	8005862 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005852:	4618      	mov	r0, r3
 8005854:	f000 fd98 	bl	8006388 <RCC_SetFlashLatencyFromMSIRange>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d001      	beq.n	8005862 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e3c5      	b.n	8005fee <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005862:	f000 fccd 	bl	8006200 <HAL_RCC_GetSysClockFreq>
 8005866:	4602      	mov	r2, r0
 8005868:	4b51      	ldr	r3, [pc, #324]	@ (80059b0 <HAL_RCC_OscConfig+0x274>)
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	091b      	lsrs	r3, r3, #4
 800586e:	f003 030f 	and.w	r3, r3, #15
 8005872:	4950      	ldr	r1, [pc, #320]	@ (80059b4 <HAL_RCC_OscConfig+0x278>)
 8005874:	5ccb      	ldrb	r3, [r1, r3]
 8005876:	f003 031f 	and.w	r3, r3, #31
 800587a:	fa22 f303 	lsr.w	r3, r2, r3
 800587e:	4a4e      	ldr	r2, [pc, #312]	@ (80059b8 <HAL_RCC_OscConfig+0x27c>)
 8005880:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005882:	4b4e      	ldr	r3, [pc, #312]	@ (80059bc <HAL_RCC_OscConfig+0x280>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4618      	mov	r0, r3
 8005888:	f7fd fd2e 	bl	80032e8 <HAL_InitTick>
 800588c:	4603      	mov	r3, r0
 800588e:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8005890:	7dfb      	ldrb	r3, [r7, #23]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d052      	beq.n	800593c <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8005896:	7dfb      	ldrb	r3, [r7, #23]
 8005898:	e3a9      	b.n	8005fee <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	69db      	ldr	r3, [r3, #28]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d032      	beq.n	8005908 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80058a2:	4b43      	ldr	r3, [pc, #268]	@ (80059b0 <HAL_RCC_OscConfig+0x274>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a42      	ldr	r2, [pc, #264]	@ (80059b0 <HAL_RCC_OscConfig+0x274>)
 80058a8:	f043 0301 	orr.w	r3, r3, #1
 80058ac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80058ae:	f7fd fd6b 	bl	8003388 <HAL_GetTick>
 80058b2:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80058b4:	e008      	b.n	80058c8 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80058b6:	f7fd fd67 	bl	8003388 <HAL_GetTick>
 80058ba:	4602      	mov	r2, r0
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	1ad3      	subs	r3, r2, r3
 80058c0:	2b02      	cmp	r3, #2
 80058c2:	d901      	bls.n	80058c8 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80058c4:	2303      	movs	r3, #3
 80058c6:	e392      	b.n	8005fee <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80058c8:	4b39      	ldr	r3, [pc, #228]	@ (80059b0 <HAL_RCC_OscConfig+0x274>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 0302 	and.w	r3, r3, #2
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d0f0      	beq.n	80058b6 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80058d4:	4b36      	ldr	r3, [pc, #216]	@ (80059b0 <HAL_RCC_OscConfig+0x274>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a35      	ldr	r2, [pc, #212]	@ (80059b0 <HAL_RCC_OscConfig+0x274>)
 80058da:	f043 0308 	orr.w	r3, r3, #8
 80058de:	6013      	str	r3, [r2, #0]
 80058e0:	4b33      	ldr	r3, [pc, #204]	@ (80059b0 <HAL_RCC_OscConfig+0x274>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ec:	4930      	ldr	r1, [pc, #192]	@ (80059b0 <HAL_RCC_OscConfig+0x274>)
 80058ee:	4313      	orrs	r3, r2
 80058f0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80058f2:	4b2f      	ldr	r3, [pc, #188]	@ (80059b0 <HAL_RCC_OscConfig+0x274>)
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a1b      	ldr	r3, [r3, #32]
 80058fe:	021b      	lsls	r3, r3, #8
 8005900:	492b      	ldr	r1, [pc, #172]	@ (80059b0 <HAL_RCC_OscConfig+0x274>)
 8005902:	4313      	orrs	r3, r2
 8005904:	604b      	str	r3, [r1, #4]
 8005906:	e01a      	b.n	800593e <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005908:	4b29      	ldr	r3, [pc, #164]	@ (80059b0 <HAL_RCC_OscConfig+0x274>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a28      	ldr	r2, [pc, #160]	@ (80059b0 <HAL_RCC_OscConfig+0x274>)
 800590e:	f023 0301 	bic.w	r3, r3, #1
 8005912:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005914:	f7fd fd38 	bl	8003388 <HAL_GetTick>
 8005918:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800591a:	e008      	b.n	800592e <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800591c:	f7fd fd34 	bl	8003388 <HAL_GetTick>
 8005920:	4602      	mov	r2, r0
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	2b02      	cmp	r3, #2
 8005928:	d901      	bls.n	800592e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800592a:	2303      	movs	r3, #3
 800592c:	e35f      	b.n	8005fee <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800592e:	4b20      	ldr	r3, [pc, #128]	@ (80059b0 <HAL_RCC_OscConfig+0x274>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 0302 	and.w	r3, r3, #2
 8005936:	2b00      	cmp	r3, #0
 8005938:	d1f0      	bne.n	800591c <HAL_RCC_OscConfig+0x1e0>
 800593a:	e000      	b.n	800593e <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800593c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 0301 	and.w	r3, r3, #1
 8005946:	2b00      	cmp	r3, #0
 8005948:	d073      	beq.n	8005a32 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800594a:	6a3b      	ldr	r3, [r7, #32]
 800594c:	2b08      	cmp	r3, #8
 800594e:	d005      	beq.n	800595c <HAL_RCC_OscConfig+0x220>
 8005950:	6a3b      	ldr	r3, [r7, #32]
 8005952:	2b0c      	cmp	r3, #12
 8005954:	d10e      	bne.n	8005974 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	2b03      	cmp	r3, #3
 800595a:	d10b      	bne.n	8005974 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800595c:	4b14      	ldr	r3, [pc, #80]	@ (80059b0 <HAL_RCC_OscConfig+0x274>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005964:	2b00      	cmp	r3, #0
 8005966:	d063      	beq.n	8005a30 <HAL_RCC_OscConfig+0x2f4>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d15f      	bne.n	8005a30 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	e33c      	b.n	8005fee <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800597c:	d106      	bne.n	800598c <HAL_RCC_OscConfig+0x250>
 800597e:	4b0c      	ldr	r3, [pc, #48]	@ (80059b0 <HAL_RCC_OscConfig+0x274>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a0b      	ldr	r2, [pc, #44]	@ (80059b0 <HAL_RCC_OscConfig+0x274>)
 8005984:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005988:	6013      	str	r3, [r2, #0]
 800598a:	e025      	b.n	80059d8 <HAL_RCC_OscConfig+0x29c>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005994:	d114      	bne.n	80059c0 <HAL_RCC_OscConfig+0x284>
 8005996:	4b06      	ldr	r3, [pc, #24]	@ (80059b0 <HAL_RCC_OscConfig+0x274>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a05      	ldr	r2, [pc, #20]	@ (80059b0 <HAL_RCC_OscConfig+0x274>)
 800599c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80059a0:	6013      	str	r3, [r2, #0]
 80059a2:	4b03      	ldr	r3, [pc, #12]	@ (80059b0 <HAL_RCC_OscConfig+0x274>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a02      	ldr	r2, [pc, #8]	@ (80059b0 <HAL_RCC_OscConfig+0x274>)
 80059a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059ac:	6013      	str	r3, [r2, #0]
 80059ae:	e013      	b.n	80059d8 <HAL_RCC_OscConfig+0x29c>
 80059b0:	40021000 	.word	0x40021000
 80059b4:	08008188 	.word	0x08008188
 80059b8:	20000030 	.word	0x20000030
 80059bc:	20000034 	.word	0x20000034
 80059c0:	4b8f      	ldr	r3, [pc, #572]	@ (8005c00 <HAL_RCC_OscConfig+0x4c4>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a8e      	ldr	r2, [pc, #568]	@ (8005c00 <HAL_RCC_OscConfig+0x4c4>)
 80059c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059ca:	6013      	str	r3, [r2, #0]
 80059cc:	4b8c      	ldr	r3, [pc, #560]	@ (8005c00 <HAL_RCC_OscConfig+0x4c4>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a8b      	ldr	r2, [pc, #556]	@ (8005c00 <HAL_RCC_OscConfig+0x4c4>)
 80059d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80059d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d013      	beq.n	8005a08 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059e0:	f7fd fcd2 	bl	8003388 <HAL_GetTick>
 80059e4:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059e6:	e008      	b.n	80059fa <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059e8:	f7fd fcce 	bl	8003388 <HAL_GetTick>
 80059ec:	4602      	mov	r2, r0
 80059ee:	69bb      	ldr	r3, [r7, #24]
 80059f0:	1ad3      	subs	r3, r2, r3
 80059f2:	2b64      	cmp	r3, #100	@ 0x64
 80059f4:	d901      	bls.n	80059fa <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	e2f9      	b.n	8005fee <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059fa:	4b81      	ldr	r3, [pc, #516]	@ (8005c00 <HAL_RCC_OscConfig+0x4c4>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d0f0      	beq.n	80059e8 <HAL_RCC_OscConfig+0x2ac>
 8005a06:	e014      	b.n	8005a32 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a08:	f7fd fcbe 	bl	8003388 <HAL_GetTick>
 8005a0c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a0e:	e008      	b.n	8005a22 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a10:	f7fd fcba 	bl	8003388 <HAL_GetTick>
 8005a14:	4602      	mov	r2, r0
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	2b64      	cmp	r3, #100	@ 0x64
 8005a1c:	d901      	bls.n	8005a22 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8005a1e:	2303      	movs	r3, #3
 8005a20:	e2e5      	b.n	8005fee <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a22:	4b77      	ldr	r3, [pc, #476]	@ (8005c00 <HAL_RCC_OscConfig+0x4c4>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d1f0      	bne.n	8005a10 <HAL_RCC_OscConfig+0x2d4>
 8005a2e:	e000      	b.n	8005a32 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 0302 	and.w	r3, r3, #2
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d060      	beq.n	8005b00 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005a3e:	6a3b      	ldr	r3, [r7, #32]
 8005a40:	2b04      	cmp	r3, #4
 8005a42:	d005      	beq.n	8005a50 <HAL_RCC_OscConfig+0x314>
 8005a44:	6a3b      	ldr	r3, [r7, #32]
 8005a46:	2b0c      	cmp	r3, #12
 8005a48:	d119      	bne.n	8005a7e <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	2b02      	cmp	r3, #2
 8005a4e:	d116      	bne.n	8005a7e <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a50:	4b6b      	ldr	r3, [pc, #428]	@ (8005c00 <HAL_RCC_OscConfig+0x4c4>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d005      	beq.n	8005a68 <HAL_RCC_OscConfig+0x32c>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d101      	bne.n	8005a68 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e2c2      	b.n	8005fee <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a68:	4b65      	ldr	r3, [pc, #404]	@ (8005c00 <HAL_RCC_OscConfig+0x4c4>)
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	691b      	ldr	r3, [r3, #16]
 8005a74:	061b      	lsls	r3, r3, #24
 8005a76:	4962      	ldr	r1, [pc, #392]	@ (8005c00 <HAL_RCC_OscConfig+0x4c4>)
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a7c:	e040      	b.n	8005b00 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d023      	beq.n	8005ace <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a86:	4b5e      	ldr	r3, [pc, #376]	@ (8005c00 <HAL_RCC_OscConfig+0x4c4>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a5d      	ldr	r2, [pc, #372]	@ (8005c00 <HAL_RCC_OscConfig+0x4c4>)
 8005a8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a92:	f7fd fc79 	bl	8003388 <HAL_GetTick>
 8005a96:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a98:	e008      	b.n	8005aac <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a9a:	f7fd fc75 	bl	8003388 <HAL_GetTick>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	69bb      	ldr	r3, [r7, #24]
 8005aa2:	1ad3      	subs	r3, r2, r3
 8005aa4:	2b02      	cmp	r3, #2
 8005aa6:	d901      	bls.n	8005aac <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8005aa8:	2303      	movs	r3, #3
 8005aaa:	e2a0      	b.n	8005fee <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005aac:	4b54      	ldr	r3, [pc, #336]	@ (8005c00 <HAL_RCC_OscConfig+0x4c4>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d0f0      	beq.n	8005a9a <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ab8:	4b51      	ldr	r3, [pc, #324]	@ (8005c00 <HAL_RCC_OscConfig+0x4c4>)
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	691b      	ldr	r3, [r3, #16]
 8005ac4:	061b      	lsls	r3, r3, #24
 8005ac6:	494e      	ldr	r1, [pc, #312]	@ (8005c00 <HAL_RCC_OscConfig+0x4c4>)
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	604b      	str	r3, [r1, #4]
 8005acc:	e018      	b.n	8005b00 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ace:	4b4c      	ldr	r3, [pc, #304]	@ (8005c00 <HAL_RCC_OscConfig+0x4c4>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a4b      	ldr	r2, [pc, #300]	@ (8005c00 <HAL_RCC_OscConfig+0x4c4>)
 8005ad4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ad8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ada:	f7fd fc55 	bl	8003388 <HAL_GetTick>
 8005ade:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005ae0:	e008      	b.n	8005af4 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ae2:	f7fd fc51 	bl	8003388 <HAL_GetTick>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	1ad3      	subs	r3, r2, r3
 8005aec:	2b02      	cmp	r3, #2
 8005aee:	d901      	bls.n	8005af4 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8005af0:	2303      	movs	r3, #3
 8005af2:	e27c      	b.n	8005fee <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005af4:	4b42      	ldr	r3, [pc, #264]	@ (8005c00 <HAL_RCC_OscConfig+0x4c4>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d1f0      	bne.n	8005ae2 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 0308 	and.w	r3, r3, #8
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	f000 8082 	beq.w	8005c12 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	695b      	ldr	r3, [r3, #20]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d05f      	beq.n	8005bd6 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8005b16:	4b3a      	ldr	r3, [pc, #232]	@ (8005c00 <HAL_RCC_OscConfig+0x4c4>)
 8005b18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b1c:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	699a      	ldr	r2, [r3, #24]
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	f003 0310 	and.w	r3, r3, #16
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d037      	beq.n	8005b9c <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	f003 0302 	and.w	r3, r3, #2
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d006      	beq.n	8005b44 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d101      	bne.n	8005b44 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	e254      	b.n	8005fee <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	f003 0301 	and.w	r3, r3, #1
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d01b      	beq.n	8005b86 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8005b4e:	4b2c      	ldr	r3, [pc, #176]	@ (8005c00 <HAL_RCC_OscConfig+0x4c4>)
 8005b50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b54:	4a2a      	ldr	r2, [pc, #168]	@ (8005c00 <HAL_RCC_OscConfig+0x4c4>)
 8005b56:	f023 0301 	bic.w	r3, r3, #1
 8005b5a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005b5e:	f7fd fc13 	bl	8003388 <HAL_GetTick>
 8005b62:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b64:	e008      	b.n	8005b78 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b66:	f7fd fc0f 	bl	8003388 <HAL_GetTick>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	1ad3      	subs	r3, r2, r3
 8005b70:	2b11      	cmp	r3, #17
 8005b72:	d901      	bls.n	8005b78 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8005b74:	2303      	movs	r3, #3
 8005b76:	e23a      	b.n	8005fee <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b78:	4b21      	ldr	r3, [pc, #132]	@ (8005c00 <HAL_RCC_OscConfig+0x4c4>)
 8005b7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b7e:	f003 0302 	and.w	r3, r3, #2
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d1ef      	bne.n	8005b66 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8005b86:	4b1e      	ldr	r3, [pc, #120]	@ (8005c00 <HAL_RCC_OscConfig+0x4c4>)
 8005b88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b8c:	f023 0210 	bic.w	r2, r3, #16
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	699b      	ldr	r3, [r3, #24]
 8005b94:	491a      	ldr	r1, [pc, #104]	@ (8005c00 <HAL_RCC_OscConfig+0x4c4>)
 8005b96:	4313      	orrs	r3, r2
 8005b98:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b9c:	4b18      	ldr	r3, [pc, #96]	@ (8005c00 <HAL_RCC_OscConfig+0x4c4>)
 8005b9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ba2:	4a17      	ldr	r2, [pc, #92]	@ (8005c00 <HAL_RCC_OscConfig+0x4c4>)
 8005ba4:	f043 0301 	orr.w	r3, r3, #1
 8005ba8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bac:	f7fd fbec 	bl	8003388 <HAL_GetTick>
 8005bb0:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005bb2:	e008      	b.n	8005bc6 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bb4:	f7fd fbe8 	bl	8003388 <HAL_GetTick>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	2b11      	cmp	r3, #17
 8005bc0:	d901      	bls.n	8005bc6 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	e213      	b.n	8005fee <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005bc6:	4b0e      	ldr	r3, [pc, #56]	@ (8005c00 <HAL_RCC_OscConfig+0x4c4>)
 8005bc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005bcc:	f003 0302 	and.w	r3, r3, #2
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d0ef      	beq.n	8005bb4 <HAL_RCC_OscConfig+0x478>
 8005bd4:	e01d      	b.n	8005c12 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005bd6:	4b0a      	ldr	r3, [pc, #40]	@ (8005c00 <HAL_RCC_OscConfig+0x4c4>)
 8005bd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005bdc:	4a08      	ldr	r2, [pc, #32]	@ (8005c00 <HAL_RCC_OscConfig+0x4c4>)
 8005bde:	f023 0301 	bic.w	r3, r3, #1
 8005be2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005be6:	f7fd fbcf 	bl	8003388 <HAL_GetTick>
 8005bea:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005bec:	e00a      	b.n	8005c04 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bee:	f7fd fbcb 	bl	8003388 <HAL_GetTick>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	1ad3      	subs	r3, r2, r3
 8005bf8:	2b11      	cmp	r3, #17
 8005bfa:	d903      	bls.n	8005c04 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	e1f6      	b.n	8005fee <HAL_RCC_OscConfig+0x8b2>
 8005c00:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005c04:	4ba9      	ldr	r3, [pc, #676]	@ (8005eac <HAL_RCC_OscConfig+0x770>)
 8005c06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c0a:	f003 0302 	and.w	r3, r3, #2
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d1ed      	bne.n	8005bee <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 0304 	and.w	r3, r3, #4
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	f000 80bd 	beq.w	8005d9a <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c20:	2300      	movs	r3, #0
 8005c22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005c26:	4ba1      	ldr	r3, [pc, #644]	@ (8005eac <HAL_RCC_OscConfig+0x770>)
 8005c28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d10e      	bne.n	8005c50 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c32:	4b9e      	ldr	r3, [pc, #632]	@ (8005eac <HAL_RCC_OscConfig+0x770>)
 8005c34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c36:	4a9d      	ldr	r2, [pc, #628]	@ (8005eac <HAL_RCC_OscConfig+0x770>)
 8005c38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c3e:	4b9b      	ldr	r3, [pc, #620]	@ (8005eac <HAL_RCC_OscConfig+0x770>)
 8005c40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c46:	60fb      	str	r3, [r7, #12]
 8005c48:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c50:	4b97      	ldr	r3, [pc, #604]	@ (8005eb0 <HAL_RCC_OscConfig+0x774>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d118      	bne.n	8005c8e <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c5c:	4b94      	ldr	r3, [pc, #592]	@ (8005eb0 <HAL_RCC_OscConfig+0x774>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a93      	ldr	r2, [pc, #588]	@ (8005eb0 <HAL_RCC_OscConfig+0x774>)
 8005c62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c66:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c68:	f7fd fb8e 	bl	8003388 <HAL_GetTick>
 8005c6c:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c6e:	e008      	b.n	8005c82 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c70:	f7fd fb8a 	bl	8003388 <HAL_GetTick>
 8005c74:	4602      	mov	r2, r0
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	1ad3      	subs	r3, r2, r3
 8005c7a:	2b02      	cmp	r3, #2
 8005c7c:	d901      	bls.n	8005c82 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	e1b5      	b.n	8005fee <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c82:	4b8b      	ldr	r3, [pc, #556]	@ (8005eb0 <HAL_RCC_OscConfig+0x774>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d0f0      	beq.n	8005c70 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	f003 0301 	and.w	r3, r3, #1
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d02c      	beq.n	8005cf4 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8005c9a:	4b84      	ldr	r3, [pc, #528]	@ (8005eac <HAL_RCC_OscConfig+0x770>)
 8005c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ca0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cac:	497f      	ldr	r1, [pc, #508]	@ (8005eac <HAL_RCC_OscConfig+0x770>)
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	f003 0304 	and.w	r3, r3, #4
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d010      	beq.n	8005ce2 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005cc0:	4b7a      	ldr	r3, [pc, #488]	@ (8005eac <HAL_RCC_OscConfig+0x770>)
 8005cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cc6:	4a79      	ldr	r2, [pc, #484]	@ (8005eac <HAL_RCC_OscConfig+0x770>)
 8005cc8:	f043 0304 	orr.w	r3, r3, #4
 8005ccc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005cd0:	4b76      	ldr	r3, [pc, #472]	@ (8005eac <HAL_RCC_OscConfig+0x770>)
 8005cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cd6:	4a75      	ldr	r2, [pc, #468]	@ (8005eac <HAL_RCC_OscConfig+0x770>)
 8005cd8:	f043 0301 	orr.w	r3, r3, #1
 8005cdc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005ce0:	e018      	b.n	8005d14 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005ce2:	4b72      	ldr	r3, [pc, #456]	@ (8005eac <HAL_RCC_OscConfig+0x770>)
 8005ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ce8:	4a70      	ldr	r2, [pc, #448]	@ (8005eac <HAL_RCC_OscConfig+0x770>)
 8005cea:	f043 0301 	orr.w	r3, r3, #1
 8005cee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005cf2:	e00f      	b.n	8005d14 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005cf4:	4b6d      	ldr	r3, [pc, #436]	@ (8005eac <HAL_RCC_OscConfig+0x770>)
 8005cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cfa:	4a6c      	ldr	r2, [pc, #432]	@ (8005eac <HAL_RCC_OscConfig+0x770>)
 8005cfc:	f023 0301 	bic.w	r3, r3, #1
 8005d00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005d04:	4b69      	ldr	r3, [pc, #420]	@ (8005eac <HAL_RCC_OscConfig+0x770>)
 8005d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d0a:	4a68      	ldr	r2, [pc, #416]	@ (8005eac <HAL_RCC_OscConfig+0x770>)
 8005d0c:	f023 0304 	bic.w	r3, r3, #4
 8005d10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d016      	beq.n	8005d4a <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d1c:	f7fd fb34 	bl	8003388 <HAL_GetTick>
 8005d20:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d22:	e00a      	b.n	8005d3a <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d24:	f7fd fb30 	bl	8003388 <HAL_GetTick>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	69bb      	ldr	r3, [r7, #24]
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d901      	bls.n	8005d3a <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8005d36:	2303      	movs	r3, #3
 8005d38:	e159      	b.n	8005fee <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d3a:	4b5c      	ldr	r3, [pc, #368]	@ (8005eac <HAL_RCC_OscConfig+0x770>)
 8005d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d40:	f003 0302 	and.w	r3, r3, #2
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d0ed      	beq.n	8005d24 <HAL_RCC_OscConfig+0x5e8>
 8005d48:	e01d      	b.n	8005d86 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d4a:	f7fd fb1d 	bl	8003388 <HAL_GetTick>
 8005d4e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005d50:	e00a      	b.n	8005d68 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d52:	f7fd fb19 	bl	8003388 <HAL_GetTick>
 8005d56:	4602      	mov	r2, r0
 8005d58:	69bb      	ldr	r3, [r7, #24]
 8005d5a:	1ad3      	subs	r3, r2, r3
 8005d5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d901      	bls.n	8005d68 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8005d64:	2303      	movs	r3, #3
 8005d66:	e142      	b.n	8005fee <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005d68:	4b50      	ldr	r3, [pc, #320]	@ (8005eac <HAL_RCC_OscConfig+0x770>)
 8005d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d6e:	f003 0302 	and.w	r3, r3, #2
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d1ed      	bne.n	8005d52 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8005d76:	4b4d      	ldr	r3, [pc, #308]	@ (8005eac <HAL_RCC_OscConfig+0x770>)
 8005d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d7c:	4a4b      	ldr	r2, [pc, #300]	@ (8005eac <HAL_RCC_OscConfig+0x770>)
 8005d7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d82:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d105      	bne.n	8005d9a <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d8e:	4b47      	ldr	r3, [pc, #284]	@ (8005eac <HAL_RCC_OscConfig+0x770>)
 8005d90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d92:	4a46      	ldr	r2, [pc, #280]	@ (8005eac <HAL_RCC_OscConfig+0x770>)
 8005d94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d98:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 0320 	and.w	r3, r3, #32
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d03c      	beq.n	8005e20 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d01c      	beq.n	8005de8 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005dae:	4b3f      	ldr	r3, [pc, #252]	@ (8005eac <HAL_RCC_OscConfig+0x770>)
 8005db0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005db4:	4a3d      	ldr	r2, [pc, #244]	@ (8005eac <HAL_RCC_OscConfig+0x770>)
 8005db6:	f043 0301 	orr.w	r3, r3, #1
 8005dba:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dbe:	f7fd fae3 	bl	8003388 <HAL_GetTick>
 8005dc2:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005dc4:	e008      	b.n	8005dd8 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005dc6:	f7fd fadf 	bl	8003388 <HAL_GetTick>
 8005dca:	4602      	mov	r2, r0
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	1ad3      	subs	r3, r2, r3
 8005dd0:	2b02      	cmp	r3, #2
 8005dd2:	d901      	bls.n	8005dd8 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8005dd4:	2303      	movs	r3, #3
 8005dd6:	e10a      	b.n	8005fee <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005dd8:	4b34      	ldr	r3, [pc, #208]	@ (8005eac <HAL_RCC_OscConfig+0x770>)
 8005dda:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005dde:	f003 0302 	and.w	r3, r3, #2
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d0ef      	beq.n	8005dc6 <HAL_RCC_OscConfig+0x68a>
 8005de6:	e01b      	b.n	8005e20 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005de8:	4b30      	ldr	r3, [pc, #192]	@ (8005eac <HAL_RCC_OscConfig+0x770>)
 8005dea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005dee:	4a2f      	ldr	r2, [pc, #188]	@ (8005eac <HAL_RCC_OscConfig+0x770>)
 8005df0:	f023 0301 	bic.w	r3, r3, #1
 8005df4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005df8:	f7fd fac6 	bl	8003388 <HAL_GetTick>
 8005dfc:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005dfe:	e008      	b.n	8005e12 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005e00:	f7fd fac2 	bl	8003388 <HAL_GetTick>
 8005e04:	4602      	mov	r2, r0
 8005e06:	69bb      	ldr	r3, [r7, #24]
 8005e08:	1ad3      	subs	r3, r2, r3
 8005e0a:	2b02      	cmp	r3, #2
 8005e0c:	d901      	bls.n	8005e12 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8005e0e:	2303      	movs	r3, #3
 8005e10:	e0ed      	b.n	8005fee <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005e12:	4b26      	ldr	r3, [pc, #152]	@ (8005eac <HAL_RCC_OscConfig+0x770>)
 8005e14:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005e18:	f003 0302 	and.w	r3, r3, #2
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d1ef      	bne.n	8005e00 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	f000 80e1 	beq.w	8005fec <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e2e:	2b02      	cmp	r3, #2
 8005e30:	f040 80b5 	bne.w	8005f9e <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005e34:	4b1d      	ldr	r3, [pc, #116]	@ (8005eac <HAL_RCC_OscConfig+0x770>)
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	f003 0203 	and.w	r2, r3, #3
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d124      	bne.n	8005e92 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e52:	3b01      	subs	r3, #1
 8005e54:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d11b      	bne.n	8005e92 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e5a:	69fb      	ldr	r3, [r7, #28]
 8005e5c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e64:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d113      	bne.n	8005e92 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e74:	085b      	lsrs	r3, r3, #1
 8005e76:	3b01      	subs	r3, #1
 8005e78:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d109      	bne.n	8005e92 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e88:	085b      	lsrs	r3, r3, #1
 8005e8a:	3b01      	subs	r3, #1
 8005e8c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d05f      	beq.n	8005f52 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005e92:	6a3b      	ldr	r3, [r7, #32]
 8005e94:	2b0c      	cmp	r3, #12
 8005e96:	d05a      	beq.n	8005f4e <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005e98:	4b04      	ldr	r3, [pc, #16]	@ (8005eac <HAL_RCC_OscConfig+0x770>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a03      	ldr	r2, [pc, #12]	@ (8005eac <HAL_RCC_OscConfig+0x770>)
 8005e9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005ea2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005ea4:	f7fd fa70 	bl	8003388 <HAL_GetTick>
 8005ea8:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005eaa:	e00c      	b.n	8005ec6 <HAL_RCC_OscConfig+0x78a>
 8005eac:	40021000 	.word	0x40021000
 8005eb0:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005eb4:	f7fd fa68 	bl	8003388 <HAL_GetTick>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	69bb      	ldr	r3, [r7, #24]
 8005ebc:	1ad3      	subs	r3, r2, r3
 8005ebe:	2b02      	cmp	r3, #2
 8005ec0:	d901      	bls.n	8005ec6 <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8005ec2:	2303      	movs	r3, #3
 8005ec4:	e093      	b.n	8005fee <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ec6:	4b4c      	ldr	r3, [pc, #304]	@ (8005ff8 <HAL_RCC_OscConfig+0x8bc>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d1f0      	bne.n	8005eb4 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ed2:	4b49      	ldr	r3, [pc, #292]	@ (8005ff8 <HAL_RCC_OscConfig+0x8bc>)
 8005ed4:	68da      	ldr	r2, [r3, #12]
 8005ed6:	4b49      	ldr	r3, [pc, #292]	@ (8005ffc <HAL_RCC_OscConfig+0x8c0>)
 8005ed8:	4013      	ands	r3, r2
 8005eda:	687a      	ldr	r2, [r7, #4]
 8005edc:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005ee2:	3a01      	subs	r2, #1
 8005ee4:	0112      	lsls	r2, r2, #4
 8005ee6:	4311      	orrs	r1, r2
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005eec:	0212      	lsls	r2, r2, #8
 8005eee:	4311      	orrs	r1, r2
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005ef4:	0852      	lsrs	r2, r2, #1
 8005ef6:	3a01      	subs	r2, #1
 8005ef8:	0552      	lsls	r2, r2, #21
 8005efa:	4311      	orrs	r1, r2
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005f00:	0852      	lsrs	r2, r2, #1
 8005f02:	3a01      	subs	r2, #1
 8005f04:	0652      	lsls	r2, r2, #25
 8005f06:	430a      	orrs	r2, r1
 8005f08:	493b      	ldr	r1, [pc, #236]	@ (8005ff8 <HAL_RCC_OscConfig+0x8bc>)
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005f0e:	4b3a      	ldr	r3, [pc, #232]	@ (8005ff8 <HAL_RCC_OscConfig+0x8bc>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a39      	ldr	r2, [pc, #228]	@ (8005ff8 <HAL_RCC_OscConfig+0x8bc>)
 8005f14:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005f18:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005f1a:	4b37      	ldr	r3, [pc, #220]	@ (8005ff8 <HAL_RCC_OscConfig+0x8bc>)
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	4a36      	ldr	r2, [pc, #216]	@ (8005ff8 <HAL_RCC_OscConfig+0x8bc>)
 8005f20:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005f24:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005f26:	f7fd fa2f 	bl	8003388 <HAL_GetTick>
 8005f2a:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f2c:	e008      	b.n	8005f40 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f2e:	f7fd fa2b 	bl	8003388 <HAL_GetTick>
 8005f32:	4602      	mov	r2, r0
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	1ad3      	subs	r3, r2, r3
 8005f38:	2b02      	cmp	r3, #2
 8005f3a:	d901      	bls.n	8005f40 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8005f3c:	2303      	movs	r3, #3
 8005f3e:	e056      	b.n	8005fee <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f40:	4b2d      	ldr	r3, [pc, #180]	@ (8005ff8 <HAL_RCC_OscConfig+0x8bc>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d0f0      	beq.n	8005f2e <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005f4c:	e04e      	b.n	8005fec <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e04d      	b.n	8005fee <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f52:	4b29      	ldr	r3, [pc, #164]	@ (8005ff8 <HAL_RCC_OscConfig+0x8bc>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d146      	bne.n	8005fec <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005f5e:	4b26      	ldr	r3, [pc, #152]	@ (8005ff8 <HAL_RCC_OscConfig+0x8bc>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a25      	ldr	r2, [pc, #148]	@ (8005ff8 <HAL_RCC_OscConfig+0x8bc>)
 8005f64:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005f68:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005f6a:	4b23      	ldr	r3, [pc, #140]	@ (8005ff8 <HAL_RCC_OscConfig+0x8bc>)
 8005f6c:	68db      	ldr	r3, [r3, #12]
 8005f6e:	4a22      	ldr	r2, [pc, #136]	@ (8005ff8 <HAL_RCC_OscConfig+0x8bc>)
 8005f70:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005f74:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005f76:	f7fd fa07 	bl	8003388 <HAL_GetTick>
 8005f7a:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f7c:	e008      	b.n	8005f90 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f7e:	f7fd fa03 	bl	8003388 <HAL_GetTick>
 8005f82:	4602      	mov	r2, r0
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	1ad3      	subs	r3, r2, r3
 8005f88:	2b02      	cmp	r3, #2
 8005f8a:	d901      	bls.n	8005f90 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8005f8c:	2303      	movs	r3, #3
 8005f8e:	e02e      	b.n	8005fee <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f90:	4b19      	ldr	r3, [pc, #100]	@ (8005ff8 <HAL_RCC_OscConfig+0x8bc>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d0f0      	beq.n	8005f7e <HAL_RCC_OscConfig+0x842>
 8005f9c:	e026      	b.n	8005fec <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005f9e:	6a3b      	ldr	r3, [r7, #32]
 8005fa0:	2b0c      	cmp	r3, #12
 8005fa2:	d021      	beq.n	8005fe8 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fa4:	4b14      	ldr	r3, [pc, #80]	@ (8005ff8 <HAL_RCC_OscConfig+0x8bc>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a13      	ldr	r2, [pc, #76]	@ (8005ff8 <HAL_RCC_OscConfig+0x8bc>)
 8005faa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005fae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fb0:	f7fd f9ea 	bl	8003388 <HAL_GetTick>
 8005fb4:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005fb6:	e008      	b.n	8005fca <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fb8:	f7fd f9e6 	bl	8003388 <HAL_GetTick>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	1ad3      	subs	r3, r2, r3
 8005fc2:	2b02      	cmp	r3, #2
 8005fc4:	d901      	bls.n	8005fca <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8005fc6:	2303      	movs	r3, #3
 8005fc8:	e011      	b.n	8005fee <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005fca:	4b0b      	ldr	r3, [pc, #44]	@ (8005ff8 <HAL_RCC_OscConfig+0x8bc>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d1f0      	bne.n	8005fb8 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8005fd6:	4b08      	ldr	r3, [pc, #32]	@ (8005ff8 <HAL_RCC_OscConfig+0x8bc>)
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	4a07      	ldr	r2, [pc, #28]	@ (8005ff8 <HAL_RCC_OscConfig+0x8bc>)
 8005fdc:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8005fe0:	f023 0303 	bic.w	r3, r3, #3
 8005fe4:	60d3      	str	r3, [r2, #12]
 8005fe6:	e001      	b.n	8005fec <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e000      	b.n	8005fee <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8005fec:	2300      	movs	r3, #0
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3728      	adds	r7, #40	@ 0x28
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	40021000 	.word	0x40021000
 8005ffc:	f99f808c 	.word	0xf99f808c

08006000 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b084      	sub	sp, #16
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d101      	bne.n	8006014 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006010:	2301      	movs	r3, #1
 8006012:	e0e7      	b.n	80061e4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006014:	4b75      	ldr	r3, [pc, #468]	@ (80061ec <HAL_RCC_ClockConfig+0x1ec>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f003 0307 	and.w	r3, r3, #7
 800601c:	683a      	ldr	r2, [r7, #0]
 800601e:	429a      	cmp	r2, r3
 8006020:	d910      	bls.n	8006044 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006022:	4b72      	ldr	r3, [pc, #456]	@ (80061ec <HAL_RCC_ClockConfig+0x1ec>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f023 0207 	bic.w	r2, r3, #7
 800602a:	4970      	ldr	r1, [pc, #448]	@ (80061ec <HAL_RCC_ClockConfig+0x1ec>)
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	4313      	orrs	r3, r2
 8006030:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006032:	4b6e      	ldr	r3, [pc, #440]	@ (80061ec <HAL_RCC_ClockConfig+0x1ec>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f003 0307 	and.w	r3, r3, #7
 800603a:	683a      	ldr	r2, [r7, #0]
 800603c:	429a      	cmp	r2, r3
 800603e:	d001      	beq.n	8006044 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	e0cf      	b.n	80061e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f003 0302 	and.w	r3, r3, #2
 800604c:	2b00      	cmp	r3, #0
 800604e:	d010      	beq.n	8006072 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	689a      	ldr	r2, [r3, #8]
 8006054:	4b66      	ldr	r3, [pc, #408]	@ (80061f0 <HAL_RCC_ClockConfig+0x1f0>)
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800605c:	429a      	cmp	r2, r3
 800605e:	d908      	bls.n	8006072 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006060:	4b63      	ldr	r3, [pc, #396]	@ (80061f0 <HAL_RCC_ClockConfig+0x1f0>)
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	4960      	ldr	r1, [pc, #384]	@ (80061f0 <HAL_RCC_ClockConfig+0x1f0>)
 800606e:	4313      	orrs	r3, r2
 8006070:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 0301 	and.w	r3, r3, #1
 800607a:	2b00      	cmp	r3, #0
 800607c:	d04c      	beq.n	8006118 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	2b03      	cmp	r3, #3
 8006084:	d107      	bne.n	8006096 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006086:	4b5a      	ldr	r3, [pc, #360]	@ (80061f0 <HAL_RCC_ClockConfig+0x1f0>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800608e:	2b00      	cmp	r3, #0
 8006090:	d121      	bne.n	80060d6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e0a6      	b.n	80061e4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	2b02      	cmp	r3, #2
 800609c:	d107      	bne.n	80060ae <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800609e:	4b54      	ldr	r3, [pc, #336]	@ (80061f0 <HAL_RCC_ClockConfig+0x1f0>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d115      	bne.n	80060d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e09a      	b.n	80061e4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d107      	bne.n	80060c6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80060b6:	4b4e      	ldr	r3, [pc, #312]	@ (80061f0 <HAL_RCC_ClockConfig+0x1f0>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f003 0302 	and.w	r3, r3, #2
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d109      	bne.n	80060d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e08e      	b.n	80061e4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80060c6:	4b4a      	ldr	r3, [pc, #296]	@ (80061f0 <HAL_RCC_ClockConfig+0x1f0>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d101      	bne.n	80060d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	e086      	b.n	80061e4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80060d6:	4b46      	ldr	r3, [pc, #280]	@ (80061f0 <HAL_RCC_ClockConfig+0x1f0>)
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	f023 0203 	bic.w	r2, r3, #3
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	4943      	ldr	r1, [pc, #268]	@ (80061f0 <HAL_RCC_ClockConfig+0x1f0>)
 80060e4:	4313      	orrs	r3, r2
 80060e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060e8:	f7fd f94e 	bl	8003388 <HAL_GetTick>
 80060ec:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060ee:	e00a      	b.n	8006106 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060f0:	f7fd f94a 	bl	8003388 <HAL_GetTick>
 80060f4:	4602      	mov	r2, r0
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	1ad3      	subs	r3, r2, r3
 80060fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060fe:	4293      	cmp	r3, r2
 8006100:	d901      	bls.n	8006106 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006102:	2303      	movs	r3, #3
 8006104:	e06e      	b.n	80061e4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006106:	4b3a      	ldr	r3, [pc, #232]	@ (80061f0 <HAL_RCC_ClockConfig+0x1f0>)
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	f003 020c 	and.w	r2, r3, #12
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	429a      	cmp	r2, r3
 8006116:	d1eb      	bne.n	80060f0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 0302 	and.w	r3, r3, #2
 8006120:	2b00      	cmp	r3, #0
 8006122:	d010      	beq.n	8006146 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	689a      	ldr	r2, [r3, #8]
 8006128:	4b31      	ldr	r3, [pc, #196]	@ (80061f0 <HAL_RCC_ClockConfig+0x1f0>)
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006130:	429a      	cmp	r2, r3
 8006132:	d208      	bcs.n	8006146 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006134:	4b2e      	ldr	r3, [pc, #184]	@ (80061f0 <HAL_RCC_ClockConfig+0x1f0>)
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	492b      	ldr	r1, [pc, #172]	@ (80061f0 <HAL_RCC_ClockConfig+0x1f0>)
 8006142:	4313      	orrs	r3, r2
 8006144:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006146:	4b29      	ldr	r3, [pc, #164]	@ (80061ec <HAL_RCC_ClockConfig+0x1ec>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 0307 	and.w	r3, r3, #7
 800614e:	683a      	ldr	r2, [r7, #0]
 8006150:	429a      	cmp	r2, r3
 8006152:	d210      	bcs.n	8006176 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006154:	4b25      	ldr	r3, [pc, #148]	@ (80061ec <HAL_RCC_ClockConfig+0x1ec>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f023 0207 	bic.w	r2, r3, #7
 800615c:	4923      	ldr	r1, [pc, #140]	@ (80061ec <HAL_RCC_ClockConfig+0x1ec>)
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	4313      	orrs	r3, r2
 8006162:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006164:	4b21      	ldr	r3, [pc, #132]	@ (80061ec <HAL_RCC_ClockConfig+0x1ec>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f003 0307 	and.w	r3, r3, #7
 800616c:	683a      	ldr	r2, [r7, #0]
 800616e:	429a      	cmp	r2, r3
 8006170:	d001      	beq.n	8006176 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	e036      	b.n	80061e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 0304 	and.w	r3, r3, #4
 800617e:	2b00      	cmp	r3, #0
 8006180:	d008      	beq.n	8006194 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006182:	4b1b      	ldr	r3, [pc, #108]	@ (80061f0 <HAL_RCC_ClockConfig+0x1f0>)
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	4918      	ldr	r1, [pc, #96]	@ (80061f0 <HAL_RCC_ClockConfig+0x1f0>)
 8006190:	4313      	orrs	r3, r2
 8006192:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 0308 	and.w	r3, r3, #8
 800619c:	2b00      	cmp	r3, #0
 800619e:	d009      	beq.n	80061b4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80061a0:	4b13      	ldr	r3, [pc, #76]	@ (80061f0 <HAL_RCC_ClockConfig+0x1f0>)
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	691b      	ldr	r3, [r3, #16]
 80061ac:	00db      	lsls	r3, r3, #3
 80061ae:	4910      	ldr	r1, [pc, #64]	@ (80061f0 <HAL_RCC_ClockConfig+0x1f0>)
 80061b0:	4313      	orrs	r3, r2
 80061b2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80061b4:	f000 f824 	bl	8006200 <HAL_RCC_GetSysClockFreq>
 80061b8:	4602      	mov	r2, r0
 80061ba:	4b0d      	ldr	r3, [pc, #52]	@ (80061f0 <HAL_RCC_ClockConfig+0x1f0>)
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	091b      	lsrs	r3, r3, #4
 80061c0:	f003 030f 	and.w	r3, r3, #15
 80061c4:	490b      	ldr	r1, [pc, #44]	@ (80061f4 <HAL_RCC_ClockConfig+0x1f4>)
 80061c6:	5ccb      	ldrb	r3, [r1, r3]
 80061c8:	f003 031f 	and.w	r3, r3, #31
 80061cc:	fa22 f303 	lsr.w	r3, r2, r3
 80061d0:	4a09      	ldr	r2, [pc, #36]	@ (80061f8 <HAL_RCC_ClockConfig+0x1f8>)
 80061d2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80061d4:	4b09      	ldr	r3, [pc, #36]	@ (80061fc <HAL_RCC_ClockConfig+0x1fc>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4618      	mov	r0, r3
 80061da:	f7fd f885 	bl	80032e8 <HAL_InitTick>
 80061de:	4603      	mov	r3, r0
 80061e0:	72fb      	strb	r3, [r7, #11]

  return status;
 80061e2:	7afb      	ldrb	r3, [r7, #11]
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3710      	adds	r7, #16
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	40022000 	.word	0x40022000
 80061f0:	40021000 	.word	0x40021000
 80061f4:	08008188 	.word	0x08008188
 80061f8:	20000030 	.word	0x20000030
 80061fc:	20000034 	.word	0x20000034

08006200 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006200:	b480      	push	{r7}
 8006202:	b089      	sub	sp, #36	@ 0x24
 8006204:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006206:	2300      	movs	r3, #0
 8006208:	61fb      	str	r3, [r7, #28]
 800620a:	2300      	movs	r3, #0
 800620c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800620e:	4b3e      	ldr	r3, [pc, #248]	@ (8006308 <HAL_RCC_GetSysClockFreq+0x108>)
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	f003 030c 	and.w	r3, r3, #12
 8006216:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006218:	4b3b      	ldr	r3, [pc, #236]	@ (8006308 <HAL_RCC_GetSysClockFreq+0x108>)
 800621a:	68db      	ldr	r3, [r3, #12]
 800621c:	f003 0303 	and.w	r3, r3, #3
 8006220:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d005      	beq.n	8006234 <HAL_RCC_GetSysClockFreq+0x34>
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	2b0c      	cmp	r3, #12
 800622c:	d121      	bne.n	8006272 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2b01      	cmp	r3, #1
 8006232:	d11e      	bne.n	8006272 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006234:	4b34      	ldr	r3, [pc, #208]	@ (8006308 <HAL_RCC_GetSysClockFreq+0x108>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f003 0308 	and.w	r3, r3, #8
 800623c:	2b00      	cmp	r3, #0
 800623e:	d107      	bne.n	8006250 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006240:	4b31      	ldr	r3, [pc, #196]	@ (8006308 <HAL_RCC_GetSysClockFreq+0x108>)
 8006242:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006246:	0a1b      	lsrs	r3, r3, #8
 8006248:	f003 030f 	and.w	r3, r3, #15
 800624c:	61fb      	str	r3, [r7, #28]
 800624e:	e005      	b.n	800625c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006250:	4b2d      	ldr	r3, [pc, #180]	@ (8006308 <HAL_RCC_GetSysClockFreq+0x108>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	091b      	lsrs	r3, r3, #4
 8006256:	f003 030f 	and.w	r3, r3, #15
 800625a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800625c:	4a2b      	ldr	r2, [pc, #172]	@ (800630c <HAL_RCC_GetSysClockFreq+0x10c>)
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006264:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d10d      	bne.n	8006288 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006270:	e00a      	b.n	8006288 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	2b04      	cmp	r3, #4
 8006276:	d102      	bne.n	800627e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006278:	4b25      	ldr	r3, [pc, #148]	@ (8006310 <HAL_RCC_GetSysClockFreq+0x110>)
 800627a:	61bb      	str	r3, [r7, #24]
 800627c:	e004      	b.n	8006288 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	2b08      	cmp	r3, #8
 8006282:	d101      	bne.n	8006288 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006284:	4b23      	ldr	r3, [pc, #140]	@ (8006314 <HAL_RCC_GetSysClockFreq+0x114>)
 8006286:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	2b0c      	cmp	r3, #12
 800628c:	d134      	bne.n	80062f8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800628e:	4b1e      	ldr	r3, [pc, #120]	@ (8006308 <HAL_RCC_GetSysClockFreq+0x108>)
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	f003 0303 	and.w	r3, r3, #3
 8006296:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	2b02      	cmp	r3, #2
 800629c:	d003      	beq.n	80062a6 <HAL_RCC_GetSysClockFreq+0xa6>
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	2b03      	cmp	r3, #3
 80062a2:	d003      	beq.n	80062ac <HAL_RCC_GetSysClockFreq+0xac>
 80062a4:	e005      	b.n	80062b2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80062a6:	4b1a      	ldr	r3, [pc, #104]	@ (8006310 <HAL_RCC_GetSysClockFreq+0x110>)
 80062a8:	617b      	str	r3, [r7, #20]
      break;
 80062aa:	e005      	b.n	80062b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80062ac:	4b19      	ldr	r3, [pc, #100]	@ (8006314 <HAL_RCC_GetSysClockFreq+0x114>)
 80062ae:	617b      	str	r3, [r7, #20]
      break;
 80062b0:	e002      	b.n	80062b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80062b2:	69fb      	ldr	r3, [r7, #28]
 80062b4:	617b      	str	r3, [r7, #20]
      break;
 80062b6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80062b8:	4b13      	ldr	r3, [pc, #76]	@ (8006308 <HAL_RCC_GetSysClockFreq+0x108>)
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	091b      	lsrs	r3, r3, #4
 80062be:	f003 0307 	and.w	r3, r3, #7
 80062c2:	3301      	adds	r3, #1
 80062c4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80062c6:	4b10      	ldr	r3, [pc, #64]	@ (8006308 <HAL_RCC_GetSysClockFreq+0x108>)
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	0a1b      	lsrs	r3, r3, #8
 80062cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80062d0:	697a      	ldr	r2, [r7, #20]
 80062d2:	fb03 f202 	mul.w	r2, r3, r2
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80062dc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80062de:	4b0a      	ldr	r3, [pc, #40]	@ (8006308 <HAL_RCC_GetSysClockFreq+0x108>)
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	0e5b      	lsrs	r3, r3, #25
 80062e4:	f003 0303 	and.w	r3, r3, #3
 80062e8:	3301      	adds	r3, #1
 80062ea:	005b      	lsls	r3, r3, #1
 80062ec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80062ee:	697a      	ldr	r2, [r7, #20]
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80062f6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80062f8:	69bb      	ldr	r3, [r7, #24]
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3724      	adds	r7, #36	@ 0x24
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr
 8006306:	bf00      	nop
 8006308:	40021000 	.word	0x40021000
 800630c:	080081a0 	.word	0x080081a0
 8006310:	00f42400 	.word	0x00f42400
 8006314:	007a1200 	.word	0x007a1200

08006318 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006318:	b480      	push	{r7}
 800631a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800631c:	4b03      	ldr	r3, [pc, #12]	@ (800632c <HAL_RCC_GetHCLKFreq+0x14>)
 800631e:	681b      	ldr	r3, [r3, #0]
}
 8006320:	4618      	mov	r0, r3
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr
 800632a:	bf00      	nop
 800632c:	20000030 	.word	0x20000030

08006330 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006334:	f7ff fff0 	bl	8006318 <HAL_RCC_GetHCLKFreq>
 8006338:	4602      	mov	r2, r0
 800633a:	4b06      	ldr	r3, [pc, #24]	@ (8006354 <HAL_RCC_GetPCLK1Freq+0x24>)
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	0a1b      	lsrs	r3, r3, #8
 8006340:	f003 0307 	and.w	r3, r3, #7
 8006344:	4904      	ldr	r1, [pc, #16]	@ (8006358 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006346:	5ccb      	ldrb	r3, [r1, r3]
 8006348:	f003 031f 	and.w	r3, r3, #31
 800634c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006350:	4618      	mov	r0, r3
 8006352:	bd80      	pop	{r7, pc}
 8006354:	40021000 	.word	0x40021000
 8006358:	08008198 	.word	0x08008198

0800635c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006360:	f7ff ffda 	bl	8006318 <HAL_RCC_GetHCLKFreq>
 8006364:	4602      	mov	r2, r0
 8006366:	4b06      	ldr	r3, [pc, #24]	@ (8006380 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	0adb      	lsrs	r3, r3, #11
 800636c:	f003 0307 	and.w	r3, r3, #7
 8006370:	4904      	ldr	r1, [pc, #16]	@ (8006384 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006372:	5ccb      	ldrb	r3, [r1, r3]
 8006374:	f003 031f 	and.w	r3, r3, #31
 8006378:	fa22 f303 	lsr.w	r3, r2, r3
}
 800637c:	4618      	mov	r0, r3
 800637e:	bd80      	pop	{r7, pc}
 8006380:	40021000 	.word	0x40021000
 8006384:	08008198 	.word	0x08008198

08006388 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b086      	sub	sp, #24
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006390:	2300      	movs	r3, #0
 8006392:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006394:	4b2a      	ldr	r3, [pc, #168]	@ (8006440 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006396:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006398:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800639c:	2b00      	cmp	r3, #0
 800639e:	d003      	beq.n	80063a8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80063a0:	f7ff f968 	bl	8005674 <HAL_PWREx_GetVoltageRange>
 80063a4:	6178      	str	r0, [r7, #20]
 80063a6:	e014      	b.n	80063d2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80063a8:	4b25      	ldr	r3, [pc, #148]	@ (8006440 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80063aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063ac:	4a24      	ldr	r2, [pc, #144]	@ (8006440 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80063ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80063b4:	4b22      	ldr	r3, [pc, #136]	@ (8006440 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80063b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80063bc:	60fb      	str	r3, [r7, #12]
 80063be:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80063c0:	f7ff f958 	bl	8005674 <HAL_PWREx_GetVoltageRange>
 80063c4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80063c6:	4b1e      	ldr	r3, [pc, #120]	@ (8006440 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80063c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063ca:	4a1d      	ldr	r2, [pc, #116]	@ (8006440 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80063cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80063d0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063d8:	d10b      	bne.n	80063f2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2b80      	cmp	r3, #128	@ 0x80
 80063de:	d919      	bls.n	8006414 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2ba0      	cmp	r3, #160	@ 0xa0
 80063e4:	d902      	bls.n	80063ec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80063e6:	2302      	movs	r3, #2
 80063e8:	613b      	str	r3, [r7, #16]
 80063ea:	e013      	b.n	8006414 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80063ec:	2301      	movs	r3, #1
 80063ee:	613b      	str	r3, [r7, #16]
 80063f0:	e010      	b.n	8006414 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2b80      	cmp	r3, #128	@ 0x80
 80063f6:	d902      	bls.n	80063fe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80063f8:	2303      	movs	r3, #3
 80063fa:	613b      	str	r3, [r7, #16]
 80063fc:	e00a      	b.n	8006414 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2b80      	cmp	r3, #128	@ 0x80
 8006402:	d102      	bne.n	800640a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006404:	2302      	movs	r3, #2
 8006406:	613b      	str	r3, [r7, #16]
 8006408:	e004      	b.n	8006414 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2b70      	cmp	r3, #112	@ 0x70
 800640e:	d101      	bne.n	8006414 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006410:	2301      	movs	r3, #1
 8006412:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006414:	4b0b      	ldr	r3, [pc, #44]	@ (8006444 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f023 0207 	bic.w	r2, r3, #7
 800641c:	4909      	ldr	r1, [pc, #36]	@ (8006444 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	4313      	orrs	r3, r2
 8006422:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006424:	4b07      	ldr	r3, [pc, #28]	@ (8006444 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f003 0307 	and.w	r3, r3, #7
 800642c:	693a      	ldr	r2, [r7, #16]
 800642e:	429a      	cmp	r2, r3
 8006430:	d001      	beq.n	8006436 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	e000      	b.n	8006438 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006436:	2300      	movs	r3, #0
}
 8006438:	4618      	mov	r0, r3
 800643a:	3718      	adds	r7, #24
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}
 8006440:	40021000 	.word	0x40021000
 8006444:	40022000 	.word	0x40022000

08006448 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b086      	sub	sp, #24
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006450:	2300      	movs	r3, #0
 8006452:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006454:	2300      	movs	r3, #0
 8006456:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006460:	2b00      	cmp	r3, #0
 8006462:	f000 809e 	beq.w	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006466:	2300      	movs	r3, #0
 8006468:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800646a:	4b46      	ldr	r3, [pc, #280]	@ (8006584 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800646c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800646e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006472:	2b00      	cmp	r3, #0
 8006474:	d101      	bne.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006476:	2301      	movs	r3, #1
 8006478:	e000      	b.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x34>
 800647a:	2300      	movs	r3, #0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d00d      	beq.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006480:	4b40      	ldr	r3, [pc, #256]	@ (8006584 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006482:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006484:	4a3f      	ldr	r2, [pc, #252]	@ (8006584 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006486:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800648a:	6593      	str	r3, [r2, #88]	@ 0x58
 800648c:	4b3d      	ldr	r3, [pc, #244]	@ (8006584 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800648e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006490:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006494:	60bb      	str	r3, [r7, #8]
 8006496:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006498:	2301      	movs	r3, #1
 800649a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800649c:	4b3a      	ldr	r3, [pc, #232]	@ (8006588 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a39      	ldr	r2, [pc, #228]	@ (8006588 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80064a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80064a8:	f7fc ff6e 	bl	8003388 <HAL_GetTick>
 80064ac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80064ae:	e009      	b.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064b0:	f7fc ff6a 	bl	8003388 <HAL_GetTick>
 80064b4:	4602      	mov	r2, r0
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	1ad3      	subs	r3, r2, r3
 80064ba:	2b02      	cmp	r3, #2
 80064bc:	d902      	bls.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 80064be:	2303      	movs	r3, #3
 80064c0:	74fb      	strb	r3, [r7, #19]
        break;
 80064c2:	e005      	b.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80064c4:	4b30      	ldr	r3, [pc, #192]	@ (8006588 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d0ef      	beq.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 80064d0:	7cfb      	ldrb	r3, [r7, #19]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d15a      	bne.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80064d6:	4b2b      	ldr	r3, [pc, #172]	@ (8006584 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80064d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064e0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d01e      	beq.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064ec:	697a      	ldr	r2, [r7, #20]
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d019      	beq.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80064f2:	4b24      	ldr	r3, [pc, #144]	@ (8006584 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80064f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064fc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80064fe:	4b21      	ldr	r3, [pc, #132]	@ (8006584 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006500:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006504:	4a1f      	ldr	r2, [pc, #124]	@ (8006584 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006506:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800650a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800650e:	4b1d      	ldr	r3, [pc, #116]	@ (8006584 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006510:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006514:	4a1b      	ldr	r2, [pc, #108]	@ (8006584 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006516:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800651a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800651e:	4a19      	ldr	r2, [pc, #100]	@ (8006584 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	f003 0301 	and.w	r3, r3, #1
 800652c:	2b00      	cmp	r3, #0
 800652e:	d016      	beq.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006530:	f7fc ff2a 	bl	8003388 <HAL_GetTick>
 8006534:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006536:	e00b      	b.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006538:	f7fc ff26 	bl	8003388 <HAL_GetTick>
 800653c:	4602      	mov	r2, r0
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	1ad3      	subs	r3, r2, r3
 8006542:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006546:	4293      	cmp	r3, r2
 8006548:	d902      	bls.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 800654a:	2303      	movs	r3, #3
 800654c:	74fb      	strb	r3, [r7, #19]
            break;
 800654e:	e006      	b.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006550:	4b0c      	ldr	r3, [pc, #48]	@ (8006584 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006552:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006556:	f003 0302 	and.w	r3, r3, #2
 800655a:	2b00      	cmp	r3, #0
 800655c:	d0ec      	beq.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 800655e:	7cfb      	ldrb	r3, [r7, #19]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d10b      	bne.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006564:	4b07      	ldr	r3, [pc, #28]	@ (8006584 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006566:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800656a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006572:	4904      	ldr	r1, [pc, #16]	@ (8006584 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006574:	4313      	orrs	r3, r2
 8006576:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800657a:	e009      	b.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800657c:	7cfb      	ldrb	r3, [r7, #19]
 800657e:	74bb      	strb	r3, [r7, #18]
 8006580:	e006      	b.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8006582:	bf00      	nop
 8006584:	40021000 	.word	0x40021000
 8006588:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800658c:	7cfb      	ldrb	r3, [r7, #19]
 800658e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006590:	7c7b      	ldrb	r3, [r7, #17]
 8006592:	2b01      	cmp	r3, #1
 8006594:	d105      	bne.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006596:	4b6e      	ldr	r3, [pc, #440]	@ (8006750 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006598:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800659a:	4a6d      	ldr	r2, [pc, #436]	@ (8006750 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800659c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80065a0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f003 0301 	and.w	r3, r3, #1
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00a      	beq.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80065ae:	4b68      	ldr	r3, [pc, #416]	@ (8006750 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80065b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065b4:	f023 0203 	bic.w	r2, r3, #3
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	4964      	ldr	r1, [pc, #400]	@ (8006750 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80065be:	4313      	orrs	r3, r2
 80065c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f003 0302 	and.w	r3, r3, #2
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d00a      	beq.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80065d0:	4b5f      	ldr	r3, [pc, #380]	@ (8006750 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80065d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065d6:	f023 020c 	bic.w	r2, r3, #12
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	495c      	ldr	r1, [pc, #368]	@ (8006750 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80065e0:	4313      	orrs	r3, r2
 80065e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f003 0304 	and.w	r3, r3, #4
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d00a      	beq.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80065f2:	4b57      	ldr	r3, [pc, #348]	@ (8006750 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80065f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065f8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	68db      	ldr	r3, [r3, #12]
 8006600:	4953      	ldr	r1, [pc, #332]	@ (8006750 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006602:	4313      	orrs	r3, r2
 8006604:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f003 0320 	and.w	r3, r3, #32
 8006610:	2b00      	cmp	r3, #0
 8006612:	d00a      	beq.n	800662a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006614:	4b4e      	ldr	r3, [pc, #312]	@ (8006750 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006616:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800661a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	691b      	ldr	r3, [r3, #16]
 8006622:	494b      	ldr	r1, [pc, #300]	@ (8006750 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006624:	4313      	orrs	r3, r2
 8006626:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006632:	2b00      	cmp	r3, #0
 8006634:	d00a      	beq.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006636:	4b46      	ldr	r3, [pc, #280]	@ (8006750 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006638:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800663c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6a1b      	ldr	r3, [r3, #32]
 8006644:	4942      	ldr	r1, [pc, #264]	@ (8006750 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006646:	4313      	orrs	r3, r2
 8006648:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006654:	2b00      	cmp	r3, #0
 8006656:	d00a      	beq.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006658:	4b3d      	ldr	r3, [pc, #244]	@ (8006750 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800665a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800665e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006666:	493a      	ldr	r1, [pc, #232]	@ (8006750 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006668:	4313      	orrs	r3, r2
 800666a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00a      	beq.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800667a:	4b35      	ldr	r3, [pc, #212]	@ (8006750 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800667c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006680:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	695b      	ldr	r3, [r3, #20]
 8006688:	4931      	ldr	r1, [pc, #196]	@ (8006750 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800668a:	4313      	orrs	r3, r2
 800668c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006698:	2b00      	cmp	r3, #0
 800669a:	d00a      	beq.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800669c:	4b2c      	ldr	r3, [pc, #176]	@ (8006750 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800669e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066a2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	699b      	ldr	r3, [r3, #24]
 80066aa:	4929      	ldr	r1, [pc, #164]	@ (8006750 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80066ac:	4313      	orrs	r3, r2
 80066ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d00a      	beq.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80066be:	4b24      	ldr	r3, [pc, #144]	@ (8006750 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80066c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066c4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	69db      	ldr	r3, [r3, #28]
 80066cc:	4920      	ldr	r1, [pc, #128]	@ (8006750 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80066ce:	4313      	orrs	r3, r2
 80066d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d015      	beq.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80066e0:	4b1b      	ldr	r3, [pc, #108]	@ (8006750 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80066e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066e6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066ee:	4918      	ldr	r1, [pc, #96]	@ (8006750 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80066f0:	4313      	orrs	r3, r2
 80066f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80066fe:	d105      	bne.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006700:	4b13      	ldr	r3, [pc, #76]	@ (8006750 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006702:	68db      	ldr	r3, [r3, #12]
 8006704:	4a12      	ldr	r2, [pc, #72]	@ (8006750 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006706:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800670a:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006714:	2b00      	cmp	r3, #0
 8006716:	d015      	beq.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006718:	4b0d      	ldr	r3, [pc, #52]	@ (8006750 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800671a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800671e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006726:	490a      	ldr	r1, [pc, #40]	@ (8006750 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006728:	4313      	orrs	r3, r2
 800672a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006732:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006736:	d105      	bne.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006738:	4b05      	ldr	r3, [pc, #20]	@ (8006750 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800673a:	68db      	ldr	r3, [r3, #12]
 800673c:	4a04      	ldr	r2, [pc, #16]	@ (8006750 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800673e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006742:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006744:	7cbb      	ldrb	r3, [r7, #18]
}
 8006746:	4618      	mov	r0, r3
 8006748:	3718      	adds	r7, #24
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
 800674e:	bf00      	nop
 8006750:	40021000 	.word	0x40021000

08006754 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b082      	sub	sp, #8
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d101      	bne.n	8006766 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	e049      	b.n	80067fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800676c:	b2db      	uxtb	r3, r3
 800676e:	2b00      	cmp	r3, #0
 8006770:	d106      	bne.n	8006780 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2200      	movs	r2, #0
 8006776:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f7fc fbf0 	bl	8002f60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2202      	movs	r2, #2
 8006784:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	3304      	adds	r3, #4
 8006790:	4619      	mov	r1, r3
 8006792:	4610      	mov	r0, r2
 8006794:	f000 f8c4 	bl	8006920 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2201      	movs	r2, #1
 80067bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2201      	movs	r2, #1
 80067c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2201      	movs	r2, #1
 80067cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2201      	movs	r2, #1
 80067d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2201      	movs	r2, #1
 80067dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2201      	movs	r2, #1
 80067e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2201      	movs	r2, #1
 80067ec:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80067f8:	2300      	movs	r3, #0
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3708      	adds	r7, #8
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
	...

08006804 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006804:	b480      	push	{r7}
 8006806:	b085      	sub	sp, #20
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006812:	b2db      	uxtb	r3, r3
 8006814:	2b01      	cmp	r3, #1
 8006816:	d001      	beq.n	800681c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	e033      	b.n	8006884 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2202      	movs	r2, #2
 8006820:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a19      	ldr	r2, [pc, #100]	@ (8006890 <HAL_TIM_Base_Start+0x8c>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d009      	beq.n	8006842 <HAL_TIM_Base_Start+0x3e>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006836:	d004      	beq.n	8006842 <HAL_TIM_Base_Start+0x3e>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a15      	ldr	r2, [pc, #84]	@ (8006894 <HAL_TIM_Base_Start+0x90>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d115      	bne.n	800686e <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	689a      	ldr	r2, [r3, #8]
 8006848:	4b13      	ldr	r3, [pc, #76]	@ (8006898 <HAL_TIM_Base_Start+0x94>)
 800684a:	4013      	ands	r3, r2
 800684c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2b06      	cmp	r3, #6
 8006852:	d015      	beq.n	8006880 <HAL_TIM_Base_Start+0x7c>
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800685a:	d011      	beq.n	8006880 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f042 0201 	orr.w	r2, r2, #1
 800686a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800686c:	e008      	b.n	8006880 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f042 0201 	orr.w	r2, r2, #1
 800687c:	601a      	str	r2, [r3, #0]
 800687e:	e000      	b.n	8006882 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006880:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006882:	2300      	movs	r3, #0
}
 8006884:	4618      	mov	r0, r3
 8006886:	3714      	adds	r7, #20
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr
 8006890:	40012c00 	.word	0x40012c00
 8006894:	40014000 	.word	0x40014000
 8006898:	00010007 	.word	0x00010007

0800689c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b082      	sub	sp, #8
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d101      	bne.n	80068b4 <HAL_TIM_SlaveConfigSynchro+0x18>
 80068b0:	2302      	movs	r3, #2
 80068b2:	e031      	b.n	8006918 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2201      	movs	r2, #1
 80068b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2202      	movs	r2, #2
 80068c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80068c4:	6839      	ldr	r1, [r7, #0]
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 f89a 	bl	8006a00 <TIM_SlaveTimer_SetConfig>
 80068cc:	4603      	mov	r3, r0
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d009      	beq.n	80068e6 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2201      	movs	r2, #1
 80068d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2200      	movs	r2, #0
 80068de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	e018      	b.n	8006918 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	68da      	ldr	r2, [r3, #12]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80068f4:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	68da      	ldr	r2, [r3, #12]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006904:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2201      	movs	r2, #1
 800690a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2200      	movs	r2, #0
 8006912:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006916:	2300      	movs	r3, #0
}
 8006918:	4618      	mov	r0, r3
 800691a:	3708      	adds	r7, #8
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006920:	b480      	push	{r7}
 8006922:	b085      	sub	sp, #20
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	4a30      	ldr	r2, [pc, #192]	@ (80069f4 <TIM_Base_SetConfig+0xd4>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d003      	beq.n	8006940 <TIM_Base_SetConfig+0x20>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800693e:	d108      	bne.n	8006952 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006946:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	68fa      	ldr	r2, [r7, #12]
 800694e:	4313      	orrs	r3, r2
 8006950:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4a27      	ldr	r2, [pc, #156]	@ (80069f4 <TIM_Base_SetConfig+0xd4>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d00b      	beq.n	8006972 <TIM_Base_SetConfig+0x52>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006960:	d007      	beq.n	8006972 <TIM_Base_SetConfig+0x52>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a24      	ldr	r2, [pc, #144]	@ (80069f8 <TIM_Base_SetConfig+0xd8>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d003      	beq.n	8006972 <TIM_Base_SetConfig+0x52>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4a23      	ldr	r2, [pc, #140]	@ (80069fc <TIM_Base_SetConfig+0xdc>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d108      	bne.n	8006984 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006978:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	68db      	ldr	r3, [r3, #12]
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	4313      	orrs	r3, r2
 8006982:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	695b      	ldr	r3, [r3, #20]
 800698e:	4313      	orrs	r3, r2
 8006990:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	68fa      	ldr	r2, [r7, #12]
 8006996:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	689a      	ldr	r2, [r3, #8]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	4a12      	ldr	r2, [pc, #72]	@ (80069f4 <TIM_Base_SetConfig+0xd4>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d007      	beq.n	80069c0 <TIM_Base_SetConfig+0xa0>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	4a11      	ldr	r2, [pc, #68]	@ (80069f8 <TIM_Base_SetConfig+0xd8>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d003      	beq.n	80069c0 <TIM_Base_SetConfig+0xa0>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4a10      	ldr	r2, [pc, #64]	@ (80069fc <TIM_Base_SetConfig+0xdc>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d103      	bne.n	80069c8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	691a      	ldr	r2, [r3, #16]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	691b      	ldr	r3, [r3, #16]
 80069d2:	f003 0301 	and.w	r3, r3, #1
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d105      	bne.n	80069e6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	691b      	ldr	r3, [r3, #16]
 80069de:	f023 0201 	bic.w	r2, r3, #1
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	611a      	str	r2, [r3, #16]
  }
}
 80069e6:	bf00      	nop
 80069e8:	3714      	adds	r7, #20
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr
 80069f2:	bf00      	nop
 80069f4:	40012c00 	.word	0x40012c00
 80069f8:	40014000 	.word	0x40014000
 80069fc:	40014400 	.word	0x40014400

08006a00 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b086      	sub	sp, #24
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a1c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	693a      	ldr	r2, [r7, #16]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a2e:	f023 0307 	bic.w	r3, r3, #7
 8006a32:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	693a      	ldr	r2, [r7, #16]
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	693a      	ldr	r2, [r7, #16]
 8006a44:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	2b70      	cmp	r3, #112	@ 0x70
 8006a4c:	d01a      	beq.n	8006a84 <TIM_SlaveTimer_SetConfig+0x84>
 8006a4e:	2b70      	cmp	r3, #112	@ 0x70
 8006a50:	d860      	bhi.n	8006b14 <TIM_SlaveTimer_SetConfig+0x114>
 8006a52:	2b60      	cmp	r3, #96	@ 0x60
 8006a54:	d054      	beq.n	8006b00 <TIM_SlaveTimer_SetConfig+0x100>
 8006a56:	2b60      	cmp	r3, #96	@ 0x60
 8006a58:	d85c      	bhi.n	8006b14 <TIM_SlaveTimer_SetConfig+0x114>
 8006a5a:	2b50      	cmp	r3, #80	@ 0x50
 8006a5c:	d046      	beq.n	8006aec <TIM_SlaveTimer_SetConfig+0xec>
 8006a5e:	2b50      	cmp	r3, #80	@ 0x50
 8006a60:	d858      	bhi.n	8006b14 <TIM_SlaveTimer_SetConfig+0x114>
 8006a62:	2b40      	cmp	r3, #64	@ 0x40
 8006a64:	d019      	beq.n	8006a9a <TIM_SlaveTimer_SetConfig+0x9a>
 8006a66:	2b40      	cmp	r3, #64	@ 0x40
 8006a68:	d854      	bhi.n	8006b14 <TIM_SlaveTimer_SetConfig+0x114>
 8006a6a:	2b30      	cmp	r3, #48	@ 0x30
 8006a6c:	d055      	beq.n	8006b1a <TIM_SlaveTimer_SetConfig+0x11a>
 8006a6e:	2b30      	cmp	r3, #48	@ 0x30
 8006a70:	d850      	bhi.n	8006b14 <TIM_SlaveTimer_SetConfig+0x114>
 8006a72:	2b20      	cmp	r3, #32
 8006a74:	d051      	beq.n	8006b1a <TIM_SlaveTimer_SetConfig+0x11a>
 8006a76:	2b20      	cmp	r3, #32
 8006a78:	d84c      	bhi.n	8006b14 <TIM_SlaveTimer_SetConfig+0x114>
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d04d      	beq.n	8006b1a <TIM_SlaveTimer_SetConfig+0x11a>
 8006a7e:	2b10      	cmp	r3, #16
 8006a80:	d04b      	beq.n	8006b1a <TIM_SlaveTimer_SetConfig+0x11a>
 8006a82:	e047      	b.n	8006b14 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8006a94:	f000 f8a6 	bl	8006be4 <TIM_ETR_SetConfig>
      break;
 8006a98:	e040      	b.n	8006b1c <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	2b05      	cmp	r3, #5
 8006aa0:	d101      	bne.n	8006aa6 <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e03b      	b.n	8006b1e <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	6a1b      	ldr	r3, [r3, #32]
 8006aac:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	6a1a      	ldr	r2, [r3, #32]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f022 0201 	bic.w	r2, r2, #1
 8006abc:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	699b      	ldr	r3, [r3, #24]
 8006ac4:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006acc:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	691b      	ldr	r3, [r3, #16]
 8006ad2:	011b      	lsls	r3, r3, #4
 8006ad4:	68ba      	ldr	r2, [r7, #8]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	68ba      	ldr	r2, [r7, #8]
 8006ae0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	68fa      	ldr	r2, [r7, #12]
 8006ae8:	621a      	str	r2, [r3, #32]
      break;
 8006aea:	e017      	b.n	8006b1c <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006af8:	461a      	mov	r2, r3
 8006afa:	f000 f814 	bl	8006b26 <TIM_TI1_ConfigInputStage>
      break;
 8006afe:	e00d      	b.n	8006b1c <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	f000 f839 	bl	8006b84 <TIM_TI2_ConfigInputStage>
      break;
 8006b12:	e003      	b.n	8006b1c <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8006b14:	2301      	movs	r3, #1
 8006b16:	75fb      	strb	r3, [r7, #23]
      break;
 8006b18:	e000      	b.n	8006b1c <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 8006b1a:	bf00      	nop
  }

  return status;
 8006b1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3718      	adds	r7, #24
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}

08006b26 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b26:	b480      	push	{r7}
 8006b28:	b087      	sub	sp, #28
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	60f8      	str	r0, [r7, #12]
 8006b2e:	60b9      	str	r1, [r7, #8]
 8006b30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	6a1b      	ldr	r3, [r3, #32]
 8006b36:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	6a1b      	ldr	r3, [r3, #32]
 8006b3c:	f023 0201 	bic.w	r2, r3, #1
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	699b      	ldr	r3, [r3, #24]
 8006b48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b50:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	011b      	lsls	r3, r3, #4
 8006b56:	693a      	ldr	r2, [r7, #16]
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	f023 030a 	bic.w	r3, r3, #10
 8006b62:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b64:	697a      	ldr	r2, [r7, #20]
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	693a      	ldr	r2, [r7, #16]
 8006b70:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	697a      	ldr	r2, [r7, #20]
 8006b76:	621a      	str	r2, [r3, #32]
}
 8006b78:	bf00      	nop
 8006b7a:	371c      	adds	r7, #28
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr

08006b84 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b087      	sub	sp, #28
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	60b9      	str	r1, [r7, #8]
 8006b8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	6a1b      	ldr	r3, [r3, #32]
 8006b94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	6a1b      	ldr	r3, [r3, #32]
 8006b9a:	f023 0210 	bic.w	r2, r3, #16
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	699b      	ldr	r3, [r3, #24]
 8006ba6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006bae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	031b      	lsls	r3, r3, #12
 8006bb4:	693a      	ldr	r2, [r7, #16]
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006bc0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	011b      	lsls	r3, r3, #4
 8006bc6:	697a      	ldr	r2, [r7, #20]
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	693a      	ldr	r2, [r7, #16]
 8006bd0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	697a      	ldr	r2, [r7, #20]
 8006bd6:	621a      	str	r2, [r3, #32]
}
 8006bd8:	bf00      	nop
 8006bda:	371c      	adds	r7, #28
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b087      	sub	sp, #28
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	60f8      	str	r0, [r7, #12]
 8006bec:	60b9      	str	r1, [r7, #8]
 8006bee:	607a      	str	r2, [r7, #4]
 8006bf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006bfe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	021a      	lsls	r2, r3, #8
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	431a      	orrs	r2, r3
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	697a      	ldr	r2, [r7, #20]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	697a      	ldr	r2, [r7, #20]
 8006c16:	609a      	str	r2, [r3, #8]
}
 8006c18:	bf00      	nop
 8006c1a:	371c      	adds	r7, #28
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr

08006c24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b085      	sub	sp, #20
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d101      	bne.n	8006c3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c38:	2302      	movs	r3, #2
 8006c3a:	e04f      	b.n	8006cdc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2202      	movs	r2, #2
 8006c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a21      	ldr	r2, [pc, #132]	@ (8006ce8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d108      	bne.n	8006c78 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006c6c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	68fa      	ldr	r2, [r7, #12]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	68fa      	ldr	r2, [r7, #12]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	68fa      	ldr	r2, [r7, #12]
 8006c90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a14      	ldr	r2, [pc, #80]	@ (8006ce8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d009      	beq.n	8006cb0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ca4:	d004      	beq.n	8006cb0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a10      	ldr	r2, [pc, #64]	@ (8006cec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d10c      	bne.n	8006cca <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006cb6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	689b      	ldr	r3, [r3, #8]
 8006cbc:	68ba      	ldr	r2, [r7, #8]
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	68ba      	ldr	r2, [r7, #8]
 8006cc8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2201      	movs	r2, #1
 8006cce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006cda:	2300      	movs	r3, #0
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3714      	adds	r7, #20
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr
 8006ce8:	40012c00 	.word	0x40012c00
 8006cec:	40014000 	.word	0x40014000

08006cf0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b082      	sub	sp, #8
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d101      	bne.n	8006d02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	e040      	b.n	8006d84 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d106      	bne.n	8006d18 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f7fc f998 	bl	8003048 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2224      	movs	r2, #36	@ 0x24
 8006d1c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f022 0201 	bic.w	r2, r2, #1
 8006d2c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d002      	beq.n	8006d3c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 fa82 	bl	8007240 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f000 f825 	bl	8006d8c <UART_SetConfig>
 8006d42:	4603      	mov	r3, r0
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d101      	bne.n	8006d4c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006d48:	2301      	movs	r3, #1
 8006d4a:	e01b      	b.n	8006d84 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	685a      	ldr	r2, [r3, #4]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006d5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	689a      	ldr	r2, [r3, #8]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006d6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f042 0201 	orr.w	r2, r2, #1
 8006d7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f000 fb01 	bl	8007384 <UART_CheckIdleState>
 8006d82:	4603      	mov	r3, r0
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3708      	adds	r7, #8
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d90:	b08a      	sub	sp, #40	@ 0x28
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d96:	2300      	movs	r3, #0
 8006d98:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	689a      	ldr	r2, [r3, #8]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	691b      	ldr	r3, [r3, #16]
 8006da4:	431a      	orrs	r2, r3
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	695b      	ldr	r3, [r3, #20]
 8006daa:	431a      	orrs	r2, r3
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	69db      	ldr	r3, [r3, #28]
 8006db0:	4313      	orrs	r3, r2
 8006db2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	681a      	ldr	r2, [r3, #0]
 8006dba:	4b9e      	ldr	r3, [pc, #632]	@ (8007034 <UART_SetConfig+0x2a8>)
 8006dbc:	4013      	ands	r3, r2
 8006dbe:	68fa      	ldr	r2, [r7, #12]
 8006dc0:	6812      	ldr	r2, [r2, #0]
 8006dc2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006dc4:	430b      	orrs	r3, r1
 8006dc6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	68da      	ldr	r2, [r3, #12]
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	430a      	orrs	r2, r1
 8006ddc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	699b      	ldr	r3, [r3, #24]
 8006de2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a93      	ldr	r2, [pc, #588]	@ (8007038 <UART_SetConfig+0x2ac>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d004      	beq.n	8006df8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	6a1b      	ldr	r3, [r3, #32]
 8006df2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006df4:	4313      	orrs	r3, r2
 8006df6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e08:	430a      	orrs	r2, r1
 8006e0a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a8a      	ldr	r2, [pc, #552]	@ (800703c <UART_SetConfig+0x2b0>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d126      	bne.n	8006e64 <UART_SetConfig+0xd8>
 8006e16:	4b8a      	ldr	r3, [pc, #552]	@ (8007040 <UART_SetConfig+0x2b4>)
 8006e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e1c:	f003 0303 	and.w	r3, r3, #3
 8006e20:	2b03      	cmp	r3, #3
 8006e22:	d81b      	bhi.n	8006e5c <UART_SetConfig+0xd0>
 8006e24:	a201      	add	r2, pc, #4	@ (adr r2, 8006e2c <UART_SetConfig+0xa0>)
 8006e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e2a:	bf00      	nop
 8006e2c:	08006e3d 	.word	0x08006e3d
 8006e30:	08006e4d 	.word	0x08006e4d
 8006e34:	08006e45 	.word	0x08006e45
 8006e38:	08006e55 	.word	0x08006e55
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e42:	e0ab      	b.n	8006f9c <UART_SetConfig+0x210>
 8006e44:	2302      	movs	r3, #2
 8006e46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e4a:	e0a7      	b.n	8006f9c <UART_SetConfig+0x210>
 8006e4c:	2304      	movs	r3, #4
 8006e4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e52:	e0a3      	b.n	8006f9c <UART_SetConfig+0x210>
 8006e54:	2308      	movs	r3, #8
 8006e56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e5a:	e09f      	b.n	8006f9c <UART_SetConfig+0x210>
 8006e5c:	2310      	movs	r3, #16
 8006e5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e62:	e09b      	b.n	8006f9c <UART_SetConfig+0x210>
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a76      	ldr	r2, [pc, #472]	@ (8007044 <UART_SetConfig+0x2b8>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d138      	bne.n	8006ee0 <UART_SetConfig+0x154>
 8006e6e:	4b74      	ldr	r3, [pc, #464]	@ (8007040 <UART_SetConfig+0x2b4>)
 8006e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e74:	f003 030c 	and.w	r3, r3, #12
 8006e78:	2b0c      	cmp	r3, #12
 8006e7a:	d82d      	bhi.n	8006ed8 <UART_SetConfig+0x14c>
 8006e7c:	a201      	add	r2, pc, #4	@ (adr r2, 8006e84 <UART_SetConfig+0xf8>)
 8006e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e82:	bf00      	nop
 8006e84:	08006eb9 	.word	0x08006eb9
 8006e88:	08006ed9 	.word	0x08006ed9
 8006e8c:	08006ed9 	.word	0x08006ed9
 8006e90:	08006ed9 	.word	0x08006ed9
 8006e94:	08006ec9 	.word	0x08006ec9
 8006e98:	08006ed9 	.word	0x08006ed9
 8006e9c:	08006ed9 	.word	0x08006ed9
 8006ea0:	08006ed9 	.word	0x08006ed9
 8006ea4:	08006ec1 	.word	0x08006ec1
 8006ea8:	08006ed9 	.word	0x08006ed9
 8006eac:	08006ed9 	.word	0x08006ed9
 8006eb0:	08006ed9 	.word	0x08006ed9
 8006eb4:	08006ed1 	.word	0x08006ed1
 8006eb8:	2300      	movs	r3, #0
 8006eba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ebe:	e06d      	b.n	8006f9c <UART_SetConfig+0x210>
 8006ec0:	2302      	movs	r3, #2
 8006ec2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ec6:	e069      	b.n	8006f9c <UART_SetConfig+0x210>
 8006ec8:	2304      	movs	r3, #4
 8006eca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ece:	e065      	b.n	8006f9c <UART_SetConfig+0x210>
 8006ed0:	2308      	movs	r3, #8
 8006ed2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ed6:	e061      	b.n	8006f9c <UART_SetConfig+0x210>
 8006ed8:	2310      	movs	r3, #16
 8006eda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ede:	e05d      	b.n	8006f9c <UART_SetConfig+0x210>
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a58      	ldr	r2, [pc, #352]	@ (8007048 <UART_SetConfig+0x2bc>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d125      	bne.n	8006f36 <UART_SetConfig+0x1aa>
 8006eea:	4b55      	ldr	r3, [pc, #340]	@ (8007040 <UART_SetConfig+0x2b4>)
 8006eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ef0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006ef4:	2b30      	cmp	r3, #48	@ 0x30
 8006ef6:	d016      	beq.n	8006f26 <UART_SetConfig+0x19a>
 8006ef8:	2b30      	cmp	r3, #48	@ 0x30
 8006efa:	d818      	bhi.n	8006f2e <UART_SetConfig+0x1a2>
 8006efc:	2b20      	cmp	r3, #32
 8006efe:	d00a      	beq.n	8006f16 <UART_SetConfig+0x18a>
 8006f00:	2b20      	cmp	r3, #32
 8006f02:	d814      	bhi.n	8006f2e <UART_SetConfig+0x1a2>
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d002      	beq.n	8006f0e <UART_SetConfig+0x182>
 8006f08:	2b10      	cmp	r3, #16
 8006f0a:	d008      	beq.n	8006f1e <UART_SetConfig+0x192>
 8006f0c:	e00f      	b.n	8006f2e <UART_SetConfig+0x1a2>
 8006f0e:	2300      	movs	r3, #0
 8006f10:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f14:	e042      	b.n	8006f9c <UART_SetConfig+0x210>
 8006f16:	2302      	movs	r3, #2
 8006f18:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f1c:	e03e      	b.n	8006f9c <UART_SetConfig+0x210>
 8006f1e:	2304      	movs	r3, #4
 8006f20:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f24:	e03a      	b.n	8006f9c <UART_SetConfig+0x210>
 8006f26:	2308      	movs	r3, #8
 8006f28:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f2c:	e036      	b.n	8006f9c <UART_SetConfig+0x210>
 8006f2e:	2310      	movs	r3, #16
 8006f30:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f34:	e032      	b.n	8006f9c <UART_SetConfig+0x210>
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a3f      	ldr	r2, [pc, #252]	@ (8007038 <UART_SetConfig+0x2ac>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d12a      	bne.n	8006f96 <UART_SetConfig+0x20a>
 8006f40:	4b3f      	ldr	r3, [pc, #252]	@ (8007040 <UART_SetConfig+0x2b4>)
 8006f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f46:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006f4a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006f4e:	d01a      	beq.n	8006f86 <UART_SetConfig+0x1fa>
 8006f50:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006f54:	d81b      	bhi.n	8006f8e <UART_SetConfig+0x202>
 8006f56:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f5a:	d00c      	beq.n	8006f76 <UART_SetConfig+0x1ea>
 8006f5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f60:	d815      	bhi.n	8006f8e <UART_SetConfig+0x202>
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d003      	beq.n	8006f6e <UART_SetConfig+0x1e2>
 8006f66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f6a:	d008      	beq.n	8006f7e <UART_SetConfig+0x1f2>
 8006f6c:	e00f      	b.n	8006f8e <UART_SetConfig+0x202>
 8006f6e:	2300      	movs	r3, #0
 8006f70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f74:	e012      	b.n	8006f9c <UART_SetConfig+0x210>
 8006f76:	2302      	movs	r3, #2
 8006f78:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f7c:	e00e      	b.n	8006f9c <UART_SetConfig+0x210>
 8006f7e:	2304      	movs	r3, #4
 8006f80:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f84:	e00a      	b.n	8006f9c <UART_SetConfig+0x210>
 8006f86:	2308      	movs	r3, #8
 8006f88:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f8c:	e006      	b.n	8006f9c <UART_SetConfig+0x210>
 8006f8e:	2310      	movs	r3, #16
 8006f90:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f94:	e002      	b.n	8006f9c <UART_SetConfig+0x210>
 8006f96:	2310      	movs	r3, #16
 8006f98:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a25      	ldr	r2, [pc, #148]	@ (8007038 <UART_SetConfig+0x2ac>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	f040 808a 	bne.w	80070bc <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006fa8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006fac:	2b08      	cmp	r3, #8
 8006fae:	d824      	bhi.n	8006ffa <UART_SetConfig+0x26e>
 8006fb0:	a201      	add	r2, pc, #4	@ (adr r2, 8006fb8 <UART_SetConfig+0x22c>)
 8006fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fb6:	bf00      	nop
 8006fb8:	08006fdd 	.word	0x08006fdd
 8006fbc:	08006ffb 	.word	0x08006ffb
 8006fc0:	08006fe5 	.word	0x08006fe5
 8006fc4:	08006ffb 	.word	0x08006ffb
 8006fc8:	08006feb 	.word	0x08006feb
 8006fcc:	08006ffb 	.word	0x08006ffb
 8006fd0:	08006ffb 	.word	0x08006ffb
 8006fd4:	08006ffb 	.word	0x08006ffb
 8006fd8:	08006ff3 	.word	0x08006ff3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fdc:	f7ff f9a8 	bl	8006330 <HAL_RCC_GetPCLK1Freq>
 8006fe0:	61f8      	str	r0, [r7, #28]
        break;
 8006fe2:	e010      	b.n	8007006 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fe4:	4b19      	ldr	r3, [pc, #100]	@ (800704c <UART_SetConfig+0x2c0>)
 8006fe6:	61fb      	str	r3, [r7, #28]
        break;
 8006fe8:	e00d      	b.n	8007006 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006fea:	f7ff f909 	bl	8006200 <HAL_RCC_GetSysClockFreq>
 8006fee:	61f8      	str	r0, [r7, #28]
        break;
 8006ff0:	e009      	b.n	8007006 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ff2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ff6:	61fb      	str	r3, [r7, #28]
        break;
 8006ff8:	e005      	b.n	8007006 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006ffe:	2301      	movs	r3, #1
 8007000:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007004:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007006:	69fb      	ldr	r3, [r7, #28]
 8007008:	2b00      	cmp	r3, #0
 800700a:	f000 8109 	beq.w	8007220 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	685a      	ldr	r2, [r3, #4]
 8007012:	4613      	mov	r3, r2
 8007014:	005b      	lsls	r3, r3, #1
 8007016:	4413      	add	r3, r2
 8007018:	69fa      	ldr	r2, [r7, #28]
 800701a:	429a      	cmp	r2, r3
 800701c:	d305      	bcc.n	800702a <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007024:	69fa      	ldr	r2, [r7, #28]
 8007026:	429a      	cmp	r2, r3
 8007028:	d912      	bls.n	8007050 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007030:	e0f6      	b.n	8007220 <UART_SetConfig+0x494>
 8007032:	bf00      	nop
 8007034:	efff69f3 	.word	0xefff69f3
 8007038:	40008000 	.word	0x40008000
 800703c:	40013800 	.word	0x40013800
 8007040:	40021000 	.word	0x40021000
 8007044:	40004400 	.word	0x40004400
 8007048:	40004800 	.word	0x40004800
 800704c:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007050:	69fb      	ldr	r3, [r7, #28]
 8007052:	2200      	movs	r2, #0
 8007054:	461c      	mov	r4, r3
 8007056:	4615      	mov	r5, r2
 8007058:	f04f 0200 	mov.w	r2, #0
 800705c:	f04f 0300 	mov.w	r3, #0
 8007060:	022b      	lsls	r3, r5, #8
 8007062:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007066:	0222      	lsls	r2, r4, #8
 8007068:	68f9      	ldr	r1, [r7, #12]
 800706a:	6849      	ldr	r1, [r1, #4]
 800706c:	0849      	lsrs	r1, r1, #1
 800706e:	2000      	movs	r0, #0
 8007070:	4688      	mov	r8, r1
 8007072:	4681      	mov	r9, r0
 8007074:	eb12 0a08 	adds.w	sl, r2, r8
 8007078:	eb43 0b09 	adc.w	fp, r3, r9
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	603b      	str	r3, [r7, #0]
 8007084:	607a      	str	r2, [r7, #4]
 8007086:	e9d7 2300 	ldrd	r2, r3, [r7]
 800708a:	4650      	mov	r0, sl
 800708c:	4659      	mov	r1, fp
 800708e:	f7f9 fca5 	bl	80009dc <__aeabi_uldivmod>
 8007092:	4602      	mov	r2, r0
 8007094:	460b      	mov	r3, r1
 8007096:	4613      	mov	r3, r2
 8007098:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800709a:	69bb      	ldr	r3, [r7, #24]
 800709c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80070a0:	d308      	bcc.n	80070b4 <UART_SetConfig+0x328>
 80070a2:	69bb      	ldr	r3, [r7, #24]
 80070a4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80070a8:	d204      	bcs.n	80070b4 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	69ba      	ldr	r2, [r7, #24]
 80070b0:	60da      	str	r2, [r3, #12]
 80070b2:	e0b5      	b.n	8007220 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 80070b4:	2301      	movs	r3, #1
 80070b6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80070ba:	e0b1      	b.n	8007220 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	69db      	ldr	r3, [r3, #28]
 80070c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80070c4:	d15d      	bne.n	8007182 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 80070c6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80070ca:	2b08      	cmp	r3, #8
 80070cc:	d827      	bhi.n	800711e <UART_SetConfig+0x392>
 80070ce:	a201      	add	r2, pc, #4	@ (adr r2, 80070d4 <UART_SetConfig+0x348>)
 80070d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070d4:	080070f9 	.word	0x080070f9
 80070d8:	08007101 	.word	0x08007101
 80070dc:	08007109 	.word	0x08007109
 80070e0:	0800711f 	.word	0x0800711f
 80070e4:	0800710f 	.word	0x0800710f
 80070e8:	0800711f 	.word	0x0800711f
 80070ec:	0800711f 	.word	0x0800711f
 80070f0:	0800711f 	.word	0x0800711f
 80070f4:	08007117 	.word	0x08007117
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070f8:	f7ff f91a 	bl	8006330 <HAL_RCC_GetPCLK1Freq>
 80070fc:	61f8      	str	r0, [r7, #28]
        break;
 80070fe:	e014      	b.n	800712a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007100:	f7ff f92c 	bl	800635c <HAL_RCC_GetPCLK2Freq>
 8007104:	61f8      	str	r0, [r7, #28]
        break;
 8007106:	e010      	b.n	800712a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007108:	4b4c      	ldr	r3, [pc, #304]	@ (800723c <UART_SetConfig+0x4b0>)
 800710a:	61fb      	str	r3, [r7, #28]
        break;
 800710c:	e00d      	b.n	800712a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800710e:	f7ff f877 	bl	8006200 <HAL_RCC_GetSysClockFreq>
 8007112:	61f8      	str	r0, [r7, #28]
        break;
 8007114:	e009      	b.n	800712a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007116:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800711a:	61fb      	str	r3, [r7, #28]
        break;
 800711c:	e005      	b.n	800712a <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 800711e:	2300      	movs	r3, #0
 8007120:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007122:	2301      	movs	r3, #1
 8007124:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007128:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800712a:	69fb      	ldr	r3, [r7, #28]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d077      	beq.n	8007220 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	005a      	lsls	r2, r3, #1
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	085b      	lsrs	r3, r3, #1
 800713a:	441a      	add	r2, r3
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	fbb2 f3f3 	udiv	r3, r2, r3
 8007144:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007146:	69bb      	ldr	r3, [r7, #24]
 8007148:	2b0f      	cmp	r3, #15
 800714a:	d916      	bls.n	800717a <UART_SetConfig+0x3ee>
 800714c:	69bb      	ldr	r3, [r7, #24]
 800714e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007152:	d212      	bcs.n	800717a <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007154:	69bb      	ldr	r3, [r7, #24]
 8007156:	b29b      	uxth	r3, r3
 8007158:	f023 030f 	bic.w	r3, r3, #15
 800715c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800715e:	69bb      	ldr	r3, [r7, #24]
 8007160:	085b      	lsrs	r3, r3, #1
 8007162:	b29b      	uxth	r3, r3
 8007164:	f003 0307 	and.w	r3, r3, #7
 8007168:	b29a      	uxth	r2, r3
 800716a:	8afb      	ldrh	r3, [r7, #22]
 800716c:	4313      	orrs	r3, r2
 800716e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	8afa      	ldrh	r2, [r7, #22]
 8007176:	60da      	str	r2, [r3, #12]
 8007178:	e052      	b.n	8007220 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800717a:	2301      	movs	r3, #1
 800717c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007180:	e04e      	b.n	8007220 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007182:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007186:	2b08      	cmp	r3, #8
 8007188:	d827      	bhi.n	80071da <UART_SetConfig+0x44e>
 800718a:	a201      	add	r2, pc, #4	@ (adr r2, 8007190 <UART_SetConfig+0x404>)
 800718c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007190:	080071b5 	.word	0x080071b5
 8007194:	080071bd 	.word	0x080071bd
 8007198:	080071c5 	.word	0x080071c5
 800719c:	080071db 	.word	0x080071db
 80071a0:	080071cb 	.word	0x080071cb
 80071a4:	080071db 	.word	0x080071db
 80071a8:	080071db 	.word	0x080071db
 80071ac:	080071db 	.word	0x080071db
 80071b0:	080071d3 	.word	0x080071d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071b4:	f7ff f8bc 	bl	8006330 <HAL_RCC_GetPCLK1Freq>
 80071b8:	61f8      	str	r0, [r7, #28]
        break;
 80071ba:	e014      	b.n	80071e6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071bc:	f7ff f8ce 	bl	800635c <HAL_RCC_GetPCLK2Freq>
 80071c0:	61f8      	str	r0, [r7, #28]
        break;
 80071c2:	e010      	b.n	80071e6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071c4:	4b1d      	ldr	r3, [pc, #116]	@ (800723c <UART_SetConfig+0x4b0>)
 80071c6:	61fb      	str	r3, [r7, #28]
        break;
 80071c8:	e00d      	b.n	80071e6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071ca:	f7ff f819 	bl	8006200 <HAL_RCC_GetSysClockFreq>
 80071ce:	61f8      	str	r0, [r7, #28]
        break;
 80071d0:	e009      	b.n	80071e6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80071d6:	61fb      	str	r3, [r7, #28]
        break;
 80071d8:	e005      	b.n	80071e6 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 80071da:	2300      	movs	r3, #0
 80071dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80071de:	2301      	movs	r3, #1
 80071e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80071e4:	bf00      	nop
    }

    if (pclk != 0U)
 80071e6:	69fb      	ldr	r3, [r7, #28]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d019      	beq.n	8007220 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	085a      	lsrs	r2, r3, #1
 80071f2:	69fb      	ldr	r3, [r7, #28]
 80071f4:	441a      	add	r2, r3
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80071fe:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007200:	69bb      	ldr	r3, [r7, #24]
 8007202:	2b0f      	cmp	r3, #15
 8007204:	d909      	bls.n	800721a <UART_SetConfig+0x48e>
 8007206:	69bb      	ldr	r3, [r7, #24]
 8007208:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800720c:	d205      	bcs.n	800721a <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800720e:	69bb      	ldr	r3, [r7, #24]
 8007210:	b29a      	uxth	r2, r3
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	60da      	str	r2, [r3, #12]
 8007218:	e002      	b.n	8007220 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800721a:	2301      	movs	r3, #1
 800721c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2200      	movs	r2, #0
 8007224:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2200      	movs	r2, #0
 800722a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800722c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007230:	4618      	mov	r0, r3
 8007232:	3728      	adds	r7, #40	@ 0x28
 8007234:	46bd      	mov	sp, r7
 8007236:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800723a:	bf00      	nop
 800723c:	00f42400 	.word	0x00f42400

08007240 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007240:	b480      	push	{r7}
 8007242:	b083      	sub	sp, #12
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800724c:	f003 0308 	and.w	r3, r3, #8
 8007250:	2b00      	cmp	r3, #0
 8007252:	d00a      	beq.n	800726a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	430a      	orrs	r2, r1
 8007268:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800726e:	f003 0301 	and.w	r3, r3, #1
 8007272:	2b00      	cmp	r3, #0
 8007274:	d00a      	beq.n	800728c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	430a      	orrs	r2, r1
 800728a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007290:	f003 0302 	and.w	r3, r3, #2
 8007294:	2b00      	cmp	r3, #0
 8007296:	d00a      	beq.n	80072ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	430a      	orrs	r2, r1
 80072ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072b2:	f003 0304 	and.w	r3, r3, #4
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d00a      	beq.n	80072d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	430a      	orrs	r2, r1
 80072ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072d4:	f003 0310 	and.w	r3, r3, #16
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d00a      	beq.n	80072f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	430a      	orrs	r2, r1
 80072f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072f6:	f003 0320 	and.w	r3, r3, #32
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d00a      	beq.n	8007314 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	430a      	orrs	r2, r1
 8007312:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007318:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800731c:	2b00      	cmp	r3, #0
 800731e:	d01a      	beq.n	8007356 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	430a      	orrs	r2, r1
 8007334:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800733a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800733e:	d10a      	bne.n	8007356 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	430a      	orrs	r2, r1
 8007354:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800735a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800735e:	2b00      	cmp	r3, #0
 8007360:	d00a      	beq.n	8007378 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	430a      	orrs	r2, r1
 8007376:	605a      	str	r2, [r3, #4]
  }
}
 8007378:	bf00      	nop
 800737a:	370c      	adds	r7, #12
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr

08007384 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b098      	sub	sp, #96	@ 0x60
 8007388:	af02      	add	r7, sp, #8
 800738a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2200      	movs	r2, #0
 8007390:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007394:	f7fb fff8 	bl	8003388 <HAL_GetTick>
 8007398:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f003 0308 	and.w	r3, r3, #8
 80073a4:	2b08      	cmp	r3, #8
 80073a6:	d12e      	bne.n	8007406 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073a8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80073ac:	9300      	str	r3, [sp, #0]
 80073ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80073b0:	2200      	movs	r2, #0
 80073b2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 f88c 	bl	80074d4 <UART_WaitOnFlagUntilTimeout>
 80073bc:	4603      	mov	r3, r0
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d021      	beq.n	8007406 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073ca:	e853 3f00 	ldrex	r3, [r3]
 80073ce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80073d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80073d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	461a      	mov	r2, r3
 80073de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80073e2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80073e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80073e8:	e841 2300 	strex	r3, r2, [r1]
 80073ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80073ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d1e6      	bne.n	80073c2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2220      	movs	r2, #32
 80073f8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2200      	movs	r2, #0
 80073fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007402:	2303      	movs	r3, #3
 8007404:	e062      	b.n	80074cc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f003 0304 	and.w	r3, r3, #4
 8007410:	2b04      	cmp	r3, #4
 8007412:	d149      	bne.n	80074a8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007414:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007418:	9300      	str	r3, [sp, #0]
 800741a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800741c:	2200      	movs	r2, #0
 800741e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 f856 	bl	80074d4 <UART_WaitOnFlagUntilTimeout>
 8007428:	4603      	mov	r3, r0
 800742a:	2b00      	cmp	r3, #0
 800742c:	d03c      	beq.n	80074a8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007436:	e853 3f00 	ldrex	r3, [r3]
 800743a:	623b      	str	r3, [r7, #32]
   return(result);
 800743c:	6a3b      	ldr	r3, [r7, #32]
 800743e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007442:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	461a      	mov	r2, r3
 800744a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800744c:	633b      	str	r3, [r7, #48]	@ 0x30
 800744e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007450:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007452:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007454:	e841 2300 	strex	r3, r2, [r1]
 8007458:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800745a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800745c:	2b00      	cmp	r3, #0
 800745e:	d1e6      	bne.n	800742e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	3308      	adds	r3, #8
 8007466:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	e853 3f00 	ldrex	r3, [r3]
 800746e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f023 0301 	bic.w	r3, r3, #1
 8007476:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	3308      	adds	r3, #8
 800747e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007480:	61fa      	str	r2, [r7, #28]
 8007482:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007484:	69b9      	ldr	r1, [r7, #24]
 8007486:	69fa      	ldr	r2, [r7, #28]
 8007488:	e841 2300 	strex	r3, r2, [r1]
 800748c:	617b      	str	r3, [r7, #20]
   return(result);
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d1e5      	bne.n	8007460 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2220      	movs	r2, #32
 8007498:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2200      	movs	r2, #0
 80074a0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074a4:	2303      	movs	r3, #3
 80074a6:	e011      	b.n	80074cc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2220      	movs	r2, #32
 80074ac:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2220      	movs	r2, #32
 80074b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2200      	movs	r2, #0
 80074ba:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2200      	movs	r2, #0
 80074c0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2200      	movs	r2, #0
 80074c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80074ca:	2300      	movs	r3, #0
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3758      	adds	r7, #88	@ 0x58
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b084      	sub	sp, #16
 80074d8:	af00      	add	r7, sp, #0
 80074da:	60f8      	str	r0, [r7, #12]
 80074dc:	60b9      	str	r1, [r7, #8]
 80074de:	603b      	str	r3, [r7, #0]
 80074e0:	4613      	mov	r3, r2
 80074e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074e4:	e04f      	b.n	8007586 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074e6:	69bb      	ldr	r3, [r7, #24]
 80074e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80074ec:	d04b      	beq.n	8007586 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074ee:	f7fb ff4b 	bl	8003388 <HAL_GetTick>
 80074f2:	4602      	mov	r2, r0
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	1ad3      	subs	r3, r2, r3
 80074f8:	69ba      	ldr	r2, [r7, #24]
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d302      	bcc.n	8007504 <UART_WaitOnFlagUntilTimeout+0x30>
 80074fe:	69bb      	ldr	r3, [r7, #24]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d101      	bne.n	8007508 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007504:	2303      	movs	r3, #3
 8007506:	e04e      	b.n	80075a6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f003 0304 	and.w	r3, r3, #4
 8007512:	2b00      	cmp	r3, #0
 8007514:	d037      	beq.n	8007586 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	2b80      	cmp	r3, #128	@ 0x80
 800751a:	d034      	beq.n	8007586 <UART_WaitOnFlagUntilTimeout+0xb2>
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	2b40      	cmp	r3, #64	@ 0x40
 8007520:	d031      	beq.n	8007586 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	69db      	ldr	r3, [r3, #28]
 8007528:	f003 0308 	and.w	r3, r3, #8
 800752c:	2b08      	cmp	r3, #8
 800752e:	d110      	bne.n	8007552 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	2208      	movs	r2, #8
 8007536:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007538:	68f8      	ldr	r0, [r7, #12]
 800753a:	f000 f838 	bl	80075ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2208      	movs	r2, #8
 8007542:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2200      	movs	r2, #0
 800754a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800754e:	2301      	movs	r3, #1
 8007550:	e029      	b.n	80075a6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	69db      	ldr	r3, [r3, #28]
 8007558:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800755c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007560:	d111      	bne.n	8007586 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800756a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800756c:	68f8      	ldr	r0, [r7, #12]
 800756e:	f000 f81e 	bl	80075ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2220      	movs	r2, #32
 8007576:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2200      	movs	r2, #0
 800757e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007582:	2303      	movs	r3, #3
 8007584:	e00f      	b.n	80075a6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	69da      	ldr	r2, [r3, #28]
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	4013      	ands	r3, r2
 8007590:	68ba      	ldr	r2, [r7, #8]
 8007592:	429a      	cmp	r2, r3
 8007594:	bf0c      	ite	eq
 8007596:	2301      	moveq	r3, #1
 8007598:	2300      	movne	r3, #0
 800759a:	b2db      	uxtb	r3, r3
 800759c:	461a      	mov	r2, r3
 800759e:	79fb      	ldrb	r3, [r7, #7]
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d0a0      	beq.n	80074e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80075a4:	2300      	movs	r3, #0
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3710      	adds	r7, #16
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}

080075ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075ae:	b480      	push	{r7}
 80075b0:	b095      	sub	sp, #84	@ 0x54
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075be:	e853 3f00 	ldrex	r3, [r3]
 80075c2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80075c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80075ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	461a      	mov	r2, r3
 80075d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80075d6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80075da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80075dc:	e841 2300 	strex	r3, r2, [r1]
 80075e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80075e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d1e6      	bne.n	80075b6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	3308      	adds	r3, #8
 80075ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f0:	6a3b      	ldr	r3, [r7, #32]
 80075f2:	e853 3f00 	ldrex	r3, [r3]
 80075f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80075f8:	69fb      	ldr	r3, [r7, #28]
 80075fa:	f023 0301 	bic.w	r3, r3, #1
 80075fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	3308      	adds	r3, #8
 8007606:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007608:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800760a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800760c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800760e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007610:	e841 2300 	strex	r3, r2, [r1]
 8007614:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007618:	2b00      	cmp	r3, #0
 800761a:	d1e5      	bne.n	80075e8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007620:	2b01      	cmp	r3, #1
 8007622:	d118      	bne.n	8007656 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	e853 3f00 	ldrex	r3, [r3]
 8007630:	60bb      	str	r3, [r7, #8]
   return(result);
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	f023 0310 	bic.w	r3, r3, #16
 8007638:	647b      	str	r3, [r7, #68]	@ 0x44
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	461a      	mov	r2, r3
 8007640:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007642:	61bb      	str	r3, [r7, #24]
 8007644:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007646:	6979      	ldr	r1, [r7, #20]
 8007648:	69ba      	ldr	r2, [r7, #24]
 800764a:	e841 2300 	strex	r3, r2, [r1]
 800764e:	613b      	str	r3, [r7, #16]
   return(result);
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d1e6      	bne.n	8007624 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2220      	movs	r2, #32
 800765a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2200      	movs	r2, #0
 8007668:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800766a:	bf00      	nop
 800766c:	3754      	adds	r7, #84	@ 0x54
 800766e:	46bd      	mov	sp, r7
 8007670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007674:	4770      	bx	lr

08007676 <_ZdlPvj>:
 8007676:	f000 b81a 	b.w	80076ae <_ZdlPv>

0800767a <_Znwj>:
 800767a:	2801      	cmp	r0, #1
 800767c:	bf38      	it	cc
 800767e:	2001      	movcc	r0, #1
 8007680:	b510      	push	{r4, lr}
 8007682:	4604      	mov	r4, r0
 8007684:	4620      	mov	r0, r4
 8007686:	f000 f825 	bl	80076d4 <malloc>
 800768a:	b100      	cbz	r0, 800768e <_Znwj+0x14>
 800768c:	bd10      	pop	{r4, pc}
 800768e:	f000 f811 	bl	80076b4 <_ZSt15get_new_handlerv>
 8007692:	b908      	cbnz	r0, 8007698 <_Znwj+0x1e>
 8007694:	f000 f816 	bl	80076c4 <abort>
 8007698:	4780      	blx	r0
 800769a:	e7f3      	b.n	8007684 <_Znwj+0xa>

0800769c <_ZSt17__throw_bad_allocv>:
 800769c:	b508      	push	{r3, lr}
 800769e:	f000 f811 	bl	80076c4 <abort>

080076a2 <_ZSt28__throw_bad_array_new_lengthv>:
 80076a2:	b508      	push	{r3, lr}
 80076a4:	f000 f80e 	bl	80076c4 <abort>

080076a8 <_ZSt20__throw_length_errorPKc>:
 80076a8:	b508      	push	{r3, lr}
 80076aa:	f000 f80b 	bl	80076c4 <abort>

080076ae <_ZdlPv>:
 80076ae:	f000 b819 	b.w	80076e4 <free>
	...

080076b4 <_ZSt15get_new_handlerv>:
 80076b4:	4b02      	ldr	r3, [pc, #8]	@ (80076c0 <_ZSt15get_new_handlerv+0xc>)
 80076b6:	6818      	ldr	r0, [r3, #0]
 80076b8:	f3bf 8f5b 	dmb	ish
 80076bc:	4770      	bx	lr
 80076be:	bf00      	nop
 80076c0:	200002e4 	.word	0x200002e4

080076c4 <abort>:
 80076c4:	b508      	push	{r3, lr}
 80076c6:	2006      	movs	r0, #6
 80076c8:	f000 f942 	bl	8007950 <raise>
 80076cc:	2001      	movs	r0, #1
 80076ce:	f7fb fd76 	bl	80031be <_exit>
	...

080076d4 <malloc>:
 80076d4:	4b02      	ldr	r3, [pc, #8]	@ (80076e0 <malloc+0xc>)
 80076d6:	4601      	mov	r1, r0
 80076d8:	6818      	ldr	r0, [r3, #0]
 80076da:	f000 b82d 	b.w	8007738 <_malloc_r>
 80076de:	bf00      	nop
 80076e0:	2000003c 	.word	0x2000003c

080076e4 <free>:
 80076e4:	4b02      	ldr	r3, [pc, #8]	@ (80076f0 <free+0xc>)
 80076e6:	4601      	mov	r1, r0
 80076e8:	6818      	ldr	r0, [r3, #0]
 80076ea:	f000 b989 	b.w	8007a00 <_free_r>
 80076ee:	bf00      	nop
 80076f0:	2000003c 	.word	0x2000003c

080076f4 <sbrk_aligned>:
 80076f4:	b570      	push	{r4, r5, r6, lr}
 80076f6:	4e0f      	ldr	r6, [pc, #60]	@ (8007734 <sbrk_aligned+0x40>)
 80076f8:	460c      	mov	r4, r1
 80076fa:	6831      	ldr	r1, [r6, #0]
 80076fc:	4605      	mov	r5, r0
 80076fe:	b911      	cbnz	r1, 8007706 <sbrk_aligned+0x12>
 8007700:	f000 f942 	bl	8007988 <_sbrk_r>
 8007704:	6030      	str	r0, [r6, #0]
 8007706:	4621      	mov	r1, r4
 8007708:	4628      	mov	r0, r5
 800770a:	f000 f93d 	bl	8007988 <_sbrk_r>
 800770e:	1c43      	adds	r3, r0, #1
 8007710:	d103      	bne.n	800771a <sbrk_aligned+0x26>
 8007712:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007716:	4620      	mov	r0, r4
 8007718:	bd70      	pop	{r4, r5, r6, pc}
 800771a:	1cc4      	adds	r4, r0, #3
 800771c:	f024 0403 	bic.w	r4, r4, #3
 8007720:	42a0      	cmp	r0, r4
 8007722:	d0f8      	beq.n	8007716 <sbrk_aligned+0x22>
 8007724:	1a21      	subs	r1, r4, r0
 8007726:	4628      	mov	r0, r5
 8007728:	f000 f92e 	bl	8007988 <_sbrk_r>
 800772c:	3001      	adds	r0, #1
 800772e:	d1f2      	bne.n	8007716 <sbrk_aligned+0x22>
 8007730:	e7ef      	b.n	8007712 <sbrk_aligned+0x1e>
 8007732:	bf00      	nop
 8007734:	200002e8 	.word	0x200002e8

08007738 <_malloc_r>:
 8007738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800773c:	1ccd      	adds	r5, r1, #3
 800773e:	f025 0503 	bic.w	r5, r5, #3
 8007742:	3508      	adds	r5, #8
 8007744:	2d0c      	cmp	r5, #12
 8007746:	bf38      	it	cc
 8007748:	250c      	movcc	r5, #12
 800774a:	2d00      	cmp	r5, #0
 800774c:	4606      	mov	r6, r0
 800774e:	db01      	blt.n	8007754 <_malloc_r+0x1c>
 8007750:	42a9      	cmp	r1, r5
 8007752:	d904      	bls.n	800775e <_malloc_r+0x26>
 8007754:	230c      	movs	r3, #12
 8007756:	6033      	str	r3, [r6, #0]
 8007758:	2000      	movs	r0, #0
 800775a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800775e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007834 <_malloc_r+0xfc>
 8007762:	f000 f89f 	bl	80078a4 <__malloc_lock>
 8007766:	f8d8 3000 	ldr.w	r3, [r8]
 800776a:	461c      	mov	r4, r3
 800776c:	bb44      	cbnz	r4, 80077c0 <_malloc_r+0x88>
 800776e:	4629      	mov	r1, r5
 8007770:	4630      	mov	r0, r6
 8007772:	f7ff ffbf 	bl	80076f4 <sbrk_aligned>
 8007776:	1c43      	adds	r3, r0, #1
 8007778:	4604      	mov	r4, r0
 800777a:	d158      	bne.n	800782e <_malloc_r+0xf6>
 800777c:	f8d8 4000 	ldr.w	r4, [r8]
 8007780:	4627      	mov	r7, r4
 8007782:	2f00      	cmp	r7, #0
 8007784:	d143      	bne.n	800780e <_malloc_r+0xd6>
 8007786:	2c00      	cmp	r4, #0
 8007788:	d04b      	beq.n	8007822 <_malloc_r+0xea>
 800778a:	6823      	ldr	r3, [r4, #0]
 800778c:	4639      	mov	r1, r7
 800778e:	4630      	mov	r0, r6
 8007790:	eb04 0903 	add.w	r9, r4, r3
 8007794:	f000 f8f8 	bl	8007988 <_sbrk_r>
 8007798:	4581      	cmp	r9, r0
 800779a:	d142      	bne.n	8007822 <_malloc_r+0xea>
 800779c:	6821      	ldr	r1, [r4, #0]
 800779e:	1a6d      	subs	r5, r5, r1
 80077a0:	4629      	mov	r1, r5
 80077a2:	4630      	mov	r0, r6
 80077a4:	f7ff ffa6 	bl	80076f4 <sbrk_aligned>
 80077a8:	3001      	adds	r0, #1
 80077aa:	d03a      	beq.n	8007822 <_malloc_r+0xea>
 80077ac:	6823      	ldr	r3, [r4, #0]
 80077ae:	442b      	add	r3, r5
 80077b0:	6023      	str	r3, [r4, #0]
 80077b2:	f8d8 3000 	ldr.w	r3, [r8]
 80077b6:	685a      	ldr	r2, [r3, #4]
 80077b8:	bb62      	cbnz	r2, 8007814 <_malloc_r+0xdc>
 80077ba:	f8c8 7000 	str.w	r7, [r8]
 80077be:	e00f      	b.n	80077e0 <_malloc_r+0xa8>
 80077c0:	6822      	ldr	r2, [r4, #0]
 80077c2:	1b52      	subs	r2, r2, r5
 80077c4:	d420      	bmi.n	8007808 <_malloc_r+0xd0>
 80077c6:	2a0b      	cmp	r2, #11
 80077c8:	d917      	bls.n	80077fa <_malloc_r+0xc2>
 80077ca:	1961      	adds	r1, r4, r5
 80077cc:	42a3      	cmp	r3, r4
 80077ce:	6025      	str	r5, [r4, #0]
 80077d0:	bf18      	it	ne
 80077d2:	6059      	strne	r1, [r3, #4]
 80077d4:	6863      	ldr	r3, [r4, #4]
 80077d6:	bf08      	it	eq
 80077d8:	f8c8 1000 	streq.w	r1, [r8]
 80077dc:	5162      	str	r2, [r4, r5]
 80077de:	604b      	str	r3, [r1, #4]
 80077e0:	4630      	mov	r0, r6
 80077e2:	f000 f865 	bl	80078b0 <__malloc_unlock>
 80077e6:	f104 000b 	add.w	r0, r4, #11
 80077ea:	1d23      	adds	r3, r4, #4
 80077ec:	f020 0007 	bic.w	r0, r0, #7
 80077f0:	1ac2      	subs	r2, r0, r3
 80077f2:	bf1c      	itt	ne
 80077f4:	1a1b      	subne	r3, r3, r0
 80077f6:	50a3      	strne	r3, [r4, r2]
 80077f8:	e7af      	b.n	800775a <_malloc_r+0x22>
 80077fa:	6862      	ldr	r2, [r4, #4]
 80077fc:	42a3      	cmp	r3, r4
 80077fe:	bf0c      	ite	eq
 8007800:	f8c8 2000 	streq.w	r2, [r8]
 8007804:	605a      	strne	r2, [r3, #4]
 8007806:	e7eb      	b.n	80077e0 <_malloc_r+0xa8>
 8007808:	4623      	mov	r3, r4
 800780a:	6864      	ldr	r4, [r4, #4]
 800780c:	e7ae      	b.n	800776c <_malloc_r+0x34>
 800780e:	463c      	mov	r4, r7
 8007810:	687f      	ldr	r7, [r7, #4]
 8007812:	e7b6      	b.n	8007782 <_malloc_r+0x4a>
 8007814:	461a      	mov	r2, r3
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	42a3      	cmp	r3, r4
 800781a:	d1fb      	bne.n	8007814 <_malloc_r+0xdc>
 800781c:	2300      	movs	r3, #0
 800781e:	6053      	str	r3, [r2, #4]
 8007820:	e7de      	b.n	80077e0 <_malloc_r+0xa8>
 8007822:	230c      	movs	r3, #12
 8007824:	6033      	str	r3, [r6, #0]
 8007826:	4630      	mov	r0, r6
 8007828:	f000 f842 	bl	80078b0 <__malloc_unlock>
 800782c:	e794      	b.n	8007758 <_malloc_r+0x20>
 800782e:	6005      	str	r5, [r0, #0]
 8007830:	e7d6      	b.n	80077e0 <_malloc_r+0xa8>
 8007832:	bf00      	nop
 8007834:	200002ec 	.word	0x200002ec

08007838 <sniprintf>:
 8007838:	b40c      	push	{r2, r3}
 800783a:	b530      	push	{r4, r5, lr}
 800783c:	4b18      	ldr	r3, [pc, #96]	@ (80078a0 <sniprintf+0x68>)
 800783e:	1e0c      	subs	r4, r1, #0
 8007840:	681d      	ldr	r5, [r3, #0]
 8007842:	b09d      	sub	sp, #116	@ 0x74
 8007844:	da08      	bge.n	8007858 <sniprintf+0x20>
 8007846:	238b      	movs	r3, #139	@ 0x8b
 8007848:	602b      	str	r3, [r5, #0]
 800784a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800784e:	b01d      	add	sp, #116	@ 0x74
 8007850:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007854:	b002      	add	sp, #8
 8007856:	4770      	bx	lr
 8007858:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800785c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007860:	f04f 0300 	mov.w	r3, #0
 8007864:	931b      	str	r3, [sp, #108]	@ 0x6c
 8007866:	bf14      	ite	ne
 8007868:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800786c:	4623      	moveq	r3, r4
 800786e:	9304      	str	r3, [sp, #16]
 8007870:	9307      	str	r3, [sp, #28]
 8007872:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007876:	9002      	str	r0, [sp, #8]
 8007878:	9006      	str	r0, [sp, #24]
 800787a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800787e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007880:	ab21      	add	r3, sp, #132	@ 0x84
 8007882:	a902      	add	r1, sp, #8
 8007884:	4628      	mov	r0, r5
 8007886:	9301      	str	r3, [sp, #4]
 8007888:	f000 f960 	bl	8007b4c <_svfiprintf_r>
 800788c:	1c43      	adds	r3, r0, #1
 800788e:	bfbc      	itt	lt
 8007890:	238b      	movlt	r3, #139	@ 0x8b
 8007892:	602b      	strlt	r3, [r5, #0]
 8007894:	2c00      	cmp	r4, #0
 8007896:	d0da      	beq.n	800784e <sniprintf+0x16>
 8007898:	9b02      	ldr	r3, [sp, #8]
 800789a:	2200      	movs	r2, #0
 800789c:	701a      	strb	r2, [r3, #0]
 800789e:	e7d6      	b.n	800784e <sniprintf+0x16>
 80078a0:	2000003c 	.word	0x2000003c

080078a4 <__malloc_lock>:
 80078a4:	4801      	ldr	r0, [pc, #4]	@ (80078ac <__malloc_lock+0x8>)
 80078a6:	f000 b8a9 	b.w	80079fc <__retarget_lock_acquire_recursive>
 80078aa:	bf00      	nop
 80078ac:	20000428 	.word	0x20000428

080078b0 <__malloc_unlock>:
 80078b0:	4801      	ldr	r0, [pc, #4]	@ (80078b8 <__malloc_unlock+0x8>)
 80078b2:	f000 b8a4 	b.w	80079fe <__retarget_lock_release_recursive>
 80078b6:	bf00      	nop
 80078b8:	20000428 	.word	0x20000428

080078bc <memmove>:
 80078bc:	4288      	cmp	r0, r1
 80078be:	b510      	push	{r4, lr}
 80078c0:	eb01 0402 	add.w	r4, r1, r2
 80078c4:	d902      	bls.n	80078cc <memmove+0x10>
 80078c6:	4284      	cmp	r4, r0
 80078c8:	4623      	mov	r3, r4
 80078ca:	d807      	bhi.n	80078dc <memmove+0x20>
 80078cc:	1e43      	subs	r3, r0, #1
 80078ce:	42a1      	cmp	r1, r4
 80078d0:	d008      	beq.n	80078e4 <memmove+0x28>
 80078d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80078d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80078da:	e7f8      	b.n	80078ce <memmove+0x12>
 80078dc:	4402      	add	r2, r0
 80078de:	4601      	mov	r1, r0
 80078e0:	428a      	cmp	r2, r1
 80078e2:	d100      	bne.n	80078e6 <memmove+0x2a>
 80078e4:	bd10      	pop	{r4, pc}
 80078e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80078ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80078ee:	e7f7      	b.n	80078e0 <memmove+0x24>

080078f0 <memset>:
 80078f0:	4402      	add	r2, r0
 80078f2:	4603      	mov	r3, r0
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d100      	bne.n	80078fa <memset+0xa>
 80078f8:	4770      	bx	lr
 80078fa:	f803 1b01 	strb.w	r1, [r3], #1
 80078fe:	e7f9      	b.n	80078f4 <memset+0x4>

08007900 <_raise_r>:
 8007900:	291f      	cmp	r1, #31
 8007902:	b538      	push	{r3, r4, r5, lr}
 8007904:	4605      	mov	r5, r0
 8007906:	460c      	mov	r4, r1
 8007908:	d904      	bls.n	8007914 <_raise_r+0x14>
 800790a:	2316      	movs	r3, #22
 800790c:	6003      	str	r3, [r0, #0]
 800790e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007912:	bd38      	pop	{r3, r4, r5, pc}
 8007914:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007916:	b112      	cbz	r2, 800791e <_raise_r+0x1e>
 8007918:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800791c:	b94b      	cbnz	r3, 8007932 <_raise_r+0x32>
 800791e:	4628      	mov	r0, r5
 8007920:	f000 f830 	bl	8007984 <_getpid_r>
 8007924:	4622      	mov	r2, r4
 8007926:	4601      	mov	r1, r0
 8007928:	4628      	mov	r0, r5
 800792a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800792e:	f000 b817 	b.w	8007960 <_kill_r>
 8007932:	2b01      	cmp	r3, #1
 8007934:	d00a      	beq.n	800794c <_raise_r+0x4c>
 8007936:	1c59      	adds	r1, r3, #1
 8007938:	d103      	bne.n	8007942 <_raise_r+0x42>
 800793a:	2316      	movs	r3, #22
 800793c:	6003      	str	r3, [r0, #0]
 800793e:	2001      	movs	r0, #1
 8007940:	e7e7      	b.n	8007912 <_raise_r+0x12>
 8007942:	2100      	movs	r1, #0
 8007944:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007948:	4620      	mov	r0, r4
 800794a:	4798      	blx	r3
 800794c:	2000      	movs	r0, #0
 800794e:	e7e0      	b.n	8007912 <_raise_r+0x12>

08007950 <raise>:
 8007950:	4b02      	ldr	r3, [pc, #8]	@ (800795c <raise+0xc>)
 8007952:	4601      	mov	r1, r0
 8007954:	6818      	ldr	r0, [r3, #0]
 8007956:	f7ff bfd3 	b.w	8007900 <_raise_r>
 800795a:	bf00      	nop
 800795c:	2000003c 	.word	0x2000003c

08007960 <_kill_r>:
 8007960:	b538      	push	{r3, r4, r5, lr}
 8007962:	4d07      	ldr	r5, [pc, #28]	@ (8007980 <_kill_r+0x20>)
 8007964:	2300      	movs	r3, #0
 8007966:	4604      	mov	r4, r0
 8007968:	4608      	mov	r0, r1
 800796a:	4611      	mov	r1, r2
 800796c:	602b      	str	r3, [r5, #0]
 800796e:	f7fb fc16 	bl	800319e <_kill>
 8007972:	1c43      	adds	r3, r0, #1
 8007974:	d102      	bne.n	800797c <_kill_r+0x1c>
 8007976:	682b      	ldr	r3, [r5, #0]
 8007978:	b103      	cbz	r3, 800797c <_kill_r+0x1c>
 800797a:	6023      	str	r3, [r4, #0]
 800797c:	bd38      	pop	{r3, r4, r5, pc}
 800797e:	bf00      	nop
 8007980:	2000042c 	.word	0x2000042c

08007984 <_getpid_r>:
 8007984:	f7fb bc03 	b.w	800318e <_getpid>

08007988 <_sbrk_r>:
 8007988:	b538      	push	{r3, r4, r5, lr}
 800798a:	4d06      	ldr	r5, [pc, #24]	@ (80079a4 <_sbrk_r+0x1c>)
 800798c:	2300      	movs	r3, #0
 800798e:	4604      	mov	r4, r0
 8007990:	4608      	mov	r0, r1
 8007992:	602b      	str	r3, [r5, #0]
 8007994:	f7fb fc1e 	bl	80031d4 <_sbrk>
 8007998:	1c43      	adds	r3, r0, #1
 800799a:	d102      	bne.n	80079a2 <_sbrk_r+0x1a>
 800799c:	682b      	ldr	r3, [r5, #0]
 800799e:	b103      	cbz	r3, 80079a2 <_sbrk_r+0x1a>
 80079a0:	6023      	str	r3, [r4, #0]
 80079a2:	bd38      	pop	{r3, r4, r5, pc}
 80079a4:	2000042c 	.word	0x2000042c

080079a8 <__errno>:
 80079a8:	4b01      	ldr	r3, [pc, #4]	@ (80079b0 <__errno+0x8>)
 80079aa:	6818      	ldr	r0, [r3, #0]
 80079ac:	4770      	bx	lr
 80079ae:	bf00      	nop
 80079b0:	2000003c 	.word	0x2000003c

080079b4 <__libc_init_array>:
 80079b4:	b570      	push	{r4, r5, r6, lr}
 80079b6:	4d0d      	ldr	r5, [pc, #52]	@ (80079ec <__libc_init_array+0x38>)
 80079b8:	4c0d      	ldr	r4, [pc, #52]	@ (80079f0 <__libc_init_array+0x3c>)
 80079ba:	1b64      	subs	r4, r4, r5
 80079bc:	10a4      	asrs	r4, r4, #2
 80079be:	2600      	movs	r6, #0
 80079c0:	42a6      	cmp	r6, r4
 80079c2:	d109      	bne.n	80079d8 <__libc_init_array+0x24>
 80079c4:	4d0b      	ldr	r5, [pc, #44]	@ (80079f4 <__libc_init_array+0x40>)
 80079c6:	4c0c      	ldr	r4, [pc, #48]	@ (80079f8 <__libc_init_array+0x44>)
 80079c8:	f000 fb8c 	bl	80080e4 <_init>
 80079cc:	1b64      	subs	r4, r4, r5
 80079ce:	10a4      	asrs	r4, r4, #2
 80079d0:	2600      	movs	r6, #0
 80079d2:	42a6      	cmp	r6, r4
 80079d4:	d105      	bne.n	80079e2 <__libc_init_array+0x2e>
 80079d6:	bd70      	pop	{r4, r5, r6, pc}
 80079d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80079dc:	4798      	blx	r3
 80079de:	3601      	adds	r6, #1
 80079e0:	e7ee      	b.n	80079c0 <__libc_init_array+0xc>
 80079e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80079e6:	4798      	blx	r3
 80079e8:	3601      	adds	r6, #1
 80079ea:	e7f2      	b.n	80079d2 <__libc_init_array+0x1e>
 80079ec:	0800820c 	.word	0x0800820c
 80079f0:	0800820c 	.word	0x0800820c
 80079f4:	0800820c 	.word	0x0800820c
 80079f8:	08008214 	.word	0x08008214

080079fc <__retarget_lock_acquire_recursive>:
 80079fc:	4770      	bx	lr

080079fe <__retarget_lock_release_recursive>:
 80079fe:	4770      	bx	lr

08007a00 <_free_r>:
 8007a00:	b538      	push	{r3, r4, r5, lr}
 8007a02:	4605      	mov	r5, r0
 8007a04:	2900      	cmp	r1, #0
 8007a06:	d041      	beq.n	8007a8c <_free_r+0x8c>
 8007a08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a0c:	1f0c      	subs	r4, r1, #4
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	bfb8      	it	lt
 8007a12:	18e4      	addlt	r4, r4, r3
 8007a14:	f7ff ff46 	bl	80078a4 <__malloc_lock>
 8007a18:	4a1d      	ldr	r2, [pc, #116]	@ (8007a90 <_free_r+0x90>)
 8007a1a:	6813      	ldr	r3, [r2, #0]
 8007a1c:	b933      	cbnz	r3, 8007a2c <_free_r+0x2c>
 8007a1e:	6063      	str	r3, [r4, #4]
 8007a20:	6014      	str	r4, [r2, #0]
 8007a22:	4628      	mov	r0, r5
 8007a24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a28:	f7ff bf42 	b.w	80078b0 <__malloc_unlock>
 8007a2c:	42a3      	cmp	r3, r4
 8007a2e:	d908      	bls.n	8007a42 <_free_r+0x42>
 8007a30:	6820      	ldr	r0, [r4, #0]
 8007a32:	1821      	adds	r1, r4, r0
 8007a34:	428b      	cmp	r3, r1
 8007a36:	bf01      	itttt	eq
 8007a38:	6819      	ldreq	r1, [r3, #0]
 8007a3a:	685b      	ldreq	r3, [r3, #4]
 8007a3c:	1809      	addeq	r1, r1, r0
 8007a3e:	6021      	streq	r1, [r4, #0]
 8007a40:	e7ed      	b.n	8007a1e <_free_r+0x1e>
 8007a42:	461a      	mov	r2, r3
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	b10b      	cbz	r3, 8007a4c <_free_r+0x4c>
 8007a48:	42a3      	cmp	r3, r4
 8007a4a:	d9fa      	bls.n	8007a42 <_free_r+0x42>
 8007a4c:	6811      	ldr	r1, [r2, #0]
 8007a4e:	1850      	adds	r0, r2, r1
 8007a50:	42a0      	cmp	r0, r4
 8007a52:	d10b      	bne.n	8007a6c <_free_r+0x6c>
 8007a54:	6820      	ldr	r0, [r4, #0]
 8007a56:	4401      	add	r1, r0
 8007a58:	1850      	adds	r0, r2, r1
 8007a5a:	4283      	cmp	r3, r0
 8007a5c:	6011      	str	r1, [r2, #0]
 8007a5e:	d1e0      	bne.n	8007a22 <_free_r+0x22>
 8007a60:	6818      	ldr	r0, [r3, #0]
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	6053      	str	r3, [r2, #4]
 8007a66:	4408      	add	r0, r1
 8007a68:	6010      	str	r0, [r2, #0]
 8007a6a:	e7da      	b.n	8007a22 <_free_r+0x22>
 8007a6c:	d902      	bls.n	8007a74 <_free_r+0x74>
 8007a6e:	230c      	movs	r3, #12
 8007a70:	602b      	str	r3, [r5, #0]
 8007a72:	e7d6      	b.n	8007a22 <_free_r+0x22>
 8007a74:	6820      	ldr	r0, [r4, #0]
 8007a76:	1821      	adds	r1, r4, r0
 8007a78:	428b      	cmp	r3, r1
 8007a7a:	bf04      	itt	eq
 8007a7c:	6819      	ldreq	r1, [r3, #0]
 8007a7e:	685b      	ldreq	r3, [r3, #4]
 8007a80:	6063      	str	r3, [r4, #4]
 8007a82:	bf04      	itt	eq
 8007a84:	1809      	addeq	r1, r1, r0
 8007a86:	6021      	streq	r1, [r4, #0]
 8007a88:	6054      	str	r4, [r2, #4]
 8007a8a:	e7ca      	b.n	8007a22 <_free_r+0x22>
 8007a8c:	bd38      	pop	{r3, r4, r5, pc}
 8007a8e:	bf00      	nop
 8007a90:	200002ec 	.word	0x200002ec

08007a94 <__ssputs_r>:
 8007a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a98:	688e      	ldr	r6, [r1, #8]
 8007a9a:	461f      	mov	r7, r3
 8007a9c:	42be      	cmp	r6, r7
 8007a9e:	680b      	ldr	r3, [r1, #0]
 8007aa0:	4682      	mov	sl, r0
 8007aa2:	460c      	mov	r4, r1
 8007aa4:	4690      	mov	r8, r2
 8007aa6:	d82d      	bhi.n	8007b04 <__ssputs_r+0x70>
 8007aa8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007aac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007ab0:	d026      	beq.n	8007b00 <__ssputs_r+0x6c>
 8007ab2:	6965      	ldr	r5, [r4, #20]
 8007ab4:	6909      	ldr	r1, [r1, #16]
 8007ab6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007aba:	eba3 0901 	sub.w	r9, r3, r1
 8007abe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007ac2:	1c7b      	adds	r3, r7, #1
 8007ac4:	444b      	add	r3, r9
 8007ac6:	106d      	asrs	r5, r5, #1
 8007ac8:	429d      	cmp	r5, r3
 8007aca:	bf38      	it	cc
 8007acc:	461d      	movcc	r5, r3
 8007ace:	0553      	lsls	r3, r2, #21
 8007ad0:	d527      	bpl.n	8007b22 <__ssputs_r+0x8e>
 8007ad2:	4629      	mov	r1, r5
 8007ad4:	f7ff fe30 	bl	8007738 <_malloc_r>
 8007ad8:	4606      	mov	r6, r0
 8007ada:	b360      	cbz	r0, 8007b36 <__ssputs_r+0xa2>
 8007adc:	6921      	ldr	r1, [r4, #16]
 8007ade:	464a      	mov	r2, r9
 8007ae0:	f000 faea 	bl	80080b8 <memcpy>
 8007ae4:	89a3      	ldrh	r3, [r4, #12]
 8007ae6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007aea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007aee:	81a3      	strh	r3, [r4, #12]
 8007af0:	6126      	str	r6, [r4, #16]
 8007af2:	6165      	str	r5, [r4, #20]
 8007af4:	444e      	add	r6, r9
 8007af6:	eba5 0509 	sub.w	r5, r5, r9
 8007afa:	6026      	str	r6, [r4, #0]
 8007afc:	60a5      	str	r5, [r4, #8]
 8007afe:	463e      	mov	r6, r7
 8007b00:	42be      	cmp	r6, r7
 8007b02:	d900      	bls.n	8007b06 <__ssputs_r+0x72>
 8007b04:	463e      	mov	r6, r7
 8007b06:	6820      	ldr	r0, [r4, #0]
 8007b08:	4632      	mov	r2, r6
 8007b0a:	4641      	mov	r1, r8
 8007b0c:	f7ff fed6 	bl	80078bc <memmove>
 8007b10:	68a3      	ldr	r3, [r4, #8]
 8007b12:	1b9b      	subs	r3, r3, r6
 8007b14:	60a3      	str	r3, [r4, #8]
 8007b16:	6823      	ldr	r3, [r4, #0]
 8007b18:	4433      	add	r3, r6
 8007b1a:	6023      	str	r3, [r4, #0]
 8007b1c:	2000      	movs	r0, #0
 8007b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b22:	462a      	mov	r2, r5
 8007b24:	f000 fa9a 	bl	800805c <_realloc_r>
 8007b28:	4606      	mov	r6, r0
 8007b2a:	2800      	cmp	r0, #0
 8007b2c:	d1e0      	bne.n	8007af0 <__ssputs_r+0x5c>
 8007b2e:	6921      	ldr	r1, [r4, #16]
 8007b30:	4650      	mov	r0, sl
 8007b32:	f7ff ff65 	bl	8007a00 <_free_r>
 8007b36:	230c      	movs	r3, #12
 8007b38:	f8ca 3000 	str.w	r3, [sl]
 8007b3c:	89a3      	ldrh	r3, [r4, #12]
 8007b3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b42:	81a3      	strh	r3, [r4, #12]
 8007b44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007b48:	e7e9      	b.n	8007b1e <__ssputs_r+0x8a>
	...

08007b4c <_svfiprintf_r>:
 8007b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b50:	4698      	mov	r8, r3
 8007b52:	898b      	ldrh	r3, [r1, #12]
 8007b54:	061b      	lsls	r3, r3, #24
 8007b56:	b09d      	sub	sp, #116	@ 0x74
 8007b58:	4607      	mov	r7, r0
 8007b5a:	460d      	mov	r5, r1
 8007b5c:	4614      	mov	r4, r2
 8007b5e:	d510      	bpl.n	8007b82 <_svfiprintf_r+0x36>
 8007b60:	690b      	ldr	r3, [r1, #16]
 8007b62:	b973      	cbnz	r3, 8007b82 <_svfiprintf_r+0x36>
 8007b64:	2140      	movs	r1, #64	@ 0x40
 8007b66:	f7ff fde7 	bl	8007738 <_malloc_r>
 8007b6a:	6028      	str	r0, [r5, #0]
 8007b6c:	6128      	str	r0, [r5, #16]
 8007b6e:	b930      	cbnz	r0, 8007b7e <_svfiprintf_r+0x32>
 8007b70:	230c      	movs	r3, #12
 8007b72:	603b      	str	r3, [r7, #0]
 8007b74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007b78:	b01d      	add	sp, #116	@ 0x74
 8007b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b7e:	2340      	movs	r3, #64	@ 0x40
 8007b80:	616b      	str	r3, [r5, #20]
 8007b82:	2300      	movs	r3, #0
 8007b84:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b86:	2320      	movs	r3, #32
 8007b88:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007b8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b90:	2330      	movs	r3, #48	@ 0x30
 8007b92:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007d30 <_svfiprintf_r+0x1e4>
 8007b96:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007b9a:	f04f 0901 	mov.w	r9, #1
 8007b9e:	4623      	mov	r3, r4
 8007ba0:	469a      	mov	sl, r3
 8007ba2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ba6:	b10a      	cbz	r2, 8007bac <_svfiprintf_r+0x60>
 8007ba8:	2a25      	cmp	r2, #37	@ 0x25
 8007baa:	d1f9      	bne.n	8007ba0 <_svfiprintf_r+0x54>
 8007bac:	ebba 0b04 	subs.w	fp, sl, r4
 8007bb0:	d00b      	beq.n	8007bca <_svfiprintf_r+0x7e>
 8007bb2:	465b      	mov	r3, fp
 8007bb4:	4622      	mov	r2, r4
 8007bb6:	4629      	mov	r1, r5
 8007bb8:	4638      	mov	r0, r7
 8007bba:	f7ff ff6b 	bl	8007a94 <__ssputs_r>
 8007bbe:	3001      	adds	r0, #1
 8007bc0:	f000 80a7 	beq.w	8007d12 <_svfiprintf_r+0x1c6>
 8007bc4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007bc6:	445a      	add	r2, fp
 8007bc8:	9209      	str	r2, [sp, #36]	@ 0x24
 8007bca:	f89a 3000 	ldrb.w	r3, [sl]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	f000 809f 	beq.w	8007d12 <_svfiprintf_r+0x1c6>
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007bda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007bde:	f10a 0a01 	add.w	sl, sl, #1
 8007be2:	9304      	str	r3, [sp, #16]
 8007be4:	9307      	str	r3, [sp, #28]
 8007be6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007bea:	931a      	str	r3, [sp, #104]	@ 0x68
 8007bec:	4654      	mov	r4, sl
 8007bee:	2205      	movs	r2, #5
 8007bf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bf4:	484e      	ldr	r0, [pc, #312]	@ (8007d30 <_svfiprintf_r+0x1e4>)
 8007bf6:	f7f8 faeb 	bl	80001d0 <memchr>
 8007bfa:	9a04      	ldr	r2, [sp, #16]
 8007bfc:	b9d8      	cbnz	r0, 8007c36 <_svfiprintf_r+0xea>
 8007bfe:	06d0      	lsls	r0, r2, #27
 8007c00:	bf44      	itt	mi
 8007c02:	2320      	movmi	r3, #32
 8007c04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c08:	0711      	lsls	r1, r2, #28
 8007c0a:	bf44      	itt	mi
 8007c0c:	232b      	movmi	r3, #43	@ 0x2b
 8007c0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c12:	f89a 3000 	ldrb.w	r3, [sl]
 8007c16:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c18:	d015      	beq.n	8007c46 <_svfiprintf_r+0xfa>
 8007c1a:	9a07      	ldr	r2, [sp, #28]
 8007c1c:	4654      	mov	r4, sl
 8007c1e:	2000      	movs	r0, #0
 8007c20:	f04f 0c0a 	mov.w	ip, #10
 8007c24:	4621      	mov	r1, r4
 8007c26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c2a:	3b30      	subs	r3, #48	@ 0x30
 8007c2c:	2b09      	cmp	r3, #9
 8007c2e:	d94b      	bls.n	8007cc8 <_svfiprintf_r+0x17c>
 8007c30:	b1b0      	cbz	r0, 8007c60 <_svfiprintf_r+0x114>
 8007c32:	9207      	str	r2, [sp, #28]
 8007c34:	e014      	b.n	8007c60 <_svfiprintf_r+0x114>
 8007c36:	eba0 0308 	sub.w	r3, r0, r8
 8007c3a:	fa09 f303 	lsl.w	r3, r9, r3
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	9304      	str	r3, [sp, #16]
 8007c42:	46a2      	mov	sl, r4
 8007c44:	e7d2      	b.n	8007bec <_svfiprintf_r+0xa0>
 8007c46:	9b03      	ldr	r3, [sp, #12]
 8007c48:	1d19      	adds	r1, r3, #4
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	9103      	str	r1, [sp, #12]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	bfbb      	ittet	lt
 8007c52:	425b      	neglt	r3, r3
 8007c54:	f042 0202 	orrlt.w	r2, r2, #2
 8007c58:	9307      	strge	r3, [sp, #28]
 8007c5a:	9307      	strlt	r3, [sp, #28]
 8007c5c:	bfb8      	it	lt
 8007c5e:	9204      	strlt	r2, [sp, #16]
 8007c60:	7823      	ldrb	r3, [r4, #0]
 8007c62:	2b2e      	cmp	r3, #46	@ 0x2e
 8007c64:	d10a      	bne.n	8007c7c <_svfiprintf_r+0x130>
 8007c66:	7863      	ldrb	r3, [r4, #1]
 8007c68:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c6a:	d132      	bne.n	8007cd2 <_svfiprintf_r+0x186>
 8007c6c:	9b03      	ldr	r3, [sp, #12]
 8007c6e:	1d1a      	adds	r2, r3, #4
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	9203      	str	r2, [sp, #12]
 8007c74:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007c78:	3402      	adds	r4, #2
 8007c7a:	9305      	str	r3, [sp, #20]
 8007c7c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007d40 <_svfiprintf_r+0x1f4>
 8007c80:	7821      	ldrb	r1, [r4, #0]
 8007c82:	2203      	movs	r2, #3
 8007c84:	4650      	mov	r0, sl
 8007c86:	f7f8 faa3 	bl	80001d0 <memchr>
 8007c8a:	b138      	cbz	r0, 8007c9c <_svfiprintf_r+0x150>
 8007c8c:	9b04      	ldr	r3, [sp, #16]
 8007c8e:	eba0 000a 	sub.w	r0, r0, sl
 8007c92:	2240      	movs	r2, #64	@ 0x40
 8007c94:	4082      	lsls	r2, r0
 8007c96:	4313      	orrs	r3, r2
 8007c98:	3401      	adds	r4, #1
 8007c9a:	9304      	str	r3, [sp, #16]
 8007c9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ca0:	4824      	ldr	r0, [pc, #144]	@ (8007d34 <_svfiprintf_r+0x1e8>)
 8007ca2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007ca6:	2206      	movs	r2, #6
 8007ca8:	f7f8 fa92 	bl	80001d0 <memchr>
 8007cac:	2800      	cmp	r0, #0
 8007cae:	d036      	beq.n	8007d1e <_svfiprintf_r+0x1d2>
 8007cb0:	4b21      	ldr	r3, [pc, #132]	@ (8007d38 <_svfiprintf_r+0x1ec>)
 8007cb2:	bb1b      	cbnz	r3, 8007cfc <_svfiprintf_r+0x1b0>
 8007cb4:	9b03      	ldr	r3, [sp, #12]
 8007cb6:	3307      	adds	r3, #7
 8007cb8:	f023 0307 	bic.w	r3, r3, #7
 8007cbc:	3308      	adds	r3, #8
 8007cbe:	9303      	str	r3, [sp, #12]
 8007cc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cc2:	4433      	add	r3, r6
 8007cc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007cc6:	e76a      	b.n	8007b9e <_svfiprintf_r+0x52>
 8007cc8:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ccc:	460c      	mov	r4, r1
 8007cce:	2001      	movs	r0, #1
 8007cd0:	e7a8      	b.n	8007c24 <_svfiprintf_r+0xd8>
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	3401      	adds	r4, #1
 8007cd6:	9305      	str	r3, [sp, #20]
 8007cd8:	4619      	mov	r1, r3
 8007cda:	f04f 0c0a 	mov.w	ip, #10
 8007cde:	4620      	mov	r0, r4
 8007ce0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ce4:	3a30      	subs	r2, #48	@ 0x30
 8007ce6:	2a09      	cmp	r2, #9
 8007ce8:	d903      	bls.n	8007cf2 <_svfiprintf_r+0x1a6>
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d0c6      	beq.n	8007c7c <_svfiprintf_r+0x130>
 8007cee:	9105      	str	r1, [sp, #20]
 8007cf0:	e7c4      	b.n	8007c7c <_svfiprintf_r+0x130>
 8007cf2:	fb0c 2101 	mla	r1, ip, r1, r2
 8007cf6:	4604      	mov	r4, r0
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	e7f0      	b.n	8007cde <_svfiprintf_r+0x192>
 8007cfc:	ab03      	add	r3, sp, #12
 8007cfe:	9300      	str	r3, [sp, #0]
 8007d00:	462a      	mov	r2, r5
 8007d02:	4b0e      	ldr	r3, [pc, #56]	@ (8007d3c <_svfiprintf_r+0x1f0>)
 8007d04:	a904      	add	r1, sp, #16
 8007d06:	4638      	mov	r0, r7
 8007d08:	f3af 8000 	nop.w
 8007d0c:	1c42      	adds	r2, r0, #1
 8007d0e:	4606      	mov	r6, r0
 8007d10:	d1d6      	bne.n	8007cc0 <_svfiprintf_r+0x174>
 8007d12:	89ab      	ldrh	r3, [r5, #12]
 8007d14:	065b      	lsls	r3, r3, #25
 8007d16:	f53f af2d 	bmi.w	8007b74 <_svfiprintf_r+0x28>
 8007d1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007d1c:	e72c      	b.n	8007b78 <_svfiprintf_r+0x2c>
 8007d1e:	ab03      	add	r3, sp, #12
 8007d20:	9300      	str	r3, [sp, #0]
 8007d22:	462a      	mov	r2, r5
 8007d24:	4b05      	ldr	r3, [pc, #20]	@ (8007d3c <_svfiprintf_r+0x1f0>)
 8007d26:	a904      	add	r1, sp, #16
 8007d28:	4638      	mov	r0, r7
 8007d2a:	f000 f879 	bl	8007e20 <_printf_i>
 8007d2e:	e7ed      	b.n	8007d0c <_svfiprintf_r+0x1c0>
 8007d30:	080081d0 	.word	0x080081d0
 8007d34:	080081da 	.word	0x080081da
 8007d38:	00000000 	.word	0x00000000
 8007d3c:	08007a95 	.word	0x08007a95
 8007d40:	080081d6 	.word	0x080081d6

08007d44 <_printf_common>:
 8007d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d48:	4616      	mov	r6, r2
 8007d4a:	4698      	mov	r8, r3
 8007d4c:	688a      	ldr	r2, [r1, #8]
 8007d4e:	690b      	ldr	r3, [r1, #16]
 8007d50:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007d54:	4293      	cmp	r3, r2
 8007d56:	bfb8      	it	lt
 8007d58:	4613      	movlt	r3, r2
 8007d5a:	6033      	str	r3, [r6, #0]
 8007d5c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007d60:	4607      	mov	r7, r0
 8007d62:	460c      	mov	r4, r1
 8007d64:	b10a      	cbz	r2, 8007d6a <_printf_common+0x26>
 8007d66:	3301      	adds	r3, #1
 8007d68:	6033      	str	r3, [r6, #0]
 8007d6a:	6823      	ldr	r3, [r4, #0]
 8007d6c:	0699      	lsls	r1, r3, #26
 8007d6e:	bf42      	ittt	mi
 8007d70:	6833      	ldrmi	r3, [r6, #0]
 8007d72:	3302      	addmi	r3, #2
 8007d74:	6033      	strmi	r3, [r6, #0]
 8007d76:	6825      	ldr	r5, [r4, #0]
 8007d78:	f015 0506 	ands.w	r5, r5, #6
 8007d7c:	d106      	bne.n	8007d8c <_printf_common+0x48>
 8007d7e:	f104 0a19 	add.w	sl, r4, #25
 8007d82:	68e3      	ldr	r3, [r4, #12]
 8007d84:	6832      	ldr	r2, [r6, #0]
 8007d86:	1a9b      	subs	r3, r3, r2
 8007d88:	42ab      	cmp	r3, r5
 8007d8a:	dc26      	bgt.n	8007dda <_printf_common+0x96>
 8007d8c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007d90:	6822      	ldr	r2, [r4, #0]
 8007d92:	3b00      	subs	r3, #0
 8007d94:	bf18      	it	ne
 8007d96:	2301      	movne	r3, #1
 8007d98:	0692      	lsls	r2, r2, #26
 8007d9a:	d42b      	bmi.n	8007df4 <_printf_common+0xb0>
 8007d9c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007da0:	4641      	mov	r1, r8
 8007da2:	4638      	mov	r0, r7
 8007da4:	47c8      	blx	r9
 8007da6:	3001      	adds	r0, #1
 8007da8:	d01e      	beq.n	8007de8 <_printf_common+0xa4>
 8007daa:	6823      	ldr	r3, [r4, #0]
 8007dac:	6922      	ldr	r2, [r4, #16]
 8007dae:	f003 0306 	and.w	r3, r3, #6
 8007db2:	2b04      	cmp	r3, #4
 8007db4:	bf02      	ittt	eq
 8007db6:	68e5      	ldreq	r5, [r4, #12]
 8007db8:	6833      	ldreq	r3, [r6, #0]
 8007dba:	1aed      	subeq	r5, r5, r3
 8007dbc:	68a3      	ldr	r3, [r4, #8]
 8007dbe:	bf0c      	ite	eq
 8007dc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007dc4:	2500      	movne	r5, #0
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	bfc4      	itt	gt
 8007dca:	1a9b      	subgt	r3, r3, r2
 8007dcc:	18ed      	addgt	r5, r5, r3
 8007dce:	2600      	movs	r6, #0
 8007dd0:	341a      	adds	r4, #26
 8007dd2:	42b5      	cmp	r5, r6
 8007dd4:	d11a      	bne.n	8007e0c <_printf_common+0xc8>
 8007dd6:	2000      	movs	r0, #0
 8007dd8:	e008      	b.n	8007dec <_printf_common+0xa8>
 8007dda:	2301      	movs	r3, #1
 8007ddc:	4652      	mov	r2, sl
 8007dde:	4641      	mov	r1, r8
 8007de0:	4638      	mov	r0, r7
 8007de2:	47c8      	blx	r9
 8007de4:	3001      	adds	r0, #1
 8007de6:	d103      	bne.n	8007df0 <_printf_common+0xac>
 8007de8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007df0:	3501      	adds	r5, #1
 8007df2:	e7c6      	b.n	8007d82 <_printf_common+0x3e>
 8007df4:	18e1      	adds	r1, r4, r3
 8007df6:	1c5a      	adds	r2, r3, #1
 8007df8:	2030      	movs	r0, #48	@ 0x30
 8007dfa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007dfe:	4422      	add	r2, r4
 8007e00:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007e04:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007e08:	3302      	adds	r3, #2
 8007e0a:	e7c7      	b.n	8007d9c <_printf_common+0x58>
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	4622      	mov	r2, r4
 8007e10:	4641      	mov	r1, r8
 8007e12:	4638      	mov	r0, r7
 8007e14:	47c8      	blx	r9
 8007e16:	3001      	adds	r0, #1
 8007e18:	d0e6      	beq.n	8007de8 <_printf_common+0xa4>
 8007e1a:	3601      	adds	r6, #1
 8007e1c:	e7d9      	b.n	8007dd2 <_printf_common+0x8e>
	...

08007e20 <_printf_i>:
 8007e20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e24:	7e0f      	ldrb	r7, [r1, #24]
 8007e26:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007e28:	2f78      	cmp	r7, #120	@ 0x78
 8007e2a:	4691      	mov	r9, r2
 8007e2c:	4680      	mov	r8, r0
 8007e2e:	460c      	mov	r4, r1
 8007e30:	469a      	mov	sl, r3
 8007e32:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007e36:	d807      	bhi.n	8007e48 <_printf_i+0x28>
 8007e38:	2f62      	cmp	r7, #98	@ 0x62
 8007e3a:	d80a      	bhi.n	8007e52 <_printf_i+0x32>
 8007e3c:	2f00      	cmp	r7, #0
 8007e3e:	f000 80d1 	beq.w	8007fe4 <_printf_i+0x1c4>
 8007e42:	2f58      	cmp	r7, #88	@ 0x58
 8007e44:	f000 80b8 	beq.w	8007fb8 <_printf_i+0x198>
 8007e48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007e4c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007e50:	e03a      	b.n	8007ec8 <_printf_i+0xa8>
 8007e52:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007e56:	2b15      	cmp	r3, #21
 8007e58:	d8f6      	bhi.n	8007e48 <_printf_i+0x28>
 8007e5a:	a101      	add	r1, pc, #4	@ (adr r1, 8007e60 <_printf_i+0x40>)
 8007e5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007e60:	08007eb9 	.word	0x08007eb9
 8007e64:	08007ecd 	.word	0x08007ecd
 8007e68:	08007e49 	.word	0x08007e49
 8007e6c:	08007e49 	.word	0x08007e49
 8007e70:	08007e49 	.word	0x08007e49
 8007e74:	08007e49 	.word	0x08007e49
 8007e78:	08007ecd 	.word	0x08007ecd
 8007e7c:	08007e49 	.word	0x08007e49
 8007e80:	08007e49 	.word	0x08007e49
 8007e84:	08007e49 	.word	0x08007e49
 8007e88:	08007e49 	.word	0x08007e49
 8007e8c:	08007fcb 	.word	0x08007fcb
 8007e90:	08007ef7 	.word	0x08007ef7
 8007e94:	08007f85 	.word	0x08007f85
 8007e98:	08007e49 	.word	0x08007e49
 8007e9c:	08007e49 	.word	0x08007e49
 8007ea0:	08007fed 	.word	0x08007fed
 8007ea4:	08007e49 	.word	0x08007e49
 8007ea8:	08007ef7 	.word	0x08007ef7
 8007eac:	08007e49 	.word	0x08007e49
 8007eb0:	08007e49 	.word	0x08007e49
 8007eb4:	08007f8d 	.word	0x08007f8d
 8007eb8:	6833      	ldr	r3, [r6, #0]
 8007eba:	1d1a      	adds	r2, r3, #4
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	6032      	str	r2, [r6, #0]
 8007ec0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ec4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007ec8:	2301      	movs	r3, #1
 8007eca:	e09c      	b.n	8008006 <_printf_i+0x1e6>
 8007ecc:	6833      	ldr	r3, [r6, #0]
 8007ece:	6820      	ldr	r0, [r4, #0]
 8007ed0:	1d19      	adds	r1, r3, #4
 8007ed2:	6031      	str	r1, [r6, #0]
 8007ed4:	0606      	lsls	r6, r0, #24
 8007ed6:	d501      	bpl.n	8007edc <_printf_i+0xbc>
 8007ed8:	681d      	ldr	r5, [r3, #0]
 8007eda:	e003      	b.n	8007ee4 <_printf_i+0xc4>
 8007edc:	0645      	lsls	r5, r0, #25
 8007ede:	d5fb      	bpl.n	8007ed8 <_printf_i+0xb8>
 8007ee0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007ee4:	2d00      	cmp	r5, #0
 8007ee6:	da03      	bge.n	8007ef0 <_printf_i+0xd0>
 8007ee8:	232d      	movs	r3, #45	@ 0x2d
 8007eea:	426d      	negs	r5, r5
 8007eec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ef0:	4858      	ldr	r0, [pc, #352]	@ (8008054 <_printf_i+0x234>)
 8007ef2:	230a      	movs	r3, #10
 8007ef4:	e011      	b.n	8007f1a <_printf_i+0xfa>
 8007ef6:	6821      	ldr	r1, [r4, #0]
 8007ef8:	6833      	ldr	r3, [r6, #0]
 8007efa:	0608      	lsls	r0, r1, #24
 8007efc:	f853 5b04 	ldr.w	r5, [r3], #4
 8007f00:	d402      	bmi.n	8007f08 <_printf_i+0xe8>
 8007f02:	0649      	lsls	r1, r1, #25
 8007f04:	bf48      	it	mi
 8007f06:	b2ad      	uxthmi	r5, r5
 8007f08:	2f6f      	cmp	r7, #111	@ 0x6f
 8007f0a:	4852      	ldr	r0, [pc, #328]	@ (8008054 <_printf_i+0x234>)
 8007f0c:	6033      	str	r3, [r6, #0]
 8007f0e:	bf14      	ite	ne
 8007f10:	230a      	movne	r3, #10
 8007f12:	2308      	moveq	r3, #8
 8007f14:	2100      	movs	r1, #0
 8007f16:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007f1a:	6866      	ldr	r6, [r4, #4]
 8007f1c:	60a6      	str	r6, [r4, #8]
 8007f1e:	2e00      	cmp	r6, #0
 8007f20:	db05      	blt.n	8007f2e <_printf_i+0x10e>
 8007f22:	6821      	ldr	r1, [r4, #0]
 8007f24:	432e      	orrs	r6, r5
 8007f26:	f021 0104 	bic.w	r1, r1, #4
 8007f2a:	6021      	str	r1, [r4, #0]
 8007f2c:	d04b      	beq.n	8007fc6 <_printf_i+0x1a6>
 8007f2e:	4616      	mov	r6, r2
 8007f30:	fbb5 f1f3 	udiv	r1, r5, r3
 8007f34:	fb03 5711 	mls	r7, r3, r1, r5
 8007f38:	5dc7      	ldrb	r7, [r0, r7]
 8007f3a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007f3e:	462f      	mov	r7, r5
 8007f40:	42bb      	cmp	r3, r7
 8007f42:	460d      	mov	r5, r1
 8007f44:	d9f4      	bls.n	8007f30 <_printf_i+0x110>
 8007f46:	2b08      	cmp	r3, #8
 8007f48:	d10b      	bne.n	8007f62 <_printf_i+0x142>
 8007f4a:	6823      	ldr	r3, [r4, #0]
 8007f4c:	07df      	lsls	r7, r3, #31
 8007f4e:	d508      	bpl.n	8007f62 <_printf_i+0x142>
 8007f50:	6923      	ldr	r3, [r4, #16]
 8007f52:	6861      	ldr	r1, [r4, #4]
 8007f54:	4299      	cmp	r1, r3
 8007f56:	bfde      	ittt	le
 8007f58:	2330      	movle	r3, #48	@ 0x30
 8007f5a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007f5e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007f62:	1b92      	subs	r2, r2, r6
 8007f64:	6122      	str	r2, [r4, #16]
 8007f66:	f8cd a000 	str.w	sl, [sp]
 8007f6a:	464b      	mov	r3, r9
 8007f6c:	aa03      	add	r2, sp, #12
 8007f6e:	4621      	mov	r1, r4
 8007f70:	4640      	mov	r0, r8
 8007f72:	f7ff fee7 	bl	8007d44 <_printf_common>
 8007f76:	3001      	adds	r0, #1
 8007f78:	d14a      	bne.n	8008010 <_printf_i+0x1f0>
 8007f7a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007f7e:	b004      	add	sp, #16
 8007f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f84:	6823      	ldr	r3, [r4, #0]
 8007f86:	f043 0320 	orr.w	r3, r3, #32
 8007f8a:	6023      	str	r3, [r4, #0]
 8007f8c:	4832      	ldr	r0, [pc, #200]	@ (8008058 <_printf_i+0x238>)
 8007f8e:	2778      	movs	r7, #120	@ 0x78
 8007f90:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007f94:	6823      	ldr	r3, [r4, #0]
 8007f96:	6831      	ldr	r1, [r6, #0]
 8007f98:	061f      	lsls	r7, r3, #24
 8007f9a:	f851 5b04 	ldr.w	r5, [r1], #4
 8007f9e:	d402      	bmi.n	8007fa6 <_printf_i+0x186>
 8007fa0:	065f      	lsls	r7, r3, #25
 8007fa2:	bf48      	it	mi
 8007fa4:	b2ad      	uxthmi	r5, r5
 8007fa6:	6031      	str	r1, [r6, #0]
 8007fa8:	07d9      	lsls	r1, r3, #31
 8007faa:	bf44      	itt	mi
 8007fac:	f043 0320 	orrmi.w	r3, r3, #32
 8007fb0:	6023      	strmi	r3, [r4, #0]
 8007fb2:	b11d      	cbz	r5, 8007fbc <_printf_i+0x19c>
 8007fb4:	2310      	movs	r3, #16
 8007fb6:	e7ad      	b.n	8007f14 <_printf_i+0xf4>
 8007fb8:	4826      	ldr	r0, [pc, #152]	@ (8008054 <_printf_i+0x234>)
 8007fba:	e7e9      	b.n	8007f90 <_printf_i+0x170>
 8007fbc:	6823      	ldr	r3, [r4, #0]
 8007fbe:	f023 0320 	bic.w	r3, r3, #32
 8007fc2:	6023      	str	r3, [r4, #0]
 8007fc4:	e7f6      	b.n	8007fb4 <_printf_i+0x194>
 8007fc6:	4616      	mov	r6, r2
 8007fc8:	e7bd      	b.n	8007f46 <_printf_i+0x126>
 8007fca:	6833      	ldr	r3, [r6, #0]
 8007fcc:	6825      	ldr	r5, [r4, #0]
 8007fce:	6961      	ldr	r1, [r4, #20]
 8007fd0:	1d18      	adds	r0, r3, #4
 8007fd2:	6030      	str	r0, [r6, #0]
 8007fd4:	062e      	lsls	r6, r5, #24
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	d501      	bpl.n	8007fde <_printf_i+0x1be>
 8007fda:	6019      	str	r1, [r3, #0]
 8007fdc:	e002      	b.n	8007fe4 <_printf_i+0x1c4>
 8007fde:	0668      	lsls	r0, r5, #25
 8007fe0:	d5fb      	bpl.n	8007fda <_printf_i+0x1ba>
 8007fe2:	8019      	strh	r1, [r3, #0]
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	6123      	str	r3, [r4, #16]
 8007fe8:	4616      	mov	r6, r2
 8007fea:	e7bc      	b.n	8007f66 <_printf_i+0x146>
 8007fec:	6833      	ldr	r3, [r6, #0]
 8007fee:	1d1a      	adds	r2, r3, #4
 8007ff0:	6032      	str	r2, [r6, #0]
 8007ff2:	681e      	ldr	r6, [r3, #0]
 8007ff4:	6862      	ldr	r2, [r4, #4]
 8007ff6:	2100      	movs	r1, #0
 8007ff8:	4630      	mov	r0, r6
 8007ffa:	f7f8 f8e9 	bl	80001d0 <memchr>
 8007ffe:	b108      	cbz	r0, 8008004 <_printf_i+0x1e4>
 8008000:	1b80      	subs	r0, r0, r6
 8008002:	6060      	str	r0, [r4, #4]
 8008004:	6863      	ldr	r3, [r4, #4]
 8008006:	6123      	str	r3, [r4, #16]
 8008008:	2300      	movs	r3, #0
 800800a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800800e:	e7aa      	b.n	8007f66 <_printf_i+0x146>
 8008010:	6923      	ldr	r3, [r4, #16]
 8008012:	4632      	mov	r2, r6
 8008014:	4649      	mov	r1, r9
 8008016:	4640      	mov	r0, r8
 8008018:	47d0      	blx	sl
 800801a:	3001      	adds	r0, #1
 800801c:	d0ad      	beq.n	8007f7a <_printf_i+0x15a>
 800801e:	6823      	ldr	r3, [r4, #0]
 8008020:	079b      	lsls	r3, r3, #30
 8008022:	d413      	bmi.n	800804c <_printf_i+0x22c>
 8008024:	68e0      	ldr	r0, [r4, #12]
 8008026:	9b03      	ldr	r3, [sp, #12]
 8008028:	4298      	cmp	r0, r3
 800802a:	bfb8      	it	lt
 800802c:	4618      	movlt	r0, r3
 800802e:	e7a6      	b.n	8007f7e <_printf_i+0x15e>
 8008030:	2301      	movs	r3, #1
 8008032:	4632      	mov	r2, r6
 8008034:	4649      	mov	r1, r9
 8008036:	4640      	mov	r0, r8
 8008038:	47d0      	blx	sl
 800803a:	3001      	adds	r0, #1
 800803c:	d09d      	beq.n	8007f7a <_printf_i+0x15a>
 800803e:	3501      	adds	r5, #1
 8008040:	68e3      	ldr	r3, [r4, #12]
 8008042:	9903      	ldr	r1, [sp, #12]
 8008044:	1a5b      	subs	r3, r3, r1
 8008046:	42ab      	cmp	r3, r5
 8008048:	dcf2      	bgt.n	8008030 <_printf_i+0x210>
 800804a:	e7eb      	b.n	8008024 <_printf_i+0x204>
 800804c:	2500      	movs	r5, #0
 800804e:	f104 0619 	add.w	r6, r4, #25
 8008052:	e7f5      	b.n	8008040 <_printf_i+0x220>
 8008054:	080081e1 	.word	0x080081e1
 8008058:	080081f2 	.word	0x080081f2

0800805c <_realloc_r>:
 800805c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008060:	4607      	mov	r7, r0
 8008062:	4614      	mov	r4, r2
 8008064:	460d      	mov	r5, r1
 8008066:	b921      	cbnz	r1, 8008072 <_realloc_r+0x16>
 8008068:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800806c:	4611      	mov	r1, r2
 800806e:	f7ff bb63 	b.w	8007738 <_malloc_r>
 8008072:	b92a      	cbnz	r2, 8008080 <_realloc_r+0x24>
 8008074:	f7ff fcc4 	bl	8007a00 <_free_r>
 8008078:	4625      	mov	r5, r4
 800807a:	4628      	mov	r0, r5
 800807c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008080:	f000 f828 	bl	80080d4 <_malloc_usable_size_r>
 8008084:	4284      	cmp	r4, r0
 8008086:	4606      	mov	r6, r0
 8008088:	d802      	bhi.n	8008090 <_realloc_r+0x34>
 800808a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800808e:	d8f4      	bhi.n	800807a <_realloc_r+0x1e>
 8008090:	4621      	mov	r1, r4
 8008092:	4638      	mov	r0, r7
 8008094:	f7ff fb50 	bl	8007738 <_malloc_r>
 8008098:	4680      	mov	r8, r0
 800809a:	b908      	cbnz	r0, 80080a0 <_realloc_r+0x44>
 800809c:	4645      	mov	r5, r8
 800809e:	e7ec      	b.n	800807a <_realloc_r+0x1e>
 80080a0:	42b4      	cmp	r4, r6
 80080a2:	4622      	mov	r2, r4
 80080a4:	4629      	mov	r1, r5
 80080a6:	bf28      	it	cs
 80080a8:	4632      	movcs	r2, r6
 80080aa:	f000 f805 	bl	80080b8 <memcpy>
 80080ae:	4629      	mov	r1, r5
 80080b0:	4638      	mov	r0, r7
 80080b2:	f7ff fca5 	bl	8007a00 <_free_r>
 80080b6:	e7f1      	b.n	800809c <_realloc_r+0x40>

080080b8 <memcpy>:
 80080b8:	440a      	add	r2, r1
 80080ba:	4291      	cmp	r1, r2
 80080bc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80080c0:	d100      	bne.n	80080c4 <memcpy+0xc>
 80080c2:	4770      	bx	lr
 80080c4:	b510      	push	{r4, lr}
 80080c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080ce:	4291      	cmp	r1, r2
 80080d0:	d1f9      	bne.n	80080c6 <memcpy+0xe>
 80080d2:	bd10      	pop	{r4, pc}

080080d4 <_malloc_usable_size_r>:
 80080d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080d8:	1f18      	subs	r0, r3, #4
 80080da:	2b00      	cmp	r3, #0
 80080dc:	bfbc      	itt	lt
 80080de:	580b      	ldrlt	r3, [r1, r0]
 80080e0:	18c0      	addlt	r0, r0, r3
 80080e2:	4770      	bx	lr

080080e4 <_init>:
 80080e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080e6:	bf00      	nop
 80080e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080ea:	bc08      	pop	{r3}
 80080ec:	469e      	mov	lr, r3
 80080ee:	4770      	bx	lr

080080f0 <_fini>:
 80080f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080f2:	bf00      	nop
 80080f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080f6:	bc08      	pop	{r3}
 80080f8:	469e      	mov	lr, r3
 80080fa:	4770      	bx	lr
