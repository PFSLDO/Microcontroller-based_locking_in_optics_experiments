
lcdOnStm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009174  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000020c  08009304  08009304  0000a304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009510  08009510  0000b088  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009510  08009510  0000a510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009518  08009518  0000b088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08009518  08009518  0000a518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  08009520  08009520  0000a520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  08009528  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a4  20000088  080095b0  0000b088  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000042c  080095b0  0000b42c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ac57  00000000  00000000  0000b0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030e3  00000000  00000000  00025d0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001890  00000000  00000000  00028df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001335  00000000  00000000  0002a688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000207c7  00000000  00000000  0002b9bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019aca  00000000  00000000  0004c184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c83f1  00000000  00000000  00065c4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012e03f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000079c8  00000000  00000000  0012e084  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  00135a4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080092ec 	.word	0x080092ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	080092ec 	.word	0x080092ec

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	@ 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__gedf2>:
 800083c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000840:	e006      	b.n	8000850 <__cmpdf2+0x4>
 8000842:	bf00      	nop

08000844 <__ledf2>:
 8000844:	f04f 0c01 	mov.w	ip, #1
 8000848:	e002      	b.n	8000850 <__cmpdf2+0x4>
 800084a:	bf00      	nop

0800084c <__cmpdf2>:
 800084c:	f04f 0c01 	mov.w	ip, #1
 8000850:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000854:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000858:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800085c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000860:	bf18      	it	ne
 8000862:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000866:	d01b      	beq.n	80008a0 <__cmpdf2+0x54>
 8000868:	b001      	add	sp, #4
 800086a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800086e:	bf0c      	ite	eq
 8000870:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000874:	ea91 0f03 	teqne	r1, r3
 8000878:	bf02      	ittt	eq
 800087a:	ea90 0f02 	teqeq	r0, r2
 800087e:	2000      	moveq	r0, #0
 8000880:	4770      	bxeq	lr
 8000882:	f110 0f00 	cmn.w	r0, #0
 8000886:	ea91 0f03 	teq	r1, r3
 800088a:	bf58      	it	pl
 800088c:	4299      	cmppl	r1, r3
 800088e:	bf08      	it	eq
 8000890:	4290      	cmpeq	r0, r2
 8000892:	bf2c      	ite	cs
 8000894:	17d8      	asrcs	r0, r3, #31
 8000896:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800089a:	f040 0001 	orr.w	r0, r0, #1
 800089e:	4770      	bx	lr
 80008a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008a8:	d102      	bne.n	80008b0 <__cmpdf2+0x64>
 80008aa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008ae:	d107      	bne.n	80008c0 <__cmpdf2+0x74>
 80008b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008b8:	d1d6      	bne.n	8000868 <__cmpdf2+0x1c>
 80008ba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80008be:	d0d3      	beq.n	8000868 <__cmpdf2+0x1c>
 80008c0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop

080008c8 <__aeabi_cdrcmple>:
 80008c8:	4684      	mov	ip, r0
 80008ca:	4610      	mov	r0, r2
 80008cc:	4662      	mov	r2, ip
 80008ce:	468c      	mov	ip, r1
 80008d0:	4619      	mov	r1, r3
 80008d2:	4663      	mov	r3, ip
 80008d4:	e000      	b.n	80008d8 <__aeabi_cdcmpeq>
 80008d6:	bf00      	nop

080008d8 <__aeabi_cdcmpeq>:
 80008d8:	b501      	push	{r0, lr}
 80008da:	f7ff ffb7 	bl	800084c <__cmpdf2>
 80008de:	2800      	cmp	r0, #0
 80008e0:	bf48      	it	mi
 80008e2:	f110 0f00 	cmnmi.w	r0, #0
 80008e6:	bd01      	pop	{r0, pc}

080008e8 <__aeabi_dcmpeq>:
 80008e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008ec:	f7ff fff4 	bl	80008d8 <__aeabi_cdcmpeq>
 80008f0:	bf0c      	ite	eq
 80008f2:	2001      	moveq	r0, #1
 80008f4:	2000      	movne	r0, #0
 80008f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008fa:	bf00      	nop

080008fc <__aeabi_dcmplt>:
 80008fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000900:	f7ff ffea 	bl	80008d8 <__aeabi_cdcmpeq>
 8000904:	bf34      	ite	cc
 8000906:	2001      	movcc	r0, #1
 8000908:	2000      	movcs	r0, #0
 800090a:	f85d fb08 	ldr.w	pc, [sp], #8
 800090e:	bf00      	nop

08000910 <__aeabi_dcmple>:
 8000910:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000914:	f7ff ffe0 	bl	80008d8 <__aeabi_cdcmpeq>
 8000918:	bf94      	ite	ls
 800091a:	2001      	movls	r0, #1
 800091c:	2000      	movhi	r0, #0
 800091e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000922:	bf00      	nop

08000924 <__aeabi_dcmpge>:
 8000924:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000928:	f7ff ffce 	bl	80008c8 <__aeabi_cdrcmple>
 800092c:	bf94      	ite	ls
 800092e:	2001      	movls	r0, #1
 8000930:	2000      	movhi	r0, #0
 8000932:	f85d fb08 	ldr.w	pc, [sp], #8
 8000936:	bf00      	nop

08000938 <__aeabi_dcmpgt>:
 8000938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800093c:	f7ff ffc4 	bl	80008c8 <__aeabi_cdrcmple>
 8000940:	bf34      	ite	cc
 8000942:	2001      	movcc	r0, #1
 8000944:	2000      	movcs	r0, #0
 8000946:	f85d fb08 	ldr.w	pc, [sp], #8
 800094a:	bf00      	nop

0800094c <__aeabi_d2iz>:
 800094c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000950:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000954:	d215      	bcs.n	8000982 <__aeabi_d2iz+0x36>
 8000956:	d511      	bpl.n	800097c <__aeabi_d2iz+0x30>
 8000958:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800095c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000960:	d912      	bls.n	8000988 <__aeabi_d2iz+0x3c>
 8000962:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000966:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800096a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800096e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000972:	fa23 f002 	lsr.w	r0, r3, r2
 8000976:	bf18      	it	ne
 8000978:	4240      	negne	r0, r0
 800097a:	4770      	bx	lr
 800097c:	f04f 0000 	mov.w	r0, #0
 8000980:	4770      	bx	lr
 8000982:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000986:	d105      	bne.n	8000994 <__aeabi_d2iz+0x48>
 8000988:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 800098c:	bf08      	it	eq
 800098e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_uldivmod>:
 800099c:	b953      	cbnz	r3, 80009b4 <__aeabi_uldivmod+0x18>
 800099e:	b94a      	cbnz	r2, 80009b4 <__aeabi_uldivmod+0x18>
 80009a0:	2900      	cmp	r1, #0
 80009a2:	bf08      	it	eq
 80009a4:	2800      	cmpeq	r0, #0
 80009a6:	bf1c      	itt	ne
 80009a8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80009ac:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80009b0:	f000 b988 	b.w	8000cc4 <__aeabi_idiv0>
 80009b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009bc:	f000 f806 	bl	80009cc <__udivmoddi4>
 80009c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009c8:	b004      	add	sp, #16
 80009ca:	4770      	bx	lr

080009cc <__udivmoddi4>:
 80009cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d0:	9d08      	ldr	r5, [sp, #32]
 80009d2:	468e      	mov	lr, r1
 80009d4:	4604      	mov	r4, r0
 80009d6:	4688      	mov	r8, r1
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d14a      	bne.n	8000a72 <__udivmoddi4+0xa6>
 80009dc:	428a      	cmp	r2, r1
 80009de:	4617      	mov	r7, r2
 80009e0:	d962      	bls.n	8000aa8 <__udivmoddi4+0xdc>
 80009e2:	fab2 f682 	clz	r6, r2
 80009e6:	b14e      	cbz	r6, 80009fc <__udivmoddi4+0x30>
 80009e8:	f1c6 0320 	rsb	r3, r6, #32
 80009ec:	fa01 f806 	lsl.w	r8, r1, r6
 80009f0:	fa20 f303 	lsr.w	r3, r0, r3
 80009f4:	40b7      	lsls	r7, r6
 80009f6:	ea43 0808 	orr.w	r8, r3, r8
 80009fa:	40b4      	lsls	r4, r6
 80009fc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a00:	fa1f fc87 	uxth.w	ip, r7
 8000a04:	fbb8 f1fe 	udiv	r1, r8, lr
 8000a08:	0c23      	lsrs	r3, r4, #16
 8000a0a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000a0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a12:	fb01 f20c 	mul.w	r2, r1, ip
 8000a16:	429a      	cmp	r2, r3
 8000a18:	d909      	bls.n	8000a2e <__udivmoddi4+0x62>
 8000a1a:	18fb      	adds	r3, r7, r3
 8000a1c:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000a20:	f080 80ea 	bcs.w	8000bf8 <__udivmoddi4+0x22c>
 8000a24:	429a      	cmp	r2, r3
 8000a26:	f240 80e7 	bls.w	8000bf8 <__udivmoddi4+0x22c>
 8000a2a:	3902      	subs	r1, #2
 8000a2c:	443b      	add	r3, r7
 8000a2e:	1a9a      	subs	r2, r3, r2
 8000a30:	b2a3      	uxth	r3, r4
 8000a32:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a36:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a3e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a42:	459c      	cmp	ip, r3
 8000a44:	d909      	bls.n	8000a5a <__udivmoddi4+0x8e>
 8000a46:	18fb      	adds	r3, r7, r3
 8000a48:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000a4c:	f080 80d6 	bcs.w	8000bfc <__udivmoddi4+0x230>
 8000a50:	459c      	cmp	ip, r3
 8000a52:	f240 80d3 	bls.w	8000bfc <__udivmoddi4+0x230>
 8000a56:	443b      	add	r3, r7
 8000a58:	3802      	subs	r0, #2
 8000a5a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a5e:	eba3 030c 	sub.w	r3, r3, ip
 8000a62:	2100      	movs	r1, #0
 8000a64:	b11d      	cbz	r5, 8000a6e <__udivmoddi4+0xa2>
 8000a66:	40f3      	lsrs	r3, r6
 8000a68:	2200      	movs	r2, #0
 8000a6a:	e9c5 3200 	strd	r3, r2, [r5]
 8000a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a72:	428b      	cmp	r3, r1
 8000a74:	d905      	bls.n	8000a82 <__udivmoddi4+0xb6>
 8000a76:	b10d      	cbz	r5, 8000a7c <__udivmoddi4+0xb0>
 8000a78:	e9c5 0100 	strd	r0, r1, [r5]
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4608      	mov	r0, r1
 8000a80:	e7f5      	b.n	8000a6e <__udivmoddi4+0xa2>
 8000a82:	fab3 f183 	clz	r1, r3
 8000a86:	2900      	cmp	r1, #0
 8000a88:	d146      	bne.n	8000b18 <__udivmoddi4+0x14c>
 8000a8a:	4573      	cmp	r3, lr
 8000a8c:	d302      	bcc.n	8000a94 <__udivmoddi4+0xc8>
 8000a8e:	4282      	cmp	r2, r0
 8000a90:	f200 8105 	bhi.w	8000c9e <__udivmoddi4+0x2d2>
 8000a94:	1a84      	subs	r4, r0, r2
 8000a96:	eb6e 0203 	sbc.w	r2, lr, r3
 8000a9a:	2001      	movs	r0, #1
 8000a9c:	4690      	mov	r8, r2
 8000a9e:	2d00      	cmp	r5, #0
 8000aa0:	d0e5      	beq.n	8000a6e <__udivmoddi4+0xa2>
 8000aa2:	e9c5 4800 	strd	r4, r8, [r5]
 8000aa6:	e7e2      	b.n	8000a6e <__udivmoddi4+0xa2>
 8000aa8:	2a00      	cmp	r2, #0
 8000aaa:	f000 8090 	beq.w	8000bce <__udivmoddi4+0x202>
 8000aae:	fab2 f682 	clz	r6, r2
 8000ab2:	2e00      	cmp	r6, #0
 8000ab4:	f040 80a4 	bne.w	8000c00 <__udivmoddi4+0x234>
 8000ab8:	1a8a      	subs	r2, r1, r2
 8000aba:	0c03      	lsrs	r3, r0, #16
 8000abc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ac0:	b280      	uxth	r0, r0
 8000ac2:	b2bc      	uxth	r4, r7
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	fbb2 fcfe 	udiv	ip, r2, lr
 8000aca:	fb0e 221c 	mls	r2, lr, ip, r2
 8000ace:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ad2:	fb04 f20c 	mul.w	r2, r4, ip
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	d907      	bls.n	8000aea <__udivmoddi4+0x11e>
 8000ada:	18fb      	adds	r3, r7, r3
 8000adc:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000ae0:	d202      	bcs.n	8000ae8 <__udivmoddi4+0x11c>
 8000ae2:	429a      	cmp	r2, r3
 8000ae4:	f200 80e0 	bhi.w	8000ca8 <__udivmoddi4+0x2dc>
 8000ae8:	46c4      	mov	ip, r8
 8000aea:	1a9b      	subs	r3, r3, r2
 8000aec:	fbb3 f2fe 	udiv	r2, r3, lr
 8000af0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000af4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000af8:	fb02 f404 	mul.w	r4, r2, r4
 8000afc:	429c      	cmp	r4, r3
 8000afe:	d907      	bls.n	8000b10 <__udivmoddi4+0x144>
 8000b00:	18fb      	adds	r3, r7, r3
 8000b02:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000b06:	d202      	bcs.n	8000b0e <__udivmoddi4+0x142>
 8000b08:	429c      	cmp	r4, r3
 8000b0a:	f200 80ca 	bhi.w	8000ca2 <__udivmoddi4+0x2d6>
 8000b0e:	4602      	mov	r2, r0
 8000b10:	1b1b      	subs	r3, r3, r4
 8000b12:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000b16:	e7a5      	b.n	8000a64 <__udivmoddi4+0x98>
 8000b18:	f1c1 0620 	rsb	r6, r1, #32
 8000b1c:	408b      	lsls	r3, r1
 8000b1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000b22:	431f      	orrs	r7, r3
 8000b24:	fa0e f401 	lsl.w	r4, lr, r1
 8000b28:	fa20 f306 	lsr.w	r3, r0, r6
 8000b2c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000b30:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000b34:	4323      	orrs	r3, r4
 8000b36:	fa00 f801 	lsl.w	r8, r0, r1
 8000b3a:	fa1f fc87 	uxth.w	ip, r7
 8000b3e:	fbbe f0f9 	udiv	r0, lr, r9
 8000b42:	0c1c      	lsrs	r4, r3, #16
 8000b44:	fb09 ee10 	mls	lr, r9, r0, lr
 8000b48:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000b4c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000b50:	45a6      	cmp	lr, r4
 8000b52:	fa02 f201 	lsl.w	r2, r2, r1
 8000b56:	d909      	bls.n	8000b6c <__udivmoddi4+0x1a0>
 8000b58:	193c      	adds	r4, r7, r4
 8000b5a:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000b5e:	f080 809c 	bcs.w	8000c9a <__udivmoddi4+0x2ce>
 8000b62:	45a6      	cmp	lr, r4
 8000b64:	f240 8099 	bls.w	8000c9a <__udivmoddi4+0x2ce>
 8000b68:	3802      	subs	r0, #2
 8000b6a:	443c      	add	r4, r7
 8000b6c:	eba4 040e 	sub.w	r4, r4, lr
 8000b70:	fa1f fe83 	uxth.w	lr, r3
 8000b74:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b78:	fb09 4413 	mls	r4, r9, r3, r4
 8000b7c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000b80:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b84:	45a4      	cmp	ip, r4
 8000b86:	d908      	bls.n	8000b9a <__udivmoddi4+0x1ce>
 8000b88:	193c      	adds	r4, r7, r4
 8000b8a:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000b8e:	f080 8082 	bcs.w	8000c96 <__udivmoddi4+0x2ca>
 8000b92:	45a4      	cmp	ip, r4
 8000b94:	d97f      	bls.n	8000c96 <__udivmoddi4+0x2ca>
 8000b96:	3b02      	subs	r3, #2
 8000b98:	443c      	add	r4, r7
 8000b9a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000b9e:	eba4 040c 	sub.w	r4, r4, ip
 8000ba2:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ba6:	4564      	cmp	r4, ip
 8000ba8:	4673      	mov	r3, lr
 8000baa:	46e1      	mov	r9, ip
 8000bac:	d362      	bcc.n	8000c74 <__udivmoddi4+0x2a8>
 8000bae:	d05f      	beq.n	8000c70 <__udivmoddi4+0x2a4>
 8000bb0:	b15d      	cbz	r5, 8000bca <__udivmoddi4+0x1fe>
 8000bb2:	ebb8 0203 	subs.w	r2, r8, r3
 8000bb6:	eb64 0409 	sbc.w	r4, r4, r9
 8000bba:	fa04 f606 	lsl.w	r6, r4, r6
 8000bbe:	fa22 f301 	lsr.w	r3, r2, r1
 8000bc2:	431e      	orrs	r6, r3
 8000bc4:	40cc      	lsrs	r4, r1
 8000bc6:	e9c5 6400 	strd	r6, r4, [r5]
 8000bca:	2100      	movs	r1, #0
 8000bcc:	e74f      	b.n	8000a6e <__udivmoddi4+0xa2>
 8000bce:	fbb1 fcf2 	udiv	ip, r1, r2
 8000bd2:	0c01      	lsrs	r1, r0, #16
 8000bd4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000bd8:	b280      	uxth	r0, r0
 8000bda:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000bde:	463b      	mov	r3, r7
 8000be0:	4638      	mov	r0, r7
 8000be2:	463c      	mov	r4, r7
 8000be4:	46b8      	mov	r8, r7
 8000be6:	46be      	mov	lr, r7
 8000be8:	2620      	movs	r6, #32
 8000bea:	fbb1 f1f7 	udiv	r1, r1, r7
 8000bee:	eba2 0208 	sub.w	r2, r2, r8
 8000bf2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000bf6:	e766      	b.n	8000ac6 <__udivmoddi4+0xfa>
 8000bf8:	4601      	mov	r1, r0
 8000bfa:	e718      	b.n	8000a2e <__udivmoddi4+0x62>
 8000bfc:	4610      	mov	r0, r2
 8000bfe:	e72c      	b.n	8000a5a <__udivmoddi4+0x8e>
 8000c00:	f1c6 0220 	rsb	r2, r6, #32
 8000c04:	fa2e f302 	lsr.w	r3, lr, r2
 8000c08:	40b7      	lsls	r7, r6
 8000c0a:	40b1      	lsls	r1, r6
 8000c0c:	fa20 f202 	lsr.w	r2, r0, r2
 8000c10:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c14:	430a      	orrs	r2, r1
 8000c16:	fbb3 f8fe 	udiv	r8, r3, lr
 8000c1a:	b2bc      	uxth	r4, r7
 8000c1c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000c20:	0c11      	lsrs	r1, r2, #16
 8000c22:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c26:	fb08 f904 	mul.w	r9, r8, r4
 8000c2a:	40b0      	lsls	r0, r6
 8000c2c:	4589      	cmp	r9, r1
 8000c2e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000c32:	b280      	uxth	r0, r0
 8000c34:	d93e      	bls.n	8000cb4 <__udivmoddi4+0x2e8>
 8000c36:	1879      	adds	r1, r7, r1
 8000c38:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000c3c:	d201      	bcs.n	8000c42 <__udivmoddi4+0x276>
 8000c3e:	4589      	cmp	r9, r1
 8000c40:	d81f      	bhi.n	8000c82 <__udivmoddi4+0x2b6>
 8000c42:	eba1 0109 	sub.w	r1, r1, r9
 8000c46:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c4a:	fb09 f804 	mul.w	r8, r9, r4
 8000c4e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c52:	b292      	uxth	r2, r2
 8000c54:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c58:	4542      	cmp	r2, r8
 8000c5a:	d229      	bcs.n	8000cb0 <__udivmoddi4+0x2e4>
 8000c5c:	18ba      	adds	r2, r7, r2
 8000c5e:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000c62:	d2c4      	bcs.n	8000bee <__udivmoddi4+0x222>
 8000c64:	4542      	cmp	r2, r8
 8000c66:	d2c2      	bcs.n	8000bee <__udivmoddi4+0x222>
 8000c68:	f1a9 0102 	sub.w	r1, r9, #2
 8000c6c:	443a      	add	r2, r7
 8000c6e:	e7be      	b.n	8000bee <__udivmoddi4+0x222>
 8000c70:	45f0      	cmp	r8, lr
 8000c72:	d29d      	bcs.n	8000bb0 <__udivmoddi4+0x1e4>
 8000c74:	ebbe 0302 	subs.w	r3, lr, r2
 8000c78:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000c7c:	3801      	subs	r0, #1
 8000c7e:	46e1      	mov	r9, ip
 8000c80:	e796      	b.n	8000bb0 <__udivmoddi4+0x1e4>
 8000c82:	eba7 0909 	sub.w	r9, r7, r9
 8000c86:	4449      	add	r1, r9
 8000c88:	f1a8 0c02 	sub.w	ip, r8, #2
 8000c8c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c90:	fb09 f804 	mul.w	r8, r9, r4
 8000c94:	e7db      	b.n	8000c4e <__udivmoddi4+0x282>
 8000c96:	4673      	mov	r3, lr
 8000c98:	e77f      	b.n	8000b9a <__udivmoddi4+0x1ce>
 8000c9a:	4650      	mov	r0, sl
 8000c9c:	e766      	b.n	8000b6c <__udivmoddi4+0x1a0>
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e6fd      	b.n	8000a9e <__udivmoddi4+0xd2>
 8000ca2:	443b      	add	r3, r7
 8000ca4:	3a02      	subs	r2, #2
 8000ca6:	e733      	b.n	8000b10 <__udivmoddi4+0x144>
 8000ca8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cac:	443b      	add	r3, r7
 8000cae:	e71c      	b.n	8000aea <__udivmoddi4+0x11e>
 8000cb0:	4649      	mov	r1, r9
 8000cb2:	e79c      	b.n	8000bee <__udivmoddi4+0x222>
 8000cb4:	eba1 0109 	sub.w	r1, r1, r9
 8000cb8:	46c4      	mov	ip, r8
 8000cba:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cbe:	fb09 f804 	mul.w	r8, r9, r4
 8000cc2:	e7c4      	b.n	8000c4e <__udivmoddi4+0x282>

08000cc4 <__aeabi_idiv0>:
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	6039      	str	r1, [r7, #0]
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <_ZNSt12_Vector_baseIjSaIjEE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	60fb      	str	r3, [r7, #12]

      __attribute__((__always_inline__))
#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8000cec:	68f8      	ldr	r0, [r7, #12]
 8000cee:	f001 fb79 	bl	80023e4 <_ZNSt15__new_allocatorIjED1Ev>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3710      	adds	r7, #16
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <_ZNSt12_Vector_baseIjSaIjEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	4618      	mov	r0, r3
 8000d08:	f001 fac8 	bl	800229c <_ZNSt12_Vector_baseIjSaIjEE12_Vector_implC1Ev>
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <_ZNSt6vectorIjSaIjEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b082      	sub	sp, #8
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff ffeb 	bl	8000cfc <_ZNSt12_Vector_baseIjSaIjEEC1Ev>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08c      	sub	sp, #48	@ 0x30
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d36:	f002 fb8e 	bl	8003456 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d3a:	f000 fa8d 	bl	8001258 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d3e:	f000 fcb1 	bl	80016a4 <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 8000d42:	f000 fb65 	bl	8001410 <_ZL12MX_I2C1_Initv>

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d46:	1d3b      	adds	r3, r7, #4
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d54:	4b80      	ldr	r3, [pc, #512]	@ (8000f58 <main+0x228>)
 8000d56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d58:	4a7f      	ldr	r2, [pc, #508]	@ (8000f58 <main+0x228>)
 8000d5a:	f043 0302 	orr.w	r3, r3, #2
 8000d5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d60:	4b7d      	ldr	r3, [pc, #500]	@ (8000f58 <main+0x228>)
 8000d62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d64:	f003 0302 	and.w	r3, r3, #2
 8000d68:	603b      	str	r3, [r7, #0]
 8000d6a:	683b      	ldr	r3, [r7, #0]

  GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8000d6c:	23c0      	movs	r3, #192	@ 0xc0
 8000d6e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d70:	2312      	movs	r3, #18
 8000d72:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d74:	2301      	movs	r3, #1
 8000d76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d7c:	2304      	movs	r3, #4
 8000d7e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d80:	1d3b      	adds	r3, r7, #4
 8000d82:	4619      	mov	r1, r3
 8000d84:	4875      	ldr	r0, [pc, #468]	@ (8000f5c <main+0x22c>)
 8000d86:	f004 f8db 	bl	8004f40 <HAL_GPIO_Init>

  MX_TIM1_Init();
 8000d8a:	f000 fb8f 	bl	80014ac <_ZL12MX_TIM1_Initv>
  MX_TIM2_Init();
 8000d8e:	f000 fbf5 	bl	800157c <_ZL12MX_TIM2_Initv>
  HAL_TIM_Base_Start(&htim2);
 8000d92:	4873      	ldr	r0, [pc, #460]	@ (8000f60 <main+0x230>)
 8000d94:	f006 f890 	bl	8006eb8 <HAL_TIM_Base_Start>
  MX_USART1_UART_Init();
 8000d98:	f000 fc50 	bl	800163c <_ZL19MX_USART1_UART_Initv>
  MX_ADC1_Init();
 8000d9c:	f000 fab2 	bl	8001304 <_ZL12MX_ADC1_Initv>
  HAL_ADC_Start(&hadc1);
 8000da0:	4870      	ldr	r0, [pc, #448]	@ (8000f64 <main+0x234>)
 8000da2:	f002 ff7f 	bl	8003ca4 <HAL_ADC_Start>
  /* USER CODE BEGIN 2 */

    // configura o display oled
  lcd_init();
 8000da6:	f000 fdaf 	bl	8001908 <lcd_init>
  lcd_clear();
 8000daa:	f000 fddb 	bl	8001964 <lcd_clear>
  lcd_set_cursor(0, 3);
 8000dae:	2103      	movs	r1, #3
 8000db0:	2000      	movs	r0, #0
 8000db2:	f000 fde1 	bl	8001978 <lcd_set_cursor>
  lcd_print("Travamento");
 8000db6:	486c      	ldr	r0, [pc, #432]	@ (8000f68 <main+0x238>)
 8000db8:	f000 fdfc 	bl	80019b4 <lcd_print>
  lcd_set_cursor(1, 0);
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	f000 fdda 	bl	8001978 <lcd_set_cursor>
  lcd_print("Cavidade Triang");
 8000dc4:	4869      	ldr	r0, [pc, #420]	@ (8000f6c <main+0x23c>)
 8000dc6:	f000 fdf5 	bl	80019b4 <lcd_print>
  HAL_Delay(2000);
 8000dca:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000dce:	f002 fbb7 	bl	8003540 <HAL_Delay>
  lcd_clear();
 8000dd2:	f000 fdc7 	bl	8001964 <lcd_clear>
  lcd_set_cursor(0, 0);
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	2000      	movs	r0, #0
 8000dda:	f000 fdcd 	bl	8001978 <lcd_set_cursor>
  lcd_print("Sweep");
 8000dde:	4864      	ldr	r0, [pc, #400]	@ (8000f70 <main+0x240>)
 8000de0:	f000 fde8 	bl	80019b4 <lcd_print>
  lcd_set_cursor(0, 6);
 8000de4:	2106      	movs	r1, #6
 8000de6:	2000      	movs	r0, #0
 8000de8:	f000 fdc6 	bl	8001978 <lcd_set_cursor>
  lcd_print("Amp:");
 8000dec:	4861      	ldr	r0, [pc, #388]	@ (8000f74 <main+0x244>)
 8000dee:	f000 fde1 	bl	80019b4 <lcd_print>
  lcd_print_double(amp);
 8000df2:	4b61      	ldr	r3, [pc, #388]	@ (8000f78 <main+0x248>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff fcc8 	bl	800078c <__aeabi_f2d>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	460b      	mov	r3, r1
 8000e00:	ec43 2b10 	vmov	d0, r2, r3
 8000e04:	f001 f898 	bl	8001f38 <lcd_print_double>
  lcd_print("V");
 8000e08:	485c      	ldr	r0, [pc, #368]	@ (8000f7c <main+0x24c>)
 8000e0a:	f000 fdd3 	bl	80019b4 <lcd_print>
  lcd_set_cursor(1, 6);
 8000e0e:	2106      	movs	r1, #6
 8000e10:	2001      	movs	r0, #1
 8000e12:	f000 fdb1 	bl	8001978 <lcd_set_cursor>
  lcd_print("Freq:");
 8000e16:	485a      	ldr	r0, [pc, #360]	@ (8000f80 <main+0x250>)
 8000e18:	f000 fdcc 	bl	80019b4 <lcd_print>
  lcd_print_double(frequency);
 8000e1c:	4b59      	ldr	r3, [pc, #356]	@ (8000f84 <main+0x254>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff fca1 	bl	8000768 <__aeabi_i2d>
 8000e26:	4602      	mov	r2, r0
 8000e28:	460b      	mov	r3, r1
 8000e2a:	ec43 2b10 	vmov	d0, r2, r3
 8000e2e:	f001 f883 	bl	8001f38 <lcd_print_double>
  lcd_print("Hz");
 8000e32:	4855      	ldr	r0, [pc, #340]	@ (8000f88 <main+0x258>)
 8000e34:	f000 fdbe 	bl	80019b4 <lcd_print>
  lcd_set_cursor(0,5);
 8000e38:	2105      	movs	r1, #5
 8000e3a:	2000      	movs	r0, #0
 8000e3c:	f000 fd9c 	bl	8001978 <lcd_set_cursor>
  lcd_print(">");
 8000e40:	4852      	ldr	r0, [pc, #328]	@ (8000f8c <main+0x25c>)
 8000e42:	f000 fdb7 	bl	80019b4 <lcd_print>
    //if (status != HAL_OK) {
        // Erro na comunicação I2C
    //    printf("Erro I2C: %d\r\n", status);
    //}

  HAL_Delay(500);
 8000e46:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e4a:	f002 fb79 	bl	8003540 <HAL_Delay>
    printf("🔍 Iniciando varredura I2C...\r\n");
 8000e4e:	4850      	ldr	r0, [pc, #320]	@ (8000f90 <main+0x260>)
 8000e50:	f007 fa9e 	bl	8008390 <puts>

    // Escaneia endereços de 0x03 até 0x77
    for (uint8_t addr = 3; addr < 0x78; addr++) {
 8000e54:	2303      	movs	r3, #3
 8000e56:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000e5a:	e021      	b.n	8000ea0 <main+0x170>
      if (HAL_I2C_IsDeviceReady(&hi2c1, addr << 1, 3, 100) == HAL_OK) {
 8000e5c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e60:	b29b      	uxth	r3, r3
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	b299      	uxth	r1, r3
 8000e66:	2364      	movs	r3, #100	@ 0x64
 8000e68:	2203      	movs	r2, #3
 8000e6a:	484a      	ldr	r0, [pc, #296]	@ (8000f94 <main+0x264>)
 8000e6c:	f004 fbbe 	bl	80055ec <HAL_I2C_IsDeviceReady>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	bf0c      	ite	eq
 8000e76:	2301      	moveq	r3, #1
 8000e78:	2300      	movne	r3, #0
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d00a      	beq.n	8000e96 <main+0x166>
        detectedAddress = addr;
 8000e80:	4a45      	ldr	r2, [pc, #276]	@ (8000f98 <main+0x268>)
 8000e82:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e86:	7013      	strb	r3, [r2, #0]
        printf("📍 Dispositivo I2C encontrado no endereço 0x%02X\r\n", detectedAddress);
 8000e88:	4b43      	ldr	r3, [pc, #268]	@ (8000f98 <main+0x268>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4843      	ldr	r0, [pc, #268]	@ (8000f9c <main+0x26c>)
 8000e90:	f007 fa16 	bl	80082c0 <iprintf>
        break;  // Se quiser continuar escaneando, remova o break
 8000e94:	e008      	b.n	8000ea8 <main+0x178>
    for (uint8_t addr = 3; addr < 0x78; addr++) {
 8000e96:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000ea0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ea4:	2b77      	cmp	r3, #119	@ 0x77
 8000ea6:	d9d9      	bls.n	8000e5c <main+0x12c>
      }
    }

    // Se nenhum dispositivo foi encontrado
    if (detectedAddress == 0) {
 8000ea8:	4b3b      	ldr	r3, [pc, #236]	@ (8000f98 <main+0x268>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d104      	bne.n	8000eba <main+0x18a>
      printf("❌ Nenhum dispositivo I2C detectado!\r\n");
 8000eb0:	483b      	ldr	r0, [pc, #236]	@ (8000fa0 <main+0x270>)
 8000eb2:	f007 fa6d 	bl	8008390 <puts>
      while (1);
 8000eb6:	bf00      	nop
 8000eb8:	e7fd      	b.n	8000eb6 <main+0x186>
    }

    // Testa se o dispositivo ainda está respondendo
    if (HAL_I2C_IsDeviceReady(&hi2c1, detectedAddress << 1, 3, 100) == HAL_OK) {
 8000eba:	4b37      	ldr	r3, [pc, #220]	@ (8000f98 <main+0x268>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	b299      	uxth	r1, r3
 8000ec2:	2364      	movs	r3, #100	@ 0x64
 8000ec4:	2203      	movs	r2, #3
 8000ec6:	4833      	ldr	r0, [pc, #204]	@ (8000f94 <main+0x264>)
 8000ec8:	f004 fb90 	bl	80055ec <HAL_I2C_IsDeviceReady>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	bf0c      	ite	eq
 8000ed2:	2301      	moveq	r3, #1
 8000ed4:	2300      	movne	r3, #0
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d006      	beq.n	8000eea <main+0x1ba>
      printf("✅ Dispositivo respondeu novamente no endereço 0x%02X!\r\n", detectedAddress);
 8000edc:	4b2e      	ldr	r3, [pc, #184]	@ (8000f98 <main+0x268>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4830      	ldr	r0, [pc, #192]	@ (8000fa4 <main+0x274>)
 8000ee4:	f007 f9ec 	bl	80082c0 <iprintf>
 8000ee8:	e002      	b.n	8000ef0 <main+0x1c0>
    } else {
      printf("⚠️ Erro: dispositivo não respondeu ao final da verificação\r\n");
 8000eea:	482f      	ldr	r0, [pc, #188]	@ (8000fa8 <main+0x278>)
 8000eec:	f007 fa50 	bl	8008390 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (currentSystemMode == SYSTEM_MODE_SWEEP) {
 8000ef0:	4b2e      	ldr	r3, [pc, #184]	@ (8000fac <main+0x27c>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	f040 80f8 	bne.w	80010ea <main+0x3ba>
	      cycleStartTime = micros(); //Atualiza o valor de início da próxima iteração
 8000efa:	f000 fc4f 	bl	800179c <_Z6microsv>
 8000efe:	4603      	mov	r3, r0
 8000f00:	4a2b      	ldr	r2, [pc, #172]	@ (8000fb0 <main+0x280>)
 8000f02:	6013      	str	r3, [r2, #0]
	      value += direction;
 8000f04:	4b2b      	ldr	r3, [pc, #172]	@ (8000fb4 <main+0x284>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	ee07 3a90 	vmov	s15, r3
 8000f0c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f10:	4b29      	ldr	r3, [pc, #164]	@ (8000fb8 <main+0x288>)
 8000f12:	edd3 7a00 	vldr	s15, [r3]
 8000f16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f1a:	4b27      	ldr	r3, [pc, #156]	@ (8000fb8 <main+0x288>)
 8000f1c:	edc3 7a00 	vstr	s15, [r3]
	      if (value >= resolution) {
 8000f20:	4b26      	ldr	r3, [pc, #152]	@ (8000fbc <main+0x28c>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	ee07 3a90 	vmov	s15, r3
 8000f28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f2c:	4b22      	ldr	r3, [pc, #136]	@ (8000fb8 <main+0x288>)
 8000f2e:	edd3 7a00 	vldr	s15, [r3]
 8000f32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f3a:	d841      	bhi.n	8000fc0 <main+0x290>
	        value = resolution;
 8000f3c:	4b1f      	ldr	r3, [pc, #124]	@ (8000fbc <main+0x28c>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	ee07 3a90 	vmov	s15, r3
 8000f44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f48:	4b1b      	ldr	r3, [pc, #108]	@ (8000fb8 <main+0x288>)
 8000f4a:	edc3 7a00 	vstr	s15, [r3]
	        direction = -1;
 8000f4e:	4b19      	ldr	r3, [pc, #100]	@ (8000fb4 <main+0x284>)
 8000f50:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	e042      	b.n	8000fde <main+0x2ae>
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	48000400 	.word	0x48000400
 8000f60:	200001a8 	.word	0x200001a8
 8000f64:	200000a4 	.word	0x200000a4
 8000f68:	08009304 	.word	0x08009304
 8000f6c:	08009310 	.word	0x08009310
 8000f70:	08009320 	.word	0x08009320
 8000f74:	08009328 	.word	0x08009328
 8000f78:	20000290 	.word	0x20000290
 8000f7c:	08009330 	.word	0x08009330
 8000f80:	08009334 	.word	0x08009334
 8000f84:	20000010 	.word	0x20000010
 8000f88:	0800933c 	.word	0x0800933c
 8000f8c:	08009340 	.word	0x08009340
 8000f90:	08009344 	.word	0x08009344
 8000f94:	20000108 	.word	0x20000108
 8000f98:	200002c0 	.word	0x200002c0
 8000f9c:	08009368 	.word	0x08009368
 8000fa0:	080093a0 	.word	0x080093a0
 8000fa4:	080093c8 	.word	0x080093c8
 8000fa8:	08009404 	.word	0x08009404
 8000fac:	200002a6 	.word	0x200002a6
 8000fb0:	2000027c 	.word	0x2000027c
 8000fb4:	20000018 	.word	0x20000018
 8000fb8:	20000294 	.word	0x20000294
 8000fbc:	20000000 	.word	0x20000000
	      } else if (value <= 0) {
 8000fc0:	4b94      	ldr	r3, [pc, #592]	@ (8001214 <main+0x4e4>)
 8000fc2:	edd3 7a00 	vldr	s15, [r3]
 8000fc6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fce:	d806      	bhi.n	8000fde <main+0x2ae>
	        value = 0;
 8000fd0:	4b90      	ldr	r3, [pc, #576]	@ (8001214 <main+0x4e4>)
 8000fd2:	f04f 0200 	mov.w	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
	        direction = 1;
 8000fd8:	4b8f      	ldr	r3, [pc, #572]	@ (8001218 <main+0x4e8>)
 8000fda:	2201      	movs	r2, #1
 8000fdc:	601a      	str	r2, [r3, #0]
	      }
	      int averageAdcValue = 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61fb      	str	r3, [r7, #28]

	      HAL_ADC_Start(&hadc1);
 8000fe2:	488e      	ldr	r0, [pc, #568]	@ (800121c <main+0x4ec>)
 8000fe4:	f002 fe5e 	bl	8003ca4 <HAL_ADC_Start>
	      HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000fe8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000fec:	488b      	ldr	r0, [pc, #556]	@ (800121c <main+0x4ec>)
 8000fee:	f002 ff47 	bl	8003e80 <HAL_ADC_PollForConversion>
	      averageAdcValue = HAL_ADC_GetValue(&hadc1);  // valor entre 0 e 4095 (12 bits)
 8000ff2:	488a      	ldr	r0, [pc, #552]	@ (800121c <main+0x4ec>)
 8000ff4:	f003 f81c 	bl	8004030 <HAL_ADC_GetValue>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	61fb      	str	r3, [r7, #28]
	      HAL_ADC_Stop(&hadc1);
 8000ffc:	4887      	ldr	r0, [pc, #540]	@ (800121c <main+0x4ec>)
 8000ffe:	f002 ff0b 	bl	8003e18 <HAL_ADC_Stop>

	      // Detecção de picos (apenas quando a varredura está em direção positiva)
	      if (direction == 1) {
 8001002:	4b85      	ldr	r3, [pc, #532]	@ (8001218 <main+0x4e8>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2b01      	cmp	r3, #1
 8001008:	d11a      	bne.n	8001040 <main+0x310>
	        if (averageAdcValue > peakThreshold) {
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	2b28      	cmp	r3, #40	@ 0x28
 800100e:	dd17      	ble.n	8001040 <main+0x310>
	          if(detectingPeak){
 8001010:	4b83      	ldr	r3, [pc, #524]	@ (8001220 <main+0x4f0>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d002      	beq.n	800101e <main+0x2ee>
	            peaks_place.pop_back();
 8001018:	4882      	ldr	r0, [pc, #520]	@ (8001224 <main+0x4f4>)
 800101a:	f001 f969 	bl	80022f0 <_ZNSt6vectorIjSaIjEE8pop_backEv>
	          }
	          peaks_place.push_back(value);
 800101e:	4b7d      	ldr	r3, [pc, #500]	@ (8001214 <main+0x4e4>)
 8001020:	edd3 7a00 	vldr	s15, [r3]
 8001024:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001028:	ee17 3a90 	vmov	r3, s15
 800102c:	61bb      	str	r3, [r7, #24]
 800102e:	f107 0318 	add.w	r3, r7, #24
 8001032:	4619      	mov	r1, r3
 8001034:	487b      	ldr	r0, [pc, #492]	@ (8001224 <main+0x4f4>)
 8001036:	f001 f975 	bl	8002324 <_ZNSt6vectorIjSaIjEE9push_backEOj>
	          detectingPeak = true;
 800103a:	4b79      	ldr	r3, [pc, #484]	@ (8001220 <main+0x4f0>)
 800103c:	2201      	movs	r2, #1
 800103e:	701a      	strb	r2, [r3, #0]
	        }
	      }
	      if (detectingPeak && averageAdcValue < resetThreshold) {
 8001040:	4b77      	ldr	r3, [pc, #476]	@ (8001220 <main+0x4f0>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d005      	beq.n	8001054 <main+0x324>
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	2b13      	cmp	r3, #19
 800104c:	dc02      	bgt.n	8001054 <main+0x324>
	        detectingPeak = false;
 800104e:	4b74      	ldr	r3, [pc, #464]	@ (8001220 <main+0x4f0>)
 8001050:	2200      	movs	r2, #0
 8001052:	701a      	strb	r2, [r3, #0]
	      }

	      //Atualizações do display após interrupções:
	      if(increaseButton == true) {
 8001054:	4b74      	ldr	r3, [pc, #464]	@ (8001228 <main+0x4f8>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b01      	cmp	r3, #1
 800105a:	d104      	bne.n	8001066 <main+0x336>
	        increaseButton = false;
 800105c:	4b72      	ldr	r3, [pc, #456]	@ (8001228 <main+0x4f8>)
 800105e:	2200      	movs	r2, #0
 8001060:	701a      	strb	r2, [r3, #0]
	        updateSweepDisplay();
 8001062:	f000 ffdd 	bl	8002020 <_Z18updateSweepDisplayv>
	        //display.display();
	      }
	      if(decreaseButton == true) {
 8001066:	4b71      	ldr	r3, [pc, #452]	@ (800122c <main+0x4fc>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	2b01      	cmp	r3, #1
 800106c:	d104      	bne.n	8001078 <main+0x348>
	        decreaseButton = false;
 800106e:	4b6f      	ldr	r3, [pc, #444]	@ (800122c <main+0x4fc>)
 8001070:	2200      	movs	r2, #0
 8001072:	701a      	strb	r2, [r3, #0]
	        updateSweepDisplay();
 8001074:	f000 ffd4 	bl	8002020 <_Z18updateSweepDisplayv>
	      }
	        //display.display();}
	      if(optionButton == true) {
 8001078:	4b6d      	ldr	r3, [pc, #436]	@ (8001230 <main+0x500>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	2b01      	cmp	r3, #1
 800107e:	d104      	bne.n	800108a <main+0x35a>
	        optionButton = false;
 8001080:	4b6b      	ldr	r3, [pc, #428]	@ (8001230 <main+0x500>)
 8001082:	2200      	movs	r2, #0
 8001084:	701a      	strb	r2, [r3, #0]
	        updateSweepDisplay();
 8001086:	f000 ffcb 	bl	8002020 <_Z18updateSweepDisplayv>
	        //display.display();
	      }
	      if(modeButton == true) {
 800108a:	4b6a      	ldr	r3, [pc, #424]	@ (8001234 <main+0x504>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d10f      	bne.n	80010b2 <main+0x382>
	        modeButton = false;
 8001092:	4b68      	ldr	r3, [pc, #416]	@ (8001234 <main+0x504>)
 8001094:	2200      	movs	r2, #0
 8001096:	701a      	strb	r2, [r3, #0]
	        switch (currentSystemMode) {
 8001098:	4b67      	ldr	r3, [pc, #412]	@ (8001238 <main+0x508>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d002      	beq.n	80010a6 <main+0x376>
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d003      	beq.n	80010ac <main+0x37c>
 80010a4:	e005      	b.n	80010b2 <main+0x382>
	        	case SYSTEM_MODE_SWEEP:
	        		updateSweepDisplay();
 80010a6:	f000 ffbb 	bl	8002020 <_Z18updateSweepDisplayv>
	          //display.display();
	        	  break;
 80010aa:	e002      	b.n	80010b2 <main+0x382>
	        	case SYSTEM_MODE_LOCK:
	        		updateLockDisplay();
 80010ac:	f001 f822 	bl	80020f4 <_Z17updateLockDisplayv>
	          	  //display.display();
	        	break;
 80010b0:	bf00      	nop
	      	  }
	      }
	      cycleEndTime = micros(); // Verifica o tempo que demorou nessa iteração
 80010b2:	f000 fb73 	bl	800179c <_Z6microsv>
 80010b6:	4603      	mov	r3, r0
 80010b8:	4a60      	ldr	r2, [pc, #384]	@ (800123c <main+0x50c>)
 80010ba:	6013      	str	r3, [r2, #0]

	      while(cycleEndTime - cycleStartTime < waiting_time) { //Verifica se esse período de nivel ja ocorreu, se não ele continua preso no looping até dar o tempo
 80010bc:	e004      	b.n	80010c8 <main+0x398>
	        cycleEndTime = micros();
 80010be:	f000 fb6d 	bl	800179c <_Z6microsv>
 80010c2:	4603      	mov	r3, r0
 80010c4:	4a5d      	ldr	r2, [pc, #372]	@ (800123c <main+0x50c>)
 80010c6:	6013      	str	r3, [r2, #0]
	      while(cycleEndTime - cycleStartTime < waiting_time) { //Verifica se esse período de nivel ja ocorreu, se não ele continua preso no looping até dar o tempo
 80010c8:	4b5c      	ldr	r3, [pc, #368]	@ (800123c <main+0x50c>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4b5c      	ldr	r3, [pc, #368]	@ (8001240 <main+0x510>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff fb38 	bl	8000748 <__aeabi_ui2d>
 80010d8:	4b5a      	ldr	r3, [pc, #360]	@ (8001244 <main+0x514>)
 80010da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010de:	f7ff fc0d 	bl	80008fc <__aeabi_dcmplt>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d1ea      	bne.n	80010be <main+0x38e>
 80010e8:	e702      	b.n	8000ef0 <main+0x1c0>
	      //    HAL_Delay(2);
	      //    HAL_I2C_Init(&hi2c1);
	      //}

	    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	    } else if (currentSystemMode == SYSTEM_MODE_LOCK) {
 80010ea:	4b53      	ldr	r3, [pc, #332]	@ (8001238 <main+0x508>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	f47f aefe 	bne.w	8000ef0 <main+0x1c0>
	      //Calcula o novo valor a ser passado para o PZT
	      value += direction*step;
 80010f4:	4b48      	ldr	r3, [pc, #288]	@ (8001218 <main+0x4e8>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a53      	ldr	r2, [pc, #332]	@ (8001248 <main+0x518>)
 80010fa:	6812      	ldr	r2, [r2, #0]
 80010fc:	fb02 f303 	mul.w	r3, r2, r3
 8001100:	ee07 3a90 	vmov	s15, r3
 8001104:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001108:	4b42      	ldr	r3, [pc, #264]	@ (8001214 <main+0x4e4>)
 800110a:	edd3 7a00 	vldr	s15, [r3]
 800110e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001112:	4b40      	ldr	r3, [pc, #256]	@ (8001214 <main+0x4e4>)
 8001114:	edc3 7a00 	vstr	s15, [r3]
	      sendI2CData(DAC_ADDRESS, value);
 8001118:	4b3e      	ldr	r3, [pc, #248]	@ (8001214 <main+0x4e4>)
 800111a:	edd3 7a00 	vldr	s15, [r3]
 800111e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001122:	ee17 3a90 	vmov	r3, s15
 8001126:	b29b      	uxth	r3, r3
 8001128:	4619      	mov	r1, r3
 800112a:	2060      	movs	r0, #96	@ 0x60
 800112c:	f000 ff52 	bl	8001fd4 <sendI2CData>

	      //Verifica a resposta do sistema, fazendo uma média na leitura para filtrar o ruído
	      long adcSum = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	62bb      	str	r3, [r7, #40]	@ 0x28
	      for (int i = 0; i < numReadings; i++) {
 8001134:	2300      	movs	r3, #0
 8001136:	627b      	str	r3, [r7, #36]	@ 0x24
 8001138:	e019      	b.n	800116e <main+0x43e>
		      HAL_ADC_Start(&hadc1);
 800113a:	4838      	ldr	r0, [pc, #224]	@ (800121c <main+0x4ec>)
 800113c:	f002 fdb2 	bl	8003ca4 <HAL_ADC_Start>
		      HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001140:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001144:	4835      	ldr	r0, [pc, #212]	@ (800121c <main+0x4ec>)
 8001146:	f002 fe9b 	bl	8003e80 <HAL_ADC_PollForConversion>
		      adcSum += HAL_ADC_GetValue(&hadc1);  // valor entre 0 e 4095 (12 bits)
 800114a:	4834      	ldr	r0, [pc, #208]	@ (800121c <main+0x4ec>)
 800114c:	f002 ff70 	bl	8004030 <HAL_ADC_GetValue>
 8001150:	4602      	mov	r2, r0
 8001152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001154:	4413      	add	r3, r2
 8001156:	62bb      	str	r3, [r7, #40]	@ 0x28
		      HAL_ADC_Stop(&hadc1);
 8001158:	4830      	ldr	r0, [pc, #192]	@ (800121c <main+0x4ec>)
 800115a:	f002 fe5d 	bl	8003e18 <HAL_ADC_Stop>

	        delayMicroseconds(delayUs);  // Pequeno delay entre leituras para evitar leituras muito rápidas
 800115e:	4b3b      	ldr	r3, [pc, #236]	@ (800124c <main+0x51c>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4618      	mov	r0, r3
 8001164:	f001 f84c 	bl	8002200 <_Z17delayMicrosecondsm>
	      for (int i = 0; i < numReadings; i++) {
 8001168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800116a:	3301      	adds	r3, #1
 800116c:	627b      	str	r3, [r7, #36]	@ 0x24
 800116e:	4b38      	ldr	r3, [pc, #224]	@ (8001250 <main+0x520>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001174:	429a      	cmp	r2, r3
 8001176:	dbe0      	blt.n	800113a <main+0x40a>
	      }
	      int averageAdcValue = adcSum / numReadings;
 8001178:	4b35      	ldr	r3, [pc, #212]	@ (8001250 <main+0x520>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800117e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001182:	623b      	str	r3, [r7, #32]

	      // Executa a comparação e ajuste de direção caso necessário
	      if (averageAdcValue > lastAdcValue) {
 8001184:	4b33      	ldr	r3, [pc, #204]	@ (8001254 <main+0x524>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	6a3a      	ldr	r2, [r7, #32]
 800118a:	429a      	cmp	r2, r3
 800118c:	dd04      	ble.n	8001198 <main+0x468>
	        direction = direction;
 800118e:	4b22      	ldr	r3, [pc, #136]	@ (8001218 <main+0x4e8>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a21      	ldr	r2, [pc, #132]	@ (8001218 <main+0x4e8>)
 8001194:	6013      	str	r3, [r2, #0]
 8001196:	e009      	b.n	80011ac <main+0x47c>
	      } else if ( averageAdcValue < lastAdcValue) {
 8001198:	4b2e      	ldr	r3, [pc, #184]	@ (8001254 <main+0x524>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	6a3a      	ldr	r2, [r7, #32]
 800119e:	429a      	cmp	r2, r3
 80011a0:	da04      	bge.n	80011ac <main+0x47c>
	        direction = -direction;
 80011a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001218 <main+0x4e8>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	425b      	negs	r3, r3
 80011a8:	4a1b      	ldr	r2, [pc, #108]	@ (8001218 <main+0x4e8>)
 80011aa:	6013      	str	r3, [r2, #0]
	      }

	      lastAdcValue = averageAdcValue; // Atualiza a variável de última leitura do ADC
 80011ac:	4a29      	ldr	r2, [pc, #164]	@ (8001254 <main+0x524>)
 80011ae:	6a3b      	ldr	r3, [r7, #32]
 80011b0:	6013      	str	r3, [r2, #0]

	      //Atualizações do display após interrupções:
	      if(increaseButton == true) {
 80011b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001228 <main+0x4f8>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d104      	bne.n	80011c4 <main+0x494>
	        increaseButton = false;
 80011ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001228 <main+0x4f8>)
 80011bc:	2200      	movs	r2, #0
 80011be:	701a      	strb	r2, [r3, #0]
	        updateLockDisplay();
 80011c0:	f000 ff98 	bl	80020f4 <_Z17updateLockDisplayv>
	        //display.display();
	      }
	      if(decreaseButton == true) {
 80011c4:	4b19      	ldr	r3, [pc, #100]	@ (800122c <main+0x4fc>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d104      	bne.n	80011d6 <main+0x4a6>
	        decreaseButton = false;
 80011cc:	4b17      	ldr	r3, [pc, #92]	@ (800122c <main+0x4fc>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	701a      	strb	r2, [r3, #0]
	        updateLockDisplay();
 80011d2:	f000 ff8f 	bl	80020f4 <_Z17updateLockDisplayv>
	        //display.display();
	      }
	      if(optionButton == true) {
 80011d6:	4b16      	ldr	r3, [pc, #88]	@ (8001230 <main+0x500>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d104      	bne.n	80011e8 <main+0x4b8>
	        optionButton = false;
 80011de:	4b14      	ldr	r3, [pc, #80]	@ (8001230 <main+0x500>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	701a      	strb	r2, [r3, #0]
	        updateLockDisplay();
 80011e4:	f000 ff86 	bl	80020f4 <_Z17updateLockDisplayv>
	        //display.display();
	      }
	      if(modeButton == true) {
 80011e8:	4b12      	ldr	r3, [pc, #72]	@ (8001234 <main+0x504>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	f47f ae7f 	bne.w	8000ef0 <main+0x1c0>
	        modeButton = false;
 80011f2:	4b10      	ldr	r3, [pc, #64]	@ (8001234 <main+0x504>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	701a      	strb	r2, [r3, #0]
	        switch (currentSystemMode) {
 80011f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001238 <main+0x508>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d002      	beq.n	8001206 <main+0x4d6>
 8001200:	2b01      	cmp	r3, #1
 8001202:	d003      	beq.n	800120c <main+0x4dc>
 8001204:	e005      	b.n	8001212 <main+0x4e2>
	        case SYSTEM_MODE_SWEEP:
	        	updateSweepDisplay();
 8001206:	f000 ff0b 	bl	8002020 <_Z18updateSweepDisplayv>
	          //display.display();
	        break;
 800120a:	e002      	b.n	8001212 <main+0x4e2>
	        case SYSTEM_MODE_LOCK:
	        	updateLockDisplay();
 800120c:	f000 ff72 	bl	80020f4 <_Z17updateLockDisplayv>
	          //display.display();
	        break;
 8001210:	bf00      	nop

	      }
	    }
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
  }
 8001212:	e66d      	b.n	8000ef0 <main+0x1c0>
 8001214:	20000294 	.word	0x20000294
 8001218:	20000018 	.word	0x20000018
 800121c:	200000a4 	.word	0x200000a4
 8001220:	200002ac 	.word	0x200002ac
 8001224:	200002b0 	.word	0x200002b0
 8001228:	200002a1 	.word	0x200002a1
 800122c:	200002a2 	.word	0x200002a2
 8001230:	200002a0 	.word	0x200002a0
 8001234:	200002a3 	.word	0x200002a3
 8001238:	200002a6 	.word	0x200002a6
 800123c:	20000280 	.word	0x20000280
 8001240:	2000027c 	.word	0x2000027c
 8001244:	20000298 	.word	0x20000298
 8001248:	20000014 	.word	0x20000014
 800124c:	20000008 	.word	0x20000008
 8001250:	2000000c 	.word	0x2000000c
 8001254:	2000028c 	.word	0x2000028c

08001258 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b096      	sub	sp, #88	@ 0x58
 800125c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800125e:	f107 0314 	add.w	r3, r7, #20
 8001262:	2244      	movs	r2, #68	@ 0x44
 8001264:	2100      	movs	r1, #0
 8001266:	4618      	mov	r0, r3
 8001268:	f007 f8b4 	bl	80083d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800126c:	463b      	mov	r3, r7
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]
 8001274:	609a      	str	r2, [r3, #8]
 8001276:	60da      	str	r2, [r3, #12]
 8001278:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800127a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800127e:	f004 fd61 	bl	8005d44 <HAL_PWREx_ControlVoltageScaling>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	bf14      	ite	ne
 8001288:	2301      	movne	r3, #1
 800128a:	2300      	moveq	r3, #0
 800128c:	b2db      	uxtb	r3, r3
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 8001292:	f000 fffd 	bl	8002290 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001296:	2310      	movs	r3, #16
 8001298:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800129a:	2301      	movs	r3, #1
 800129c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800129e:	2300      	movs	r3, #0
 80012a0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80012a2:	2360      	movs	r3, #96	@ 0x60
 80012a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012a6:	2300      	movs	r3, #0
 80012a8:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012aa:	f107 0314 	add.w	r3, r7, #20
 80012ae:	4618      	mov	r0, r3
 80012b0:	f004 fd9e 	bl	8005df0 <HAL_RCC_OscConfig>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	bf14      	ite	ne
 80012ba:	2301      	movne	r3, #1
 80012bc:	2300      	moveq	r3, #0
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 80012c4:	f000 ffe4 	bl	8002290 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012c8:	230f      	movs	r3, #15
 80012ca:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80012cc:	2300      	movs	r3, #0
 80012ce:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012d0:	2300      	movs	r3, #0
 80012d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012d4:	2300      	movs	r3, #0
 80012d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012d8:	2300      	movs	r3, #0
 80012da:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012dc:	463b      	mov	r3, r7
 80012de:	2100      	movs	r1, #0
 80012e0:	4618      	mov	r0, r3
 80012e2:	f005 f9e7 	bl	80066b4 <HAL_RCC_ClockConfig>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	bf14      	ite	ne
 80012ec:	2301      	movne	r3, #1
 80012ee:	2300      	moveq	r3, #0
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 80012f6:	f000 ffcb 	bl	8002290 <Error_Handler>
  }
}
 80012fa:	bf00      	nop
 80012fc:	3758      	adds	r7, #88	@ 0x58
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
	...

08001304 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b08a      	sub	sp, #40	@ 0x28
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800130a:	f107 031c 	add.w	r3, r7, #28
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]
 8001314:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001316:	1d3b      	adds	r3, r7, #4
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
 8001322:	611a      	str	r2, [r3, #16]
 8001324:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001326:	4b37      	ldr	r3, [pc, #220]	@ (8001404 <_ZL12MX_ADC1_Initv+0x100>)
 8001328:	4a37      	ldr	r2, [pc, #220]	@ (8001408 <_ZL12MX_ADC1_Initv+0x104>)
 800132a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800132c:	4b35      	ldr	r3, [pc, #212]	@ (8001404 <_ZL12MX_ADC1_Initv+0x100>)
 800132e:	2200      	movs	r2, #0
 8001330:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001332:	4b34      	ldr	r3, [pc, #208]	@ (8001404 <_ZL12MX_ADC1_Initv+0x100>)
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001338:	4b32      	ldr	r3, [pc, #200]	@ (8001404 <_ZL12MX_ADC1_Initv+0x100>)
 800133a:	2200      	movs	r2, #0
 800133c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800133e:	4b31      	ldr	r3, [pc, #196]	@ (8001404 <_ZL12MX_ADC1_Initv+0x100>)
 8001340:	2200      	movs	r2, #0
 8001342:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001344:	4b2f      	ldr	r3, [pc, #188]	@ (8001404 <_ZL12MX_ADC1_Initv+0x100>)
 8001346:	2204      	movs	r2, #4
 8001348:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800134a:	4b2e      	ldr	r3, [pc, #184]	@ (8001404 <_ZL12MX_ADC1_Initv+0x100>)
 800134c:	2200      	movs	r2, #0
 800134e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001350:	4b2c      	ldr	r3, [pc, #176]	@ (8001404 <_ZL12MX_ADC1_Initv+0x100>)
 8001352:	2201      	movs	r2, #1
 8001354:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001356:	4b2b      	ldr	r3, [pc, #172]	@ (8001404 <_ZL12MX_ADC1_Initv+0x100>)
 8001358:	2201      	movs	r2, #1
 800135a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800135c:	4b29      	ldr	r3, [pc, #164]	@ (8001404 <_ZL12MX_ADC1_Initv+0x100>)
 800135e:	2200      	movs	r2, #0
 8001360:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001364:	4b27      	ldr	r3, [pc, #156]	@ (8001404 <_ZL12MX_ADC1_Initv+0x100>)
 8001366:	2200      	movs	r2, #0
 8001368:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800136a:	4b26      	ldr	r3, [pc, #152]	@ (8001404 <_ZL12MX_ADC1_Initv+0x100>)
 800136c:	2200      	movs	r2, #0
 800136e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001370:	4b24      	ldr	r3, [pc, #144]	@ (8001404 <_ZL12MX_ADC1_Initv+0x100>)
 8001372:	2200      	movs	r2, #0
 8001374:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001378:	4b22      	ldr	r3, [pc, #136]	@ (8001404 <_ZL12MX_ADC1_Initv+0x100>)
 800137a:	2200      	movs	r2, #0
 800137c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800137e:	4b21      	ldr	r3, [pc, #132]	@ (8001404 <_ZL12MX_ADC1_Initv+0x100>)
 8001380:	2200      	movs	r2, #0
 8001382:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001386:	481f      	ldr	r0, [pc, #124]	@ (8001404 <_ZL12MX_ADC1_Initv+0x100>)
 8001388:	f002 fb42 	bl	8003a10 <HAL_ADC_Init>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	bf14      	ite	ne
 8001392:	2301      	movne	r3, #1
 8001394:	2300      	moveq	r3, #0
 8001396:	b2db      	uxtb	r3, r3
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <_ZL12MX_ADC1_Initv+0x9c>
  {
    Error_Handler();
 800139c:	f000 ff78 	bl	8002290 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80013a0:	2300      	movs	r3, #0
 80013a2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80013a4:	f107 031c 	add.w	r3, r7, #28
 80013a8:	4619      	mov	r1, r3
 80013aa:	4816      	ldr	r0, [pc, #88]	@ (8001404 <_ZL12MX_ADC1_Initv+0x100>)
 80013ac:	f003 fc12 	bl	8004bd4 <HAL_ADCEx_MultiModeConfigChannel>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	bf14      	ite	ne
 80013b6:	2301      	movne	r3, #1
 80013b8:	2300      	moveq	r3, #0
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <_ZL12MX_ADC1_Initv+0xc0>
  {
    Error_Handler();
 80013c0:	f000 ff66 	bl	8002290 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80013c4:	4b11      	ldr	r3, [pc, #68]	@ (800140c <_ZL12MX_ADC1_Initv+0x108>)
 80013c6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013c8:	2306      	movs	r3, #6
 80013ca:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80013cc:	2300      	movs	r3, #0
 80013ce:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80013d0:	237f      	movs	r3, #127	@ 0x7f
 80013d2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80013d4:	2304      	movs	r3, #4
 80013d6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80013d8:	2300      	movs	r3, #0
 80013da:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013dc:	1d3b      	adds	r3, r7, #4
 80013de:	4619      	mov	r1, r3
 80013e0:	4808      	ldr	r0, [pc, #32]	@ (8001404 <_ZL12MX_ADC1_Initv+0x100>)
 80013e2:	f002 fe33 	bl	800404c <HAL_ADC_ConfigChannel>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	bf14      	ite	ne
 80013ec:	2301      	movne	r3, #1
 80013ee:	2300      	moveq	r3, #0
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <_ZL12MX_ADC1_Initv+0xf6>
  {
    Error_Handler();
 80013f6:	f000 ff4b 	bl	8002290 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013fa:	bf00      	nop
 80013fc:	3728      	adds	r7, #40	@ 0x28
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	200000a4 	.word	0x200000a4
 8001408:	50040000 	.word	0x50040000
 800140c:	3ef08000 	.word	0x3ef08000

08001410 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 8001414:	4b22      	ldr	r3, [pc, #136]	@ (80014a0 <_ZL12MX_I2C1_Initv+0x90>)
 8001416:	4a23      	ldr	r2, [pc, #140]	@ (80014a4 <_ZL12MX_I2C1_Initv+0x94>)
 8001418:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10805E89;  // 100kHz, seguro com MCP4725
 800141a:	4b21      	ldr	r3, [pc, #132]	@ (80014a0 <_ZL12MX_I2C1_Initv+0x90>)
 800141c:	4a22      	ldr	r2, [pc, #136]	@ (80014a8 <_ZL12MX_I2C1_Initv+0x98>)
 800141e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001420:	4b1f      	ldr	r3, [pc, #124]	@ (80014a0 <_ZL12MX_I2C1_Initv+0x90>)
 8001422:	2200      	movs	r2, #0
 8001424:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001426:	4b1e      	ldr	r3, [pc, #120]	@ (80014a0 <_ZL12MX_I2C1_Initv+0x90>)
 8001428:	2201      	movs	r2, #1
 800142a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800142c:	4b1c      	ldr	r3, [pc, #112]	@ (80014a0 <_ZL12MX_I2C1_Initv+0x90>)
 800142e:	2200      	movs	r2, #0
 8001430:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001432:	4b1b      	ldr	r3, [pc, #108]	@ (80014a0 <_ZL12MX_I2C1_Initv+0x90>)
 8001434:	2200      	movs	r2, #0
 8001436:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001438:	4b19      	ldr	r3, [pc, #100]	@ (80014a0 <_ZL12MX_I2C1_Initv+0x90>)
 800143a:	2200      	movs	r2, #0
 800143c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800143e:	4b18      	ldr	r3, [pc, #96]	@ (80014a0 <_ZL12MX_I2C1_Initv+0x90>)
 8001440:	2200      	movs	r2, #0
 8001442:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001444:	4b16      	ldr	r3, [pc, #88]	@ (80014a0 <_ZL12MX_I2C1_Initv+0x90>)
 8001446:	2200      	movs	r2, #0
 8001448:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800144a:	4815      	ldr	r0, [pc, #84]	@ (80014a0 <_ZL12MX_I2C1_Initv+0x90>)
 800144c:	f003 ff1a 	bl	8005284 <HAL_I2C_Init>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	bf14      	ite	ne
 8001456:	2301      	movne	r3, #1
 8001458:	2300      	moveq	r3, #0
 800145a:	b2db      	uxtb	r3, r3
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 8001460:	f000 ff16 	bl	8002290 <Error_Handler>
  }

  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001464:	2100      	movs	r1, #0
 8001466:	480e      	ldr	r0, [pc, #56]	@ (80014a0 <_ZL12MX_I2C1_Initv+0x90>)
 8001468:	f004 fbc6 	bl	8005bf8 <HAL_I2CEx_ConfigAnalogFilter>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	bf14      	ite	ne
 8001472:	2301      	movne	r3, #1
 8001474:	2300      	moveq	r3, #0
 8001476:	b2db      	uxtb	r3, r3
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 800147c:	f000 ff08 	bl	8002290 <Error_Handler>
  }

  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001480:	2100      	movs	r1, #0
 8001482:	4807      	ldr	r0, [pc, #28]	@ (80014a0 <_ZL12MX_I2C1_Initv+0x90>)
 8001484:	f004 fc03 	bl	8005c8e <HAL_I2CEx_ConfigDigitalFilter>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	bf14      	ite	ne
 800148e:	2301      	movne	r3, #1
 8001490:	2300      	moveq	r3, #0
 8001492:	b2db      	uxtb	r3, r3
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 8001498:	f000 fefa 	bl	8002290 <Error_Handler>
  }
}
 800149c:	bf00      	nop
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20000108 	.word	0x20000108
 80014a4:	40005400 	.word	0x40005400
 80014a8:	10805e89 	.word	0x10805e89

080014ac <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b088      	sub	sp, #32
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80014b2:	f107 030c 	add.w	r3, r7, #12
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	605a      	str	r2, [r3, #4]
 80014bc:	609a      	str	r2, [r3, #8]
 80014be:	60da      	str	r2, [r3, #12]
 80014c0:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c2:	463b      	mov	r3, r7
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014cc:	4b29      	ldr	r3, [pc, #164]	@ (8001574 <_ZL12MX_TIM1_Initv+0xc8>)
 80014ce:	4a2a      	ldr	r2, [pc, #168]	@ (8001578 <_ZL12MX_TIM1_Initv+0xcc>)
 80014d0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;     // (72 MHz / 1 MHz) - 1 → 1 tick = 1 µs
 80014d2:	4b28      	ldr	r3, [pc, #160]	@ (8001574 <_ZL12MX_TIM1_Initv+0xc8>)
 80014d4:	2247      	movs	r2, #71	@ 0x47
 80014d6:	605a      	str	r2, [r3, #4]
  htim1.Init.Period = 0xFFFF;    // Máximo valor para 16 bits, overflow em ~65 ms
 80014d8:	4b26      	ldr	r3, [pc, #152]	@ (8001574 <_ZL12MX_TIM1_Initv+0xc8>)
 80014da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014de:	60da      	str	r2, [r3, #12]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e0:	4b24      	ldr	r3, [pc, #144]	@ (8001574 <_ZL12MX_TIM1_Initv+0xc8>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	609a      	str	r2, [r3, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e6:	4b23      	ldr	r3, [pc, #140]	@ (8001574 <_ZL12MX_TIM1_Initv+0xc8>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014ec:	4b21      	ldr	r3, [pc, #132]	@ (8001574 <_ZL12MX_TIM1_Initv+0xc8>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014f2:	4b20      	ldr	r3, [pc, #128]	@ (8001574 <_ZL12MX_TIM1_Initv+0xc8>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014f8:	481e      	ldr	r0, [pc, #120]	@ (8001574 <_ZL12MX_TIM1_Initv+0xc8>)
 80014fa:	f005 fc85 	bl	8006e08 <HAL_TIM_Base_Init>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	bf14      	ite	ne
 8001504:	2301      	movne	r3, #1
 8001506:	2300      	moveq	r3, #0
 8001508:	b2db      	uxtb	r3, r3
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <_ZL12MX_TIM1_Initv+0x66>
  {
    Error_Handler();
 800150e:	f000 febf 	bl	8002290 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8001512:	2307      	movs	r3, #7
 8001514:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001516:	2350      	movs	r3, #80	@ 0x50
 8001518:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 800151e:	2300      	movs	r3, #0
 8001520:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001522:	f107 030c 	add.w	r3, r7, #12
 8001526:	4619      	mov	r1, r3
 8001528:	4812      	ldr	r0, [pc, #72]	@ (8001574 <_ZL12MX_TIM1_Initv+0xc8>)
 800152a:	f005 fdda 	bl	80070e2 <HAL_TIM_SlaveConfigSynchro>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	bf14      	ite	ne
 8001534:	2301      	movne	r3, #1
 8001536:	2300      	moveq	r3, #0
 8001538:	b2db      	uxtb	r3, r3
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <_ZL12MX_TIM1_Initv+0x96>
  {
    Error_Handler();
 800153e:	f000 fea7 	bl	8002290 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001542:	2300      	movs	r3, #0
 8001544:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001546:	2300      	movs	r3, #0
 8001548:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800154a:	2300      	movs	r3, #0
 800154c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800154e:	463b      	mov	r3, r7
 8001550:	4619      	mov	r1, r3
 8001552:	4808      	ldr	r0, [pc, #32]	@ (8001574 <_ZL12MX_TIM1_Initv+0xc8>)
 8001554:	f005 ffa6 	bl	80074a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	bf14      	ite	ne
 800155e:	2301      	movne	r3, #1
 8001560:	2300      	moveq	r3, #0
 8001562:	b2db      	uxtb	r3, r3
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <_ZL12MX_TIM1_Initv+0xc0>
  {
    Error_Handler();
 8001568:	f000 fe92 	bl	8002290 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800156c:	bf00      	nop
 800156e:	3720      	adds	r7, #32
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	2000015c 	.word	0x2000015c
 8001578:	40012c00 	.word	0x40012c00

0800157c <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init()
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001582:	463b      	mov	r3, r7
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800158e:	4b28      	ldr	r3, [pc, #160]	@ (8001630 <_ZL12MX_TIM2_Initv+0xb4>)
 8001590:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001594:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = (SystemCoreClock / 1000000) - 1;                     // 80 MHz / (79 + 1) = 1 MHz → 1 µs por tick
 8001596:	4b27      	ldr	r3, [pc, #156]	@ (8001634 <_ZL12MX_TIM2_Initv+0xb8>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a27      	ldr	r2, [pc, #156]	@ (8001638 <_ZL12MX_TIM2_Initv+0xbc>)
 800159c:	fba2 2303 	umull	r2, r3, r2, r3
 80015a0:	0c9b      	lsrs	r3, r3, #18
 80015a2:	3b01      	subs	r3, #1
 80015a4:	4a22      	ldr	r2, [pc, #136]	@ (8001630 <_ZL12MX_TIM2_Initv+0xb4>)
 80015a6:	6053      	str	r3, [r2, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a8:	4b21      	ldr	r3, [pc, #132]	@ (8001630 <_ZL12MX_TIM2_Initv+0xb4>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	609a      	str	r2, [r3, #8]
    htim2.Init.Period = 0xFFFFFFFF;                 // 32 bits → overflow só após ~1h
 80015ae:	4b20      	ldr	r3, [pc, #128]	@ (8001630 <_ZL12MX_TIM2_Initv+0xb4>)
 80015b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80015b4:	60da      	str	r2, [r3, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001630 <_ZL12MX_TIM2_Initv+0xb4>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	611a      	str	r2, [r3, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001630 <_ZL12MX_TIM2_Initv+0xb4>)
 80015be:	2200      	movs	r2, #0
 80015c0:	619a      	str	r2, [r3, #24]
    HAL_TIM_Base_Init(&htim2);
 80015c2:	481b      	ldr	r0, [pc, #108]	@ (8001630 <_ZL12MX_TIM2_Initv+0xb4>)
 80015c4:	f005 fc20 	bl	8006e08 <HAL_TIM_Base_Init>
    HAL_TIM_Base_Start(&htim2);
 80015c8:	4819      	ldr	r0, [pc, #100]	@ (8001630 <_ZL12MX_TIM2_Initv+0xb4>)
 80015ca:	f005 fc75 	bl	8006eb8 <HAL_TIM_Base_Start>
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015ce:	4818      	ldr	r0, [pc, #96]	@ (8001630 <_ZL12MX_TIM2_Initv+0xb4>)
 80015d0:	f005 fc1a 	bl	8006e08 <HAL_TIM_Base_Init>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	bf14      	ite	ne
 80015da:	2301      	movne	r3, #1
 80015dc:	2300      	moveq	r3, #0
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <_ZL12MX_TIM2_Initv+0x6c>
      {
        Error_Handler();
 80015e4:	f000 fe54 	bl	8002290 <Error_Handler>
      }

      sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015ec:	603b      	str	r3, [r7, #0]
      if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015ee:	463b      	mov	r3, r7
 80015f0:	4619      	mov	r1, r3
 80015f2:	480f      	ldr	r0, [pc, #60]	@ (8001630 <_ZL12MX_TIM2_Initv+0xb4>)
 80015f4:	f005 fcac 	bl	8006f50 <HAL_TIM_ConfigClockSource>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	bf14      	ite	ne
 80015fe:	2301      	movne	r3, #1
 8001600:	2300      	moveq	r3, #0
 8001602:	b2db      	uxtb	r3, r3
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <_ZL12MX_TIM2_Initv+0x90>
      {
        Error_Handler();
 8001608:	f000 fe42 	bl	8002290 <Error_Handler>
      }

      if (HAL_TIM_Base_Start(&htim2) != HAL_OK)
 800160c:	4808      	ldr	r0, [pc, #32]	@ (8001630 <_ZL12MX_TIM2_Initv+0xb4>)
 800160e:	f005 fc53 	bl	8006eb8 <HAL_TIM_Base_Start>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	bf14      	ite	ne
 8001618:	2301      	movne	r3, #1
 800161a:	2300      	moveq	r3, #0
 800161c:	b2db      	uxtb	r3, r3
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <_ZL12MX_TIM2_Initv+0xaa>
      {
        Error_Handler();
 8001622:	f000 fe35 	bl	8002290 <Error_Handler>
      }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001626:	bf00      	nop
 8001628:	3710      	adds	r7, #16
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	200001a8 	.word	0x200001a8
 8001634:	20000020 	.word	0x20000020
 8001638:	431bde83 	.word	0x431bde83

0800163c <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001640:	4b16      	ldr	r3, [pc, #88]	@ (800169c <_ZL19MX_USART1_UART_Initv+0x60>)
 8001642:	4a17      	ldr	r2, [pc, #92]	@ (80016a0 <_ZL19MX_USART1_UART_Initv+0x64>)
 8001644:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001646:	4b15      	ldr	r3, [pc, #84]	@ (800169c <_ZL19MX_USART1_UART_Initv+0x60>)
 8001648:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800164c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800164e:	4b13      	ldr	r3, [pc, #76]	@ (800169c <_ZL19MX_USART1_UART_Initv+0x60>)
 8001650:	2200      	movs	r2, #0
 8001652:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001654:	4b11      	ldr	r3, [pc, #68]	@ (800169c <_ZL19MX_USART1_UART_Initv+0x60>)
 8001656:	2200      	movs	r2, #0
 8001658:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800165a:	4b10      	ldr	r3, [pc, #64]	@ (800169c <_ZL19MX_USART1_UART_Initv+0x60>)
 800165c:	2200      	movs	r2, #0
 800165e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001660:	4b0e      	ldr	r3, [pc, #56]	@ (800169c <_ZL19MX_USART1_UART_Initv+0x60>)
 8001662:	220c      	movs	r2, #12
 8001664:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001666:	4b0d      	ldr	r3, [pc, #52]	@ (800169c <_ZL19MX_USART1_UART_Initv+0x60>)
 8001668:	2200      	movs	r2, #0
 800166a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800166c:	4b0b      	ldr	r3, [pc, #44]	@ (800169c <_ZL19MX_USART1_UART_Initv+0x60>)
 800166e:	2200      	movs	r2, #0
 8001670:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001672:	4b0a      	ldr	r3, [pc, #40]	@ (800169c <_ZL19MX_USART1_UART_Initv+0x60>)
 8001674:	2200      	movs	r2, #0
 8001676:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001678:	4b08      	ldr	r3, [pc, #32]	@ (800169c <_ZL19MX_USART1_UART_Initv+0x60>)
 800167a:	2200      	movs	r2, #0
 800167c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800167e:	4807      	ldr	r0, [pc, #28]	@ (800169c <_ZL19MX_USART1_UART_Initv+0x60>)
 8001680:	f005 ff76 	bl	8007570 <HAL_UART_Init>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	bf14      	ite	ne
 800168a:	2301      	movne	r3, #1
 800168c:	2300      	moveq	r3, #0
 800168e:	b2db      	uxtb	r3, r3
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8001694:	f000 fdfc 	bl	8002290 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001698:	bf00      	nop
 800169a:	bd80      	pop	{r7, pc}
 800169c:	200001f4 	.word	0x200001f4
 80016a0:	40013800 	.word	0x40013800

080016a4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b088      	sub	sp, #32
 80016a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016aa:	f107 030c 	add.w	r3, r7, #12
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	605a      	str	r2, [r3, #4]
 80016b4:	609a      	str	r2, [r3, #8]
 80016b6:	60da      	str	r2, [r3, #12]
 80016b8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ba:	4b36      	ldr	r3, [pc, #216]	@ (8001794 <_ZL12MX_GPIO_Initv+0xf0>)
 80016bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016be:	4a35      	ldr	r2, [pc, #212]	@ (8001794 <_ZL12MX_GPIO_Initv+0xf0>)
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016c6:	4b33      	ldr	r3, [pc, #204]	@ (8001794 <_ZL12MX_GPIO_Initv+0xf0>)
 80016c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	60bb      	str	r3, [r7, #8]
 80016d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d2:	4b30      	ldr	r3, [pc, #192]	@ (8001794 <_ZL12MX_GPIO_Initv+0xf0>)
 80016d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016d6:	4a2f      	ldr	r2, [pc, #188]	@ (8001794 <_ZL12MX_GPIO_Initv+0xf0>)
 80016d8:	f043 0302 	orr.w	r3, r3, #2
 80016dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016de:	4b2d      	ldr	r3, [pc, #180]	@ (8001794 <_ZL12MX_GPIO_Initv+0xf0>)
 80016e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	607b      	str	r3, [r7, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80016ea:	2200      	movs	r2, #0
 80016ec:	21fc      	movs	r1, #252	@ 0xfc
 80016ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016f2:	f003 fd97 	bl	8005224 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : Decrease_BTN_Pin Increase_BTN_Pin */
  GPIO_InitStruct.Pin = Decrease_BTN_Pin|Increase_BTN_Pin;
 80016f6:	2303      	movs	r3, #3
 80016f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016fa:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80016fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001700:	2301      	movs	r3, #1
 8001702:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001704:	f107 030c 	add.w	r3, r7, #12
 8001708:	4619      	mov	r1, r3
 800170a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800170e:	f003 fc17 	bl	8004f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 PA5
                           PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001712:	23fc      	movs	r3, #252	@ 0xfc
 8001714:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001716:	2301      	movs	r3, #1
 8001718:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171e:	2300      	movs	r3, #0
 8001720:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001722:	f107 030c 	add.w	r3, r7, #12
 8001726:	4619      	mov	r1, r3
 8001728:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800172c:	f003 fc08 	bl	8004f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : Mode_BTN_Pin Select_BTN_Pin */
  GPIO_InitStruct.Pin = Mode_BTN_Pin|Select_BTN_Pin;
 8001730:	2330      	movs	r3, #48	@ 0x30
 8001732:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001734:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001738:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800173a:	2301      	movs	r3, #1
 800173c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800173e:	f107 030c 	add.w	r3, r7, #12
 8001742:	4619      	mov	r1, r3
 8001744:	4814      	ldr	r0, [pc, #80]	@ (8001798 <_ZL12MX_GPIO_Initv+0xf4>)
 8001746:	f003 fbfb 	bl	8004f40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800174a:	2200      	movs	r2, #0
 800174c:	2100      	movs	r1, #0
 800174e:	2006      	movs	r0, #6
 8001750:	f003 fbbf 	bl	8004ed2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001754:	2006      	movs	r0, #6
 8001756:	f003 fbd8 	bl	8004f0a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800175a:	2200      	movs	r2, #0
 800175c:	2100      	movs	r1, #0
 800175e:	2007      	movs	r0, #7
 8001760:	f003 fbb7 	bl	8004ed2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001764:	2007      	movs	r0, #7
 8001766:	f003 fbd0 	bl	8004f0a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800176a:	2200      	movs	r2, #0
 800176c:	2100      	movs	r1, #0
 800176e:	200a      	movs	r0, #10
 8001770:	f003 fbaf 	bl	8004ed2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001774:	200a      	movs	r0, #10
 8001776:	f003 fbc8 	bl	8004f0a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800177a:	2200      	movs	r2, #0
 800177c:	2100      	movs	r1, #0
 800177e:	2017      	movs	r0, #23
 8001780:	f003 fba7 	bl	8004ed2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001784:	2017      	movs	r0, #23
 8001786:	f003 fbc0 	bl	8004f0a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800178a:	bf00      	nop
 800178c:	3720      	adds	r7, #32
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40021000 	.word	0x40021000
 8001798:	48000400 	.word	0x48000400

0800179c <_Z6microsv>:

/* USER CODE BEGIN 4 */
uint32_t micros() {
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
    return __HAL_TIM_GET_COUNTER(&htim2);
 80017a0:	4b03      	ldr	r3, [pc, #12]	@ (80017b0 <_Z6microsv+0x14>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	200001a8 	.word	0x200001a8

080017b4 <_Z10lcd_enablev>:

// Função para gerar o pulso de habilitação
void lcd_enable() {
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, LCD_E_PIN, GPIO_PIN_SET);
 80017b8:	2201      	movs	r2, #1
 80017ba:	2104      	movs	r1, #4
 80017bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017c0:	f003 fd30 	bl	8005224 <HAL_GPIO_WritePin>
    delayMicroseconds(10);  // Delay ajustado
 80017c4:	200a      	movs	r0, #10
 80017c6:	f000 fd1b 	bl	8002200 <_Z17delayMicrosecondsm>
    HAL_GPIO_WritePin(GPIOA, LCD_E_PIN, GPIO_PIN_RESET);
 80017ca:	2200      	movs	r2, #0
 80017cc:	2104      	movs	r1, #4
 80017ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017d2:	f003 fd27 	bl	8005224 <HAL_GPIO_WritePin>
    delayMicroseconds(10);  // Delay ajustado
 80017d6:	200a      	movs	r0, #10
 80017d8:	f000 fd12 	bl	8002200 <_Z17delayMicrosecondsm>
}
 80017dc:	bf00      	nop
 80017de:	bd80      	pop	{r7, pc}

080017e0 <_Z8lcd_sendh>:

// Função interna para enviar um byte (comando ou dado)
void lcd_send(uint8_t data) {
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	71fb      	strb	r3, [r7, #7]
    // Enviar nibble alto
    HAL_GPIO_WritePin(GPIOA, LCD_D7_PIN, (GPIO_PinState)((data >> 4) & 0x01));
 80017ea:	79fb      	ldrb	r3, [r7, #7]
 80017ec:	091b      	lsrs	r3, r3, #4
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	f003 0301 	and.w	r3, r3, #1
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	461a      	mov	r2, r3
 80017f8:	2108      	movs	r1, #8
 80017fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017fe:	f003 fd11 	bl	8005224 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, LCD_D6_PIN, (GPIO_PinState)((data >> 5) & 0x01));
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	095b      	lsrs	r3, r3, #5
 8001806:	b2db      	uxtb	r3, r3
 8001808:	f003 0301 	and.w	r3, r3, #1
 800180c:	b2db      	uxtb	r3, r3
 800180e:	461a      	mov	r2, r3
 8001810:	2110      	movs	r1, #16
 8001812:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001816:	f003 fd05 	bl	8005224 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, LCD_D5_PIN, (GPIO_PinState)((data >> 6) & 0x01));
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	099b      	lsrs	r3, r3, #6
 800181e:	b2db      	uxtb	r3, r3
 8001820:	f003 0301 	and.w	r3, r3, #1
 8001824:	b2db      	uxtb	r3, r3
 8001826:	461a      	mov	r2, r3
 8001828:	2120      	movs	r1, #32
 800182a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800182e:	f003 fcf9 	bl	8005224 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, LCD_D4_PIN, (GPIO_PinState)((data >> 7) & 0x01));
 8001832:	79fb      	ldrb	r3, [r7, #7]
 8001834:	09db      	lsrs	r3, r3, #7
 8001836:	b2db      	uxtb	r3, r3
 8001838:	461a      	mov	r2, r3
 800183a:	2140      	movs	r1, #64	@ 0x40
 800183c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001840:	f003 fcf0 	bl	8005224 <HAL_GPIO_WritePin>
    lcd_enable();
 8001844:	f7ff ffb6 	bl	80017b4 <_Z10lcd_enablev>

    // Enviar nibble baixo
    HAL_GPIO_WritePin(GPIOA, LCD_D7_PIN, (GPIO_PinState)((data >> 0) & 0x01));
 8001848:	79fb      	ldrb	r3, [r7, #7]
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	b2db      	uxtb	r3, r3
 8001850:	461a      	mov	r2, r3
 8001852:	2108      	movs	r1, #8
 8001854:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001858:	f003 fce4 	bl	8005224 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, LCD_D6_PIN, (GPIO_PinState)((data >> 1) & 0x01));
 800185c:	79fb      	ldrb	r3, [r7, #7]
 800185e:	085b      	lsrs	r3, r3, #1
 8001860:	b2db      	uxtb	r3, r3
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	b2db      	uxtb	r3, r3
 8001868:	461a      	mov	r2, r3
 800186a:	2110      	movs	r1, #16
 800186c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001870:	f003 fcd8 	bl	8005224 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, LCD_D5_PIN, (GPIO_PinState)((data >> 2) & 0x01));
 8001874:	79fb      	ldrb	r3, [r7, #7]
 8001876:	089b      	lsrs	r3, r3, #2
 8001878:	b2db      	uxtb	r3, r3
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	b2db      	uxtb	r3, r3
 8001880:	461a      	mov	r2, r3
 8001882:	2120      	movs	r1, #32
 8001884:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001888:	f003 fccc 	bl	8005224 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, LCD_D4_PIN, (GPIO_PinState)((data >> 3) & 0x01));
 800188c:	79fb      	ldrb	r3, [r7, #7]
 800188e:	08db      	lsrs	r3, r3, #3
 8001890:	b2db      	uxtb	r3, r3
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	b2db      	uxtb	r3, r3
 8001898:	461a      	mov	r2, r3
 800189a:	2140      	movs	r1, #64	@ 0x40
 800189c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018a0:	f003 fcc0 	bl	8005224 <HAL_GPIO_WritePin>
    lcd_enable();
 80018a4:	f7ff ff86 	bl	80017b4 <_Z10lcd_enablev>
}
 80018a8:	bf00      	nop
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <lcd_send_command>:

void lcd_send_command(uint8_t cmd) {
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(GPIOA, LCD_RS_PIN, GPIO_PIN_RESET);
 80018ba:	2200      	movs	r2, #0
 80018bc:	2180      	movs	r1, #128	@ 0x80
 80018be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018c2:	f003 fcaf 	bl	8005224 <HAL_GPIO_WritePin>
    lcd_send(cmd);
 80018c6:	79fb      	ldrb	r3, [r7, #7]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff ff89 	bl	80017e0 <_Z8lcd_sendh>
    HAL_Delay(2);  // Delay adicional
 80018ce:	2002      	movs	r0, #2
 80018d0:	f001 fe36 	bl	8003540 <HAL_Delay>
}
 80018d4:	bf00      	nop
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <lcd_send_data>:

void lcd_send_data(uint8_t data) {
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(GPIOA, LCD_RS_PIN, GPIO_PIN_SET);
 80018e6:	2201      	movs	r2, #1
 80018e8:	2180      	movs	r1, #128	@ 0x80
 80018ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018ee:	f003 fc99 	bl	8005224 <HAL_GPIO_WritePin>
    lcd_send(data);
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff ff73 	bl	80017e0 <_Z8lcd_sendh>
    HAL_Delay(2);  // Delay adicional
 80018fa:	2002      	movs	r0, #2
 80018fc:	f001 fe20 	bl	8003540 <HAL_Delay>
}
 8001900:	bf00      	nop
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <lcd_init>:

// Inicialização do LCD
void lcd_init() {
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
    HAL_Delay(50);  // Esperar mais tempo após o boot
 800190c:	2032      	movs	r0, #50	@ 0x32
 800190e:	f001 fe17 	bl	8003540 <HAL_Delay>

    lcd_send_command(0x03);
 8001912:	2003      	movs	r0, #3
 8001914:	f7ff ffcc 	bl	80018b0 <lcd_send_command>
    HAL_Delay(5);
 8001918:	2005      	movs	r0, #5
 800191a:	f001 fe11 	bl	8003540 <HAL_Delay>
    lcd_send_command(0x03);
 800191e:	2003      	movs	r0, #3
 8001920:	f7ff ffc6 	bl	80018b0 <lcd_send_command>
    HAL_Delay(5);
 8001924:	2005      	movs	r0, #5
 8001926:	f001 fe0b 	bl	8003540 <HAL_Delay>
    lcd_send_command(0x03);
 800192a:	2003      	movs	r0, #3
 800192c:	f7ff ffc0 	bl	80018b0 <lcd_send_command>
    HAL_Delay(5);
 8001930:	2005      	movs	r0, #5
 8001932:	f001 fe05 	bl	8003540 <HAL_Delay>
    lcd_send_command(0x02);  // Modo 4 bits
 8001936:	2002      	movs	r0, #2
 8001938:	f7ff ffba 	bl	80018b0 <lcd_send_command>
    HAL_Delay(5);
 800193c:	2005      	movs	r0, #5
 800193e:	f001 fdff 	bl	8003540 <HAL_Delay>

    lcd_send_command(LCD_FUNCTION_SET | 0x08);
 8001942:	2028      	movs	r0, #40	@ 0x28
 8001944:	f7ff ffb4 	bl	80018b0 <lcd_send_command>
    lcd_send_command(LCD_DISPLAY_CONTROL | LCD_DISPLAY_ON | LCD_CURSOR_OFF | LCD_BLINK_OFF);
 8001948:	200c      	movs	r0, #12
 800194a:	f7ff ffb1 	bl	80018b0 <lcd_send_command>
    lcd_send_command(LCD_CLEAR_DISPLAY);
 800194e:	2001      	movs	r0, #1
 8001950:	f7ff ffae 	bl	80018b0 <lcd_send_command>
    HAL_Delay(2);
 8001954:	2002      	movs	r0, #2
 8001956:	f001 fdf3 	bl	8003540 <HAL_Delay>
    lcd_send_command(LCD_ENTRY_MODE_SET | LCD_ENTRY_LEFT);
 800195a:	2006      	movs	r0, #6
 800195c:	f7ff ffa8 	bl	80018b0 <lcd_send_command>
}
 8001960:	bf00      	nop
 8001962:	bd80      	pop	{r7, pc}

08001964 <lcd_clear>:

// Limpa o display
void lcd_clear(void) {
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
    lcd_send_command(LCD_CLEAR_DISPLAY);
 8001968:	2001      	movs	r0, #1
 800196a:	f7ff ffa1 	bl	80018b0 <lcd_send_command>
    HAL_Delay(2);
 800196e:	2002      	movs	r0, #2
 8001970:	f001 fde6 	bl	8003540 <HAL_Delay>
}
 8001974:	bf00      	nop
 8001976:	bd80      	pop	{r7, pc}

08001978 <lcd_set_cursor>:

// Define a posição do cursor
void lcd_set_cursor(uint8_t row, uint8_t col) {
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	460a      	mov	r2, r1
 8001982:	71fb      	strb	r3, [r7, #7]
 8001984:	4613      	mov	r3, r2
 8001986:	71bb      	strb	r3, [r7, #6]
    uint8_t address = (row == 0) ? 0x00 : 0x40;
 8001988:	79fb      	ldrb	r3, [r7, #7]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d101      	bne.n	8001992 <lcd_set_cursor+0x1a>
 800198e:	2300      	movs	r3, #0
 8001990:	e000      	b.n	8001994 <lcd_set_cursor+0x1c>
 8001992:	2340      	movs	r3, #64	@ 0x40
 8001994:	73fb      	strb	r3, [r7, #15]
    address += col;
 8001996:	7bfa      	ldrb	r2, [r7, #15]
 8001998:	79bb      	ldrb	r3, [r7, #6]
 800199a:	4413      	add	r3, r2
 800199c:	73fb      	strb	r3, [r7, #15]
    lcd_send_command(LCD_SET_DDRAM_ADDR | address);
 800199e:	7bfb      	ldrb	r3, [r7, #15]
 80019a0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff ff82 	bl	80018b0 <lcd_send_command>
}
 80019ac:	bf00      	nop
 80019ae:	3710      	adds	r7, #16
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <lcd_print>:

// Escreve uma string no LCD
void lcd_print(const char *str) {
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
    while (*str) {
 80019bc:	e006      	b.n	80019cc <lcd_print+0x18>
        lcd_send_data(*str++);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	1c5a      	adds	r2, r3, #1
 80019c2:	607a      	str	r2, [r7, #4]
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff ff88 	bl	80018dc <lcd_send_data>
    while (*str) {
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d1f4      	bne.n	80019be <lcd_print+0xa>
    }
}
 80019d4:	bf00      	nop
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
	...

080019e0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	4603      	mov	r3, r0
 80019e8:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 80019ea:	88fb      	ldrh	r3, [r7, #6]
 80019ec:	3b01      	subs	r3, #1
 80019ee:	2b1f      	cmp	r3, #31
 80019f0:	d84e      	bhi.n	8001a90 <HAL_GPIO_EXTI_Callback+0xb0>
 80019f2:	a201      	add	r2, pc, #4	@ (adr r2, 80019f8 <HAL_GPIO_EXTI_Callback+0x18>)
 80019f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019f8:	08001a79 	.word	0x08001a79
 80019fc:	08001a7f 	.word	0x08001a7f
 8001a00:	08001a91 	.word	0x08001a91
 8001a04:	08001a91 	.word	0x08001a91
 8001a08:	08001a91 	.word	0x08001a91
 8001a0c:	08001a91 	.word	0x08001a91
 8001a10:	08001a91 	.word	0x08001a91
 8001a14:	08001a91 	.word	0x08001a91
 8001a18:	08001a91 	.word	0x08001a91
 8001a1c:	08001a91 	.word	0x08001a91
 8001a20:	08001a91 	.word	0x08001a91
 8001a24:	08001a91 	.word	0x08001a91
 8001a28:	08001a91 	.word	0x08001a91
 8001a2c:	08001a91 	.word	0x08001a91
 8001a30:	08001a91 	.word	0x08001a91
 8001a34:	08001a8b 	.word	0x08001a8b
 8001a38:	08001a91 	.word	0x08001a91
 8001a3c:	08001a91 	.word	0x08001a91
 8001a40:	08001a91 	.word	0x08001a91
 8001a44:	08001a91 	.word	0x08001a91
 8001a48:	08001a91 	.word	0x08001a91
 8001a4c:	08001a91 	.word	0x08001a91
 8001a50:	08001a91 	.word	0x08001a91
 8001a54:	08001a91 	.word	0x08001a91
 8001a58:	08001a91 	.word	0x08001a91
 8001a5c:	08001a91 	.word	0x08001a91
 8001a60:	08001a91 	.word	0x08001a91
 8001a64:	08001a91 	.word	0x08001a91
 8001a68:	08001a91 	.word	0x08001a91
 8001a6c:	08001a91 	.word	0x08001a91
 8001a70:	08001a91 	.word	0x08001a91
 8001a74:	08001a85 	.word	0x08001a85
	case Decrease_BTN_Pin:
		handleDecreaseButton();
 8001a78:	f000 f926 	bl	8001cc8 <handleDecreaseButton>
		break;
 8001a7c:	e009      	b.n	8001a92 <HAL_GPIO_EXTI_Callback+0xb2>
	case Increase_BTN_Pin:
		handleIncreaseButton();
 8001a7e:	f000 f857 	bl	8001b30 <handleIncreaseButton>
		break;
 8001a82:	e006      	b.n	8001a92 <HAL_GPIO_EXTI_Callback+0xb2>
	case Select_BTN_Pin:
		handleSelectButton();
 8001a84:	f000 f80a 	bl	8001a9c <handleSelectButton>
		break;
 8001a88:	e003      	b.n	8001a92 <HAL_GPIO_EXTI_Callback+0xb2>
	case Mode_BTN_Pin:
		handleModeButton();
 8001a8a:	f000 f9ff 	bl	8001e8c <handleModeButton>
		break;
 8001a8e:	e000      	b.n	8001a92 <HAL_GPIO_EXTI_Callback+0xb2>
	default:
		break;
 8001a90:	bf00      	nop
	}
}
 8001a92:	bf00      	nop
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop

08001a9c <handleSelectButton>:

void handleSelectButton() {
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
	static unsigned long lastInterruptTime = 0;
	  unsigned long interruptTime = HAL_GetTick();
 8001aa2:	f001 fd41 	bl	8003528 <HAL_GetTick>
 8001aa6:	6078      	str	r0, [r7, #4]
	  if (interruptTime - lastInterruptTime > delayInterrupt) {
 8001aa8:	4b1a      	ldr	r3, [pc, #104]	@ (8001b14 <handleSelectButton+0x78>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	1ad2      	subs	r2, r2, r3
 8001ab0:	4b19      	ldr	r3, [pc, #100]	@ (8001b18 <handleSelectButton+0x7c>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d925      	bls.n	8001b04 <handleSelectButton+0x68>
	    optionButton = true;
 8001ab8:	4b18      	ldr	r3, [pc, #96]	@ (8001b1c <handleSelectButton+0x80>)
 8001aba:	2201      	movs	r2, #1
 8001abc:	701a      	strb	r2, [r3, #0]
	    if (currentSystemMode == SYSTEM_MODE_SWEEP) {
 8001abe:	4b18      	ldr	r3, [pc, #96]	@ (8001b20 <handleSelectButton+0x84>)
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d10b      	bne.n	8001ade <handleSelectButton+0x42>
	      currentModeSweep = static_cast<ModeSweep>((currentModeSweep + 1) % 2);  // Alterna entre AMPLITUDE, FREQUENCY
 8001ac6:	4b17      	ldr	r3, [pc, #92]	@ (8001b24 <handleSelectButton+0x88>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	3301      	adds	r3, #1
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	bfb8      	it	lt
 8001ad4:	425b      	neglt	r3, r3
 8001ad6:	b2da      	uxtb	r2, r3
 8001ad8:	4b12      	ldr	r3, [pc, #72]	@ (8001b24 <handleSelectButton+0x88>)
 8001ada:	701a      	strb	r2, [r3, #0]
 8001adc:	e012      	b.n	8001b04 <handleSelectButton+0x68>
	    }
	    else if (currentSystemMode == SYSTEM_MODE_LOCK) {
 8001ade:	4b10      	ldr	r3, [pc, #64]	@ (8001b20 <handleSelectButton+0x84>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d10e      	bne.n	8001b04 <handleSelectButton+0x68>
	      currentModeLock = static_cast<ModeLock>((currentModeLock + 1) % 3);  // Alterna entre PEAK, STEP, AMOSTRAS
 8001ae6:	4b10      	ldr	r3, [pc, #64]	@ (8001b28 <handleSelectButton+0x8c>)
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	1c5a      	adds	r2, r3, #1
 8001aec:	4b0f      	ldr	r3, [pc, #60]	@ (8001b2c <handleSelectButton+0x90>)
 8001aee:	fb83 3102 	smull	r3, r1, r3, r2
 8001af2:	17d3      	asrs	r3, r2, #31
 8001af4:	1ac9      	subs	r1, r1, r3
 8001af6:	460b      	mov	r3, r1
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	440b      	add	r3, r1
 8001afc:	1ad1      	subs	r1, r2, r3
 8001afe:	b2ca      	uxtb	r2, r1
 8001b00:	4b09      	ldr	r3, [pc, #36]	@ (8001b28 <handleSelectButton+0x8c>)
 8001b02:	701a      	strb	r2, [r3, #0]
	    }
	  }
	  lastInterruptTime = interruptTime;
 8001b04:	4a03      	ldr	r2, [pc, #12]	@ (8001b14 <handleSelectButton+0x78>)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6013      	str	r3, [r2, #0]
}
 8001b0a:	bf00      	nop
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	200002c4 	.word	0x200002c4
 8001b18:	2000001c 	.word	0x2000001c
 8001b1c:	200002a0 	.word	0x200002a0
 8001b20:	200002a6 	.word	0x200002a6
 8001b24:	200002a4 	.word	0x200002a4
 8001b28:	200002a5 	.word	0x200002a5
 8001b2c:	55555556 	.word	0x55555556

08001b30 <handleIncreaseButton>:

void handleIncreaseButton() {
 8001b30:	b590      	push	{r4, r7, lr}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
	static unsigned long lastInterruptTime = 0;
	  unsigned long interruptTime = HAL_GetTick();
 8001b36:	f001 fcf7 	bl	8003528 <HAL_GetTick>
 8001b3a:	6078      	str	r0, [r7, #4]
	  if (interruptTime - lastInterruptTime > delayInterrupt) {
 8001b3c:	4b50      	ldr	r3, [pc, #320]	@ (8001c80 <handleIncreaseButton+0x150>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	1ad2      	subs	r2, r2, r3
 8001b44:	4b4f      	ldr	r3, [pc, #316]	@ (8001c84 <handleIncreaseButton+0x154>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	f240 8092 	bls.w	8001c72 <handleIncreaseButton+0x142>
	    increaseButton = true;
 8001b4e:	4b4e      	ldr	r3, [pc, #312]	@ (8001c88 <handleIncreaseButton+0x158>)
 8001b50:	2201      	movs	r2, #1
 8001b52:	701a      	strb	r2, [r3, #0]
	    if (currentSystemMode == SYSTEM_MODE_SWEEP) {
 8001b54:	4b4d      	ldr	r3, [pc, #308]	@ (8001c8c <handleIncreaseButton+0x15c>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d141      	bne.n	8001be0 <handleIncreaseButton+0xb0>
	      switch (currentModeSweep) {
 8001b5c:	4b4c      	ldr	r3, [pc, #304]	@ (8001c90 <handleIncreaseButton+0x160>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d002      	beq.n	8001b6a <handleIncreaseButton+0x3a>
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d01b      	beq.n	8001ba0 <handleIncreaseButton+0x70>
 8001b68:	e027      	b.n	8001bba <handleIncreaseButton+0x8a>
	      case MODE_SWEEP_AMPLITUDE:
	        resolution += 4; // Salto de aprox 50mV
 8001b6a:	4b4a      	ldr	r3, [pc, #296]	@ (8001c94 <handleIncreaseButton+0x164>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	3304      	adds	r3, #4
 8001b70:	4a48      	ldr	r2, [pc, #288]	@ (8001c94 <handleIncreaseButton+0x164>)
 8001b72:	6013      	str	r3, [r2, #0]
	        if (resolution > 255) resolution = 255;
 8001b74:	4b47      	ldr	r3, [pc, #284]	@ (8001c94 <handleIncreaseButton+0x164>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2bff      	cmp	r3, #255	@ 0xff
 8001b7a:	dd02      	ble.n	8001b82 <handleIncreaseButton+0x52>
 8001b7c:	4b45      	ldr	r3, [pc, #276]	@ (8001c94 <handleIncreaseButton+0x164>)
 8001b7e:	22ff      	movs	r2, #255	@ 0xff
 8001b80:	601a      	str	r2, [r3, #0]
	        amp = amp_step*resolution;
 8001b82:	4b44      	ldr	r3, [pc, #272]	@ (8001c94 <handleIncreaseButton+0x164>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	ee07 3a90 	vmov	s15, r3
 8001b8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b8e:	4b42      	ldr	r3, [pc, #264]	@ (8001c98 <handleIncreaseButton+0x168>)
 8001b90:	edd3 7a00 	vldr	s15, [r3]
 8001b94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b98:	4b40      	ldr	r3, [pc, #256]	@ (8001c9c <handleIncreaseButton+0x16c>)
 8001b9a:	edc3 7a00 	vstr	s15, [r3]
	        break;
 8001b9e:	e00c      	b.n	8001bba <handleIncreaseButton+0x8a>
	      case MODE_SWEEP_FREQUENCY:
	        frequency += 5;
 8001ba0:	4b3f      	ldr	r3, [pc, #252]	@ (8001ca0 <handleIncreaseButton+0x170>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	3305      	adds	r3, #5
 8001ba6:	4a3e      	ldr	r2, [pc, #248]	@ (8001ca0 <handleIncreaseButton+0x170>)
 8001ba8:	6013      	str	r3, [r2, #0]
	        if (frequency > 50) frequency = 50;
 8001baa:	4b3d      	ldr	r3, [pc, #244]	@ (8001ca0 <handleIncreaseButton+0x170>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2b32      	cmp	r3, #50	@ 0x32
 8001bb0:	dd02      	ble.n	8001bb8 <handleIncreaseButton+0x88>
 8001bb2:	4b3b      	ldr	r3, [pc, #236]	@ (8001ca0 <handleIncreaseButton+0x170>)
 8001bb4:	2232      	movs	r2, #50	@ 0x32
 8001bb6:	601a      	str	r2, [r3, #0]
	        break;
 8001bb8:	bf00      	nop
	      }
	    waiting_time = 1000000/(frequency*resolution*2);
 8001bba:	4b39      	ldr	r3, [pc, #228]	@ (8001ca0 <handleIncreaseButton+0x170>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a35      	ldr	r2, [pc, #212]	@ (8001c94 <handleIncreaseButton+0x164>)
 8001bc0:	6812      	ldr	r2, [r2, #0]
 8001bc2:	fb02 f303 	mul.w	r3, r2, r3
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	4a36      	ldr	r2, [pc, #216]	@ (8001ca4 <handleIncreaseButton+0x174>)
 8001bca:	fb92 f3f3 	sdiv	r3, r2, r3
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7fe fdca 	bl	8000768 <__aeabi_i2d>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	4933      	ldr	r1, [pc, #204]	@ (8001ca8 <handleIncreaseButton+0x178>)
 8001bda:	e9c1 2300 	strd	r2, r3, [r1]
 8001bde:	e048      	b.n	8001c72 <handleIncreaseButton+0x142>
	    }
	    else if (currentSystemMode == SYSTEM_MODE_LOCK) {
 8001be0:	4b2a      	ldr	r3, [pc, #168]	@ (8001c8c <handleIncreaseButton+0x15c>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d144      	bne.n	8001c72 <handleIncreaseButton+0x142>
	      switch (currentModeLock) {
 8001be8:	4b30      	ldr	r3, [pc, #192]	@ (8001cac <handleIncreaseButton+0x17c>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d039      	beq.n	8001c64 <handleIncreaseButton+0x134>
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	dc3e      	bgt.n	8001c72 <handleIncreaseButton+0x142>
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d02f      	beq.n	8001c58 <handleIncreaseButton+0x128>
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d13a      	bne.n	8001c72 <handleIncreaseButton+0x142>
	        case LOCK_PEAK:
	          if (!peaks_place.empty()) {
 8001bfc:	482c      	ldr	r0, [pc, #176]	@ (8001cb0 <handleIncreaseButton+0x180>)
 8001bfe:	f000 fba2 	bl	8002346 <_ZNKSt6vectorIjSaIjEE5emptyEv>
 8001c02:	4603      	mov	r3, r0
 8001c04:	f083 0301 	eor.w	r3, r3, #1
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d030      	beq.n	8001c70 <handleIncreaseButton+0x140>
	            currentPeakIndex = (currentPeakIndex + 1) % peaks_place.size();
 8001c0e:	4b29      	ldr	r3, [pc, #164]	@ (8001cb4 <handleIncreaseButton+0x184>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	3301      	adds	r3, #1
 8001c14:	461c      	mov	r4, r3
 8001c16:	4826      	ldr	r0, [pc, #152]	@ (8001cb0 <handleIncreaseButton+0x180>)
 8001c18:	f000 fbb0 	bl	800237c <_ZNKSt6vectorIjSaIjEE4sizeEv>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	fbb4 f2f3 	udiv	r2, r4, r3
 8001c22:	fb02 f303 	mul.w	r3, r2, r3
 8001c26:	1ae3      	subs	r3, r4, r3
 8001c28:	461a      	mov	r2, r3
 8001c2a:	4b22      	ldr	r3, [pc, #136]	@ (8001cb4 <handleIncreaseButton+0x184>)
 8001c2c:	601a      	str	r2, [r3, #0]
	            targetValue = peaks_place[currentPeakIndex];
 8001c2e:	4b21      	ldr	r3, [pc, #132]	@ (8001cb4 <handleIncreaseButton+0x184>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4619      	mov	r1, r3
 8001c34:	481e      	ldr	r0, [pc, #120]	@ (8001cb0 <handleIncreaseButton+0x180>)
 8001c36:	f000 fbb1 	bl	800239c <_ZNSt6vectorIjSaIjEEixEj>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	461a      	mov	r2, r3
 8001c40:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb8 <handleIncreaseButton+0x188>)
 8001c42:	601a      	str	r2, [r3, #0]
	            value = targetValue;
 8001c44:	4b1c      	ldr	r3, [pc, #112]	@ (8001cb8 <handleIncreaseButton+0x188>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	ee07 3a90 	vmov	s15, r3
 8001c4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c50:	4b1a      	ldr	r3, [pc, #104]	@ (8001cbc <handleIncreaseButton+0x18c>)
 8001c52:	edc3 7a00 	vstr	s15, [r3]
	          }
	          break;
 8001c56:	e00b      	b.n	8001c70 <handleIncreaseButton+0x140>
	        case LOCK_STEP:
	          step++;
 8001c58:	4b19      	ldr	r3, [pc, #100]	@ (8001cc0 <handleIncreaseButton+0x190>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	4a18      	ldr	r2, [pc, #96]	@ (8001cc0 <handleIncreaseButton+0x190>)
 8001c60:	6013      	str	r3, [r2, #0]
	          break;
 8001c62:	e006      	b.n	8001c72 <handleIncreaseButton+0x142>
	        case LOCK_AMOSTRAS:
	          numReadings++;
 8001c64:	4b17      	ldr	r3, [pc, #92]	@ (8001cc4 <handleIncreaseButton+0x194>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	4a16      	ldr	r2, [pc, #88]	@ (8001cc4 <handleIncreaseButton+0x194>)
 8001c6c:	6013      	str	r3, [r2, #0]
	          break;
 8001c6e:	e000      	b.n	8001c72 <handleIncreaseButton+0x142>
	          break;
 8001c70:	bf00      	nop
	      }
	    }
	  }
	  lastInterruptTime = interruptTime;
 8001c72:	4a03      	ldr	r2, [pc, #12]	@ (8001c80 <handleIncreaseButton+0x150>)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6013      	str	r3, [r2, #0]
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd90      	pop	{r4, r7, pc}
 8001c80:	200002c8 	.word	0x200002c8
 8001c84:	2000001c 	.word	0x2000001c
 8001c88:	200002a1 	.word	0x200002a1
 8001c8c:	200002a6 	.word	0x200002a6
 8001c90:	200002a4 	.word	0x200002a4
 8001c94:	20000000 	.word	0x20000000
 8001c98:	20000284 	.word	0x20000284
 8001c9c:	20000290 	.word	0x20000290
 8001ca0:	20000010 	.word	0x20000010
 8001ca4:	000f4240 	.word	0x000f4240
 8001ca8:	20000298 	.word	0x20000298
 8001cac:	200002a5 	.word	0x200002a5
 8001cb0:	200002b0 	.word	0x200002b0
 8001cb4:	200002bc 	.word	0x200002bc
 8001cb8:	200002a8 	.word	0x200002a8
 8001cbc:	20000294 	.word	0x20000294
 8001cc0:	20000014 	.word	0x20000014
 8001cc4:	2000000c 	.word	0x2000000c

08001cc8 <handleDecreaseButton>:


void handleDecreaseButton() {
 8001cc8:	b590      	push	{r4, r7, lr}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
	static unsigned long lastInterruptTime = 0;
	  unsigned long interruptTime = HAL_GetTick();
 8001cce:	f001 fc2b 	bl	8003528 <HAL_GetTick>
 8001cd2:	6078      	str	r0, [r7, #4]
	  if (interruptTime - lastInterruptTime > delayInterrupt) {
 8001cd4:	4b5b      	ldr	r3, [pc, #364]	@ (8001e44 <handleDecreaseButton+0x17c>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	1ad2      	subs	r2, r2, r3
 8001cdc:	4b5a      	ldr	r3, [pc, #360]	@ (8001e48 <handleDecreaseButton+0x180>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	f240 80a8 	bls.w	8001e36 <handleDecreaseButton+0x16e>
	    decreaseButton = true;
 8001ce6:	4b59      	ldr	r3, [pc, #356]	@ (8001e4c <handleDecreaseButton+0x184>)
 8001ce8:	2201      	movs	r2, #1
 8001cea:	701a      	strb	r2, [r3, #0]
	    if (currentSystemMode == SYSTEM_MODE_SWEEP) {
 8001cec:	4b58      	ldr	r3, [pc, #352]	@ (8001e50 <handleDecreaseButton+0x188>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d141      	bne.n	8001d78 <handleDecreaseButton+0xb0>
	      switch (currentModeSweep) {
 8001cf4:	4b57      	ldr	r3, [pc, #348]	@ (8001e54 <handleDecreaseButton+0x18c>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d002      	beq.n	8001d02 <handleDecreaseButton+0x3a>
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d01b      	beq.n	8001d38 <handleDecreaseButton+0x70>
 8001d00:	e027      	b.n	8001d52 <handleDecreaseButton+0x8a>
	      case MODE_SWEEP_AMPLITUDE:
	        resolution -= 4; // Salto de aprox 50mV
 8001d02:	4b55      	ldr	r3, [pc, #340]	@ (8001e58 <handleDecreaseButton+0x190>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	3b04      	subs	r3, #4
 8001d08:	4a53      	ldr	r2, [pc, #332]	@ (8001e58 <handleDecreaseButton+0x190>)
 8001d0a:	6013      	str	r3, [r2, #0]
	        if (resolution < 12) resolution = 12; // Limite  mínimo de amplitude de 150mV
 8001d0c:	4b52      	ldr	r3, [pc, #328]	@ (8001e58 <handleDecreaseButton+0x190>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2b0b      	cmp	r3, #11
 8001d12:	dc02      	bgt.n	8001d1a <handleDecreaseButton+0x52>
 8001d14:	4b50      	ldr	r3, [pc, #320]	@ (8001e58 <handleDecreaseButton+0x190>)
 8001d16:	220c      	movs	r2, #12
 8001d18:	601a      	str	r2, [r3, #0]
	        amp = amp_step*resolution;
 8001d1a:	4b4f      	ldr	r3, [pc, #316]	@ (8001e58 <handleDecreaseButton+0x190>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	ee07 3a90 	vmov	s15, r3
 8001d22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d26:	4b4d      	ldr	r3, [pc, #308]	@ (8001e5c <handleDecreaseButton+0x194>)
 8001d28:	edd3 7a00 	vldr	s15, [r3]
 8001d2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d30:	4b4b      	ldr	r3, [pc, #300]	@ (8001e60 <handleDecreaseButton+0x198>)
 8001d32:	edc3 7a00 	vstr	s15, [r3]
	        break;
 8001d36:	e00c      	b.n	8001d52 <handleDecreaseButton+0x8a>
	      case MODE_SWEEP_FREQUENCY:
	        frequency -= 5;
 8001d38:	4b4a      	ldr	r3, [pc, #296]	@ (8001e64 <handleDecreaseButton+0x19c>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	3b05      	subs	r3, #5
 8001d3e:	4a49      	ldr	r2, [pc, #292]	@ (8001e64 <handleDecreaseButton+0x19c>)
 8001d40:	6013      	str	r3, [r2, #0]
	        if (frequency < 5) frequency = 5;
 8001d42:	4b48      	ldr	r3, [pc, #288]	@ (8001e64 <handleDecreaseButton+0x19c>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2b04      	cmp	r3, #4
 8001d48:	dc02      	bgt.n	8001d50 <handleDecreaseButton+0x88>
 8001d4a:	4b46      	ldr	r3, [pc, #280]	@ (8001e64 <handleDecreaseButton+0x19c>)
 8001d4c:	2205      	movs	r2, #5
 8001d4e:	601a      	str	r2, [r3, #0]
	        break;
 8001d50:	bf00      	nop
	      }
	    waiting_time = 1000000/(frequency*resolution*2);
 8001d52:	4b44      	ldr	r3, [pc, #272]	@ (8001e64 <handleDecreaseButton+0x19c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a40      	ldr	r2, [pc, #256]	@ (8001e58 <handleDecreaseButton+0x190>)
 8001d58:	6812      	ldr	r2, [r2, #0]
 8001d5a:	fb02 f303 	mul.w	r3, r2, r3
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	4a41      	ldr	r2, [pc, #260]	@ (8001e68 <handleDecreaseButton+0x1a0>)
 8001d62:	fb92 f3f3 	sdiv	r3, r2, r3
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7fe fcfe 	bl	8000768 <__aeabi_i2d>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	460b      	mov	r3, r1
 8001d70:	493e      	ldr	r1, [pc, #248]	@ (8001e6c <handleDecreaseButton+0x1a4>)
 8001d72:	e9c1 2300 	strd	r2, r3, [r1]
 8001d76:	e05e      	b.n	8001e36 <handleDecreaseButton+0x16e>
	    }
	    else if (currentSystemMode == SYSTEM_MODE_LOCK) {
 8001d78:	4b35      	ldr	r3, [pc, #212]	@ (8001e50 <handleDecreaseButton+0x188>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d15a      	bne.n	8001e36 <handleDecreaseButton+0x16e>
	      switch (currentModeLock) {
 8001d80:	4b3b      	ldr	r3, [pc, #236]	@ (8001e70 <handleDecreaseButton+0x1a8>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d044      	beq.n	8001e12 <handleDecreaseButton+0x14a>
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	dc54      	bgt.n	8001e36 <handleDecreaseButton+0x16e>
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d033      	beq.n	8001df8 <handleDecreaseButton+0x130>
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d150      	bne.n	8001e36 <handleDecreaseButton+0x16e>
	      case LOCK_PEAK:
	        if (!peaks_place.empty()) {
 8001d94:	4837      	ldr	r0, [pc, #220]	@ (8001e74 <handleDecreaseButton+0x1ac>)
 8001d96:	f000 fad6 	bl	8002346 <_ZNKSt6vectorIjSaIjEE5emptyEv>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	f083 0301 	eor.w	r3, r3, #1
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d042      	beq.n	8001e2c <handleDecreaseButton+0x164>
	          currentPeakIndex = (currentPeakIndex - 1 + peaks_place.size()) % peaks_place.size();
 8001da6:	4833      	ldr	r0, [pc, #204]	@ (8001e74 <handleDecreaseButton+0x1ac>)
 8001da8:	f000 fae8 	bl	800237c <_ZNKSt6vectorIjSaIjEE4sizeEv>
 8001dac:	4603      	mov	r3, r0
 8001dae:	4a32      	ldr	r2, [pc, #200]	@ (8001e78 <handleDecreaseButton+0x1b0>)
 8001db0:	6812      	ldr	r2, [r2, #0]
 8001db2:	4413      	add	r3, r2
 8001db4:	1e5c      	subs	r4, r3, #1
 8001db6:	482f      	ldr	r0, [pc, #188]	@ (8001e74 <handleDecreaseButton+0x1ac>)
 8001db8:	f000 fae0 	bl	800237c <_ZNKSt6vectorIjSaIjEE4sizeEv>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	fbb4 f2f3 	udiv	r2, r4, r3
 8001dc2:	fb02 f303 	mul.w	r3, r2, r3
 8001dc6:	1ae3      	subs	r3, r4, r3
 8001dc8:	461a      	mov	r2, r3
 8001dca:	4b2b      	ldr	r3, [pc, #172]	@ (8001e78 <handleDecreaseButton+0x1b0>)
 8001dcc:	601a      	str	r2, [r3, #0]
	          targetValue = peaks_place[currentPeakIndex];
 8001dce:	4b2a      	ldr	r3, [pc, #168]	@ (8001e78 <handleDecreaseButton+0x1b0>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	4827      	ldr	r0, [pc, #156]	@ (8001e74 <handleDecreaseButton+0x1ac>)
 8001dd6:	f000 fae1 	bl	800239c <_ZNSt6vectorIjSaIjEEixEj>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	461a      	mov	r2, r3
 8001de0:	4b26      	ldr	r3, [pc, #152]	@ (8001e7c <handleDecreaseButton+0x1b4>)
 8001de2:	601a      	str	r2, [r3, #0]
	          value = targetValue;
 8001de4:	4b25      	ldr	r3, [pc, #148]	@ (8001e7c <handleDecreaseButton+0x1b4>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	ee07 3a90 	vmov	s15, r3
 8001dec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001df0:	4b23      	ldr	r3, [pc, #140]	@ (8001e80 <handleDecreaseButton+0x1b8>)
 8001df2:	edc3 7a00 	vstr	s15, [r3]
	        }
	        break;
 8001df6:	e019      	b.n	8001e2c <handleDecreaseButton+0x164>
	      case LOCK_STEP:
	        step--;
 8001df8:	4b22      	ldr	r3, [pc, #136]	@ (8001e84 <handleDecreaseButton+0x1bc>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	4a21      	ldr	r2, [pc, #132]	@ (8001e84 <handleDecreaseButton+0x1bc>)
 8001e00:	6013      	str	r3, [r2, #0]
	        if (step < 1) step = 1;
 8001e02:	4b20      	ldr	r3, [pc, #128]	@ (8001e84 <handleDecreaseButton+0x1bc>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	dc12      	bgt.n	8001e30 <handleDecreaseButton+0x168>
 8001e0a:	4b1e      	ldr	r3, [pc, #120]	@ (8001e84 <handleDecreaseButton+0x1bc>)
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	601a      	str	r2, [r3, #0]
	        break;
 8001e10:	e00e      	b.n	8001e30 <handleDecreaseButton+0x168>
	      case LOCK_AMOSTRAS:
	        numReadings--;
 8001e12:	4b1d      	ldr	r3, [pc, #116]	@ (8001e88 <handleDecreaseButton+0x1c0>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	3b01      	subs	r3, #1
 8001e18:	4a1b      	ldr	r2, [pc, #108]	@ (8001e88 <handleDecreaseButton+0x1c0>)
 8001e1a:	6013      	str	r3, [r2, #0]
	        if (numReadings < 1) numReadings = 1;
 8001e1c:	4b1a      	ldr	r3, [pc, #104]	@ (8001e88 <handleDecreaseButton+0x1c0>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	dc07      	bgt.n	8001e34 <handleDecreaseButton+0x16c>
 8001e24:	4b18      	ldr	r3, [pc, #96]	@ (8001e88 <handleDecreaseButton+0x1c0>)
 8001e26:	2201      	movs	r2, #1
 8001e28:	601a      	str	r2, [r3, #0]
	        break;
 8001e2a:	e003      	b.n	8001e34 <handleDecreaseButton+0x16c>
	        break;
 8001e2c:	bf00      	nop
 8001e2e:	e002      	b.n	8001e36 <handleDecreaseButton+0x16e>
	        break;
 8001e30:	bf00      	nop
 8001e32:	e000      	b.n	8001e36 <handleDecreaseButton+0x16e>
	        break;
 8001e34:	bf00      	nop
	      }
	    }
	  }
	  lastInterruptTime = interruptTime;
 8001e36:	4a03      	ldr	r2, [pc, #12]	@ (8001e44 <handleDecreaseButton+0x17c>)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6013      	str	r3, [r2, #0]
}
 8001e3c:	bf00      	nop
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd90      	pop	{r4, r7, pc}
 8001e44:	200002cc 	.word	0x200002cc
 8001e48:	2000001c 	.word	0x2000001c
 8001e4c:	200002a2 	.word	0x200002a2
 8001e50:	200002a6 	.word	0x200002a6
 8001e54:	200002a4 	.word	0x200002a4
 8001e58:	20000000 	.word	0x20000000
 8001e5c:	20000284 	.word	0x20000284
 8001e60:	20000290 	.word	0x20000290
 8001e64:	20000010 	.word	0x20000010
 8001e68:	000f4240 	.word	0x000f4240
 8001e6c:	20000298 	.word	0x20000298
 8001e70:	200002a5 	.word	0x200002a5
 8001e74:	200002b0 	.word	0x200002b0
 8001e78:	200002bc 	.word	0x200002bc
 8001e7c:	200002a8 	.word	0x200002a8
 8001e80:	20000294 	.word	0x20000294
 8001e84:	20000014 	.word	0x20000014
 8001e88:	2000000c 	.word	0x2000000c

08001e8c <handleModeButton>:


void handleModeButton() {
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
	  static unsigned long lastInterruptTime = 0;
	  unsigned long interruptTime = HAL_GetTick();
 8001e92:	f001 fb49 	bl	8003528 <HAL_GetTick>
 8001e96:	6078      	str	r0, [r7, #4]
	  if (interruptTime - lastInterruptTime > delayInterrupt) {
 8001e98:	4b1e      	ldr	r3, [pc, #120]	@ (8001f14 <handleModeButton+0x88>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	1ad2      	subs	r2, r2, r3
 8001ea0:	4b1d      	ldr	r3, [pc, #116]	@ (8001f18 <handleModeButton+0x8c>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d92e      	bls.n	8001f06 <handleModeButton+0x7a>
	    modeButton = true;
 8001ea8:	4b1c      	ldr	r3, [pc, #112]	@ (8001f1c <handleModeButton+0x90>)
 8001eaa:	2201      	movs	r2, #1
 8001eac:	701a      	strb	r2, [r3, #0]
	    currentSystemMode = static_cast<SystemMode>((currentSystemMode + 1) % 2);  // Alterna entre SWEEP e LOCK
 8001eae:	4b1c      	ldr	r3, [pc, #112]	@ (8001f20 <handleModeButton+0x94>)
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	bfb8      	it	lt
 8001ebc:	425b      	neglt	r3, r3
 8001ebe:	b2da      	uxtb	r2, r3
 8001ec0:	4b17      	ldr	r3, [pc, #92]	@ (8001f20 <handleModeButton+0x94>)
 8001ec2:	701a      	strb	r2, [r3, #0]
	    switch (currentSystemMode) {
 8001ec4:	4b16      	ldr	r3, [pc, #88]	@ (8001f20 <handleModeButton+0x94>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d002      	beq.n	8001ed2 <handleModeButton+0x46>
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d008      	beq.n	8001ee2 <handleModeButton+0x56>
 8001ed0:	e019      	b.n	8001f06 <handleModeButton+0x7a>
	      case SYSTEM_MODE_SWEEP:
	        value = 0;
 8001ed2:	4b14      	ldr	r3, [pc, #80]	@ (8001f24 <handleModeButton+0x98>)
 8001ed4:	f04f 0200 	mov.w	r2, #0
 8001ed8:	601a      	str	r2, [r3, #0]
	        direction = 1;
 8001eda:	4b13      	ldr	r3, [pc, #76]	@ (8001f28 <handleModeButton+0x9c>)
 8001edc:	2201      	movs	r2, #1
 8001ede:	601a      	str	r2, [r3, #0]
	        break;
 8001ee0:	e011      	b.n	8001f06 <handleModeButton+0x7a>
	      case SYSTEM_MODE_LOCK:
	        value = targetValue; // Inicia o sistema no início do pico escolhido
 8001ee2:	4b12      	ldr	r3, [pc, #72]	@ (8001f2c <handleModeButton+0xa0>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	ee07 3a90 	vmov	s15, r3
 8001eea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eee:	4b0d      	ldr	r3, [pc, #52]	@ (8001f24 <handleModeButton+0x98>)
 8001ef0:	edc3 7a00 	vstr	s15, [r3]
	        lastAdcValue = averageAdcValue - 1; //
 8001ef4:	4b0e      	ldr	r3, [pc, #56]	@ (8001f30 <handleModeButton+0xa4>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	4a0e      	ldr	r2, [pc, #56]	@ (8001f34 <handleModeButton+0xa8>)
 8001efc:	6013      	str	r3, [r2, #0]
	        direction = 1;
 8001efe:	4b0a      	ldr	r3, [pc, #40]	@ (8001f28 <handleModeButton+0x9c>)
 8001f00:	2201      	movs	r2, #1
 8001f02:	601a      	str	r2, [r3, #0]
	        break;
 8001f04:	bf00      	nop
	    }
	  }
	  lastInterruptTime = interruptTime;
 8001f06:	4a03      	ldr	r2, [pc, #12]	@ (8001f14 <handleModeButton+0x88>)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6013      	str	r3, [r2, #0]
}
 8001f0c:	bf00      	nop
 8001f0e:	3708      	adds	r7, #8
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	200002d0 	.word	0x200002d0
 8001f18:	2000001c 	.word	0x2000001c
 8001f1c:	200002a3 	.word	0x200002a3
 8001f20:	200002a6 	.word	0x200002a6
 8001f24:	20000294 	.word	0x20000294
 8001f28:	20000018 	.word	0x20000018
 8001f2c:	200002a8 	.word	0x200002a8
 8001f30:	20000288 	.word	0x20000288
 8001f34:	2000028c 	.word	0x2000028c

08001f38 <lcd_print_double>:

void lcd_print_double(double value) {
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b08a      	sub	sp, #40	@ 0x28
 8001f3c:	af02      	add	r7, sp, #8
 8001f3e:	ed87 0b00 	vstr	d0, [r7]
    char buffer[16];

    int intPart = (int)value;
 8001f42:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f46:	f7fe fd01 	bl	800094c <__aeabi_d2iz>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	61bb      	str	r3, [r7, #24]
    int decimalPart = (int)((value - intPart) * 100);
 8001f4e:	69b8      	ldr	r0, [r7, #24]
 8001f50:	f7fe fc0a 	bl	8000768 <__aeabi_i2d>
 8001f54:	4602      	mov	r2, r0
 8001f56:	460b      	mov	r3, r1
 8001f58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f5c:	f7fe fab6 	bl	80004cc <__aeabi_dsub>
 8001f60:	4602      	mov	r2, r0
 8001f62:	460b      	mov	r3, r1
 8001f64:	4610      	mov	r0, r2
 8001f66:	4619      	mov	r1, r3
 8001f68:	f04f 0200 	mov.w	r2, #0
 8001f6c:	4b16      	ldr	r3, [pc, #88]	@ (8001fc8 <lcd_print_double+0x90>)
 8001f6e:	f7fe f97f 	bl	8000270 <__aeabi_dmul>
 8001f72:	4602      	mov	r2, r0
 8001f74:	460b      	mov	r3, r1
 8001f76:	4610      	mov	r0, r2
 8001f78:	4619      	mov	r1, r3
 8001f7a:	f7fe fce7 	bl	800094c <__aeabi_d2iz>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	61fb      	str	r3, [r7, #28]

    if (decimalPart < 0) {
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	da02      	bge.n	8001f8e <lcd_print_double+0x56>
    	decimalPart *= -1;
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	425b      	negs	r3, r3
 8001f8c:	61fb      	str	r3, [r7, #28]
    }

    if (decimalPart == 0) {
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d107      	bne.n	8001fa4 <lcd_print_double+0x6c>
    	snprintf(buffer, sizeof(buffer), "%d", intPart);
 8001f94:	f107 0008 	add.w	r0, r7, #8
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	4a0c      	ldr	r2, [pc, #48]	@ (8001fcc <lcd_print_double+0x94>)
 8001f9c:	2110      	movs	r1, #16
 8001f9e:	f006 f88b 	bl	80080b8 <sniprintf>
 8001fa2:	e008      	b.n	8001fb6 <lcd_print_double+0x7e>
    }
    else {
    	snprintf(buffer, sizeof(buffer), "%d.%02d", intPart, decimalPart);
 8001fa4:	f107 0008 	add.w	r0, r7, #8
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	9300      	str	r3, [sp, #0]
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	4a08      	ldr	r2, [pc, #32]	@ (8001fd0 <lcd_print_double+0x98>)
 8001fb0:	2110      	movs	r1, #16
 8001fb2:	f006 f881 	bl	80080b8 <sniprintf>
    }

    lcd_print(buffer);
 8001fb6:	f107 0308 	add.w	r3, r7, #8
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7ff fcfa 	bl	80019b4 <lcd_print>
}
 8001fc0:	bf00      	nop
 8001fc2:	3720      	adds	r7, #32
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	40590000 	.word	0x40590000
 8001fcc:	08009448 	.word	0x08009448
 8001fd0:	0800944c 	.word	0x0800944c

08001fd4 <sendI2CData>:

HAL_StatusTypeDef sendI2CData(uint8_t address, uint16_t data) {
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af02      	add	r7, sp, #8
 8001fda:	4603      	mov	r3, r0
 8001fdc:	460a      	mov	r2, r1
 8001fde:	71fb      	strb	r3, [r7, #7]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	80bb      	strh	r3, [r7, #4]
    uint8_t i2cData[2];

    // Formato esperado pelo MCP4725 (modo de escrita rápida)
    i2cData[0] = (data >> 4) & 0xFF;           // Bits D11–D4
 8001fe4:	88bb      	ldrh	r3, [r7, #4]
 8001fe6:	091b      	lsrs	r3, r3, #4
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	733b      	strb	r3, [r7, #12]
    i2cData[1] = (data & 0x0F) << 4;           // Bits D3–D0 deslocados para MSB
 8001fee:	88bb      	ldrh	r3, [r7, #4]
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	011b      	lsls	r3, r3, #4
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	737b      	strb	r3, [r7, #13]

    return HAL_I2C_Master_Transmit(&hi2c1, address << 1, i2cData, 2, 100);
 8001ff8:	79fb      	ldrb	r3, [r7, #7]
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	b299      	uxth	r1, r3
 8002000:	f107 020c 	add.w	r2, r7, #12
 8002004:	2364      	movs	r3, #100	@ 0x64
 8002006:	9300      	str	r3, [sp, #0]
 8002008:	2302      	movs	r3, #2
 800200a:	4804      	ldr	r0, [pc, #16]	@ (800201c <sendI2CData+0x48>)
 800200c:	f003 f9d6 	bl	80053bc <HAL_I2C_Master_Transmit>
 8002010:	4603      	mov	r3, r0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	20000108 	.word	0x20000108

08002020 <_Z18updateSweepDisplayv>:

void updateSweepDisplay() {
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
	lcd_clear();
 8002024:	f7ff fc9e 	bl	8001964 <lcd_clear>
	HAL_Delay(2);
 8002028:	2002      	movs	r0, #2
 800202a:	f001 fa89 	bl	8003540 <HAL_Delay>

    lcd_set_cursor(0, 0);
 800202e:	2100      	movs	r1, #0
 8002030:	2000      	movs	r0, #0
 8002032:	f7ff fca1 	bl	8001978 <lcd_set_cursor>
    lcd_print("Sweep");
 8002036:	4825      	ldr	r0, [pc, #148]	@ (80020cc <_Z18updateSweepDisplayv+0xac>)
 8002038:	f7ff fcbc 	bl	80019b4 <lcd_print>

    lcd_set_cursor(0, 6);
 800203c:	2106      	movs	r1, #6
 800203e:	2000      	movs	r0, #0
 8002040:	f7ff fc9a 	bl	8001978 <lcd_set_cursor>
    lcd_print("Amp:");
 8002044:	4822      	ldr	r0, [pc, #136]	@ (80020d0 <_Z18updateSweepDisplayv+0xb0>)
 8002046:	f7ff fcb5 	bl	80019b4 <lcd_print>
    lcd_print_double(amp);
 800204a:	4b22      	ldr	r3, [pc, #136]	@ (80020d4 <_Z18updateSweepDisplayv+0xb4>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4618      	mov	r0, r3
 8002050:	f7fe fb9c 	bl	800078c <__aeabi_f2d>
 8002054:	4602      	mov	r2, r0
 8002056:	460b      	mov	r3, r1
 8002058:	ec43 2b10 	vmov	d0, r2, r3
 800205c:	f7ff ff6c 	bl	8001f38 <lcd_print_double>
    lcd_print("V");
 8002060:	481d      	ldr	r0, [pc, #116]	@ (80020d8 <_Z18updateSweepDisplayv+0xb8>)
 8002062:	f7ff fca7 	bl	80019b4 <lcd_print>

    lcd_set_cursor(1, 6);
 8002066:	2106      	movs	r1, #6
 8002068:	2001      	movs	r0, #1
 800206a:	f7ff fc85 	bl	8001978 <lcd_set_cursor>
    lcd_print("Freq:");
 800206e:	481b      	ldr	r0, [pc, #108]	@ (80020dc <_Z18updateSweepDisplayv+0xbc>)
 8002070:	f7ff fca0 	bl	80019b4 <lcd_print>
    lcd_print_double(frequency);
 8002074:	4b1a      	ldr	r3, [pc, #104]	@ (80020e0 <_Z18updateSweepDisplayv+0xc0>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4618      	mov	r0, r3
 800207a:	f7fe fb75 	bl	8000768 <__aeabi_i2d>
 800207e:	4602      	mov	r2, r0
 8002080:	460b      	mov	r3, r1
 8002082:	ec43 2b10 	vmov	d0, r2, r3
 8002086:	f7ff ff57 	bl	8001f38 <lcd_print_double>
    lcd_print("Hz");
 800208a:	4816      	ldr	r0, [pc, #88]	@ (80020e4 <_Z18updateSweepDisplayv+0xc4>)
 800208c:	f7ff fc92 	bl	80019b4 <lcd_print>

    // Atualiza seta
    lcd_set_cursor(0, 5);
 8002090:	2105      	movs	r1, #5
 8002092:	2000      	movs	r0, #0
 8002094:	f7ff fc70 	bl	8001978 <lcd_set_cursor>
    lcd_print(currentModeSweep == MODE_SWEEP_AMPLITUDE ? ">" : " ");
 8002098:	4b13      	ldr	r3, [pc, #76]	@ (80020e8 <_Z18updateSweepDisplayv+0xc8>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d101      	bne.n	80020a4 <_Z18updateSweepDisplayv+0x84>
 80020a0:	4b12      	ldr	r3, [pc, #72]	@ (80020ec <_Z18updateSweepDisplayv+0xcc>)
 80020a2:	e000      	b.n	80020a6 <_Z18updateSweepDisplayv+0x86>
 80020a4:	4b12      	ldr	r3, [pc, #72]	@ (80020f0 <_Z18updateSweepDisplayv+0xd0>)
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7ff fc84 	bl	80019b4 <lcd_print>
    lcd_set_cursor(1, 5);
 80020ac:	2105      	movs	r1, #5
 80020ae:	2001      	movs	r0, #1
 80020b0:	f7ff fc62 	bl	8001978 <lcd_set_cursor>
    lcd_print(currentModeSweep == MODE_SWEEP_FREQUENCY ? ">" : " ");
 80020b4:	4b0c      	ldr	r3, [pc, #48]	@ (80020e8 <_Z18updateSweepDisplayv+0xc8>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d101      	bne.n	80020c0 <_Z18updateSweepDisplayv+0xa0>
 80020bc:	4b0b      	ldr	r3, [pc, #44]	@ (80020ec <_Z18updateSweepDisplayv+0xcc>)
 80020be:	e000      	b.n	80020c2 <_Z18updateSweepDisplayv+0xa2>
 80020c0:	4b0b      	ldr	r3, [pc, #44]	@ (80020f0 <_Z18updateSweepDisplayv+0xd0>)
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7ff fc76 	bl	80019b4 <lcd_print>
}
 80020c8:	bf00      	nop
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	08009320 	.word	0x08009320
 80020d0:	08009328 	.word	0x08009328
 80020d4:	20000290 	.word	0x20000290
 80020d8:	08009330 	.word	0x08009330
 80020dc:	08009334 	.word	0x08009334
 80020e0:	20000010 	.word	0x20000010
 80020e4:	0800933c 	.word	0x0800933c
 80020e8:	200002a4 	.word	0x200002a4
 80020ec:	08009340 	.word	0x08009340
 80020f0:	08009454 	.word	0x08009454

080020f4 <_Z17updateLockDisplayv>:

void updateLockDisplay() {
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
    lcd_clear();
 80020f8:	f7ff fc34 	bl	8001964 <lcd_clear>
    HAL_Delay(2);
 80020fc:	2002      	movs	r0, #2
 80020fe:	f001 fa1f 	bl	8003540 <HAL_Delay>

    lcd_set_cursor(0, 0);
 8002102:	2100      	movs	r1, #0
 8002104:	2000      	movs	r0, #0
 8002106:	f7ff fc37 	bl	8001978 <lcd_set_cursor>
    lcd_print("Lock");
 800210a:	4833      	ldr	r0, [pc, #204]	@ (80021d8 <_Z17updateLockDisplayv+0xe4>)
 800210c:	f7ff fc52 	bl	80019b4 <lcd_print>

    lcd_set_cursor(0, 8);
 8002110:	2108      	movs	r1, #8
 8002112:	2000      	movs	r0, #0
 8002114:	f7ff fc30 	bl	8001978 <lcd_set_cursor>
    lcd_print("Steps:");
 8002118:	4830      	ldr	r0, [pc, #192]	@ (80021dc <_Z17updateLockDisplayv+0xe8>)
 800211a:	f7ff fc4b 	bl	80019b4 <lcd_print>
    lcd_print_double(step);
 800211e:	4b30      	ldr	r3, [pc, #192]	@ (80021e0 <_Z17updateLockDisplayv+0xec>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4618      	mov	r0, r3
 8002124:	f7fe fb20 	bl	8000768 <__aeabi_i2d>
 8002128:	4602      	mov	r2, r0
 800212a:	460b      	mov	r3, r1
 800212c:	ec43 2b10 	vmov	d0, r2, r3
 8002130:	f7ff ff02 	bl	8001f38 <lcd_print_double>

    lcd_set_cursor(1, 1);
 8002134:	2101      	movs	r1, #1
 8002136:	2001      	movs	r0, #1
 8002138:	f7ff fc1e 	bl	8001978 <lcd_set_cursor>
    lcd_print("Peak:");
 800213c:	4829      	ldr	r0, [pc, #164]	@ (80021e4 <_Z17updateLockDisplayv+0xf0>)
 800213e:	f7ff fc39 	bl	80019b4 <lcd_print>
    lcd_print_double(currentPeakIndex + 1);
 8002142:	4b29      	ldr	r3, [pc, #164]	@ (80021e8 <_Z17updateLockDisplayv+0xf4>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	3301      	adds	r3, #1
 8002148:	4618      	mov	r0, r3
 800214a:	f7fe fb0d 	bl	8000768 <__aeabi_i2d>
 800214e:	4602      	mov	r2, r0
 8002150:	460b      	mov	r3, r1
 8002152:	ec43 2b10 	vmov	d0, r2, r3
 8002156:	f7ff feef 	bl	8001f38 <lcd_print_double>

    lcd_set_cursor(1, 8);
 800215a:	2108      	movs	r1, #8
 800215c:	2001      	movs	r0, #1
 800215e:	f7ff fc0b 	bl	8001978 <lcd_set_cursor>
    lcd_print("NRead:");
 8002162:	4822      	ldr	r0, [pc, #136]	@ (80021ec <_Z17updateLockDisplayv+0xf8>)
 8002164:	f7ff fc26 	bl	80019b4 <lcd_print>
    lcd_print_double(numReadings);
 8002168:	4b21      	ldr	r3, [pc, #132]	@ (80021f0 <_Z17updateLockDisplayv+0xfc>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4618      	mov	r0, r3
 800216e:	f7fe fafb 	bl	8000768 <__aeabi_i2d>
 8002172:	4602      	mov	r2, r0
 8002174:	460b      	mov	r3, r1
 8002176:	ec43 2b10 	vmov	d0, r2, r3
 800217a:	f7ff fedd 	bl	8001f38 <lcd_print_double>

    lcd_set_cursor(0, 7);
 800217e:	2107      	movs	r1, #7
 8002180:	2000      	movs	r0, #0
 8002182:	f7ff fbf9 	bl	8001978 <lcd_set_cursor>
    lcd_print(currentModeLock == LOCK_STEP ? ">" : " ");
 8002186:	4b1b      	ldr	r3, [pc, #108]	@ (80021f4 <_Z17updateLockDisplayv+0x100>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <_Z17updateLockDisplayv+0x9e>
 800218e:	4b1a      	ldr	r3, [pc, #104]	@ (80021f8 <_Z17updateLockDisplayv+0x104>)
 8002190:	e000      	b.n	8002194 <_Z17updateLockDisplayv+0xa0>
 8002192:	4b1a      	ldr	r3, [pc, #104]	@ (80021fc <_Z17updateLockDisplayv+0x108>)
 8002194:	4618      	mov	r0, r3
 8002196:	f7ff fc0d 	bl	80019b4 <lcd_print>

    lcd_set_cursor(1, 0);
 800219a:	2100      	movs	r1, #0
 800219c:	2001      	movs	r0, #1
 800219e:	f7ff fbeb 	bl	8001978 <lcd_set_cursor>
    lcd_print(currentModeLock == LOCK_PEAK ? ">" : " ");
 80021a2:	4b14      	ldr	r3, [pc, #80]	@ (80021f4 <_Z17updateLockDisplayv+0x100>)
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d101      	bne.n	80021ae <_Z17updateLockDisplayv+0xba>
 80021aa:	4b13      	ldr	r3, [pc, #76]	@ (80021f8 <_Z17updateLockDisplayv+0x104>)
 80021ac:	e000      	b.n	80021b0 <_Z17updateLockDisplayv+0xbc>
 80021ae:	4b13      	ldr	r3, [pc, #76]	@ (80021fc <_Z17updateLockDisplayv+0x108>)
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff fbff 	bl	80019b4 <lcd_print>

    lcd_set_cursor(1, 7);
 80021b6:	2107      	movs	r1, #7
 80021b8:	2001      	movs	r0, #1
 80021ba:	f7ff fbdd 	bl	8001978 <lcd_set_cursor>
    lcd_print(currentModeLock == LOCK_AMOSTRAS ? ">" : " ");
 80021be:	4b0d      	ldr	r3, [pc, #52]	@ (80021f4 <_Z17updateLockDisplayv+0x100>)
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d101      	bne.n	80021ca <_Z17updateLockDisplayv+0xd6>
 80021c6:	4b0c      	ldr	r3, [pc, #48]	@ (80021f8 <_Z17updateLockDisplayv+0x104>)
 80021c8:	e000      	b.n	80021cc <_Z17updateLockDisplayv+0xd8>
 80021ca:	4b0c      	ldr	r3, [pc, #48]	@ (80021fc <_Z17updateLockDisplayv+0x108>)
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff fbf1 	bl	80019b4 <lcd_print>
}
 80021d2:	bf00      	nop
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	08009458 	.word	0x08009458
 80021dc:	08009460 	.word	0x08009460
 80021e0:	20000014 	.word	0x20000014
 80021e4:	08009468 	.word	0x08009468
 80021e8:	200002bc 	.word	0x200002bc
 80021ec:	08009470 	.word	0x08009470
 80021f0:	2000000c 	.word	0x2000000c
 80021f4:	200002a5 	.word	0x200002a5
 80021f8:	08009340 	.word	0x08009340
 80021fc:	08009454 	.word	0x08009454

08002200 <_Z17delayMicrosecondsm>:

void delayMicroseconds(uint32_t us)
{
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
    // Ativa o DWT se ainda não estiver habilitado
    if (!(DWT->CTRL & DWT_CTRL_CYCCNTENA_Msk)) {
 8002208:	4b1d      	ldr	r3, [pc, #116]	@ (8002280 <_Z17delayMicrosecondsm+0x80>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0301 	and.w	r3, r3, #1
 8002210:	2b00      	cmp	r3, #0
 8002212:	bf0c      	ite	eq
 8002214:	2301      	moveq	r3, #1
 8002216:	2300      	movne	r3, #0
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d00e      	beq.n	800223c <_Z17delayMicrosecondsm+0x3c>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800221e:	4b19      	ldr	r3, [pc, #100]	@ (8002284 <_Z17delayMicrosecondsm+0x84>)
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	4a18      	ldr	r2, [pc, #96]	@ (8002284 <_Z17delayMicrosecondsm+0x84>)
 8002224:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002228:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 800222a:	4b15      	ldr	r3, [pc, #84]	@ (8002280 <_Z17delayMicrosecondsm+0x80>)
 800222c:	2200      	movs	r2, #0
 800222e:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8002230:	4b13      	ldr	r3, [pc, #76]	@ (8002280 <_Z17delayMicrosecondsm+0x80>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a12      	ldr	r2, [pc, #72]	@ (8002280 <_Z17delayMicrosecondsm+0x80>)
 8002236:	f043 0301 	orr.w	r3, r3, #1
 800223a:	6013      	str	r3, [r2, #0]
    }

    uint32_t startTick = DWT->CYCCNT;
 800223c:	4b10      	ldr	r3, [pc, #64]	@ (8002280 <_Z17delayMicrosecondsm+0x80>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	60fb      	str	r3, [r7, #12]
    uint32_t delayTicks = us * (SystemCoreClock / 1000000);
 8002242:	4b11      	ldr	r3, [pc, #68]	@ (8002288 <_Z17delayMicrosecondsm+0x88>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a11      	ldr	r2, [pc, #68]	@ (800228c <_Z17delayMicrosecondsm+0x8c>)
 8002248:	fba2 2303 	umull	r2, r3, r2, r3
 800224c:	0c9a      	lsrs	r2, r3, #18
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	fb02 f303 	mul.w	r3, r2, r3
 8002254:	60bb      	str	r3, [r7, #8]

    while ((DWT->CYCCNT - startTick) < delayTicks);
 8002256:	bf00      	nop
 8002258:	4b09      	ldr	r3, [pc, #36]	@ (8002280 <_Z17delayMicrosecondsm+0x80>)
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	68ba      	ldr	r2, [r7, #8]
 8002262:	429a      	cmp	r2, r3
 8002264:	bf8c      	ite	hi
 8002266:	2301      	movhi	r3, #1
 8002268:	2300      	movls	r3, #0
 800226a:	b2db      	uxtb	r3, r3
 800226c:	2b00      	cmp	r3, #0
 800226e:	d1f3      	bne.n	8002258 <_Z17delayMicrosecondsm+0x58>
}
 8002270:	bf00      	nop
 8002272:	bf00      	nop
 8002274:	3714      	adds	r7, #20
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	e0001000 	.word	0xe0001000
 8002284:	e000edf0 	.word	0xe000edf0
 8002288:	20000020 	.word	0x20000020
 800228c:	431bde83 	.word	0x431bde83

08002290 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002294:	b672      	cpsid	i
}
 8002296:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002298:	bf00      	nop
 800229a:	e7fd      	b.n	8002298 <Error_Handler+0x8>

0800229c <_ZNSt12_Vector_baseIjSaIjEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	60fb      	str	r3, [r7, #12]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	60bb      	str	r3, [r7, #8]
	: _Tp_alloc_type()
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f000 f884 	bl	80023bc <_ZNSt12_Vector_baseIjSaIjEE17_Vector_impl_dataC1Ev>
	{ }
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	4618      	mov	r0, r3
 80022b8:	3710      	adds	r7, #16
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <_ZNSt12_Vector_baseIjSaIjEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80022be:	b580      	push	{r7, lr}
 80022c0:	b082      	sub	sp, #8
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	689a      	ldr	r2, [r3, #8]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 80022d6:	461a      	mov	r2, r3
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f000 f88e 	bl	80023fa <_ZNSt12_Vector_baseIjSaIjEE13_M_deallocateEPjj>
      }
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7fe fcfd 	bl	8000ce0 <_ZNSt12_Vector_baseIjSaIjEE12_Vector_implD1Ev>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4618      	mov	r0, r3
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <_ZNSt6vectorIjSaIjEE8pop_backEv>:
       *  data is needed, it should be retrieved before pop_back() is
       *  called.
       */
      _GLIBCXX20_CONSTEXPR
      void
      pop_back() _GLIBCXX_NOEXCEPT
 80022f0:	b480      	push	{r7}
 80022f2:	b087      	sub	sp, #28
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	--this->_M_impl._M_finish;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	1f1a      	subs	r2, r3, #4
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	605a      	str	r2, [r3, #4]
	_Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	617a      	str	r2, [r7, #20]
 800230a:	613b      	str	r3, [r7, #16]
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	60fb      	str	r3, [r7, #12]
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	60bb      	str	r3, [r7, #8]
      template<typename _Up>
	__attribute__((__always_inline__))
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 8002314:	bf00      	nop
#if __cplusplus <= 201703L
	  __a.destroy(__p);
#else
	  std::destroy_at(__p);
#endif
	}
 8002316:	bf00      	nop
	_GLIBCXX_ASAN_ANNOTATE_SHRINK(1);
      }
 8002318:	bf00      	nop
 800231a:	371c      	adds	r7, #28
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <_ZNSt6vectorIjSaIjEE9push_backEOj>:
      push_back(value_type&& __x)
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800232e:	6838      	ldr	r0, [r7, #0]
 8002330:	f000 f87c 	bl	800242c <_ZSt4moveIRjEONSt16remove_referenceIT_E4typeEOS2_>
 8002334:	4603      	mov	r3, r0
 8002336:	4619      	mov	r1, r3
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f000 f882 	bl	8002442 <_ZNSt6vectorIjSaIjEE12emplace_backIJjEEEvDpOT_>
 800233e:	bf00      	nop
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <_ZNKSt6vectorIjSaIjEE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 8002346:	b580      	push	{r7, lr}
 8002348:	b084      	sub	sp, #16
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
      { return begin() == end(); }
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f000 f8ba 	bl	80024c8 <_ZNKSt6vectorIjSaIjEE5beginEv>
 8002354:	4603      	mov	r3, r0
 8002356:	60bb      	str	r3, [r7, #8]
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 f8c5 	bl	80024e8 <_ZNKSt6vectorIjSaIjEE3endEv>
 800235e:	4603      	mov	r3, r0
 8002360:	60fb      	str	r3, [r7, #12]
 8002362:	f107 020c 	add.w	r2, r7, #12
 8002366:	f107 0308 	add.w	r3, r7, #8
 800236a:	4611      	mov	r1, r2
 800236c:	4618      	mov	r0, r3
 800236e:	f000 f8cc 	bl	800250a <_ZN9__gnu_cxxeqIPKjSt6vectorIjSaIjEEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
 8002372:	4603      	mov	r3, r0
 8002374:	4618      	mov	r0, r3
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <_ZNKSt6vectorIjSaIjEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685a      	ldr	r2, [r3, #4]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	109b      	asrs	r3, r3, #2
 8002390:	4618      	mov	r0, r3
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <_ZNSt6vectorIjSaIjEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	4413      	add	r3, r2
      }
 80023b0:	4618      	mov	r0, r3
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <_ZNSt12_Vector_baseIjSaIjEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	605a      	str	r2, [r3, #4]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	609a      	str	r2, [r3, #8]
	{ }
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4618      	mov	r0, r3
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <_ZNSt15__new_allocatorIjED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4618      	mov	r0, r3
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr

080023fa <_ZNSt12_Vector_baseIjSaIjEE13_M_deallocateEPjj>:
      _M_deallocate(pointer __p, size_t __n)
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b088      	sub	sp, #32
 80023fe:	af00      	add	r7, sp, #0
 8002400:	60f8      	str	r0, [r7, #12]
 8002402:	60b9      	str	r1, [r7, #8]
 8002404:	607a      	str	r2, [r7, #4]
	if (__p)
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d00b      	beq.n	8002424 <_ZNSt12_Vector_baseIjSaIjEE13_M_deallocateEPjj+0x2a>
	  _Tr::deallocate(_M_impl, __p, __n);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	61fb      	str	r3, [r7, #28]
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	61bb      	str	r3, [r7, #24]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	617b      	str	r3, [r7, #20]
      { __a.deallocate(__p, __n); }
 8002418:	697a      	ldr	r2, [r7, #20]
 800241a:	69b9      	ldr	r1, [r7, #24]
 800241c:	69f8      	ldr	r0, [r7, #28]
 800241e:	f000 f9b0 	bl	8002782 <_ZNSt15__new_allocatorIjE10deallocateEPjj>
 8002422:	bf00      	nop
      }
 8002424:	bf00      	nop
 8002426:	3720      	adds	r7, #32
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <_ZSt4moveIRjEONSt16remove_referenceIT_E4typeEOS2_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	4618      	mov	r0, r3
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr

08002442 <_ZNSt6vectorIjSaIjEE12emplace_backIJjEEEvDpOT_>:
      _GLIBCXX20_CONSTEXPR
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 8002442:	b5b0      	push	{r4, r5, r7, lr}
 8002444:	b088      	sub	sp, #32
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
 800244a:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685a      	ldr	r2, [r3, #4]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	429a      	cmp	r2, r3
 8002456:	d026      	beq.n	80024a6 <_ZNSt6vectorIjSaIjEE12emplace_backIJjEEEvDpOT_+0x64>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8002458:	687d      	ldr	r5, [r7, #4]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685c      	ldr	r4, [r3, #4]
 800245e:	6838      	ldr	r0, [r7, #0]
 8002460:	f000 f86b 	bl	800253a <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8002464:	4603      	mov	r3, r0
 8002466:	61fd      	str	r5, [r7, #28]
 8002468:	61bc      	str	r4, [r7, #24]
 800246a:	617b      	str	r3, [r7, #20]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800246c:	6978      	ldr	r0, [r7, #20]
 800246e:	f000 f864 	bl	800253a <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8002472:	4602      	mov	r2, r0
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	613b      	str	r3, [r7, #16]
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	60fb      	str	r3, [r7, #12]
 800247c:	60ba      	str	r2, [r7, #8]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	4619      	mov	r1, r3
 8002482:	2004      	movs	r0, #4
 8002484:	f7fe fc20 	bl	8000cc8 <_ZnwjPv>
 8002488:	4604      	mov	r4, r0
 800248a:	68b8      	ldr	r0, [r7, #8]
 800248c:	f000 f855 	bl	800253a <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8002490:	4603      	mov	r3, r0
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6023      	str	r3, [r4, #0]
 8002496:	bf00      	nop
	}
 8002498:	bf00      	nop
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	1d1a      	adds	r2, r3, #4
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	605a      	str	r2, [r3, #4]
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 80024a4:	e00c      	b.n	80024c0 <_ZNSt6vectorIjSaIjEE12emplace_backIJjEEEvDpOT_+0x7e>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 f852 	bl	8002550 <_ZNSt6vectorIjSaIjEE3endEv>
 80024ac:	4604      	mov	r4, r0
 80024ae:	6838      	ldr	r0, [r7, #0]
 80024b0:	f000 f843 	bl	800253a <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80024b4:	4603      	mov	r3, r0
 80024b6:	461a      	mov	r2, r3
 80024b8:	4621      	mov	r1, r4
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f000 f870 	bl	80025a0 <_ZNSt6vectorIjSaIjEE17_M_realloc_insertIJjEEEvN9__gnu_cxx17__normal_iteratorIPjS1_EEDpOT_>
      }
 80024c0:	bf00      	nop
 80024c2:	3720      	adds	r7, #32
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bdb0      	pop	{r4, r5, r7, pc}

080024c8 <_ZNKSt6vectorIjSaIjEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	f107 030c 	add.w	r3, r7, #12
 80024d6:	4611      	mov	r1, r2
 80024d8:	4618      	mov	r0, r3
 80024da:	f000 f937 	bl	800274c <_ZN9__gnu_cxx17__normal_iteratorIPKjSt6vectorIjSaIjEEEC1ERKS2_>
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	4618      	mov	r0, r3
 80024e2:	3710      	adds	r7, #16
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <_ZNKSt6vectorIjSaIjEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	1d1a      	adds	r2, r3, #4
 80024f4:	f107 030c 	add.w	r3, r7, #12
 80024f8:	4611      	mov	r1, r2
 80024fa:	4618      	mov	r0, r3
 80024fc:	f000 f926 	bl	800274c <_ZN9__gnu_cxx17__normal_iteratorIPKjSt6vectorIjSaIjEEEC1ERKS2_>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	4618      	mov	r0, r3
 8002504:	3710      	adds	r7, #16
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <_ZN9__gnu_cxxeqIPKjSt6vectorIjSaIjEEEEbRKNS_17__normal_iteratorIT_T0_EESB_>:
    { return __lhs.base() == __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline bool
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 800250a:	b590      	push	{r4, r7, lr}
 800250c:	b083      	sub	sp, #12
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
 8002512:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() == __rhs.base(); }
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f000 f929 	bl	800276c <_ZNK9__gnu_cxx17__normal_iteratorIPKjSt6vectorIjSaIjEEE4baseEv>
 800251a:	4603      	mov	r3, r0
 800251c:	681c      	ldr	r4, [r3, #0]
 800251e:	6838      	ldr	r0, [r7, #0]
 8002520:	f000 f924 	bl	800276c <_ZNK9__gnu_cxx17__normal_iteratorIPKjSt6vectorIjSaIjEEE4baseEv>
 8002524:	4603      	mov	r3, r0
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	429c      	cmp	r4, r3
 800252a:	bf0c      	ite	eq
 800252c:	2301      	moveq	r3, #1
 800252e:	2300      	movne	r3, #0
 8002530:	b2db      	uxtb	r3, r3
 8002532:	4618      	mov	r0, r3
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	bd90      	pop	{r4, r7, pc}

0800253a <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800253a:	b480      	push	{r7}
 800253c:	b083      	sub	sp, #12
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4618      	mov	r0, r3
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <_ZNSt6vectorIjSaIjEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	1d1a      	adds	r2, r3, #4
 800255c:	f107 030c 	add.w	r3, r7, #12
 8002560:	4611      	mov	r1, r2
 8002562:	4618      	mov	r0, r3
 8002564:	f000 f91d 	bl	80027a2 <_ZN9__gnu_cxx17__normal_iteratorIPjSt6vectorIjSaIjEEEC1ERKS1_>
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	4618      	mov	r0, r3
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <_ZNSt6vectorIjSaIjEE15_S_use_relocateEv>:
      _S_use_relocate()
 8002572:	b580      	push	{r7, lr}
 8002574:	b082      	sub	sp, #8
 8002576:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8002578:	4618      	mov	r0, r3
 800257a:	f000 f805 	bl	8002588 <_ZNSt6vectorIjSaIjEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 800257e:	4603      	mov	r3, r0
      }
 8002580:	4618      	mov	r0, r3
 8002582:	3708      	adds	r7, #8
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <_ZNSt6vectorIjSaIjEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8002590:	2301      	movs	r3, #1
      }
 8002592:	4618      	mov	r0, r3
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
	...

080025a0 <_ZNSt6vectorIjSaIjEE17_M_realloc_insertIJjEEEvN9__gnu_cxx17__normal_iteratorIPjS1_EEDpOT_>:
#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      _GLIBCXX20_CONSTEXPR
      void
      vector<_Tp, _Alloc>::
 80025a0:	b5b0      	push	{r4, r5, r7, lr}
 80025a2:	b094      	sub	sp, #80	@ 0x50
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	60b9      	str	r1, [r7, #8]
 80025aa:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 80025ac:	4a66      	ldr	r2, [pc, #408]	@ (8002748 <_ZNSt6vectorIjSaIjEE17_M_realloc_insertIJjEEEvN9__gnu_cxx17__normal_iteratorIPjS1_EEDpOT_+0x1a8>)
 80025ae:	2101      	movs	r1, #1
 80025b0:	68f8      	ldr	r0, [r7, #12]
 80025b2:	f000 f906 	bl	80027c2 <_ZNKSt6vectorIjSaIjEE12_M_check_lenEjPKc>
 80025b6:	64b8      	str	r0, [r7, #72]	@ 0x48
      pointer __old_start = this->_M_impl._M_start;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	647b      	str	r3, [r7, #68]	@ 0x44
      pointer __old_finish = this->_M_impl._M_finish;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	643b      	str	r3, [r7, #64]	@ 0x40
      const size_type __elems_before = __position - begin();
 80025c4:	68f8      	ldr	r0, [r7, #12]
 80025c6:	f000 f943 	bl	8002850 <_ZNSt6vectorIjSaIjEE5beginEv>
 80025ca:	4603      	mov	r3, r0
 80025cc:	613b      	str	r3, [r7, #16]
 80025ce:	f107 0210 	add.w	r2, r7, #16
 80025d2:	f107 0308 	add.w	r3, r7, #8
 80025d6:	4611      	mov	r1, r2
 80025d8:	4618      	mov	r0, r3
 80025da:	f000 f949 	bl	8002870 <_ZN9__gnu_cxxmiIPjSt6vectorIjSaIjEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 80025de:	4603      	mov	r3, r0
 80025e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      pointer __new_start(this->_M_allocate(__len));
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80025e6:	4618      	mov	r0, r3
 80025e8:	f000 f957 	bl	800289a <_ZNSt12_Vector_baseIjSaIjEE11_M_allocateEj>
 80025ec:	63b8      	str	r0, [r7, #56]	@ 0x38
      pointer __new_finish(__new_start);
 80025ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 80025f2:	68fd      	ldr	r5, [r7, #12]
				   __new_start + __elems_before,
 80025f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025f6:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 80025f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80025fa:	18d4      	adds	r4, r2, r3
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f7ff ff9c 	bl	800253a <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8002602:	4603      	mov	r3, r0
 8002604:	637d      	str	r5, [r7, #52]	@ 0x34
 8002606:	633c      	str	r4, [r7, #48]	@ 0x30
 8002608:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800260a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800260c:	f7ff ff95 	bl	800253a <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8002610:	4602      	mov	r2, r0
 8002612:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002614:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002618:	627b      	str	r3, [r7, #36]	@ 0x24
 800261a:	623a      	str	r2, [r7, #32]
 800261c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800261e:	4619      	mov	r1, r3
 8002620:	2004      	movs	r0, #4
 8002622:	f7fe fb51 	bl	8000cc8 <_ZnwjPv>
 8002626:	4604      	mov	r4, r0
 8002628:	6a38      	ldr	r0, [r7, #32]
 800262a:	f7ff ff86 	bl	800253a <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800262e:	4603      	mov	r3, r0
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	6023      	str	r3, [r4, #0]
 8002634:	bf00      	nop
	}
 8002636:	bf00      	nop
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8002638:	2300      	movs	r3, #0
 800263a:	64fb      	str	r3, [r7, #76]	@ 0x4c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 800263c:	f7ff ff99 	bl	8002572 <_ZNSt6vectorIjSaIjEE15_S_use_relocateEv>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d027      	beq.n	8002696 <_ZNSt6vectorIjSaIjEE17_M_realloc_insertIJjEEEvN9__gnu_cxx17__normal_iteratorIPjS1_EEDpOT_+0xf6>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8002646:	f107 0308 	add.w	r3, r7, #8
 800264a:	4618      	mov	r0, r3
 800264c:	f000 f952 	bl	80028f4 <_ZNK9__gnu_cxx17__normal_iteratorIPjSt6vectorIjSaIjEEE4baseEv>
 8002650:	4603      	mov	r3, r0
 8002652:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	4618      	mov	r0, r3
 8002658:	f000 f957 	bl	800290a <_ZNSt12_Vector_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 800265c:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800265e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002660:	4621      	mov	r1, r4
 8002662:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002664:	f000 f932 	bl	80028cc <_ZNSt6vectorIjSaIjEE11_S_relocateEPjS2_S2_RS0_>
 8002668:	64f8      	str	r0, [r7, #76]	@ 0x4c

	      ++__new_finish;
 800266a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800266c:	3304      	adds	r3, #4
 800266e:	64fb      	str	r3, [r7, #76]	@ 0x4c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8002670:	f107 0308 	add.w	r3, r7, #8
 8002674:	4618      	mov	r0, r3
 8002676:	f000 f93d 	bl	80028f4 <_ZNK9__gnu_cxx17__normal_iteratorIPjSt6vectorIjSaIjEEE4baseEv>
 800267a:	4603      	mov	r3, r0
 800267c:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	4618      	mov	r0, r3
 8002682:	f000 f942 	bl	800290a <_ZNSt12_Vector_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 8002686:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8002688:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800268a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800268c:	4620      	mov	r0, r4
 800268e:	f000 f91d 	bl	80028cc <_ZNSt6vectorIjSaIjEE11_S_relocateEPjS2_S2_RS0_>
 8002692:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8002694:	e026      	b.n	80026e4 <_ZNSt6vectorIjSaIjEE17_M_realloc_insertIJjEEEvN9__gnu_cxx17__normal_iteratorIPjS1_EEDpOT_+0x144>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 8002696:	f107 0308 	add.w	r3, r7, #8
 800269a:	4618      	mov	r0, r3
 800269c:	f000 f92a 	bl	80028f4 <_ZNK9__gnu_cxx17__normal_iteratorIPjSt6vectorIjSaIjEEE4baseEv>
 80026a0:	4603      	mov	r3, r0
 80026a2:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f000 f92f 	bl	800290a <_ZNSt12_Vector_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 80026ac:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 80026ae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80026b0:	4621      	mov	r1, r4
 80026b2:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80026b4:	f000 f934 	bl	8002920 <_ZSt34__uninitialized_move_if_noexcept_aIPjS0_SaIjEET0_T_S3_S2_RT1_>
 80026b8:	64f8      	str	r0, [r7, #76]	@ 0x4c

	      ++__new_finish;
 80026ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80026bc:	3304      	adds	r3, #4
 80026be:	64fb      	str	r3, [r7, #76]	@ 0x4c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 80026c0:	f107 0308 	add.w	r3, r7, #8
 80026c4:	4618      	mov	r0, r3
 80026c6:	f000 f915 	bl	80028f4 <_ZNK9__gnu_cxx17__normal_iteratorIPjSt6vectorIjSaIjEEE4baseEv>
 80026ca:	4603      	mov	r3, r0
 80026cc:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f000 f91a 	bl	800290a <_ZNSt12_Vector_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 80026d6:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 80026d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80026da:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80026dc:	4620      	mov	r0, r4
 80026de:	f000 f91f 	bl	8002920 <_ZSt34__uninitialized_move_if_noexcept_aIPjS0_SaIjEET0_T_S3_S2_RT1_>
 80026e2:	64f8      	str	r0, [r7, #76]	@ 0x4c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 80026e4:	f7ff ff45 	bl	8002572 <_ZNSt6vectorIjSaIjEE15_S_use_relocateEv>
 80026e8:	4603      	mov	r3, r0
 80026ea:	f083 0301 	eor.w	r3, r3, #1
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d00e      	beq.n	8002712 <_ZNSt6vectorIjSaIjEE17_M_realloc_insertIJjEEEvN9__gnu_cxx17__normal_iteratorIPjS1_EEDpOT_+0x172>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f000 f907 	bl	800290a <_ZNSt12_Vector_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 80026fc:	4602      	mov	r2, r0
 80026fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002700:	61fb      	str	r3, [r7, #28]
 8002702:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002704:	61bb      	str	r3, [r7, #24]
 8002706:	617a      	str	r2, [r7, #20]
    __attribute__((__always_inline__)) _GLIBCXX20_CONSTEXPR
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
	     allocator<_Tp>&)
    {
      std::_Destroy(__first, __last);
 8002708:	69b9      	ldr	r1, [r7, #24]
 800270a:	69f8      	ldr	r0, [r7, #28]
 800270c:	f000 f978 	bl	8002a00 <_ZSt8_DestroyIPjEvT_S1_>
    }
 8002710:	bf00      	nop
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8002712:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	689a      	ldr	r2, [r3, #8]
 8002718:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 800271e:	461a      	mov	r2, r3
 8002720:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002722:	f7ff fe6a 	bl	80023fa <_ZNSt12_Vector_baseIjSaIjEE13_M_deallocateEPjj>
      this->_M_impl._M_start = __new_start;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800272a:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002730:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8002732:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002738:	441a      	add	r2, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	609a      	str	r2, [r3, #8]
    }
 800273e:	bf00      	nop
 8002740:	3750      	adds	r7, #80	@ 0x50
 8002742:	46bd      	mov	sp, r7
 8002744:	bdb0      	pop	{r4, r5, r7, pc}
 8002746:	bf00      	nop
 8002748:	08009478 	.word	0x08009478

0800274c <_ZN9__gnu_cxx17__normal_iteratorIPKjSt6vectorIjSaIjEEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	601a      	str	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4618      	mov	r0, r3
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <_ZNK9__gnu_cxx17__normal_iteratorIPKjSt6vectorIjSaIjEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4618      	mov	r0, r3
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <_ZNSt15__new_allocatorIjE10deallocateEPjj>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8002782:	b580      	push	{r7, lr}
 8002784:	b084      	sub	sp, #16
 8002786:	af00      	add	r7, sp, #0
 8002788:	60f8      	str	r0, [r7, #12]
 800278a:	60b9      	str	r1, [r7, #8]
 800278c:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	4619      	mov	r1, r3
 8002794:	68b8      	ldr	r0, [r7, #8]
 8002796:	f005 fbae 	bl	8007ef6 <_ZdlPvj>
      }
 800279a:	bf00      	nop
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <_ZN9__gnu_cxx17__normal_iteratorIPjSt6vectorIjSaIjEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80027a2:	b480      	push	{r7}
 80027a4:	b083      	sub	sp, #12
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
 80027aa:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4618      	mov	r0, r3
 80027b8:	370c      	adds	r7, #12
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr

080027c2 <_ZNKSt6vectorIjSaIjEE12_M_check_lenEjPKc>:
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      _GLIBCXX20_CONSTEXPR
      size_type
      _M_check_len(size_type __n, const char* __s) const
 80027c2:	b590      	push	{r4, r7, lr}
 80027c4:	b087      	sub	sp, #28
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	60f8      	str	r0, [r7, #12]
 80027ca:	60b9      	str	r1, [r7, #8]
 80027cc:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 80027ce:	68f8      	ldr	r0, [r7, #12]
 80027d0:	f000 f8bf 	bl	8002952 <_ZNKSt6vectorIjSaIjEE8max_sizeEv>
 80027d4:	4604      	mov	r4, r0
 80027d6:	68f8      	ldr	r0, [r7, #12]
 80027d8:	f7ff fdd0 	bl	800237c <_ZNKSt6vectorIjSaIjEE4sizeEv>
 80027dc:	4603      	mov	r3, r0
 80027de:	1ae2      	subs	r2, r4, r3
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	bf34      	ite	cc
 80027e6:	2301      	movcc	r3, #1
 80027e8:	2300      	movcs	r3, #0
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d002      	beq.n	80027f6 <_ZNKSt6vectorIjSaIjEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f005 fb99 	bl	8007f28 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 80027f6:	68f8      	ldr	r0, [r7, #12]
 80027f8:	f7ff fdc0 	bl	800237c <_ZNKSt6vectorIjSaIjEE4sizeEv>
 80027fc:	4604      	mov	r4, r0
 80027fe:	68f8      	ldr	r0, [r7, #12]
 8002800:	f7ff fdbc 	bl	800237c <_ZNKSt6vectorIjSaIjEE4sizeEv>
 8002804:	4603      	mov	r3, r0
 8002806:	613b      	str	r3, [r7, #16]
 8002808:	f107 0208 	add.w	r2, r7, #8
 800280c:	f107 0310 	add.w	r3, r7, #16
 8002810:	4611      	mov	r1, r2
 8002812:	4618      	mov	r0, r3
 8002814:	f000 f8ae 	bl	8002974 <_ZSt3maxIjERKT_S2_S2_>
 8002818:	4603      	mov	r3, r0
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4423      	add	r3, r4
 800281e:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	f7ff fdab 	bl	800237c <_ZNKSt6vectorIjSaIjEE4sizeEv>
 8002826:	4602      	mov	r2, r0
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	4293      	cmp	r3, r2
 800282c:	d306      	bcc.n	800283c <_ZNKSt6vectorIjSaIjEE12_M_check_lenEjPKc+0x7a>
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f000 f88f 	bl	8002952 <_ZNKSt6vectorIjSaIjEE8max_sizeEv>
 8002834:	4602      	mov	r2, r0
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	4293      	cmp	r3, r2
 800283a:	d904      	bls.n	8002846 <_ZNKSt6vectorIjSaIjEE12_M_check_lenEjPKc+0x84>
 800283c:	68f8      	ldr	r0, [r7, #12]
 800283e:	f000 f888 	bl	8002952 <_ZNKSt6vectorIjSaIjEE8max_sizeEv>
 8002842:	4603      	mov	r3, r0
 8002844:	e000      	b.n	8002848 <_ZNKSt6vectorIjSaIjEE12_M_check_lenEjPKc+0x86>
 8002846:	697b      	ldr	r3, [r7, #20]
      }
 8002848:	4618      	mov	r0, r3
 800284a:	371c      	adds	r7, #28
 800284c:	46bd      	mov	sp, r7
 800284e:	bd90      	pop	{r4, r7, pc}

08002850 <_ZNSt6vectorIjSaIjEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	f107 030c 	add.w	r3, r7, #12
 800285e:	4611      	mov	r1, r2
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff ff9e 	bl	80027a2 <_ZN9__gnu_cxx17__normal_iteratorIPjSt6vectorIjSaIjEEEC1ERKS1_>
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	4618      	mov	r0, r3
 800286a:	3710      	adds	r7, #16
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <_ZN9__gnu_cxxmiIPjSt6vectorIjSaIjEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8002870:	b590      	push	{r4, r7, lr}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 f83a 	bl	80028f4 <_ZNK9__gnu_cxx17__normal_iteratorIPjSt6vectorIjSaIjEEE4baseEv>
 8002880:	4603      	mov	r3, r0
 8002882:	681c      	ldr	r4, [r3, #0]
 8002884:	6838      	ldr	r0, [r7, #0]
 8002886:	f000 f835 	bl	80028f4 <_ZNK9__gnu_cxx17__normal_iteratorIPjSt6vectorIjSaIjEEE4baseEv>
 800288a:	4603      	mov	r3, r0
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	1ae3      	subs	r3, r4, r3
 8002890:	109b      	asrs	r3, r3, #2
 8002892:	4618      	mov	r0, r3
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	bd90      	pop	{r4, r7, pc}

0800289a <_ZNSt12_Vector_baseIjSaIjEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800289a:	b580      	push	{r7, lr}
 800289c:	b084      	sub	sp, #16
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
 80028a2:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d00b      	beq.n	80028c2 <_ZNSt12_Vector_baseIjSaIjEE11_M_allocateEj+0x28>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	60fb      	str	r3, [r7, #12]
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	60bb      	str	r3, [r7, #8]
      { return __a.allocate(__n); }
 80028b2:	2200      	movs	r2, #0
 80028b4:	68b9      	ldr	r1, [r7, #8]
 80028b6:	68f8      	ldr	r0, [r7, #12]
 80028b8:	f000 f8da 	bl	8002a70 <_ZNSt15__new_allocatorIjE8allocateEjPKv>
 80028bc:	4603      	mov	r3, r0
 80028be:	bf00      	nop
 80028c0:	e000      	b.n	80028c4 <_ZNSt12_Vector_baseIjSaIjEE11_M_allocateEj+0x2a>
 80028c2:	2300      	movs	r3, #0
      }
 80028c4:	4618      	mov	r0, r3
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <_ZNSt6vectorIjSaIjEE11_S_relocateEPjS2_S2_RS0_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80028cc:	b590      	push	{r4, r7, lr}
 80028ce:	b087      	sub	sp, #28
 80028d0:	af02      	add	r7, sp, #8
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
 80028d8:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80028da:	f88d 4000 	strb.w	r4, [sp]
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	68b9      	ldr	r1, [r7, #8]
 80028e4:	68f8      	ldr	r0, [r7, #12]
 80028e6:	f000 f859 	bl	800299c <_ZNSt6vectorIjSaIjEE14_S_do_relocateEPjS2_S2_RS0_St17integral_constantIbLb1EE>
 80028ea:	4603      	mov	r3, r0
      }
 80028ec:	4618      	mov	r0, r3
 80028ee:	3714      	adds	r7, #20
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd90      	pop	{r4, r7, pc}

080028f4 <_ZNK9__gnu_cxx17__normal_iteratorIPjSt6vectorIjSaIjEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4618      	mov	r0, r3
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr

0800290a <_ZNSt12_Vector_baseIjSaIjEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800290a:	b480      	push	{r7}
 800290c:	b083      	sub	sp, #12
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4618      	mov	r0, r3
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <_ZSt34__uninitialized_move_if_noexcept_aIPjS0_SaIjEET0_T_S3_S2_RT1_>:

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8002920:	b590      	push	{r4, r7, lr}
 8002922:	b085      	sub	sp, #20
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
 800292c:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800292e:	68f8      	ldr	r0, [r7, #12]
 8002930:	f000 f846 	bl	80029c0 <_ZSt32__make_move_if_noexcept_iteratorIjSt13move_iteratorIPjEET0_PT_>
 8002934:	4604      	mov	r4, r0
 8002936:	68b8      	ldr	r0, [r7, #8]
 8002938:	f000 f842 	bl	80029c0 <_ZSt32__make_move_if_noexcept_iteratorIjSt13move_iteratorIPjEET0_PT_>
 800293c:	4601      	mov	r1, r0
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	4620      	mov	r0, r4
 8002944:	f000 f84b 	bl	80029de <_ZSt22__uninitialized_copy_aISt13move_iteratorIPjES1_jET0_T_S4_S3_RSaIT1_E>
 8002948:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 800294a:	4618      	mov	r0, r3
 800294c:	3714      	adds	r7, #20
 800294e:	46bd      	mov	sp, r7
 8002950:	bd90      	pop	{r4, r7, pc}

08002952 <_ZNKSt6vectorIjSaIjEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8002952:	b580      	push	{r7, lr}
 8002954:	b082      	sub	sp, #8
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4618      	mov	r0, r3
 800295e:	f000 f87c 	bl	8002a5a <_ZNKSt12_Vector_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 8002962:	4603      	mov	r3, r0
 8002964:	4618      	mov	r0, r3
 8002966:	f000 f858 	bl	8002a1a <_ZNSt6vectorIjSaIjEE11_S_max_sizeERKS0_>
 800296a:	4603      	mov	r3, r0
 800296c:	4618      	mov	r0, r3
 800296e:	3708      	adds	r7, #8
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	429a      	cmp	r2, r3
 8002988:	d201      	bcs.n	800298e <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	e000      	b.n	8002990 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 800298e:	687b      	ldr	r3, [r7, #4]
    }
 8002990:	4618      	mov	r0, r3
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <_ZNSt6vectorIjSaIjEE14_S_do_relocateEPjS2_S2_RS0_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
 80029a8:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	68b9      	ldr	r1, [r7, #8]
 80029b0:	68f8      	ldr	r0, [r7, #12]
 80029b2:	f000 f886 	bl	8002ac2 <_ZSt12__relocate_aIPjS0_SaIjEET0_T_S3_S2_RT1_>
 80029b6:	4603      	mov	r3, r0
      }
 80029b8:	4618      	mov	r0, r3
 80029ba:	3710      	adds	r7, #16
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <_ZSt32__make_move_if_noexcept_iteratorIjSt13move_iteratorIPjEET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = __conditional_t<__move_if_noexcept_cond<_Tp>::value,
		      const _Tp*, move_iterator<_Tp*>>>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 80029c8:	f107 030c 	add.w	r3, r7, #12
 80029cc:	6879      	ldr	r1, [r7, #4]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f000 f894 	bl	8002afc <_ZNSt13move_iteratorIPjEC1ES0_>
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	4618      	mov	r0, r3
 80029d8:	3710      	adds	r7, #16
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <_ZSt22__uninitialized_copy_aISt13move_iteratorIPjES1_jET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80029de:	b580      	push	{r7, lr}
 80029e0:	b084      	sub	sp, #16
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	60f8      	str	r0, [r7, #12]
 80029e6:	60b9      	str	r1, [r7, #8]
 80029e8:	607a      	str	r2, [r7, #4]
 80029ea:	603b      	str	r3, [r7, #0]
      return std::uninitialized_copy(__first, __last, __result);
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	68b9      	ldr	r1, [r7, #8]
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	f000 f895 	bl	8002b20 <_ZSt18uninitialized_copyISt13move_iteratorIPjES1_ET0_T_S4_S3_>
 80029f6:	4603      	mov	r3, r0
    }
 80029f8:	4618      	mov	r0, r3
 80029fa:	3710      	adds	r7, #16
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <_ZSt8_DestroyIPjEvT_S1_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
	return std::_Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8002a0a:	6839      	ldr	r1, [r7, #0]
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 f89b 	bl	8002b48 <_ZNSt12_Destroy_auxILb1EE9__destroyIPjEEvT_S3_>
    }
 8002a12:	bf00      	nop
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <_ZNSt6vectorIjSaIjEE11_S_max_sizeERKS0_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static _GLIBCXX20_CONSTEXPR size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	b088      	sub	sp, #32
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8002a22:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 8002a26:	613b      	str	r3, [r7, #16]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	61fb      	str	r3, [r7, #28]
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	61bb      	str	r3, [r7, #24]
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	617b      	str	r3, [r7, #20]
      __attribute__((__always_inline__))
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8002a34:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
      { return _M_max_size(); }
 8002a38:	bf00      	nop
	return __a.max_size();
 8002a3a:	bf00      	nop
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8002a3c:	60fb      	str	r3, [r7, #12]
	return (std::min)(__diffmax, __allocmax);
 8002a3e:	f107 020c 	add.w	r2, r7, #12
 8002a42:	f107 0310 	add.w	r3, r7, #16
 8002a46:	4611      	mov	r1, r2
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f000 f888 	bl	8002b5e <_ZSt3minIjERKT_S2_S2_>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	681b      	ldr	r3, [r3, #0]
      }
 8002a52:	4618      	mov	r0, r3
 8002a54:	3720      	adds	r7, #32
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <_ZNKSt12_Vector_baseIjSaIjEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8002a5a:	b480      	push	{r7}
 8002a5c:	b083      	sub	sp, #12
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4618      	mov	r0, r3
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <_ZNSt15__new_allocatorIjE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	607a      	str	r2, [r7, #4]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	617b      	str	r3, [r7, #20]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8002a80:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	4293      	cmp	r3, r2
 8002a88:	bf8c      	ite	hi
 8002a8a:	2301      	movhi	r3, #1
 8002a8c:	2300      	movls	r3, #0
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	bf14      	ite	ne
 8002a94:	2301      	movne	r3, #1
 8002a96:	2300      	moveq	r3, #0
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d007      	beq.n	8002aae <_ZNSt15__new_allocatorIjE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002aa4:	d301      	bcc.n	8002aaa <_ZNSt15__new_allocatorIjE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8002aa6:	f005 fa3c 	bl	8007f22 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8002aaa:	f005 fa37 	bl	8007f1c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f005 fa21 	bl	8007efa <_Znwj>
 8002ab8:	4603      	mov	r3, r0
      }
 8002aba:	4618      	mov	r0, r3
 8002abc:	3718      	adds	r7, #24
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <_ZSt12__relocate_aIPjS0_SaIjEET0_T_S3_S2_RT1_>:

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8002ac2:	b5b0      	push	{r4, r5, r7, lr}
 8002ac4:	b084      	sub	sp, #16
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	60f8      	str	r0, [r7, #12]
 8002aca:	60b9      	str	r1, [r7, #8]
 8002acc:	607a      	str	r2, [r7, #4]
 8002ace:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return std::__relocate_a_1(std::__niter_base(__first),
 8002ad0:	68f8      	ldr	r0, [r7, #12]
 8002ad2:	f000 f858 	bl	8002b86 <_ZSt12__niter_baseIPjET_S1_>
 8002ad6:	4604      	mov	r4, r0
 8002ad8:	68b8      	ldr	r0, [r7, #8]
 8002ada:	f000 f854 	bl	8002b86 <_ZSt12__niter_baseIPjET_S1_>
 8002ade:	4605      	mov	r5, r0
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f000 f850 	bl	8002b86 <_ZSt12__niter_baseIPjET_S1_>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	4629      	mov	r1, r5
 8002aec:	4620      	mov	r0, r4
 8002aee:	f000 f855 	bl	8002b9c <_ZSt14__relocate_a_1IjjENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>
 8002af2:	4603      	mov	r3, r0
				 std::__niter_base(__last),
				 std::__niter_base(__result), __alloc);
    }
 8002af4:	4618      	mov	r0, r3
 8002af6:	3710      	adds	r7, #16
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bdb0      	pop	{r4, r5, r7, pc}

08002afc <_ZNSt13move_iteratorIPjEC1ES0_>:
      move_iterator(iterator_type __i)
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8002b06:	463b      	mov	r3, r7
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f000 f865 	bl	8002bd8 <_ZSt4moveIRPjEONSt16remove_referenceIT_E4typeEOS3_>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	601a      	str	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3708      	adds	r7, #8
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <_ZSt18uninitialized_copyISt13move_iteratorIPjES1_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
      const bool __can_memmove = __is_trivial(_ValueType1);
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	75fb      	strb	r3, [r7, #23]
      const bool __assignable
 8002b30:	2301      	movs	r3, #1
 8002b32:	75bb      	strb	r3, [r7, #22]
	__uninit_copy(__first, __last, __result);
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	68b9      	ldr	r1, [r7, #8]
 8002b38:	68f8      	ldr	r0, [r7, #12]
 8002b3a:	f000 f858 	bl	8002bee <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPjES3_EET0_T_S6_S5_>
 8002b3e:	4603      	mov	r3, r0
    }
 8002b40:	4618      	mov	r0, r3
 8002b42:	3718      	adds	r7, #24
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <_ZNSt12_Destroy_auxILb1EE9__destroyIPjEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
 8002b52:	bf00      	nop
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8002b5e:	b480      	push	{r7}
 8002b60:	b083      	sub	sp, #12
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
 8002b66:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d201      	bcs.n	8002b78 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	e000      	b.n	8002b7a <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8002b78:	687b      	ldr	r3, [r7, #4]
    }
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr

08002b86 <_ZSt12__niter_baseIPjET_S1_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __niter_base(_Iterator __it)
 8002b86:	b480      	push	{r7}
 8002b88:	b083      	sub	sp, #12
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4618      	mov	r0, r3
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <_ZSt14__relocate_a_1IjjENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
 8002ba8:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8002baa:	68ba      	ldr	r2, [r7, #8]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	109b      	asrs	r3, r3, #2
 8002bb2:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	dd06      	ble.n	8002bc8 <_ZSt14__relocate_a_1IjjENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x2c>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	68f9      	ldr	r1, [r7, #12]
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f005 fbec 	bl	80083a0 <memmove>
      return __result + __count;
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	4413      	add	r3, r2
    }
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3718      	adds	r7, #24
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <_ZSt4moveIRPjEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4618      	mov	r0, r3
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr

08002bee <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPjES3_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b084      	sub	sp, #16
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	60f8      	str	r0, [r7, #12]
 8002bf6:	60b9      	str	r1, [r7, #8]
 8002bf8:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	68b9      	ldr	r1, [r7, #8]
 8002bfe:	68f8      	ldr	r0, [r7, #12]
 8002c00:	f000 f805 	bl	8002c0e <_ZSt4copyISt13move_iteratorIPjES1_ET0_T_S4_S3_>
 8002c04:	4603      	mov	r3, r0
 8002c06:	4618      	mov	r0, r3
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <_ZSt4copyISt13move_iteratorIPjES1_ET0_T_S4_S3_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8002c0e:	b590      	push	{r4, r7, lr}
 8002c10:	b085      	sub	sp, #20
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	60f8      	str	r0, [r7, #12]
 8002c16:	60b9      	str	r1, [r7, #8]
 8002c18:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::reference>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	f000 f80f 	bl	8002c3e <_ZSt12__miter_baseIPjEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8002c20:	4604      	mov	r4, r0
 8002c22:	68b8      	ldr	r0, [r7, #8]
 8002c24:	f000 f80b 	bl	8002c3e <_ZSt12__miter_baseIPjEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	4620      	mov	r0, r4
 8002c30:	f000 f816 	bl	8002c60 <_ZSt13__copy_move_aILb1EPjS0_ET1_T0_S2_S1_>
 8002c34:	4603      	mov	r3, r0
    }
 8002c36:	4618      	mov	r0, r3
 8002c38:	3714      	adds	r7, #20
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd90      	pop	{r4, r7, pc}

08002c3e <_ZSt12__miter_baseIPjEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    };

  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b082      	sub	sp, #8
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8002c46:	1d3b      	adds	r3, r7, #4
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f000 f82c 	bl	8002ca6 <_ZNKSt13move_iteratorIPjE4baseEv>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	4618      	mov	r0, r3
 8002c52:	f000 f834 	bl	8002cbe <_ZSt12__miter_baseIPjET_S1_>
 8002c56:	4603      	mov	r3, r0
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3708      	adds	r7, #8
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <_ZSt13__copy_move_aILb1EPjS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8002c60:	b5b0      	push	{r4, r5, r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f7ff ff8a 	bl	8002b86 <_ZSt12__niter_baseIPjET_S1_>
 8002c72:	4604      	mov	r4, r0
 8002c74:	68b8      	ldr	r0, [r7, #8]
 8002c76:	f7ff ff86 	bl	8002b86 <_ZSt12__niter_baseIPjET_S1_>
 8002c7a:	4605      	mov	r5, r0
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7ff ff81 	bl	8002b86 <_ZSt12__niter_baseIPjET_S1_>
 8002c84:	4603      	mov	r3, r0
 8002c86:	461a      	mov	r2, r3
 8002c88:	4629      	mov	r1, r5
 8002c8a:	4620      	mov	r0, r4
 8002c8c:	f000 f822 	bl	8002cd4 <_ZSt14__copy_move_a1ILb1EPjS0_ET1_T0_S2_S1_>
 8002c90:	4602      	mov	r2, r0
 8002c92:	1d3b      	adds	r3, r7, #4
 8002c94:	4611      	mov	r1, r2
 8002c96:	4618      	mov	r0, r3
 8002c98:	f000 f82c 	bl	8002cf4 <_ZSt12__niter_wrapIPjET_RKS1_S1_>
 8002c9c:	4603      	mov	r3, r0
    }
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bdb0      	pop	{r4, r5, r7, pc}

08002ca6 <_ZNKSt13move_iteratorIPjE4baseEv>:
      base() const
 8002ca6:	b480      	push	{r7}
 8002ca8:	b083      	sub	sp, #12
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr

08002cbe <_ZSt12__miter_baseIPjET_S1_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8002cbe:	b480      	push	{r7}
 8002cc0:	b083      	sub	sp, #12
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
    { return __it; }
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <_ZSt14__copy_move_a1ILb1EPjS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	68b9      	ldr	r1, [r7, #8]
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f000 f811 	bl	8002d0c <_ZSt14__copy_move_a2ILb1EPjS0_ET1_T0_S2_S1_>
 8002cea:	4603      	mov	r3, r0
 8002cec:	4618      	mov	r0, r3
 8002cee:	3710      	adds	r7, #16
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <_ZSt12__niter_wrapIPjET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
    { return __res; }
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	4618      	mov	r0, r3
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <_ZSt14__copy_move_a2ILb1EPjS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	68b9      	ldr	r1, [r7, #8]
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	f000 f805 	bl	8002d2c <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIjjEEPT0_PT_S6_S4_>
 8002d22:	4603      	mov	r3, r0
    }
 8002d24:	4618      	mov	r0, r3
 8002d26:	3710      	adds	r7, #16
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIjjEEPT0_PT_S6_S4_>:
	__copy_m(_Tp* __first, _Tp* __last, _Up* __result)
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b086      	sub	sp, #24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8002d38:	68ba      	ldr	r2, [r7, #8]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	109b      	asrs	r3, r3, #2
 8002d40:	617b      	str	r3, [r7, #20]
	  if (__builtin_expect(_Num > 1, true))
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	bfcc      	ite	gt
 8002d48:	2301      	movgt	r3, #1
 8002d4a:	2300      	movle	r3, #0
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d007      	beq.n	8002d62 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIjjEEPT0_PT_S6_S4_+0x36>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	461a      	mov	r2, r3
 8002d58:	68f9      	ldr	r1, [r7, #12]
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f005 fb20 	bl	80083a0 <memmove>
 8002d60:	e006      	b.n	8002d70 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIjjEEPT0_PT_S6_S4_+0x44>
	  else if (_Num == 1)
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d103      	bne.n	8002d70 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIjjEEPT0_PT_S6_S4_+0x44>
	      __assign_one(__result, __first);
 8002d68:	68f9      	ldr	r1, [r7, #12]
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 f808 	bl	8002d80 <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE12__assign_oneIjjEEvPT_PT0_>
	  return __result + _Num;
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	4413      	add	r3, r2
	}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3718      	adds	r7, #24
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE12__assign_oneIjjEEvPT_PT0_>:
	__assign_one(_Tp* __to, _Up* __from)
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
	{ *__to = std::move(*__from); }
 8002d8a:	6838      	ldr	r0, [r7, #0]
 8002d8c:	f7ff fb4e 	bl	800242c <_ZSt4moveIRjEONSt16remove_referenceIT_E4typeEOS2_>
 8002d90:	4603      	mov	r3, r0
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	601a      	str	r2, [r3, #0]
 8002d98:	bf00      	nop
 8002d9a:	3708      	adds	r7, #8
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <_Z41__static_initialization_and_destruction_0v>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
float amp_step = referenceVoltage/resolutionmax; // Dado necessário para o cálculo da mostra da amplitude
 8002da4:	4b18      	ldr	r3, [pc, #96]	@ (8002e08 <_Z41__static_initialization_and_destruction_0v+0x68>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	ee07 3a90 	vmov	s15, r3
 8002dac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002db0:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8002e0c <_Z41__static_initialization_and_destruction_0v+0x6c>
 8002db4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002db8:	4b15      	ldr	r3, [pc, #84]	@ (8002e10 <_Z41__static_initialization_and_destruction_0v+0x70>)
 8002dba:	edc3 7a00 	vstr	s15, [r3]
float amp = amp_step*resolution; //Calcula a amplitude
 8002dbe:	4b15      	ldr	r3, [pc, #84]	@ (8002e14 <_Z41__static_initialization_and_destruction_0v+0x74>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	ee07 3a90 	vmov	s15, r3
 8002dc6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002dca:	4b11      	ldr	r3, [pc, #68]	@ (8002e10 <_Z41__static_initialization_and_destruction_0v+0x70>)
 8002dcc:	edd3 7a00 	vldr	s15, [r3]
 8002dd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dd4:	4b10      	ldr	r3, [pc, #64]	@ (8002e18 <_Z41__static_initialization_and_destruction_0v+0x78>)
 8002dd6:	edc3 7a00 	vstr	s15, [r3]
double waiting_time = 1000000/(frequency*resolution*2); //Calcula o periodo esperado dado a frequência escolhida em microsegundos
 8002dda:	4b10      	ldr	r3, [pc, #64]	@ (8002e1c <_Z41__static_initialization_and_destruction_0v+0x7c>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a0d      	ldr	r2, [pc, #52]	@ (8002e14 <_Z41__static_initialization_and_destruction_0v+0x74>)
 8002de0:	6812      	ldr	r2, [r2, #0]
 8002de2:	fb02 f303 	mul.w	r3, r2, r3
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	4a0d      	ldr	r2, [pc, #52]	@ (8002e20 <_Z41__static_initialization_and_destruction_0v+0x80>)
 8002dea:	fb92 f3f3 	sdiv	r3, r2, r3
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7fd fcba 	bl	8000768 <__aeabi_i2d>
 8002df4:	4602      	mov	r2, r0
 8002df6:	460b      	mov	r3, r1
 8002df8:	490a      	ldr	r1, [pc, #40]	@ (8002e24 <_Z41__static_initialization_and_destruction_0v+0x84>)
 8002dfa:	e9c1 2300 	strd	r2, r3, [r1]
std::vector<unsigned int> peaks_place;  // Vetor para armazenar o valor de pzt respectivos para os picos
 8002dfe:	480a      	ldr	r0, [pc, #40]	@ (8002e28 <_Z41__static_initialization_and_destruction_0v+0x88>)
 8002e00:	f7fd ff89 	bl	8000d16 <_ZNSt6vectorIjSaIjEEC1Ev>
}
 8002e04:	bf00      	nop
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	20000004 	.word	0x20000004
 8002e0c:	40533333 	.word	0x40533333
 8002e10:	20000284 	.word	0x20000284
 8002e14:	20000000 	.word	0x20000000
 8002e18:	20000290 	.word	0x20000290
 8002e1c:	20000010 	.word	0x20000010
 8002e20:	000f4240 	.word	0x000f4240
 8002e24:	20000298 	.word	0x20000298
 8002e28:	200002b0 	.word	0x200002b0

08002e2c <_Z41__static_initialization_and_destruction_1v>:
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
std::vector<unsigned int> peaks_place;  // Vetor para armazenar o valor de pzt respectivos para os picos
 8002e30:	4802      	ldr	r0, [pc, #8]	@ (8002e3c <_Z41__static_initialization_and_destruction_1v+0x10>)
 8002e32:	f000 f805 	bl	8002e40 <_ZNSt6vectorIjSaIjEED1Ev>
}
 8002e36:	bf00      	nop
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	200002b0 	.word	0x200002b0

08002e40 <_ZNSt6vectorIjSaIjEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8002e40:	b5b0      	push	{r4, r5, r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681d      	ldr	r5, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685c      	ldr	r4, [r3, #4]
		      _M_get_Tp_allocator());
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7ff fd59 	bl	800290a <_ZNSt12_Vector_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	617d      	str	r5, [r7, #20]
 8002e5c:	613c      	str	r4, [r7, #16]
 8002e5e:	60fb      	str	r3, [r7, #12]
      std::_Destroy(__first, __last);
 8002e60:	6939      	ldr	r1, [r7, #16]
 8002e62:	6978      	ldr	r0, [r7, #20]
 8002e64:	f7ff fdcc 	bl	8002a00 <_ZSt8_DestroyIPjEvT_S1_>
    }
 8002e68:	bf00      	nop
      }
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7ff fa26 	bl	80022be <_ZNSt12_Vector_baseIjSaIjEED1Ev>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4618      	mov	r0, r3
 8002e76:	3718      	adds	r7, #24
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bdb0      	pop	{r4, r5, r7, pc}

08002e7c <_GLOBAL__sub_I_hadc1>:
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	f7ff ff8e 	bl	8002da0 <_Z41__static_initialization_and_destruction_0v>
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <_GLOBAL__sub_D_hadc1>:
 8002e86:	b580      	push	{r7, lr}
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	f7ff ffcf 	bl	8002e2c <_Z41__static_initialization_and_destruction_1v>
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e96:	4b0f      	ldr	r3, [pc, #60]	@ (8002ed4 <HAL_MspInit+0x44>)
 8002e98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e9a:	4a0e      	ldr	r2, [pc, #56]	@ (8002ed4 <HAL_MspInit+0x44>)
 8002e9c:	f043 0301 	orr.w	r3, r3, #1
 8002ea0:	6613      	str	r3, [r2, #96]	@ 0x60
 8002ea2:	4b0c      	ldr	r3, [pc, #48]	@ (8002ed4 <HAL_MspInit+0x44>)
 8002ea4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	607b      	str	r3, [r7, #4]
 8002eac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002eae:	4b09      	ldr	r3, [pc, #36]	@ (8002ed4 <HAL_MspInit+0x44>)
 8002eb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eb2:	4a08      	ldr	r2, [pc, #32]	@ (8002ed4 <HAL_MspInit+0x44>)
 8002eb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002eb8:	6593      	str	r3, [r2, #88]	@ 0x58
 8002eba:	4b06      	ldr	r3, [pc, #24]	@ (8002ed4 <HAL_MspInit+0x44>)
 8002ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ebe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ec2:	603b      	str	r3, [r7, #0]
 8002ec4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ec6:	bf00      	nop
 8002ec8:	370c      	adds	r7, #12
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	40021000 	.word	0x40021000

08002ed8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b08a      	sub	sp, #40	@ 0x28
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ee0:	f107 0314 	add.w	r3, r7, #20
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	601a      	str	r2, [r3, #0]
 8002ee8:	605a      	str	r2, [r3, #4]
 8002eea:	609a      	str	r2, [r3, #8]
 8002eec:	60da      	str	r2, [r3, #12]
 8002eee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a15      	ldr	r2, [pc, #84]	@ (8002f4c <HAL_ADC_MspInit+0x74>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d123      	bne.n	8002f42 <HAL_ADC_MspInit+0x6a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002efa:	4b15      	ldr	r3, [pc, #84]	@ (8002f50 <HAL_ADC_MspInit+0x78>)
 8002efc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002efe:	4a14      	ldr	r2, [pc, #80]	@ (8002f50 <HAL_ADC_MspInit+0x78>)
 8002f00:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002f04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f06:	4b12      	ldr	r3, [pc, #72]	@ (8002f50 <HAL_ADC_MspInit+0x78>)
 8002f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f0e:	613b      	str	r3, [r7, #16]
 8002f10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f12:	4b0f      	ldr	r3, [pc, #60]	@ (8002f50 <HAL_ADC_MspInit+0x78>)
 8002f14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f16:	4a0e      	ldr	r2, [pc, #56]	@ (8002f50 <HAL_ADC_MspInit+0x78>)
 8002f18:	f043 0302 	orr.w	r3, r3, #2
 8002f1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f1e:	4b0c      	ldr	r3, [pc, #48]	@ (8002f50 <HAL_ADC_MspInit+0x78>)
 8002f20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	60fb      	str	r3, [r7, #12]
 8002f28:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002f2e:	230b      	movs	r3, #11
 8002f30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f32:	2300      	movs	r3, #0
 8002f34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f36:	f107 0314 	add.w	r3, r7, #20
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	4805      	ldr	r0, [pc, #20]	@ (8002f54 <HAL_ADC_MspInit+0x7c>)
 8002f3e:	f001 ffff 	bl	8004f40 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002f42:	bf00      	nop
 8002f44:	3728      	adds	r7, #40	@ 0x28
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	50040000 	.word	0x50040000
 8002f50:	40021000 	.word	0x40021000
 8002f54:	48000400 	.word	0x48000400

08002f58 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b096      	sub	sp, #88	@ 0x58
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f60:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002f64:	2200      	movs	r2, #0
 8002f66:	601a      	str	r2, [r3, #0]
 8002f68:	605a      	str	r2, [r3, #4]
 8002f6a:	609a      	str	r2, [r3, #8]
 8002f6c:	60da      	str	r2, [r3, #12]
 8002f6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f70:	f107 0310 	add.w	r3, r7, #16
 8002f74:	2234      	movs	r2, #52	@ 0x34
 8002f76:	2100      	movs	r1, #0
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f005 fa2b 	bl	80083d4 <memset>
  if(hi2c->Instance==I2C1)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a24      	ldr	r2, [pc, #144]	@ (8003014 <HAL_I2C_MspInit+0xbc>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d141      	bne.n	800300c <HAL_I2C_MspInit+0xb4>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002f88:	2340      	movs	r3, #64	@ 0x40
 8002f8a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f90:	f107 0310 	add.w	r3, r7, #16
 8002f94:	4618      	mov	r0, r3
 8002f96:	f003 fdb1 	bl	8006afc <HAL_RCCEx_PeriphCLKConfig>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002fa0:	f7ff f976 	bl	8002290 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fa4:	4b1c      	ldr	r3, [pc, #112]	@ (8003018 <HAL_I2C_MspInit+0xc0>)
 8002fa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fa8:	4a1b      	ldr	r2, [pc, #108]	@ (8003018 <HAL_I2C_MspInit+0xc0>)
 8002faa:	f043 0302 	orr.w	r3, r3, #2
 8002fae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002fb0:	4b19      	ldr	r3, [pc, #100]	@ (8003018 <HAL_I2C_MspInit+0xc0>)
 8002fb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fb4:	f003 0302 	and.w	r3, r3, #2
 8002fb8:	60fb      	str	r3, [r7, #12]
 8002fba:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002fbc:	23c0      	movs	r3, #192	@ 0xc0
 8002fbe:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002fc0:	2312      	movs	r3, #18
 8002fc2:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002fcc:	2304      	movs	r3, #4
 8002fce:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fd0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	4811      	ldr	r0, [pc, #68]	@ (800301c <HAL_I2C_MspInit+0xc4>)
 8002fd8:	f001 ffb2 	bl	8004f40 <HAL_GPIO_Init>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB6);
 8002fdc:	4b10      	ldr	r3, [pc, #64]	@ (8003020 <HAL_I2C_MspInit+0xc8>)
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	4a0f      	ldr	r2, [pc, #60]	@ (8003020 <HAL_I2C_MspInit+0xc8>)
 8002fe2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fe6:	6053      	str	r3, [r2, #4]

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB7);
 8002fe8:	4b0d      	ldr	r3, [pc, #52]	@ (8003020 <HAL_I2C_MspInit+0xc8>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	4a0c      	ldr	r2, [pc, #48]	@ (8003020 <HAL_I2C_MspInit+0xc8>)
 8002fee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ff2:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ff4:	4b08      	ldr	r3, [pc, #32]	@ (8003018 <HAL_I2C_MspInit+0xc0>)
 8002ff6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ff8:	4a07      	ldr	r2, [pc, #28]	@ (8003018 <HAL_I2C_MspInit+0xc0>)
 8002ffa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002ffe:	6593      	str	r3, [r2, #88]	@ 0x58
 8003000:	4b05      	ldr	r3, [pc, #20]	@ (8003018 <HAL_I2C_MspInit+0xc0>)
 8003002:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003004:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003008:	60bb      	str	r3, [r7, #8]
 800300a:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800300c:	bf00      	nop
 800300e:	3758      	adds	r7, #88	@ 0x58
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	40005400 	.word	0x40005400
 8003018:	40021000 	.word	0x40021000
 800301c:	48000400 	.word	0x48000400
 8003020:	40010000 	.word	0x40010000

08003024 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b08c      	sub	sp, #48	@ 0x30
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800302c:	f107 031c 	add.w	r3, r7, #28
 8003030:	2200      	movs	r2, #0
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	605a      	str	r2, [r3, #4]
 8003036:	609a      	str	r2, [r3, #8]
 8003038:	60da      	str	r2, [r3, #12]
 800303a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a30      	ldr	r2, [pc, #192]	@ (8003104 <HAL_TIM_Base_MspInit+0xe0>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d12a      	bne.n	800309c <HAL_TIM_Base_MspInit+0x78>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003046:	4b30      	ldr	r3, [pc, #192]	@ (8003108 <HAL_TIM_Base_MspInit+0xe4>)
 8003048:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800304a:	4a2f      	ldr	r2, [pc, #188]	@ (8003108 <HAL_TIM_Base_MspInit+0xe4>)
 800304c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003050:	6613      	str	r3, [r2, #96]	@ 0x60
 8003052:	4b2d      	ldr	r3, [pc, #180]	@ (8003108 <HAL_TIM_Base_MspInit+0xe4>)
 8003054:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003056:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800305a:	61bb      	str	r3, [r7, #24]
 800305c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800305e:	4b2a      	ldr	r3, [pc, #168]	@ (8003108 <HAL_TIM_Base_MspInit+0xe4>)
 8003060:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003062:	4a29      	ldr	r2, [pc, #164]	@ (8003108 <HAL_TIM_Base_MspInit+0xe4>)
 8003064:	f043 0301 	orr.w	r3, r3, #1
 8003068:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800306a:	4b27      	ldr	r3, [pc, #156]	@ (8003108 <HAL_TIM_Base_MspInit+0xe4>)
 800306c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	617b      	str	r3, [r7, #20]
 8003074:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003076:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800307a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800307c:	2302      	movs	r3, #2
 800307e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003080:	2300      	movs	r3, #0
 8003082:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003084:	2300      	movs	r3, #0
 8003086:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003088:	2301      	movs	r3, #1
 800308a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800308c:	f107 031c 	add.w	r3, r7, #28
 8003090:	4619      	mov	r1, r3
 8003092:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003096:	f001 ff53 	bl	8004f40 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 800309a:	e02e      	b.n	80030fa <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM2)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030a4:	d129      	bne.n	80030fa <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80030a6:	4b18      	ldr	r3, [pc, #96]	@ (8003108 <HAL_TIM_Base_MspInit+0xe4>)
 80030a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030aa:	4a17      	ldr	r2, [pc, #92]	@ (8003108 <HAL_TIM_Base_MspInit+0xe4>)
 80030ac:	f043 0301 	orr.w	r3, r3, #1
 80030b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80030b2:	4b15      	ldr	r3, [pc, #84]	@ (8003108 <HAL_TIM_Base_MspInit+0xe4>)
 80030b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	613b      	str	r3, [r7, #16]
 80030bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030be:	4b12      	ldr	r3, [pc, #72]	@ (8003108 <HAL_TIM_Base_MspInit+0xe4>)
 80030c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030c2:	4a11      	ldr	r2, [pc, #68]	@ (8003108 <HAL_TIM_Base_MspInit+0xe4>)
 80030c4:	f043 0301 	orr.w	r3, r3, #1
 80030c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030ca:	4b0f      	ldr	r3, [pc, #60]	@ (8003108 <HAL_TIM_Base_MspInit+0xe4>)
 80030cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030ce:	f003 0301 	and.w	r3, r3, #1
 80030d2:	60fb      	str	r3, [r7, #12]
 80030d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80030d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80030da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030dc:	2302      	movs	r3, #2
 80030de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e0:	2300      	movs	r3, #0
 80030e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030e4:	2300      	movs	r3, #0
 80030e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80030e8:	2301      	movs	r3, #1
 80030ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030ec:	f107 031c 	add.w	r3, r7, #28
 80030f0:	4619      	mov	r1, r3
 80030f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80030f6:	f001 ff23 	bl	8004f40 <HAL_GPIO_Init>
}
 80030fa:	bf00      	nop
 80030fc:	3730      	adds	r7, #48	@ 0x30
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	40012c00 	.word	0x40012c00
 8003108:	40021000 	.word	0x40021000

0800310c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b096      	sub	sp, #88	@ 0x58
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003114:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003118:	2200      	movs	r2, #0
 800311a:	601a      	str	r2, [r3, #0]
 800311c:	605a      	str	r2, [r3, #4]
 800311e:	609a      	str	r2, [r3, #8]
 8003120:	60da      	str	r2, [r3, #12]
 8003122:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003124:	f107 0310 	add.w	r3, r7, #16
 8003128:	2234      	movs	r2, #52	@ 0x34
 800312a:	2100      	movs	r1, #0
 800312c:	4618      	mov	r0, r3
 800312e:	f005 f951 	bl	80083d4 <memset>
  if(huart->Instance==USART1)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a1f      	ldr	r2, [pc, #124]	@ (80031b4 <HAL_UART_MspInit+0xa8>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d137      	bne.n	80031ac <HAL_UART_MspInit+0xa0>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800313c:	2301      	movs	r3, #1
 800313e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003140:	2300      	movs	r3, #0
 8003142:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003144:	f107 0310 	add.w	r3, r7, #16
 8003148:	4618      	mov	r0, r3
 800314a:	f003 fcd7 	bl	8006afc <HAL_RCCEx_PeriphCLKConfig>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d001      	beq.n	8003158 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003154:	f7ff f89c 	bl	8002290 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003158:	4b17      	ldr	r3, [pc, #92]	@ (80031b8 <HAL_UART_MspInit+0xac>)
 800315a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800315c:	4a16      	ldr	r2, [pc, #88]	@ (80031b8 <HAL_UART_MspInit+0xac>)
 800315e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003162:	6613      	str	r3, [r2, #96]	@ 0x60
 8003164:	4b14      	ldr	r3, [pc, #80]	@ (80031b8 <HAL_UART_MspInit+0xac>)
 8003166:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003168:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800316c:	60fb      	str	r3, [r7, #12]
 800316e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003170:	4b11      	ldr	r3, [pc, #68]	@ (80031b8 <HAL_UART_MspInit+0xac>)
 8003172:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003174:	4a10      	ldr	r2, [pc, #64]	@ (80031b8 <HAL_UART_MspInit+0xac>)
 8003176:	f043 0301 	orr.w	r3, r3, #1
 800317a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800317c:	4b0e      	ldr	r3, [pc, #56]	@ (80031b8 <HAL_UART_MspInit+0xac>)
 800317e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	60bb      	str	r3, [r7, #8]
 8003186:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003188:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800318c:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800318e:	2302      	movs	r3, #2
 8003190:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003192:	2300      	movs	r3, #0
 8003194:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003196:	2303      	movs	r3, #3
 8003198:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800319a:	2307      	movs	r3, #7
 800319c:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800319e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80031a2:	4619      	mov	r1, r3
 80031a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80031a8:	f001 feca 	bl	8004f40 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80031ac:	bf00      	nop
 80031ae:	3758      	adds	r7, #88	@ 0x58
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	40013800 	.word	0x40013800
 80031b8:	40021000 	.word	0x40021000

080031bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031bc:	b480      	push	{r7}
 80031be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80031c0:	bf00      	nop
 80031c2:	e7fd      	b.n	80031c0 <NMI_Handler+0x4>

080031c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031c8:	bf00      	nop
 80031ca:	e7fd      	b.n	80031c8 <HardFault_Handler+0x4>

080031cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031d0:	bf00      	nop
 80031d2:	e7fd      	b.n	80031d0 <MemManage_Handler+0x4>

080031d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031d8:	bf00      	nop
 80031da:	e7fd      	b.n	80031d8 <BusFault_Handler+0x4>

080031dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031dc:	b480      	push	{r7}
 80031de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031e0:	bf00      	nop
 80031e2:	e7fd      	b.n	80031e0 <UsageFault_Handler+0x4>

080031e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031e8:	bf00      	nop
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr

080031f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031f2:	b480      	push	{r7}
 80031f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031f6:	bf00      	nop
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003204:	bf00      	nop
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr

0800320e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800320e:	b580      	push	{r7, lr}
 8003210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003212:	f000 f975 	bl	8003500 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003216:	bf00      	nop
 8003218:	bd80      	pop	{r7, pc}

0800321a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Decrease_BTN_Pin);
 800321e:	2001      	movs	r0, #1
 8003220:	f002 f818 	bl	8005254 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003224:	bf00      	nop
 8003226:	bd80      	pop	{r7, pc}

08003228 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Increase_BTN_Pin);
 800322c:	2002      	movs	r0, #2
 800322e:	f002 f811 	bl	8005254 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003232:	bf00      	nop
 8003234:	bd80      	pop	{r7, pc}

08003236 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003236:	b580      	push	{r7, lr}
 8003238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Mode_BTN_Pin);
 800323a:	2010      	movs	r0, #16
 800323c:	f002 f80a 	bl	8005254 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003240:	bf00      	nop
 8003242:	bd80      	pop	{r7, pc}

08003244 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Select_BTN_Pin);
 8003248:	2020      	movs	r0, #32
 800324a:	f002 f803 	bl	8005254 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800324e:	bf00      	nop
 8003250:	bd80      	pop	{r7, pc}

08003252 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003252:	b480      	push	{r7}
 8003254:	af00      	add	r7, sp, #0
  return 1;
 8003256:	2301      	movs	r3, #1
}
 8003258:	4618      	mov	r0, r3
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr

08003262 <_kill>:

int _kill(int pid, int sig)
{
 8003262:	b580      	push	{r7, lr}
 8003264:	b082      	sub	sp, #8
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
 800326a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800326c:	f005 f90e 	bl	800848c <__errno>
 8003270:	4603      	mov	r3, r0
 8003272:	2216      	movs	r2, #22
 8003274:	601a      	str	r2, [r3, #0]
  return -1;
 8003276:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800327a:	4618      	mov	r0, r3
 800327c:	3708      	adds	r7, #8
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <_exit>:

void _exit (int status)
{
 8003282:	b580      	push	{r7, lr}
 8003284:	b082      	sub	sp, #8
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800328a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f7ff ffe7 	bl	8003262 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003294:	bf00      	nop
 8003296:	e7fd      	b.n	8003294 <_exit+0x12>

08003298 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b086      	sub	sp, #24
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032a4:	2300      	movs	r3, #0
 80032a6:	617b      	str	r3, [r7, #20]
 80032a8:	e00a      	b.n	80032c0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80032aa:	f3af 8000 	nop.w
 80032ae:	4601      	mov	r1, r0
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	1c5a      	adds	r2, r3, #1
 80032b4:	60ba      	str	r2, [r7, #8]
 80032b6:	b2ca      	uxtb	r2, r1
 80032b8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	3301      	adds	r3, #1
 80032be:	617b      	str	r3, [r7, #20]
 80032c0:	697a      	ldr	r2, [r7, #20]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	dbf0      	blt.n	80032aa <_read+0x12>
  }

  return len;
 80032c8:	687b      	ldr	r3, [r7, #4]
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3718      	adds	r7, #24
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b086      	sub	sp, #24
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	60f8      	str	r0, [r7, #12]
 80032da:	60b9      	str	r1, [r7, #8]
 80032dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032de:	2300      	movs	r3, #0
 80032e0:	617b      	str	r3, [r7, #20]
 80032e2:	e009      	b.n	80032f8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	1c5a      	adds	r2, r3, #1
 80032e8:	60ba      	str	r2, [r7, #8]
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	3301      	adds	r3, #1
 80032f6:	617b      	str	r3, [r7, #20]
 80032f8:	697a      	ldr	r2, [r7, #20]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	dbf1      	blt.n	80032e4 <_write+0x12>
  }
  return len;
 8003300:	687b      	ldr	r3, [r7, #4]
}
 8003302:	4618      	mov	r0, r3
 8003304:	3718      	adds	r7, #24
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}

0800330a <_close>:

int _close(int file)
{
 800330a:	b480      	push	{r7}
 800330c:	b083      	sub	sp, #12
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003312:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003316:	4618      	mov	r0, r3
 8003318:	370c      	adds	r7, #12
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr

08003322 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003322:	b480      	push	{r7}
 8003324:	b083      	sub	sp, #12
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
 800332a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003332:	605a      	str	r2, [r3, #4]
  return 0;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr

08003342 <_isatty>:

int _isatty(int file)
{
 8003342:	b480      	push	{r7}
 8003344:	b083      	sub	sp, #12
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800334a:	2301      	movs	r3, #1
}
 800334c:	4618      	mov	r0, r3
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003358:	b480      	push	{r7}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3714      	adds	r7, #20
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
	...

08003374 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b086      	sub	sp, #24
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800337c:	4a14      	ldr	r2, [pc, #80]	@ (80033d0 <_sbrk+0x5c>)
 800337e:	4b15      	ldr	r3, [pc, #84]	@ (80033d4 <_sbrk+0x60>)
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003388:	4b13      	ldr	r3, [pc, #76]	@ (80033d8 <_sbrk+0x64>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d102      	bne.n	8003396 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003390:	4b11      	ldr	r3, [pc, #68]	@ (80033d8 <_sbrk+0x64>)
 8003392:	4a12      	ldr	r2, [pc, #72]	@ (80033dc <_sbrk+0x68>)
 8003394:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003396:	4b10      	ldr	r3, [pc, #64]	@ (80033d8 <_sbrk+0x64>)
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4413      	add	r3, r2
 800339e:	693a      	ldr	r2, [r7, #16]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d207      	bcs.n	80033b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80033a4:	f005 f872 	bl	800848c <__errno>
 80033a8:	4603      	mov	r3, r0
 80033aa:	220c      	movs	r2, #12
 80033ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80033ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80033b2:	e009      	b.n	80033c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80033b4:	4b08      	ldr	r3, [pc, #32]	@ (80033d8 <_sbrk+0x64>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80033ba:	4b07      	ldr	r3, [pc, #28]	@ (80033d8 <_sbrk+0x64>)
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4413      	add	r3, r2
 80033c2:	4a05      	ldr	r2, [pc, #20]	@ (80033d8 <_sbrk+0x64>)
 80033c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80033c6:	68fb      	ldr	r3, [r7, #12]
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3718      	adds	r7, #24
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	20008000 	.word	0x20008000
 80033d4:	00000400 	.word	0x00000400
 80033d8:	200002d4 	.word	0x200002d4
 80033dc:	20000430 	.word	0x20000430

080033e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80033e0:	b480      	push	{r7}
 80033e2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80033e4:	4b06      	ldr	r3, [pc, #24]	@ (8003400 <SystemInit+0x20>)
 80033e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033ea:	4a05      	ldr	r2, [pc, #20]	@ (8003400 <SystemInit+0x20>)
 80033ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80033f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80033f4:	bf00      	nop
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	e000ed00 	.word	0xe000ed00

08003404 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003404:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800343c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003408:	f7ff ffea 	bl	80033e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800340c:	480c      	ldr	r0, [pc, #48]	@ (8003440 <LoopForever+0x6>)
  ldr r1, =_edata
 800340e:	490d      	ldr	r1, [pc, #52]	@ (8003444 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003410:	4a0d      	ldr	r2, [pc, #52]	@ (8003448 <LoopForever+0xe>)
  movs r3, #0
 8003412:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003414:	e002      	b.n	800341c <LoopCopyDataInit>

08003416 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003416:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003418:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800341a:	3304      	adds	r3, #4

0800341c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800341c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800341e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003420:	d3f9      	bcc.n	8003416 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003422:	4a0a      	ldr	r2, [pc, #40]	@ (800344c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003424:	4c0a      	ldr	r4, [pc, #40]	@ (8003450 <LoopForever+0x16>)
  movs r3, #0
 8003426:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003428:	e001      	b.n	800342e <LoopFillZerobss>

0800342a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800342a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800342c:	3204      	adds	r2, #4

0800342e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800342e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003430:	d3fb      	bcc.n	800342a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003432:	f005 f831 	bl	8008498 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003436:	f7fd fc7b 	bl	8000d30 <main>

0800343a <LoopForever>:

LoopForever:
    b LoopForever
 800343a:	e7fe      	b.n	800343a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800343c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003440:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003444:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8003448:	08009528 	.word	0x08009528
  ldr r2, =_sbss
 800344c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8003450:	2000042c 	.word	0x2000042c

08003454 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003454:	e7fe      	b.n	8003454 <ADC1_2_IRQHandler>

08003456 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b082      	sub	sp, #8
 800345a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800345c:	2300      	movs	r3, #0
 800345e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003460:	2003      	movs	r0, #3
 8003462:	f001 fd2b 	bl	8004ebc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003466:	200f      	movs	r0, #15
 8003468:	f000 f80e 	bl	8003488 <HAL_InitTick>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d002      	beq.n	8003478 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	71fb      	strb	r3, [r7, #7]
 8003476:	e001      	b.n	800347c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003478:	f7ff fd0a 	bl	8002e90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800347c:	79fb      	ldrb	r3, [r7, #7]
}
 800347e:	4618      	mov	r0, r3
 8003480:	3708      	adds	r7, #8
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
	...

08003488 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003490:	2300      	movs	r3, #0
 8003492:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003494:	4b17      	ldr	r3, [pc, #92]	@ (80034f4 <HAL_InitTick+0x6c>)
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d023      	beq.n	80034e4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800349c:	4b16      	ldr	r3, [pc, #88]	@ (80034f8 <HAL_InitTick+0x70>)
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	4b14      	ldr	r3, [pc, #80]	@ (80034f4 <HAL_InitTick+0x6c>)
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	4619      	mov	r1, r3
 80034a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80034aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80034ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b2:	4618      	mov	r0, r3
 80034b4:	f001 fd37 	bl	8004f26 <HAL_SYSTICK_Config>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d10f      	bne.n	80034de <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2b0f      	cmp	r3, #15
 80034c2:	d809      	bhi.n	80034d8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034c4:	2200      	movs	r2, #0
 80034c6:	6879      	ldr	r1, [r7, #4]
 80034c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80034cc:	f001 fd01 	bl	8004ed2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80034d0:	4a0a      	ldr	r2, [pc, #40]	@ (80034fc <HAL_InitTick+0x74>)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6013      	str	r3, [r2, #0]
 80034d6:	e007      	b.n	80034e8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	73fb      	strb	r3, [r7, #15]
 80034dc:	e004      	b.n	80034e8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	73fb      	strb	r3, [r7, #15]
 80034e2:	e001      	b.n	80034e8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80034e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3710      	adds	r7, #16
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	20000028 	.word	0x20000028
 80034f8:	20000020 	.word	0x20000020
 80034fc:	20000024 	.word	0x20000024

08003500 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003504:	4b06      	ldr	r3, [pc, #24]	@ (8003520 <HAL_IncTick+0x20>)
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	461a      	mov	r2, r3
 800350a:	4b06      	ldr	r3, [pc, #24]	@ (8003524 <HAL_IncTick+0x24>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4413      	add	r3, r2
 8003510:	4a04      	ldr	r2, [pc, #16]	@ (8003524 <HAL_IncTick+0x24>)
 8003512:	6013      	str	r3, [r2, #0]
}
 8003514:	bf00      	nop
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	20000028 	.word	0x20000028
 8003524:	200002d8 	.word	0x200002d8

08003528 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0
  return uwTick;
 800352c:	4b03      	ldr	r3, [pc, #12]	@ (800353c <HAL_GetTick+0x14>)
 800352e:	681b      	ldr	r3, [r3, #0]
}
 8003530:	4618      	mov	r0, r3
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	200002d8 	.word	0x200002d8

08003540 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003548:	f7ff ffee 	bl	8003528 <HAL_GetTick>
 800354c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003558:	d005      	beq.n	8003566 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800355a:	4b0a      	ldr	r3, [pc, #40]	@ (8003584 <HAL_Delay+0x44>)
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	461a      	mov	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	4413      	add	r3, r2
 8003564:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003566:	bf00      	nop
 8003568:	f7ff ffde 	bl	8003528 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	429a      	cmp	r2, r3
 8003576:	d8f7      	bhi.n	8003568 <HAL_Delay+0x28>
  {
  }
}
 8003578:	bf00      	nop
 800357a:	bf00      	nop
 800357c:	3710      	adds	r7, #16
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	20000028 	.word	0x20000028

08003588 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	431a      	orrs	r2, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	609a      	str	r2, [r3, #8]
}
 80035a2:	bf00      	nop
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr

080035ae <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80035ae:	b480      	push	{r7}
 80035b0:	b083      	sub	sp, #12
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
 80035b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	431a      	orrs	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	609a      	str	r2, [r3, #8]
}
 80035c8:	bf00      	nop
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b087      	sub	sp, #28
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	607a      	str	r2, [r7, #4]
 80035fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	3360      	adds	r3, #96	@ 0x60
 8003602:	461a      	mov	r2, r3
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	4413      	add	r3, r2
 800360a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	4b08      	ldr	r3, [pc, #32]	@ (8003634 <LL_ADC_SetOffset+0x44>)
 8003612:	4013      	ands	r3, r2
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800361a:	683a      	ldr	r2, [r7, #0]
 800361c:	430a      	orrs	r2, r1
 800361e:	4313      	orrs	r3, r2
 8003620:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003628:	bf00      	nop
 800362a:	371c      	adds	r7, #28
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr
 8003634:	03fff000 	.word	0x03fff000

08003638 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003638:	b480      	push	{r7}
 800363a:	b085      	sub	sp, #20
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	3360      	adds	r3, #96	@ 0x60
 8003646:	461a      	mov	r2, r3
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	4413      	add	r3, r2
 800364e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003658:	4618      	mov	r0, r3
 800365a:	3714      	adds	r7, #20
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003664:	b480      	push	{r7}
 8003666:	b087      	sub	sp, #28
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	3360      	adds	r3, #96	@ 0x60
 8003674:	461a      	mov	r2, r3
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	4413      	add	r3, r2
 800367c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	431a      	orrs	r2, r3
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800368e:	bf00      	nop
 8003690:	371c      	adds	r7, #28
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr

0800369a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800369a:	b480      	push	{r7}
 800369c:	b083      	sub	sp, #12
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
 80036a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	695b      	ldr	r3, [r3, #20]
 80036a8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	431a      	orrs	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	615a      	str	r2, [r3, #20]
}
 80036b4:	bf00      	nop
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d101      	bne.n	80036d8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80036d4:	2301      	movs	r3, #1
 80036d6:	e000      	b.n	80036da <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	370c      	adds	r7, #12
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr

080036e6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80036e6:	b480      	push	{r7}
 80036e8:	b087      	sub	sp, #28
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	60f8      	str	r0, [r7, #12]
 80036ee:	60b9      	str	r1, [r7, #8]
 80036f0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	3330      	adds	r3, #48	@ 0x30
 80036f6:	461a      	mov	r2, r3
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	0a1b      	lsrs	r3, r3, #8
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	f003 030c 	and.w	r3, r3, #12
 8003702:	4413      	add	r3, r2
 8003704:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	f003 031f 	and.w	r3, r3, #31
 8003710:	211f      	movs	r1, #31
 8003712:	fa01 f303 	lsl.w	r3, r1, r3
 8003716:	43db      	mvns	r3, r3
 8003718:	401a      	ands	r2, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	0e9b      	lsrs	r3, r3, #26
 800371e:	f003 011f 	and.w	r1, r3, #31
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	f003 031f 	and.w	r3, r3, #31
 8003728:	fa01 f303 	lsl.w	r3, r1, r3
 800372c:	431a      	orrs	r2, r3
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003732:	bf00      	nop
 8003734:	371c      	adds	r7, #28
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr

0800373e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800373e:	b480      	push	{r7}
 8003740:	b087      	sub	sp, #28
 8003742:	af00      	add	r7, sp, #0
 8003744:	60f8      	str	r0, [r7, #12]
 8003746:	60b9      	str	r1, [r7, #8]
 8003748:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	3314      	adds	r3, #20
 800374e:	461a      	mov	r2, r3
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	0e5b      	lsrs	r3, r3, #25
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	f003 0304 	and.w	r3, r3, #4
 800375a:	4413      	add	r3, r2
 800375c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	0d1b      	lsrs	r3, r3, #20
 8003766:	f003 031f 	and.w	r3, r3, #31
 800376a:	2107      	movs	r1, #7
 800376c:	fa01 f303 	lsl.w	r3, r1, r3
 8003770:	43db      	mvns	r3, r3
 8003772:	401a      	ands	r2, r3
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	0d1b      	lsrs	r3, r3, #20
 8003778:	f003 031f 	and.w	r3, r3, #31
 800377c:	6879      	ldr	r1, [r7, #4]
 800377e:	fa01 f303 	lsl.w	r3, r1, r3
 8003782:	431a      	orrs	r2, r3
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003788:	bf00      	nop
 800378a:	371c      	adds	r7, #28
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003794:	b480      	push	{r7}
 8003796:	b085      	sub	sp, #20
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037ac:	43db      	mvns	r3, r3
 80037ae:	401a      	ands	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f003 0318 	and.w	r3, r3, #24
 80037b6:	4908      	ldr	r1, [pc, #32]	@ (80037d8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80037b8:	40d9      	lsrs	r1, r3
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	400b      	ands	r3, r1
 80037be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037c2:	431a      	orrs	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80037ca:	bf00      	nop
 80037cc:	3714      	adds	r7, #20
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	0007ffff 	.word	0x0007ffff

080037dc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f003 031f 	and.w	r3, r3, #31
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8003808:	4618      	mov	r0, r3
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003824:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	6093      	str	r3, [r2, #8]
}
 800382c:	bf00      	nop
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003848:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800384c:	d101      	bne.n	8003852 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800384e:	2301      	movs	r3, #1
 8003850:	e000      	b.n	8003854 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003852:	2300      	movs	r3, #0
}
 8003854:	4618      	mov	r0, r3
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003870:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003874:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800387c:	bf00      	nop
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003898:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800389c:	d101      	bne.n	80038a2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800389e:	2301      	movs	r3, #1
 80038a0:	e000      	b.n	80038a4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80038c0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80038c4:	f043 0201 	orr.w	r2, r3, #1
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80038cc:	bf00      	nop
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80038e8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80038ec:	f043 0202 	orr.w	r2, r3, #2
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80038f4:	bf00      	nop
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f003 0301 	and.w	r3, r3, #1
 8003910:	2b01      	cmp	r3, #1
 8003912:	d101      	bne.n	8003918 <LL_ADC_IsEnabled+0x18>
 8003914:	2301      	movs	r3, #1
 8003916:	e000      	b.n	800391a <LL_ADC_IsEnabled+0x1a>
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	370c      	adds	r7, #12
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr

08003926 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8003926:	b480      	push	{r7}
 8003928:	b083      	sub	sp, #12
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b02      	cmp	r3, #2
 8003938:	d101      	bne.n	800393e <LL_ADC_IsDisableOngoing+0x18>
 800393a:	2301      	movs	r3, #1
 800393c:	e000      	b.n	8003940 <LL_ADC_IsDisableOngoing+0x1a>
 800393e:	2300      	movs	r3, #0
}
 8003940:	4618      	mov	r0, r3
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800395c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003960:	f043 0204 	orr.w	r2, r3, #4
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003984:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003988:	f043 0210 	orr.w	r2, r3, #16
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003990:	bf00      	nop
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f003 0304 	and.w	r3, r3, #4
 80039ac:	2b04      	cmp	r3, #4
 80039ae:	d101      	bne.n	80039b4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80039b0:	2301      	movs	r3, #1
 80039b2:	e000      	b.n	80039b6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	370c      	adds	r7, #12
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr

080039c2 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80039c2:	b480      	push	{r7}
 80039c4:	b083      	sub	sp, #12
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80039d2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80039d6:	f043 0220 	orr.w	r2, r3, #32
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80039de:	bf00      	nop
 80039e0:	370c      	adds	r7, #12
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr

080039ea <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80039ea:	b480      	push	{r7}
 80039ec:	b083      	sub	sp, #12
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f003 0308 	and.w	r3, r3, #8
 80039fa:	2b08      	cmp	r3, #8
 80039fc:	d101      	bne.n	8003a02 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80039fe:	2301      	movs	r3, #1
 8003a00:	e000      	b.n	8003a04 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003a02:	2300      	movs	r3, #0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003a10:	b590      	push	{r4, r7, lr}
 8003a12:	b089      	sub	sp, #36	@ 0x24
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e12b      	b.n	8003c82 <HAL_ADC_Init+0x272>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d109      	bne.n	8003a4c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f7ff fa4d 	bl	8002ed8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7ff fef1 	bl	8003838 <LL_ADC_IsDeepPowerDownEnabled>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d004      	beq.n	8003a66 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7ff fed7 	bl	8003814 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7ff ff0c 	bl	8003888 <LL_ADC_IsInternalRegulatorEnabled>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d115      	bne.n	8003aa2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7ff fef0 	bl	8003860 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a80:	4b82      	ldr	r3, [pc, #520]	@ (8003c8c <HAL_ADC_Init+0x27c>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	099b      	lsrs	r3, r3, #6
 8003a86:	4a82      	ldr	r2, [pc, #520]	@ (8003c90 <HAL_ADC_Init+0x280>)
 8003a88:	fba2 2303 	umull	r2, r3, r2, r3
 8003a8c:	099b      	lsrs	r3, r3, #6
 8003a8e:	3301      	adds	r3, #1
 8003a90:	005b      	lsls	r3, r3, #1
 8003a92:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003a94:	e002      	b.n	8003a9c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1f9      	bne.n	8003a96 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7ff feee 	bl	8003888 <LL_ADC_IsInternalRegulatorEnabled>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d10d      	bne.n	8003ace <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ab6:	f043 0210 	orr.w	r2, r3, #16
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ac2:	f043 0201 	orr.w	r2, r3, #1
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7ff ff62 	bl	800399c <LL_ADC_REG_IsConversionOngoing>
 8003ad8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ade:	f003 0310 	and.w	r3, r3, #16
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	f040 80c4 	bne.w	8003c70 <HAL_ADC_Init+0x260>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	f040 80c0 	bne.w	8003c70 <HAL_ADC_Init+0x260>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003af4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003af8:	f043 0202 	orr.w	r2, r3, #2
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7ff fefb 	bl	8003900 <LL_ADC_IsEnabled>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d110      	bne.n	8003b32 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b10:	4860      	ldr	r0, [pc, #384]	@ (8003c94 <HAL_ADC_Init+0x284>)
 8003b12:	f7ff fef5 	bl	8003900 <LL_ADC_IsEnabled>
 8003b16:	4604      	mov	r4, r0
 8003b18:	485f      	ldr	r0, [pc, #380]	@ (8003c98 <HAL_ADC_Init+0x288>)
 8003b1a:	f7ff fef1 	bl	8003900 <LL_ADC_IsEnabled>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	4323      	orrs	r3, r4
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d105      	bne.n	8003b32 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	485b      	ldr	r0, [pc, #364]	@ (8003c9c <HAL_ADC_Init+0x28c>)
 8003b2e:	f7ff fd2b 	bl	8003588 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	7e5b      	ldrb	r3, [r3, #25]
 8003b36:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003b3c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003b42:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003b48:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b50:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003b52:	4313      	orrs	r3, r2
 8003b54:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d106      	bne.n	8003b6e <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b64:	3b01      	subs	r3, #1
 8003b66:	045b      	lsls	r3, r3, #17
 8003b68:	69ba      	ldr	r2, [r7, #24]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d009      	beq.n	8003b8a <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b7a:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b82:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003b84:	69ba      	ldr	r2, [r7, #24]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68da      	ldr	r2, [r3, #12]
 8003b90:	4b43      	ldr	r3, [pc, #268]	@ (8003ca0 <HAL_ADC_Init+0x290>)
 8003b92:	4013      	ands	r3, r2
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	6812      	ldr	r2, [r2, #0]
 8003b98:	69b9      	ldr	r1, [r7, #24]
 8003b9a:	430b      	orrs	r3, r1
 8003b9c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7ff ff21 	bl	80039ea <LL_ADC_INJ_IsConversionOngoing>
 8003ba8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d13d      	bne.n	8003c2c <HAL_ADC_Init+0x21c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d13a      	bne.n	8003c2c <HAL_ADC_Init+0x21c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003bba:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003bc2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003bd2:	f023 0302 	bic.w	r3, r3, #2
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	6812      	ldr	r2, [r2, #0]
 8003bda:	69b9      	ldr	r1, [r7, #24]
 8003bdc:	430b      	orrs	r3, r1
 8003bde:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d118      	bne.n	8003c1c <HAL_ADC_Init+0x20c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	691b      	ldr	r3, [r3, #16]
 8003bf0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003bf4:	f023 0304 	bic.w	r3, r3, #4
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003c00:	4311      	orrs	r1, r2
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003c06:	4311      	orrs	r1, r2
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003c0c:	430a      	orrs	r2, r1
 8003c0e:	431a      	orrs	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f042 0201 	orr.w	r2, r2, #1
 8003c18:	611a      	str	r2, [r3, #16]
 8003c1a:	e007      	b.n	8003c2c <HAL_ADC_Init+0x21c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	691a      	ldr	r2, [r3, #16]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f022 0201 	bic.w	r2, r2, #1
 8003c2a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	691b      	ldr	r3, [r3, #16]
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d10c      	bne.n	8003c4e <HAL_ADC_Init+0x23e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c3a:	f023 010f 	bic.w	r1, r3, #15
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	69db      	ldr	r3, [r3, #28]
 8003c42:	1e5a      	subs	r2, r3, #1
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	430a      	orrs	r2, r1
 8003c4a:	631a      	str	r2, [r3, #48]	@ 0x30
 8003c4c:	e007      	b.n	8003c5e <HAL_ADC_Init+0x24e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f022 020f 	bic.w	r2, r2, #15
 8003c5c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c62:	f023 0303 	bic.w	r3, r3, #3
 8003c66:	f043 0201 	orr.w	r2, r3, #1
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	655a      	str	r2, [r3, #84]	@ 0x54
 8003c6e:	e007      	b.n	8003c80 <HAL_ADC_Init+0x270>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c74:	f043 0210 	orr.w	r2, r3, #16
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003c80:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3724      	adds	r7, #36	@ 0x24
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd90      	pop	{r4, r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	20000020 	.word	0x20000020
 8003c90:	053e2d63 	.word	0x053e2d63
 8003c94:	50040000 	.word	0x50040000
 8003c98:	50040100 	.word	0x50040100
 8003c9c:	50040300 	.word	0x50040300
 8003ca0:	fff0c007 	.word	0xfff0c007

08003ca4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b086      	sub	sp, #24
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003cac:	4857      	ldr	r0, [pc, #348]	@ (8003e0c <HAL_ADC_Start+0x168>)
 8003cae:	f7ff fd95 	bl	80037dc <LL_ADC_GetMultimode>
 8003cb2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7ff fe6f 	bl	800399c <LL_ADC_REG_IsConversionOngoing>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	f040 809c 	bne.w	8003dfe <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d101      	bne.n	8003cd4 <HAL_ADC_Start+0x30>
 8003cd0:	2302      	movs	r3, #2
 8003cd2:	e097      	b.n	8003e04 <HAL_ADC_Start+0x160>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f000 fe6d 	bl	80049bc <ADC_Enable>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003ce6:	7dfb      	ldrb	r3, [r7, #23]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f040 8083 	bne.w	8003df4 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cf2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003cf6:	f023 0301 	bic.w	r3, r3, #1
 8003cfa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a42      	ldr	r2, [pc, #264]	@ (8003e10 <HAL_ADC_Start+0x16c>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d002      	beq.n	8003d12 <HAL_ADC_Start+0x6e>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	e000      	b.n	8003d14 <HAL_ADC_Start+0x70>
 8003d12:	4b40      	ldr	r3, [pc, #256]	@ (8003e14 <HAL_ADC_Start+0x170>)
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	6812      	ldr	r2, [r2, #0]
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d002      	beq.n	8003d22 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d105      	bne.n	8003d2e <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d26:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d32:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d3a:	d106      	bne.n	8003d4a <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d40:	f023 0206 	bic.w	r2, r3, #6
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	659a      	str	r2, [r3, #88]	@ 0x58
 8003d48:	e002      	b.n	8003d50 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	221c      	movs	r2, #28
 8003d56:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a2a      	ldr	r2, [pc, #168]	@ (8003e10 <HAL_ADC_Start+0x16c>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d002      	beq.n	8003d70 <HAL_ADC_Start+0xcc>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	e000      	b.n	8003d72 <HAL_ADC_Start+0xce>
 8003d70:	4b28      	ldr	r3, [pc, #160]	@ (8003e14 <HAL_ADC_Start+0x170>)
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	6812      	ldr	r2, [r2, #0]
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d008      	beq.n	8003d8c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d005      	beq.n	8003d8c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	2b05      	cmp	r3, #5
 8003d84:	d002      	beq.n	8003d8c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	2b09      	cmp	r3, #9
 8003d8a:	d114      	bne.n	8003db6 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d007      	beq.n	8003daa <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d9e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003da2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7ff fdcc 	bl	800394c <LL_ADC_REG_StartConversion>
 8003db4:	e025      	b.n	8003e02 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dba:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a12      	ldr	r2, [pc, #72]	@ (8003e10 <HAL_ADC_Start+0x16c>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d002      	beq.n	8003dd2 <HAL_ADC_Start+0x12e>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	e000      	b.n	8003dd4 <HAL_ADC_Start+0x130>
 8003dd2:	4b10      	ldr	r3, [pc, #64]	@ (8003e14 <HAL_ADC_Start+0x170>)
 8003dd4:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d00f      	beq.n	8003e02 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003de6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003dea:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	655a      	str	r2, [r3, #84]	@ 0x54
 8003df2:	e006      	b.n	8003e02 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8003dfc:	e001      	b.n	8003e02 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003dfe:	2302      	movs	r3, #2
 8003e00:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003e02:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3718      	adds	r7, #24
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	50040300 	.word	0x50040300
 8003e10:	50040100 	.word	0x50040100
 8003e14:	50040000 	.word	0x50040000

08003e18 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d101      	bne.n	8003e2e <HAL_ADC_Stop+0x16>
 8003e2a:	2302      	movs	r3, #2
 8003e2c:	e023      	b.n	8003e76 <HAL_ADC_Stop+0x5e>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2201      	movs	r2, #1
 8003e32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003e36:	2103      	movs	r1, #3
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 fd03 	bl	8004844 <ADC_ConversionStop>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003e42:	7bfb      	ldrb	r3, [r7, #15]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d111      	bne.n	8003e6c <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f000 fe3d 	bl	8004ac8 <ADC_Disable>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003e52:	7bfb      	ldrb	r3, [r7, #15]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d109      	bne.n	8003e6c <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e5c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003e60:	f023 0301 	bic.w	r3, r3, #1
 8003e64:	f043 0201 	orr.w	r2, r3, #1
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3710      	adds	r7, #16
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
	...

08003e80 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b088      	sub	sp, #32
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e8a:	4866      	ldr	r0, [pc, #408]	@ (8004024 <HAL_ADC_PollForConversion+0x1a4>)
 8003e8c:	f7ff fca6 	bl	80037dc <LL_ADC_GetMultimode>
 8003e90:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	2b08      	cmp	r3, #8
 8003e98:	d102      	bne.n	8003ea0 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003e9a:	2308      	movs	r3, #8
 8003e9c:	61fb      	str	r3, [r7, #28]
 8003e9e:	e02a      	b.n	8003ef6 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d005      	beq.n	8003eb2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	2b05      	cmp	r3, #5
 8003eaa:	d002      	beq.n	8003eb2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	2b09      	cmp	r3, #9
 8003eb0:	d111      	bne.n	8003ed6 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	f003 0301 	and.w	r3, r3, #1
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d007      	beq.n	8003ed0 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ec4:	f043 0220 	orr.w	r2, r3, #32
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e0a4      	b.n	800401a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003ed0:	2304      	movs	r3, #4
 8003ed2:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003ed4:	e00f      	b.n	8003ef6 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003ed6:	4853      	ldr	r0, [pc, #332]	@ (8004024 <HAL_ADC_PollForConversion+0x1a4>)
 8003ed8:	f7ff fc8e 	bl	80037f8 <LL_ADC_GetMultiDMATransfer>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d007      	beq.n	8003ef2 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ee6:	f043 0220 	orr.w	r2, r3, #32
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e093      	b.n	800401a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003ef2:	2304      	movs	r3, #4
 8003ef4:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003ef6:	f7ff fb17 	bl	8003528 <HAL_GetTick>
 8003efa:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003efc:	e021      	b.n	8003f42 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f04:	d01d      	beq.n	8003f42 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003f06:	f7ff fb0f 	bl	8003528 <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	683a      	ldr	r2, [r7, #0]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d302      	bcc.n	8003f1c <HAL_ADC_PollForConversion+0x9c>
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d112      	bne.n	8003f42 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	4013      	ands	r3, r2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d10b      	bne.n	8003f42 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f2e:	f043 0204 	orr.w	r2, r3, #4
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e06b      	b.n	800401a <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d0d6      	beq.n	8003efe <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f54:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7ff fbad 	bl	80036c0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d01c      	beq.n	8003fa6 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	7e5b      	ldrb	r3, [r3, #25]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d118      	bne.n	8003fa6 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0308 	and.w	r3, r3, #8
 8003f7e:	2b08      	cmp	r3, #8
 8003f80:	d111      	bne.n	8003fa6 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f86:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f92:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d105      	bne.n	8003fa6 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f9e:	f043 0201 	orr.w	r2, r3, #1
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a1f      	ldr	r2, [pc, #124]	@ (8004028 <HAL_ADC_PollForConversion+0x1a8>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d002      	beq.n	8003fb6 <HAL_ADC_PollForConversion+0x136>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	e000      	b.n	8003fb8 <HAL_ADC_PollForConversion+0x138>
 8003fb6:	4b1d      	ldr	r3, [pc, #116]	@ (800402c <HAL_ADC_PollForConversion+0x1ac>)
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	6812      	ldr	r2, [r2, #0]
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d008      	beq.n	8003fd2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d005      	beq.n	8003fd2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	2b05      	cmp	r3, #5
 8003fca:	d002      	beq.n	8003fd2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	2b09      	cmp	r3, #9
 8003fd0:	d104      	bne.n	8003fdc <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	61bb      	str	r3, [r7, #24]
 8003fda:	e00c      	b.n	8003ff6 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a11      	ldr	r2, [pc, #68]	@ (8004028 <HAL_ADC_PollForConversion+0x1a8>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d002      	beq.n	8003fec <HAL_ADC_PollForConversion+0x16c>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	e000      	b.n	8003fee <HAL_ADC_PollForConversion+0x16e>
 8003fec:	4b0f      	ldr	r3, [pc, #60]	@ (800402c <HAL_ADC_PollForConversion+0x1ac>)
 8003fee:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	2b08      	cmp	r3, #8
 8003ffa:	d104      	bne.n	8004006 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2208      	movs	r2, #8
 8004002:	601a      	str	r2, [r3, #0]
 8004004:	e008      	b.n	8004018 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d103      	bne.n	8004018 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	220c      	movs	r2, #12
 8004016:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3720      	adds	r7, #32
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	50040300 	.word	0x50040300
 8004028:	50040100 	.word	0x50040100
 800402c:	50040000 	.word	0x50040000

08004030 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800403e:	4618      	mov	r0, r3
 8004040:	370c      	adds	r7, #12
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
	...

0800404c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b0b6      	sub	sp, #216	@ 0xd8
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004056:	2300      	movs	r3, #0
 8004058:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800405c:	2300      	movs	r3, #0
 800405e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004066:	2b01      	cmp	r3, #1
 8004068:	d101      	bne.n	800406e <HAL_ADC_ConfigChannel+0x22>
 800406a:	2302      	movs	r3, #2
 800406c:	e3d5      	b.n	800481a <HAL_ADC_ConfigChannel+0x7ce>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2201      	movs	r2, #1
 8004072:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4618      	mov	r0, r3
 800407c:	f7ff fc8e 	bl	800399c <LL_ADC_REG_IsConversionOngoing>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	f040 83ba 	bne.w	80047fc <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	2b05      	cmp	r3, #5
 8004096:	d824      	bhi.n	80040e2 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	3b02      	subs	r3, #2
 800409e:	2b03      	cmp	r3, #3
 80040a0:	d81b      	bhi.n	80040da <HAL_ADC_ConfigChannel+0x8e>
 80040a2:	a201      	add	r2, pc, #4	@ (adr r2, 80040a8 <HAL_ADC_ConfigChannel+0x5c>)
 80040a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a8:	080040b9 	.word	0x080040b9
 80040ac:	080040c1 	.word	0x080040c1
 80040b0:	080040c9 	.word	0x080040c9
 80040b4:	080040d1 	.word	0x080040d1
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80040b8:	230c      	movs	r3, #12
 80040ba:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80040be:	e010      	b.n	80040e2 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80040c0:	2312      	movs	r3, #18
 80040c2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80040c6:	e00c      	b.n	80040e2 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80040c8:	2318      	movs	r3, #24
 80040ca:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80040ce:	e008      	b.n	80040e2 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80040d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80040d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80040d8:	e003      	b.n	80040e2 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80040da:	2306      	movs	r3, #6
 80040dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80040e0:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6818      	ldr	r0, [r3, #0]
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	461a      	mov	r2, r3
 80040ec:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80040f0:	f7ff faf9 	bl	80036e6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7ff fc4f 	bl	800399c <LL_ADC_REG_IsConversionOngoing>
 80040fe:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4618      	mov	r0, r3
 8004108:	f7ff fc6f 	bl	80039ea <LL_ADC_INJ_IsConversionOngoing>
 800410c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004110:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004114:	2b00      	cmp	r3, #0
 8004116:	f040 81bf 	bne.w	8004498 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800411a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800411e:	2b00      	cmp	r3, #0
 8004120:	f040 81ba 	bne.w	8004498 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800412c:	d10f      	bne.n	800414e <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6818      	ldr	r0, [r3, #0]
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2200      	movs	r2, #0
 8004138:	4619      	mov	r1, r3
 800413a:	f7ff fb00 	bl	800373e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004146:	4618      	mov	r0, r3
 8004148:	f7ff faa7 	bl	800369a <LL_ADC_SetSamplingTimeCommonConfig>
 800414c:	e00e      	b.n	800416c <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6818      	ldr	r0, [r3, #0]
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	6819      	ldr	r1, [r3, #0]
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	461a      	mov	r2, r3
 800415c:	f7ff faef 	bl	800373e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2100      	movs	r1, #0
 8004166:	4618      	mov	r0, r3
 8004168:	f7ff fa97 	bl	800369a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	695a      	ldr	r2, [r3, #20]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	08db      	lsrs	r3, r3, #3
 8004178:	f003 0303 	and.w	r3, r3, #3
 800417c:	005b      	lsls	r3, r3, #1
 800417e:	fa02 f303 	lsl.w	r3, r2, r3
 8004182:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	2b04      	cmp	r3, #4
 800418c:	d00a      	beq.n	80041a4 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6818      	ldr	r0, [r3, #0]
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	6919      	ldr	r1, [r3, #16]
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800419e:	f7ff fa27 	bl	80035f0 <LL_ADC_SetOffset>
 80041a2:	e179      	b.n	8004498 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2100      	movs	r1, #0
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7ff fa44 	bl	8003638 <LL_ADC_GetOffsetChannel>
 80041b0:	4603      	mov	r3, r0
 80041b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d10a      	bne.n	80041d0 <HAL_ADC_ConfigChannel+0x184>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2100      	movs	r1, #0
 80041c0:	4618      	mov	r0, r3
 80041c2:	f7ff fa39 	bl	8003638 <LL_ADC_GetOffsetChannel>
 80041c6:	4603      	mov	r3, r0
 80041c8:	0e9b      	lsrs	r3, r3, #26
 80041ca:	f003 021f 	and.w	r2, r3, #31
 80041ce:	e01e      	b.n	800420e <HAL_ADC_ConfigChannel+0x1c2>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2100      	movs	r1, #0
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7ff fa2e 	bl	8003638 <LL_ADC_GetOffsetChannel>
 80041dc:	4603      	mov	r3, r0
 80041de:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80041e6:	fa93 f3a3 	rbit	r3, r3
 80041ea:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80041ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80041f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80041f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d101      	bne.n	8004202 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 80041fe:	2320      	movs	r3, #32
 8004200:	e004      	b.n	800420c <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8004202:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004206:	fab3 f383 	clz	r3, r3
 800420a:	b2db      	uxtb	r3, r3
 800420c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004216:	2b00      	cmp	r3, #0
 8004218:	d105      	bne.n	8004226 <HAL_ADC_ConfigChannel+0x1da>
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	0e9b      	lsrs	r3, r3, #26
 8004220:	f003 031f 	and.w	r3, r3, #31
 8004224:	e018      	b.n	8004258 <HAL_ADC_ConfigChannel+0x20c>
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800422e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004232:	fa93 f3a3 	rbit	r3, r3
 8004236:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800423a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800423e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8004242:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d101      	bne.n	800424e <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 800424a:	2320      	movs	r3, #32
 800424c:	e004      	b.n	8004258 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 800424e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004252:	fab3 f383 	clz	r3, r3
 8004256:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004258:	429a      	cmp	r2, r3
 800425a:	d106      	bne.n	800426a <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2200      	movs	r2, #0
 8004262:	2100      	movs	r1, #0
 8004264:	4618      	mov	r0, r3
 8004266:	f7ff f9fd 	bl	8003664 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2101      	movs	r1, #1
 8004270:	4618      	mov	r0, r3
 8004272:	f7ff f9e1 	bl	8003638 <LL_ADC_GetOffsetChannel>
 8004276:	4603      	mov	r3, r0
 8004278:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800427c:	2b00      	cmp	r3, #0
 800427e:	d10a      	bne.n	8004296 <HAL_ADC_ConfigChannel+0x24a>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2101      	movs	r1, #1
 8004286:	4618      	mov	r0, r3
 8004288:	f7ff f9d6 	bl	8003638 <LL_ADC_GetOffsetChannel>
 800428c:	4603      	mov	r3, r0
 800428e:	0e9b      	lsrs	r3, r3, #26
 8004290:	f003 021f 	and.w	r2, r3, #31
 8004294:	e01e      	b.n	80042d4 <HAL_ADC_ConfigChannel+0x288>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2101      	movs	r1, #1
 800429c:	4618      	mov	r0, r3
 800429e:	f7ff f9cb 	bl	8003638 <LL_ADC_GetOffsetChannel>
 80042a2:	4603      	mov	r3, r0
 80042a4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80042ac:	fa93 f3a3 	rbit	r3, r3
 80042b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80042b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80042b8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80042bc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d101      	bne.n	80042c8 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 80042c4:	2320      	movs	r3, #32
 80042c6:	e004      	b.n	80042d2 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 80042c8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80042cc:	fab3 f383 	clz	r3, r3
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d105      	bne.n	80042ec <HAL_ADC_ConfigChannel+0x2a0>
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	0e9b      	lsrs	r3, r3, #26
 80042e6:	f003 031f 	and.w	r3, r3, #31
 80042ea:	e018      	b.n	800431e <HAL_ADC_ConfigChannel+0x2d2>
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80042f8:	fa93 f3a3 	rbit	r3, r3
 80042fc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8004300:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004304:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8004308:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800430c:	2b00      	cmp	r3, #0
 800430e:	d101      	bne.n	8004314 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8004310:	2320      	movs	r3, #32
 8004312:	e004      	b.n	800431e <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8004314:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004318:	fab3 f383 	clz	r3, r3
 800431c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800431e:	429a      	cmp	r2, r3
 8004320:	d106      	bne.n	8004330 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2200      	movs	r2, #0
 8004328:	2101      	movs	r1, #1
 800432a:	4618      	mov	r0, r3
 800432c:	f7ff f99a 	bl	8003664 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2102      	movs	r1, #2
 8004336:	4618      	mov	r0, r3
 8004338:	f7ff f97e 	bl	8003638 <LL_ADC_GetOffsetChannel>
 800433c:	4603      	mov	r3, r0
 800433e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004342:	2b00      	cmp	r3, #0
 8004344:	d10a      	bne.n	800435c <HAL_ADC_ConfigChannel+0x310>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2102      	movs	r1, #2
 800434c:	4618      	mov	r0, r3
 800434e:	f7ff f973 	bl	8003638 <LL_ADC_GetOffsetChannel>
 8004352:	4603      	mov	r3, r0
 8004354:	0e9b      	lsrs	r3, r3, #26
 8004356:	f003 021f 	and.w	r2, r3, #31
 800435a:	e01e      	b.n	800439a <HAL_ADC_ConfigChannel+0x34e>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2102      	movs	r1, #2
 8004362:	4618      	mov	r0, r3
 8004364:	f7ff f968 	bl	8003638 <LL_ADC_GetOffsetChannel>
 8004368:	4603      	mov	r3, r0
 800436a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800436e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004372:	fa93 f3a3 	rbit	r3, r3
 8004376:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800437a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800437e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8004382:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 800438a:	2320      	movs	r3, #32
 800438c:	e004      	b.n	8004398 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 800438e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004392:	fab3 f383 	clz	r3, r3
 8004396:	b2db      	uxtb	r3, r3
 8004398:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d105      	bne.n	80043b2 <HAL_ADC_ConfigChannel+0x366>
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	0e9b      	lsrs	r3, r3, #26
 80043ac:	f003 031f 	and.w	r3, r3, #31
 80043b0:	e014      	b.n	80043dc <HAL_ADC_ConfigChannel+0x390>
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043b8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80043ba:	fa93 f3a3 	rbit	r3, r3
 80043be:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80043c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80043c2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80043c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d101      	bne.n	80043d2 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 80043ce:	2320      	movs	r3, #32
 80043d0:	e004      	b.n	80043dc <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 80043d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80043d6:	fab3 f383 	clz	r3, r3
 80043da:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80043dc:	429a      	cmp	r2, r3
 80043de:	d106      	bne.n	80043ee <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2200      	movs	r2, #0
 80043e6:	2102      	movs	r1, #2
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7ff f93b 	bl	8003664 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2103      	movs	r1, #3
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7ff f91f 	bl	8003638 <LL_ADC_GetOffsetChannel>
 80043fa:	4603      	mov	r3, r0
 80043fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004400:	2b00      	cmp	r3, #0
 8004402:	d10a      	bne.n	800441a <HAL_ADC_ConfigChannel+0x3ce>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2103      	movs	r1, #3
 800440a:	4618      	mov	r0, r3
 800440c:	f7ff f914 	bl	8003638 <LL_ADC_GetOffsetChannel>
 8004410:	4603      	mov	r3, r0
 8004412:	0e9b      	lsrs	r3, r3, #26
 8004414:	f003 021f 	and.w	r2, r3, #31
 8004418:	e017      	b.n	800444a <HAL_ADC_ConfigChannel+0x3fe>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2103      	movs	r1, #3
 8004420:	4618      	mov	r0, r3
 8004422:	f7ff f909 	bl	8003638 <LL_ADC_GetOffsetChannel>
 8004426:	4603      	mov	r3, r0
 8004428:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800442a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800442c:	fa93 f3a3 	rbit	r3, r3
 8004430:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004432:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004434:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8004436:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004438:	2b00      	cmp	r3, #0
 800443a:	d101      	bne.n	8004440 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 800443c:	2320      	movs	r3, #32
 800443e:	e003      	b.n	8004448 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8004440:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004442:	fab3 f383 	clz	r3, r3
 8004446:	b2db      	uxtb	r3, r3
 8004448:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004452:	2b00      	cmp	r3, #0
 8004454:	d105      	bne.n	8004462 <HAL_ADC_ConfigChannel+0x416>
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	0e9b      	lsrs	r3, r3, #26
 800445c:	f003 031f 	and.w	r3, r3, #31
 8004460:	e011      	b.n	8004486 <HAL_ADC_ConfigChannel+0x43a>
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004468:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800446a:	fa93 f3a3 	rbit	r3, r3
 800446e:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8004470:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004472:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8004474:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004476:	2b00      	cmp	r3, #0
 8004478:	d101      	bne.n	800447e <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 800447a:	2320      	movs	r3, #32
 800447c:	e003      	b.n	8004486 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 800447e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004480:	fab3 f383 	clz	r3, r3
 8004484:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004486:	429a      	cmp	r2, r3
 8004488:	d106      	bne.n	8004498 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2200      	movs	r2, #0
 8004490:	2103      	movs	r1, #3
 8004492:	4618      	mov	r0, r3
 8004494:	f7ff f8e6 	bl	8003664 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4618      	mov	r0, r3
 800449e:	f7ff fa2f 	bl	8003900 <LL_ADC_IsEnabled>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	f040 813f 	bne.w	8004728 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6818      	ldr	r0, [r3, #0]
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	6819      	ldr	r1, [r3, #0]
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	461a      	mov	r2, r3
 80044b8:	f7ff f96c 	bl	8003794 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	4a8e      	ldr	r2, [pc, #568]	@ (80046fc <HAL_ADC_ConfigChannel+0x6b0>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	f040 8130 	bne.w	8004728 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d10b      	bne.n	80044f0 <HAL_ADC_ConfigChannel+0x4a4>
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	0e9b      	lsrs	r3, r3, #26
 80044de:	3301      	adds	r3, #1
 80044e0:	f003 031f 	and.w	r3, r3, #31
 80044e4:	2b09      	cmp	r3, #9
 80044e6:	bf94      	ite	ls
 80044e8:	2301      	movls	r3, #1
 80044ea:	2300      	movhi	r3, #0
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	e019      	b.n	8004524 <HAL_ADC_ConfigChannel+0x4d8>
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80044f8:	fa93 f3a3 	rbit	r3, r3
 80044fc:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80044fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004500:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8004502:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004504:	2b00      	cmp	r3, #0
 8004506:	d101      	bne.n	800450c <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8004508:	2320      	movs	r3, #32
 800450a:	e003      	b.n	8004514 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 800450c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800450e:	fab3 f383 	clz	r3, r3
 8004512:	b2db      	uxtb	r3, r3
 8004514:	3301      	adds	r3, #1
 8004516:	f003 031f 	and.w	r3, r3, #31
 800451a:	2b09      	cmp	r3, #9
 800451c:	bf94      	ite	ls
 800451e:	2301      	movls	r3, #1
 8004520:	2300      	movhi	r3, #0
 8004522:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004524:	2b00      	cmp	r3, #0
 8004526:	d079      	beq.n	800461c <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004530:	2b00      	cmp	r3, #0
 8004532:	d107      	bne.n	8004544 <HAL_ADC_ConfigChannel+0x4f8>
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	0e9b      	lsrs	r3, r3, #26
 800453a:	3301      	adds	r3, #1
 800453c:	069b      	lsls	r3, r3, #26
 800453e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004542:	e015      	b.n	8004570 <HAL_ADC_ConfigChannel+0x524>
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800454a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800454c:	fa93 f3a3 	rbit	r3, r3
 8004550:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8004552:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004554:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8004556:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004558:	2b00      	cmp	r3, #0
 800455a:	d101      	bne.n	8004560 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 800455c:	2320      	movs	r3, #32
 800455e:	e003      	b.n	8004568 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8004560:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004562:	fab3 f383 	clz	r3, r3
 8004566:	b2db      	uxtb	r3, r3
 8004568:	3301      	adds	r3, #1
 800456a:	069b      	lsls	r3, r3, #26
 800456c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004578:	2b00      	cmp	r3, #0
 800457a:	d109      	bne.n	8004590 <HAL_ADC_ConfigChannel+0x544>
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	0e9b      	lsrs	r3, r3, #26
 8004582:	3301      	adds	r3, #1
 8004584:	f003 031f 	and.w	r3, r3, #31
 8004588:	2101      	movs	r1, #1
 800458a:	fa01 f303 	lsl.w	r3, r1, r3
 800458e:	e017      	b.n	80045c0 <HAL_ADC_ConfigChannel+0x574>
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004596:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004598:	fa93 f3a3 	rbit	r3, r3
 800459c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800459e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045a0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80045a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d101      	bne.n	80045ac <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80045a8:	2320      	movs	r3, #32
 80045aa:	e003      	b.n	80045b4 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80045ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045ae:	fab3 f383 	clz	r3, r3
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	3301      	adds	r3, #1
 80045b6:	f003 031f 	and.w	r3, r3, #31
 80045ba:	2101      	movs	r1, #1
 80045bc:	fa01 f303 	lsl.w	r3, r1, r3
 80045c0:	ea42 0103 	orr.w	r1, r2, r3
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d10a      	bne.n	80045e6 <HAL_ADC_ConfigChannel+0x59a>
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	0e9b      	lsrs	r3, r3, #26
 80045d6:	3301      	adds	r3, #1
 80045d8:	f003 021f 	and.w	r2, r3, #31
 80045dc:	4613      	mov	r3, r2
 80045de:	005b      	lsls	r3, r3, #1
 80045e0:	4413      	add	r3, r2
 80045e2:	051b      	lsls	r3, r3, #20
 80045e4:	e018      	b.n	8004618 <HAL_ADC_ConfigChannel+0x5cc>
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045ee:	fa93 f3a3 	rbit	r3, r3
 80045f2:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80045f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80045f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 80045fe:	2320      	movs	r3, #32
 8004600:	e003      	b.n	800460a <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8004602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004604:	fab3 f383 	clz	r3, r3
 8004608:	b2db      	uxtb	r3, r3
 800460a:	3301      	adds	r3, #1
 800460c:	f003 021f 	and.w	r2, r3, #31
 8004610:	4613      	mov	r3, r2
 8004612:	005b      	lsls	r3, r3, #1
 8004614:	4413      	add	r3, r2
 8004616:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004618:	430b      	orrs	r3, r1
 800461a:	e080      	b.n	800471e <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004624:	2b00      	cmp	r3, #0
 8004626:	d107      	bne.n	8004638 <HAL_ADC_ConfigChannel+0x5ec>
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	0e9b      	lsrs	r3, r3, #26
 800462e:	3301      	adds	r3, #1
 8004630:	069b      	lsls	r3, r3, #26
 8004632:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004636:	e015      	b.n	8004664 <HAL_ADC_ConfigChannel+0x618>
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800463e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004640:	fa93 f3a3 	rbit	r3, r3
 8004644:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8004646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004648:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800464a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800464c:	2b00      	cmp	r3, #0
 800464e:	d101      	bne.n	8004654 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8004650:	2320      	movs	r3, #32
 8004652:	e003      	b.n	800465c <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8004654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004656:	fab3 f383 	clz	r3, r3
 800465a:	b2db      	uxtb	r3, r3
 800465c:	3301      	adds	r3, #1
 800465e:	069b      	lsls	r3, r3, #26
 8004660:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800466c:	2b00      	cmp	r3, #0
 800466e:	d109      	bne.n	8004684 <HAL_ADC_ConfigChannel+0x638>
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	0e9b      	lsrs	r3, r3, #26
 8004676:	3301      	adds	r3, #1
 8004678:	f003 031f 	and.w	r3, r3, #31
 800467c:	2101      	movs	r1, #1
 800467e:	fa01 f303 	lsl.w	r3, r1, r3
 8004682:	e017      	b.n	80046b4 <HAL_ADC_ConfigChannel+0x668>
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	fa93 f3a3 	rbit	r3, r3
 8004690:	61bb      	str	r3, [r7, #24]
  return result;
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004696:	6a3b      	ldr	r3, [r7, #32]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d101      	bne.n	80046a0 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 800469c:	2320      	movs	r3, #32
 800469e:	e003      	b.n	80046a8 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80046a0:	6a3b      	ldr	r3, [r7, #32]
 80046a2:	fab3 f383 	clz	r3, r3
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	3301      	adds	r3, #1
 80046aa:	f003 031f 	and.w	r3, r3, #31
 80046ae:	2101      	movs	r1, #1
 80046b0:	fa01 f303 	lsl.w	r3, r1, r3
 80046b4:	ea42 0103 	orr.w	r1, r2, r3
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d10d      	bne.n	80046e0 <HAL_ADC_ConfigChannel+0x694>
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	0e9b      	lsrs	r3, r3, #26
 80046ca:	3301      	adds	r3, #1
 80046cc:	f003 021f 	and.w	r2, r3, #31
 80046d0:	4613      	mov	r3, r2
 80046d2:	005b      	lsls	r3, r3, #1
 80046d4:	4413      	add	r3, r2
 80046d6:	3b1e      	subs	r3, #30
 80046d8:	051b      	lsls	r3, r3, #20
 80046da:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80046de:	e01d      	b.n	800471c <HAL_ADC_ConfigChannel+0x6d0>
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	fa93 f3a3 	rbit	r3, r3
 80046ec:	60fb      	str	r3, [r7, #12]
  return result;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d103      	bne.n	8004700 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80046f8:	2320      	movs	r3, #32
 80046fa:	e005      	b.n	8004708 <HAL_ADC_ConfigChannel+0x6bc>
 80046fc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	fab3 f383 	clz	r3, r3
 8004706:	b2db      	uxtb	r3, r3
 8004708:	3301      	adds	r3, #1
 800470a:	f003 021f 	and.w	r2, r3, #31
 800470e:	4613      	mov	r3, r2
 8004710:	005b      	lsls	r3, r3, #1
 8004712:	4413      	add	r3, r2
 8004714:	3b1e      	subs	r3, #30
 8004716:	051b      	lsls	r3, r3, #20
 8004718:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800471c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800471e:	683a      	ldr	r2, [r7, #0]
 8004720:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004722:	4619      	mov	r1, r3
 8004724:	f7ff f80b 	bl	800373e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	4b3d      	ldr	r3, [pc, #244]	@ (8004824 <HAL_ADC_ConfigChannel+0x7d8>)
 800472e:	4013      	ands	r3, r2
 8004730:	2b00      	cmp	r3, #0
 8004732:	d06c      	beq.n	800480e <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004734:	483c      	ldr	r0, [pc, #240]	@ (8004828 <HAL_ADC_ConfigChannel+0x7dc>)
 8004736:	f7fe ff4d 	bl	80035d4 <LL_ADC_GetCommonPathInternalCh>
 800473a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a3a      	ldr	r2, [pc, #232]	@ (800482c <HAL_ADC_ConfigChannel+0x7e0>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d127      	bne.n	8004798 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004748:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800474c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d121      	bne.n	8004798 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a35      	ldr	r2, [pc, #212]	@ (8004830 <HAL_ADC_ConfigChannel+0x7e4>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d157      	bne.n	800480e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800475e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004762:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004766:	4619      	mov	r1, r3
 8004768:	482f      	ldr	r0, [pc, #188]	@ (8004828 <HAL_ADC_ConfigChannel+0x7dc>)
 800476a:	f7fe ff20 	bl	80035ae <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800476e:	4b31      	ldr	r3, [pc, #196]	@ (8004834 <HAL_ADC_ConfigChannel+0x7e8>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	099b      	lsrs	r3, r3, #6
 8004774:	4a30      	ldr	r2, [pc, #192]	@ (8004838 <HAL_ADC_ConfigChannel+0x7ec>)
 8004776:	fba2 2303 	umull	r2, r3, r2, r3
 800477a:	099b      	lsrs	r3, r3, #6
 800477c:	1c5a      	adds	r2, r3, #1
 800477e:	4613      	mov	r3, r2
 8004780:	005b      	lsls	r3, r3, #1
 8004782:	4413      	add	r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004788:	e002      	b.n	8004790 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	3b01      	subs	r3, #1
 800478e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d1f9      	bne.n	800478a <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004796:	e03a      	b.n	800480e <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a27      	ldr	r2, [pc, #156]	@ (800483c <HAL_ADC_ConfigChannel+0x7f0>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d113      	bne.n	80047ca <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80047a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80047a6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d10d      	bne.n	80047ca <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a1f      	ldr	r2, [pc, #124]	@ (8004830 <HAL_ADC_ConfigChannel+0x7e4>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d12a      	bne.n	800480e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80047b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80047bc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80047c0:	4619      	mov	r1, r3
 80047c2:	4819      	ldr	r0, [pc, #100]	@ (8004828 <HAL_ADC_ConfigChannel+0x7dc>)
 80047c4:	f7fe fef3 	bl	80035ae <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80047c8:	e021      	b.n	800480e <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a1c      	ldr	r2, [pc, #112]	@ (8004840 <HAL_ADC_ConfigChannel+0x7f4>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d11c      	bne.n	800480e <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80047d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80047d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d116      	bne.n	800480e <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a12      	ldr	r2, [pc, #72]	@ (8004830 <HAL_ADC_ConfigChannel+0x7e4>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d111      	bne.n	800480e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80047ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80047ee:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80047f2:	4619      	mov	r1, r3
 80047f4:	480c      	ldr	r0, [pc, #48]	@ (8004828 <HAL_ADC_ConfigChannel+0x7dc>)
 80047f6:	f7fe feda 	bl	80035ae <LL_ADC_SetCommonPathInternalCh>
 80047fa:	e008      	b.n	800480e <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004800:	f043 0220 	orr.w	r2, r3, #32
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004816:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800481a:	4618      	mov	r0, r3
 800481c:	37d8      	adds	r7, #216	@ 0xd8
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	80080000 	.word	0x80080000
 8004828:	50040300 	.word	0x50040300
 800482c:	c7520000 	.word	0xc7520000
 8004830:	50040000 	.word	0x50040000
 8004834:	20000020 	.word	0x20000020
 8004838:	053e2d63 	.word	0x053e2d63
 800483c:	cb840000 	.word	0xcb840000
 8004840:	80000001 	.word	0x80000001

08004844 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b088      	sub	sp, #32
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800484e:	2300      	movs	r3, #0
 8004850:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4618      	mov	r0, r3
 800485c:	f7ff f89e 	bl	800399c <LL_ADC_REG_IsConversionOngoing>
 8004860:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4618      	mov	r0, r3
 8004868:	f7ff f8bf 	bl	80039ea <LL_ADC_INJ_IsConversionOngoing>
 800486c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d103      	bne.n	800487c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2b00      	cmp	r3, #0
 8004878:	f000 8098 	beq.w	80049ac <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d02a      	beq.n	80048e0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	7e5b      	ldrb	r3, [r3, #25]
 800488e:	2b01      	cmp	r3, #1
 8004890:	d126      	bne.n	80048e0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	7e1b      	ldrb	r3, [r3, #24]
 8004896:	2b01      	cmp	r3, #1
 8004898:	d122      	bne.n	80048e0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800489a:	2301      	movs	r3, #1
 800489c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800489e:	e014      	b.n	80048ca <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	4a45      	ldr	r2, [pc, #276]	@ (80049b8 <ADC_ConversionStop+0x174>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d90d      	bls.n	80048c4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048ac:	f043 0210 	orr.w	r2, r3, #16
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048b8:	f043 0201 	orr.w	r2, r3, #1
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e074      	b.n	80049ae <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	3301      	adds	r3, #1
 80048c8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048d4:	2b40      	cmp	r3, #64	@ 0x40
 80048d6:	d1e3      	bne.n	80048a0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2240      	movs	r2, #64	@ 0x40
 80048de:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d014      	beq.n	8004910 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7ff f856 	bl	800399c <LL_ADC_REG_IsConversionOngoing>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00c      	beq.n	8004910 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4618      	mov	r0, r3
 80048fc:	f7ff f813 	bl	8003926 <LL_ADC_IsDisableOngoing>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d104      	bne.n	8004910 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4618      	mov	r0, r3
 800490c:	f7ff f832 	bl	8003974 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	2b01      	cmp	r3, #1
 8004914:	d014      	beq.n	8004940 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4618      	mov	r0, r3
 800491c:	f7ff f865 	bl	80039ea <LL_ADC_INJ_IsConversionOngoing>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00c      	beq.n	8004940 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4618      	mov	r0, r3
 800492c:	f7fe fffb 	bl	8003926 <LL_ADC_IsDisableOngoing>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d104      	bne.n	8004940 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4618      	mov	r0, r3
 800493c:	f7ff f841 	bl	80039c2 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	2b02      	cmp	r3, #2
 8004944:	d005      	beq.n	8004952 <ADC_ConversionStop+0x10e>
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	2b03      	cmp	r3, #3
 800494a:	d105      	bne.n	8004958 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800494c:	230c      	movs	r3, #12
 800494e:	617b      	str	r3, [r7, #20]
        break;
 8004950:	e005      	b.n	800495e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004952:	2308      	movs	r3, #8
 8004954:	617b      	str	r3, [r7, #20]
        break;
 8004956:	e002      	b.n	800495e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004958:	2304      	movs	r3, #4
 800495a:	617b      	str	r3, [r7, #20]
        break;
 800495c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800495e:	f7fe fde3 	bl	8003528 <HAL_GetTick>
 8004962:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004964:	e01b      	b.n	800499e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004966:	f7fe fddf 	bl	8003528 <HAL_GetTick>
 800496a:	4602      	mov	r2, r0
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	2b05      	cmp	r3, #5
 8004972:	d914      	bls.n	800499e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	689a      	ldr	r2, [r3, #8]
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	4013      	ands	r3, r2
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00d      	beq.n	800499e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004986:	f043 0210 	orr.w	r2, r3, #16
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004992:	f043 0201 	orr.w	r2, r3, #1
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e007      	b.n	80049ae <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	689a      	ldr	r2, [r3, #8]
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	4013      	ands	r3, r2
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d1dc      	bne.n	8004966 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3720      	adds	r7, #32
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	a33fffff 	.word	0xa33fffff

080049bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80049c4:	2300      	movs	r3, #0
 80049c6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4618      	mov	r0, r3
 80049ce:	f7fe ff97 	bl	8003900 <LL_ADC_IsEnabled>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d169      	bne.n	8004aac <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	689a      	ldr	r2, [r3, #8]
 80049de:	4b36      	ldr	r3, [pc, #216]	@ (8004ab8 <ADC_Enable+0xfc>)
 80049e0:	4013      	ands	r3, r2
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00d      	beq.n	8004a02 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049ea:	f043 0210 	orr.w	r2, r3, #16
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049f6:	f043 0201 	orr.w	r2, r3, #1
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e055      	b.n	8004aae <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7fe ff52 	bl	80038b0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004a0c:	482b      	ldr	r0, [pc, #172]	@ (8004abc <ADC_Enable+0x100>)
 8004a0e:	f7fe fde1 	bl	80035d4 <LL_ADC_GetCommonPathInternalCh>
 8004a12:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004a14:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d013      	beq.n	8004a44 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004a1c:	4b28      	ldr	r3, [pc, #160]	@ (8004ac0 <ADC_Enable+0x104>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	099b      	lsrs	r3, r3, #6
 8004a22:	4a28      	ldr	r2, [pc, #160]	@ (8004ac4 <ADC_Enable+0x108>)
 8004a24:	fba2 2303 	umull	r2, r3, r2, r3
 8004a28:	099b      	lsrs	r3, r3, #6
 8004a2a:	1c5a      	adds	r2, r3, #1
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	005b      	lsls	r3, r3, #1
 8004a30:	4413      	add	r3, r2
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004a36:	e002      	b.n	8004a3e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d1f9      	bne.n	8004a38 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004a44:	f7fe fd70 	bl	8003528 <HAL_GetTick>
 8004a48:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a4a:	e028      	b.n	8004a9e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4618      	mov	r0, r3
 8004a52:	f7fe ff55 	bl	8003900 <LL_ADC_IsEnabled>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d104      	bne.n	8004a66 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4618      	mov	r0, r3
 8004a62:	f7fe ff25 	bl	80038b0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004a66:	f7fe fd5f 	bl	8003528 <HAL_GetTick>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	d914      	bls.n	8004a9e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0301 	and.w	r3, r3, #1
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d00d      	beq.n	8004a9e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a86:	f043 0210 	orr.w	r2, r3, #16
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a92:	f043 0201 	orr.w	r2, r3, #1
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e007      	b.n	8004aae <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0301 	and.w	r3, r3, #1
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d1cf      	bne.n	8004a4c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3710      	adds	r7, #16
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	8000003f 	.word	0x8000003f
 8004abc:	50040300 	.word	0x50040300
 8004ac0:	20000020 	.word	0x20000020
 8004ac4:	053e2d63 	.word	0x053e2d63

08004ac8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f7fe ff26 	bl	8003926 <LL_ADC_IsDisableOngoing>
 8004ada:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f7fe ff0d 	bl	8003900 <LL_ADC_IsEnabled>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d047      	beq.n	8004b7c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d144      	bne.n	8004b7c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f003 030d 	and.w	r3, r3, #13
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d10c      	bne.n	8004b1a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4618      	mov	r0, r3
 8004b06:	f7fe fee7 	bl	80038d8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2203      	movs	r2, #3
 8004b10:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004b12:	f7fe fd09 	bl	8003528 <HAL_GetTick>
 8004b16:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004b18:	e029      	b.n	8004b6e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b1e:	f043 0210 	orr.w	r2, r3, #16
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b2a:	f043 0201 	orr.w	r2, r3, #1
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e023      	b.n	8004b7e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004b36:	f7fe fcf7 	bl	8003528 <HAL_GetTick>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	d914      	bls.n	8004b6e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	f003 0301 	and.w	r3, r3, #1
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00d      	beq.n	8004b6e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b56:	f043 0210 	orr.w	r2, r3, #16
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b62:	f043 0201 	orr.w	r2, r3, #1
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e007      	b.n	8004b7e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	f003 0301 	and.w	r3, r3, #1
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d1dc      	bne.n	8004b36 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3710      	adds	r7, #16
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}

08004b86 <LL_ADC_IsEnabled>:
{
 8004b86:	b480      	push	{r7}
 8004b88:	b083      	sub	sp, #12
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f003 0301 	and.w	r3, r3, #1
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d101      	bne.n	8004b9e <LL_ADC_IsEnabled+0x18>
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e000      	b.n	8004ba0 <LL_ADC_IsEnabled+0x1a>
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <LL_ADC_REG_IsConversionOngoing>:
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	f003 0304 	and.w	r3, r3, #4
 8004bbc:	2b04      	cmp	r3, #4
 8004bbe:	d101      	bne.n	8004bc4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e000      	b.n	8004bc6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	370c      	adds	r7, #12
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
	...

08004bd4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004bd4:	b590      	push	{r4, r7, lr}
 8004bd6:	b09f      	sub	sp, #124	@ 0x7c
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004bde:	2300      	movs	r3, #0
 8004be0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d101      	bne.n	8004bf2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004bee:	2302      	movs	r3, #2
 8004bf0:	e089      	b.n	8004d06 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004bfe:	2300      	movs	r3, #0
 8004c00:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a42      	ldr	r2, [pc, #264]	@ (8004d10 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d102      	bne.n	8004c12 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004c0c:	4b41      	ldr	r3, [pc, #260]	@ (8004d14 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004c0e:	60bb      	str	r3, [r7, #8]
 8004c10:	e001      	b.n	8004c16 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004c12:	2300      	movs	r3, #0
 8004c14:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d10b      	bne.n	8004c34 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c20:	f043 0220 	orr.w	r2, r3, #32
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e068      	b.n	8004d06 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7ff ffb8 	bl	8004bac <LL_ADC_REG_IsConversionOngoing>
 8004c3c:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4618      	mov	r0, r3
 8004c44:	f7ff ffb2 	bl	8004bac <LL_ADC_REG_IsConversionOngoing>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d14a      	bne.n	8004ce4 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004c4e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d147      	bne.n	8004ce4 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004c54:	4b30      	ldr	r3, [pc, #192]	@ (8004d18 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8004c56:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d027      	beq.n	8004cb0 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004c60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	6859      	ldr	r1, [r3, #4]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004c72:	035b      	lsls	r3, r3, #13
 8004c74:	430b      	orrs	r3, r1
 8004c76:	431a      	orrs	r2, r3
 8004c78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c7a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c7c:	4824      	ldr	r0, [pc, #144]	@ (8004d10 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8004c7e:	f7ff ff82 	bl	8004b86 <LL_ADC_IsEnabled>
 8004c82:	4604      	mov	r4, r0
 8004c84:	4823      	ldr	r0, [pc, #140]	@ (8004d14 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004c86:	f7ff ff7e 	bl	8004b86 <LL_ADC_IsEnabled>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	4323      	orrs	r3, r4
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d132      	bne.n	8004cf8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004c92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004c9a:	f023 030f 	bic.w	r3, r3, #15
 8004c9e:	683a      	ldr	r2, [r7, #0]
 8004ca0:	6811      	ldr	r1, [r2, #0]
 8004ca2:	683a      	ldr	r2, [r7, #0]
 8004ca4:	6892      	ldr	r2, [r2, #8]
 8004ca6:	430a      	orrs	r2, r1
 8004ca8:	431a      	orrs	r2, r3
 8004caa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004cac:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004cae:	e023      	b.n	8004cf8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004cb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004cb8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004cba:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004cbc:	4814      	ldr	r0, [pc, #80]	@ (8004d10 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8004cbe:	f7ff ff62 	bl	8004b86 <LL_ADC_IsEnabled>
 8004cc2:	4604      	mov	r4, r0
 8004cc4:	4813      	ldr	r0, [pc, #76]	@ (8004d14 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004cc6:	f7ff ff5e 	bl	8004b86 <LL_ADC_IsEnabled>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	4323      	orrs	r3, r4
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d112      	bne.n	8004cf8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004cd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004cda:	f023 030f 	bic.w	r3, r3, #15
 8004cde:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004ce0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004ce2:	e009      	b.n	8004cf8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ce8:	f043 0220 	orr.w	r2, r3, #32
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8004cf6:	e000      	b.n	8004cfa <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004cf8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004d02:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	377c      	adds	r7, #124	@ 0x7c
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd90      	pop	{r4, r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	50040000 	.word	0x50040000
 8004d14:	50040100 	.word	0x50040100
 8004d18:	50040300 	.word	0x50040300

08004d1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b085      	sub	sp, #20
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f003 0307 	and.w	r3, r3, #7
 8004d2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d2c:	4b0c      	ldr	r3, [pc, #48]	@ (8004d60 <__NVIC_SetPriorityGrouping+0x44>)
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d32:	68ba      	ldr	r2, [r7, #8]
 8004d34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004d38:	4013      	ands	r3, r2
 8004d3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004d44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004d48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d4e:	4a04      	ldr	r2, [pc, #16]	@ (8004d60 <__NVIC_SetPriorityGrouping+0x44>)
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	60d3      	str	r3, [r2, #12]
}
 8004d54:	bf00      	nop
 8004d56:	3714      	adds	r7, #20
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr
 8004d60:	e000ed00 	.word	0xe000ed00

08004d64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d64:	b480      	push	{r7}
 8004d66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d68:	4b04      	ldr	r3, [pc, #16]	@ (8004d7c <__NVIC_GetPriorityGrouping+0x18>)
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	0a1b      	lsrs	r3, r3, #8
 8004d6e:	f003 0307 	and.w	r3, r3, #7
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr
 8004d7c:	e000ed00 	.word	0xe000ed00

08004d80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	4603      	mov	r3, r0
 8004d88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	db0b      	blt.n	8004daa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d92:	79fb      	ldrb	r3, [r7, #7]
 8004d94:	f003 021f 	and.w	r2, r3, #31
 8004d98:	4907      	ldr	r1, [pc, #28]	@ (8004db8 <__NVIC_EnableIRQ+0x38>)
 8004d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d9e:	095b      	lsrs	r3, r3, #5
 8004da0:	2001      	movs	r0, #1
 8004da2:	fa00 f202 	lsl.w	r2, r0, r2
 8004da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004daa:	bf00      	nop
 8004dac:	370c      	adds	r7, #12
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	e000e100 	.word	0xe000e100

08004dbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	6039      	str	r1, [r7, #0]
 8004dc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	db0a      	blt.n	8004de6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	b2da      	uxtb	r2, r3
 8004dd4:	490c      	ldr	r1, [pc, #48]	@ (8004e08 <__NVIC_SetPriority+0x4c>)
 8004dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dda:	0112      	lsls	r2, r2, #4
 8004ddc:	b2d2      	uxtb	r2, r2
 8004dde:	440b      	add	r3, r1
 8004de0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004de4:	e00a      	b.n	8004dfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	b2da      	uxtb	r2, r3
 8004dea:	4908      	ldr	r1, [pc, #32]	@ (8004e0c <__NVIC_SetPriority+0x50>)
 8004dec:	79fb      	ldrb	r3, [r7, #7]
 8004dee:	f003 030f 	and.w	r3, r3, #15
 8004df2:	3b04      	subs	r3, #4
 8004df4:	0112      	lsls	r2, r2, #4
 8004df6:	b2d2      	uxtb	r2, r2
 8004df8:	440b      	add	r3, r1
 8004dfa:	761a      	strb	r2, [r3, #24]
}
 8004dfc:	bf00      	nop
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr
 8004e08:	e000e100 	.word	0xe000e100
 8004e0c:	e000ed00 	.word	0xe000ed00

08004e10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b089      	sub	sp, #36	@ 0x24
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f003 0307 	and.w	r3, r3, #7
 8004e22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	f1c3 0307 	rsb	r3, r3, #7
 8004e2a:	2b04      	cmp	r3, #4
 8004e2c:	bf28      	it	cs
 8004e2e:	2304      	movcs	r3, #4
 8004e30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	3304      	adds	r3, #4
 8004e36:	2b06      	cmp	r3, #6
 8004e38:	d902      	bls.n	8004e40 <NVIC_EncodePriority+0x30>
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	3b03      	subs	r3, #3
 8004e3e:	e000      	b.n	8004e42 <NVIC_EncodePriority+0x32>
 8004e40:	2300      	movs	r3, #0
 8004e42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e44:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4e:	43da      	mvns	r2, r3
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	401a      	ands	r2, r3
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e58:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e62:	43d9      	mvns	r1, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e68:	4313      	orrs	r3, r2
         );
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3724      	adds	r7, #36	@ 0x24
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
	...

08004e78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	3b01      	subs	r3, #1
 8004e84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e88:	d301      	bcc.n	8004e8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e00f      	b.n	8004eae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e8e:	4a0a      	ldr	r2, [pc, #40]	@ (8004eb8 <SysTick_Config+0x40>)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	3b01      	subs	r3, #1
 8004e94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e96:	210f      	movs	r1, #15
 8004e98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004e9c:	f7ff ff8e 	bl	8004dbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ea0:	4b05      	ldr	r3, [pc, #20]	@ (8004eb8 <SysTick_Config+0x40>)
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ea6:	4b04      	ldr	r3, [pc, #16]	@ (8004eb8 <SysTick_Config+0x40>)
 8004ea8:	2207      	movs	r2, #7
 8004eaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004eac:	2300      	movs	r3, #0
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3708      	adds	r7, #8
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	e000e010 	.word	0xe000e010

08004ebc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b082      	sub	sp, #8
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f7ff ff29 	bl	8004d1c <__NVIC_SetPriorityGrouping>
}
 8004eca:	bf00      	nop
 8004ecc:	3708      	adds	r7, #8
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}

08004ed2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ed2:	b580      	push	{r7, lr}
 8004ed4:	b086      	sub	sp, #24
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	4603      	mov	r3, r0
 8004eda:	60b9      	str	r1, [r7, #8]
 8004edc:	607a      	str	r2, [r7, #4]
 8004ede:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004ee4:	f7ff ff3e 	bl	8004d64 <__NVIC_GetPriorityGrouping>
 8004ee8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	68b9      	ldr	r1, [r7, #8]
 8004eee:	6978      	ldr	r0, [r7, #20]
 8004ef0:	f7ff ff8e 	bl	8004e10 <NVIC_EncodePriority>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004efa:	4611      	mov	r1, r2
 8004efc:	4618      	mov	r0, r3
 8004efe:	f7ff ff5d 	bl	8004dbc <__NVIC_SetPriority>
}
 8004f02:	bf00      	nop
 8004f04:	3718      	adds	r7, #24
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}

08004f0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f0a:	b580      	push	{r7, lr}
 8004f0c:	b082      	sub	sp, #8
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	4603      	mov	r3, r0
 8004f12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f7ff ff31 	bl	8004d80 <__NVIC_EnableIRQ>
}
 8004f1e:	bf00      	nop
 8004f20:	3708      	adds	r7, #8
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}

08004f26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f26:	b580      	push	{r7, lr}
 8004f28:	b082      	sub	sp, #8
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f7ff ffa2 	bl	8004e78 <SysTick_Config>
 8004f34:	4603      	mov	r3, r0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3708      	adds	r7, #8
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
	...

08004f40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b087      	sub	sp, #28
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f4e:	e14e      	b.n	80051ee <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	2101      	movs	r1, #1
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	fa01 f303 	lsl.w	r3, r1, r3
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	f000 8140 	beq.w	80051e8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	f003 0303 	and.w	r3, r3, #3
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d005      	beq.n	8004f80 <HAL_GPIO_Init+0x40>
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	f003 0303 	and.w	r3, r3, #3
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	d130      	bne.n	8004fe2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	005b      	lsls	r3, r3, #1
 8004f8a:	2203      	movs	r2, #3
 8004f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f90:	43db      	mvns	r3, r3
 8004f92:	693a      	ldr	r2, [r7, #16]
 8004f94:	4013      	ands	r3, r2
 8004f96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	68da      	ldr	r2, [r3, #12]
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	005b      	lsls	r3, r3, #1
 8004fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	693a      	ldr	r2, [r7, #16]
 8004fae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	fa02 f303 	lsl.w	r3, r2, r3
 8004fbe:	43db      	mvns	r3, r3
 8004fc0:	693a      	ldr	r2, [r7, #16]
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	091b      	lsrs	r3, r3, #4
 8004fcc:	f003 0201 	and.w	r2, r3, #1
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd6:	693a      	ldr	r2, [r7, #16]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	693a      	ldr	r2, [r7, #16]
 8004fe0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	f003 0303 	and.w	r3, r3, #3
 8004fea:	2b03      	cmp	r3, #3
 8004fec:	d017      	beq.n	800501e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	005b      	lsls	r3, r3, #1
 8004ff8:	2203      	movs	r2, #3
 8004ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8004ffe:	43db      	mvns	r3, r3
 8005000:	693a      	ldr	r2, [r7, #16]
 8005002:	4013      	ands	r3, r2
 8005004:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	689a      	ldr	r2, [r3, #8]
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	005b      	lsls	r3, r3, #1
 800500e:	fa02 f303 	lsl.w	r3, r2, r3
 8005012:	693a      	ldr	r2, [r7, #16]
 8005014:	4313      	orrs	r3, r2
 8005016:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	693a      	ldr	r2, [r7, #16]
 800501c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	f003 0303 	and.w	r3, r3, #3
 8005026:	2b02      	cmp	r3, #2
 8005028:	d123      	bne.n	8005072 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	08da      	lsrs	r2, r3, #3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	3208      	adds	r2, #8
 8005032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005036:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	f003 0307 	and.w	r3, r3, #7
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	220f      	movs	r2, #15
 8005042:	fa02 f303 	lsl.w	r3, r2, r3
 8005046:	43db      	mvns	r3, r3
 8005048:	693a      	ldr	r2, [r7, #16]
 800504a:	4013      	ands	r3, r2
 800504c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	691a      	ldr	r2, [r3, #16]
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	f003 0307 	and.w	r3, r3, #7
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	fa02 f303 	lsl.w	r3, r2, r3
 800505e:	693a      	ldr	r2, [r7, #16]
 8005060:	4313      	orrs	r3, r2
 8005062:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	08da      	lsrs	r2, r3, #3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	3208      	adds	r2, #8
 800506c:	6939      	ldr	r1, [r7, #16]
 800506e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	005b      	lsls	r3, r3, #1
 800507c:	2203      	movs	r2, #3
 800507e:	fa02 f303 	lsl.w	r3, r2, r3
 8005082:	43db      	mvns	r3, r3
 8005084:	693a      	ldr	r2, [r7, #16]
 8005086:	4013      	ands	r3, r2
 8005088:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	f003 0203 	and.w	r2, r3, #3
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	005b      	lsls	r3, r3, #1
 8005096:	fa02 f303 	lsl.w	r3, r2, r3
 800509a:	693a      	ldr	r2, [r7, #16]
 800509c:	4313      	orrs	r3, r2
 800509e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	693a      	ldr	r2, [r7, #16]
 80050a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	f000 809a 	beq.w	80051e8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050b4:	4b55      	ldr	r3, [pc, #340]	@ (800520c <HAL_GPIO_Init+0x2cc>)
 80050b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050b8:	4a54      	ldr	r2, [pc, #336]	@ (800520c <HAL_GPIO_Init+0x2cc>)
 80050ba:	f043 0301 	orr.w	r3, r3, #1
 80050be:	6613      	str	r3, [r2, #96]	@ 0x60
 80050c0:	4b52      	ldr	r3, [pc, #328]	@ (800520c <HAL_GPIO_Init+0x2cc>)
 80050c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050c4:	f003 0301 	and.w	r3, r3, #1
 80050c8:	60bb      	str	r3, [r7, #8]
 80050ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80050cc:	4a50      	ldr	r2, [pc, #320]	@ (8005210 <HAL_GPIO_Init+0x2d0>)
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	089b      	lsrs	r3, r3, #2
 80050d2:	3302      	adds	r3, #2
 80050d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	f003 0303 	and.w	r3, r3, #3
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	220f      	movs	r2, #15
 80050e4:	fa02 f303 	lsl.w	r3, r2, r3
 80050e8:	43db      	mvns	r3, r3
 80050ea:	693a      	ldr	r2, [r7, #16]
 80050ec:	4013      	ands	r3, r2
 80050ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80050f6:	d013      	beq.n	8005120 <HAL_GPIO_Init+0x1e0>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a46      	ldr	r2, [pc, #280]	@ (8005214 <HAL_GPIO_Init+0x2d4>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d00d      	beq.n	800511c <HAL_GPIO_Init+0x1dc>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4a45      	ldr	r2, [pc, #276]	@ (8005218 <HAL_GPIO_Init+0x2d8>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d007      	beq.n	8005118 <HAL_GPIO_Init+0x1d8>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a44      	ldr	r2, [pc, #272]	@ (800521c <HAL_GPIO_Init+0x2dc>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d101      	bne.n	8005114 <HAL_GPIO_Init+0x1d4>
 8005110:	2303      	movs	r3, #3
 8005112:	e006      	b.n	8005122 <HAL_GPIO_Init+0x1e2>
 8005114:	2307      	movs	r3, #7
 8005116:	e004      	b.n	8005122 <HAL_GPIO_Init+0x1e2>
 8005118:	2302      	movs	r3, #2
 800511a:	e002      	b.n	8005122 <HAL_GPIO_Init+0x1e2>
 800511c:	2301      	movs	r3, #1
 800511e:	e000      	b.n	8005122 <HAL_GPIO_Init+0x1e2>
 8005120:	2300      	movs	r3, #0
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	f002 0203 	and.w	r2, r2, #3
 8005128:	0092      	lsls	r2, r2, #2
 800512a:	4093      	lsls	r3, r2
 800512c:	693a      	ldr	r2, [r7, #16]
 800512e:	4313      	orrs	r3, r2
 8005130:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005132:	4937      	ldr	r1, [pc, #220]	@ (8005210 <HAL_GPIO_Init+0x2d0>)
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	089b      	lsrs	r3, r3, #2
 8005138:	3302      	adds	r3, #2
 800513a:	693a      	ldr	r2, [r7, #16]
 800513c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005140:	4b37      	ldr	r3, [pc, #220]	@ (8005220 <HAL_GPIO_Init+0x2e0>)
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	43db      	mvns	r3, r3
 800514a:	693a      	ldr	r2, [r7, #16]
 800514c:	4013      	ands	r3, r2
 800514e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005158:	2b00      	cmp	r3, #0
 800515a:	d003      	beq.n	8005164 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800515c:	693a      	ldr	r2, [r7, #16]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	4313      	orrs	r3, r2
 8005162:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005164:	4a2e      	ldr	r2, [pc, #184]	@ (8005220 <HAL_GPIO_Init+0x2e0>)
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800516a:	4b2d      	ldr	r3, [pc, #180]	@ (8005220 <HAL_GPIO_Init+0x2e0>)
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	43db      	mvns	r3, r3
 8005174:	693a      	ldr	r2, [r7, #16]
 8005176:	4013      	ands	r3, r2
 8005178:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005182:	2b00      	cmp	r3, #0
 8005184:	d003      	beq.n	800518e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8005186:	693a      	ldr	r2, [r7, #16]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	4313      	orrs	r3, r2
 800518c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800518e:	4a24      	ldr	r2, [pc, #144]	@ (8005220 <HAL_GPIO_Init+0x2e0>)
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005194:	4b22      	ldr	r3, [pc, #136]	@ (8005220 <HAL_GPIO_Init+0x2e0>)
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	43db      	mvns	r3, r3
 800519e:	693a      	ldr	r2, [r7, #16]
 80051a0:	4013      	ands	r3, r2
 80051a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d003      	beq.n	80051b8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80051b8:	4a19      	ldr	r2, [pc, #100]	@ (8005220 <HAL_GPIO_Init+0x2e0>)
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80051be:	4b18      	ldr	r3, [pc, #96]	@ (8005220 <HAL_GPIO_Init+0x2e0>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	43db      	mvns	r3, r3
 80051c8:	693a      	ldr	r2, [r7, #16]
 80051ca:	4013      	ands	r3, r2
 80051cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d003      	beq.n	80051e2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80051da:	693a      	ldr	r2, [r7, #16]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	4313      	orrs	r3, r2
 80051e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80051e2:	4a0f      	ldr	r2, [pc, #60]	@ (8005220 <HAL_GPIO_Init+0x2e0>)
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	3301      	adds	r3, #1
 80051ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	fa22 f303 	lsr.w	r3, r2, r3
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	f47f aea9 	bne.w	8004f50 <HAL_GPIO_Init+0x10>
  }
}
 80051fe:	bf00      	nop
 8005200:	bf00      	nop
 8005202:	371c      	adds	r7, #28
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr
 800520c:	40021000 	.word	0x40021000
 8005210:	40010000 	.word	0x40010000
 8005214:	48000400 	.word	0x48000400
 8005218:	48000800 	.word	0x48000800
 800521c:	48000c00 	.word	0x48000c00
 8005220:	40010400 	.word	0x40010400

08005224 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005224:	b480      	push	{r7}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	460b      	mov	r3, r1
 800522e:	807b      	strh	r3, [r7, #2]
 8005230:	4613      	mov	r3, r2
 8005232:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005234:	787b      	ldrb	r3, [r7, #1]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d003      	beq.n	8005242 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800523a:	887a      	ldrh	r2, [r7, #2]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005240:	e002      	b.n	8005248 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005242:	887a      	ldrh	r2, [r7, #2]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005248:	bf00      	nop
 800524a:	370c      	adds	r7, #12
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
 800525a:	4603      	mov	r3, r0
 800525c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800525e:	4b08      	ldr	r3, [pc, #32]	@ (8005280 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005260:	695a      	ldr	r2, [r3, #20]
 8005262:	88fb      	ldrh	r3, [r7, #6]
 8005264:	4013      	ands	r3, r2
 8005266:	2b00      	cmp	r3, #0
 8005268:	d006      	beq.n	8005278 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800526a:	4a05      	ldr	r2, [pc, #20]	@ (8005280 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800526c:	88fb      	ldrh	r3, [r7, #6]
 800526e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005270:	88fb      	ldrh	r3, [r7, #6]
 8005272:	4618      	mov	r0, r3
 8005274:	f7fc fbb4 	bl	80019e0 <HAL_GPIO_EXTI_Callback>
  }
}
 8005278:	bf00      	nop
 800527a:	3708      	adds	r7, #8
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}
 8005280:	40010400 	.word	0x40010400

08005284 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b082      	sub	sp, #8
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d101      	bne.n	8005296 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e08d      	b.n	80053b2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800529c:	b2db      	uxtb	r3, r3
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d106      	bne.n	80052b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f7fd fe54 	bl	8002f58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2224      	movs	r2, #36	@ 0x24
 80052b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f022 0201 	bic.w	r2, r2, #1
 80052c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	685a      	ldr	r2, [r3, #4]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80052d4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	689a      	ldr	r2, [r3, #8]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80052e4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d107      	bne.n	80052fe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	689a      	ldr	r2, [r3, #8]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80052fa:	609a      	str	r2, [r3, #8]
 80052fc:	e006      	b.n	800530c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	689a      	ldr	r2, [r3, #8]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800530a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	2b02      	cmp	r3, #2
 8005312:	d108      	bne.n	8005326 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	685a      	ldr	r2, [r3, #4]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005322:	605a      	str	r2, [r3, #4]
 8005324:	e007      	b.n	8005336 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	685a      	ldr	r2, [r3, #4]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005334:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	6812      	ldr	r2, [r2, #0]
 8005340:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005344:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005348:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68da      	ldr	r2, [r3, #12]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005358:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	691a      	ldr	r2, [r3, #16]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	695b      	ldr	r3, [r3, #20]
 8005362:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	699b      	ldr	r3, [r3, #24]
 800536a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	430a      	orrs	r2, r1
 8005372:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	69d9      	ldr	r1, [r3, #28]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6a1a      	ldr	r2, [r3, #32]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	430a      	orrs	r2, r1
 8005382:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f042 0201 	orr.w	r2, r2, #1
 8005392:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2220      	movs	r2, #32
 800539e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3708      	adds	r7, #8
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
	...

080053bc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b088      	sub	sp, #32
 80053c0:	af02      	add	r7, sp, #8
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	607a      	str	r2, [r7, #4]
 80053c6:	461a      	mov	r2, r3
 80053c8:	460b      	mov	r3, r1
 80053ca:	817b      	strh	r3, [r7, #10]
 80053cc:	4613      	mov	r3, r2
 80053ce:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	2b20      	cmp	r3, #32
 80053da:	f040 80fd 	bne.w	80055d8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d101      	bne.n	80053ec <HAL_I2C_Master_Transmit+0x30>
 80053e8:	2302      	movs	r3, #2
 80053ea:	e0f6      	b.n	80055da <HAL_I2C_Master_Transmit+0x21e>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80053f4:	f7fe f898 	bl	8003528 <HAL_GetTick>
 80053f8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	9300      	str	r3, [sp, #0]
 80053fe:	2319      	movs	r3, #25
 8005400:	2201      	movs	r2, #1
 8005402:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005406:	68f8      	ldr	r0, [r7, #12]
 8005408:	f000 fa00 	bl	800580c <I2C_WaitOnFlagUntilTimeout>
 800540c:	4603      	mov	r3, r0
 800540e:	2b00      	cmp	r3, #0
 8005410:	d001      	beq.n	8005416 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	e0e1      	b.n	80055da <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2221      	movs	r2, #33	@ 0x21
 800541a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2210      	movs	r2, #16
 8005422:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2200      	movs	r2, #0
 800542a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	893a      	ldrh	r2, [r7, #8]
 8005436:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2200      	movs	r2, #0
 800543c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005442:	b29b      	uxth	r3, r3
 8005444:	2bff      	cmp	r3, #255	@ 0xff
 8005446:	d906      	bls.n	8005456 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	22ff      	movs	r2, #255	@ 0xff
 800544c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800544e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005452:	617b      	str	r3, [r7, #20]
 8005454:	e007      	b.n	8005466 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800545a:	b29a      	uxth	r2, r3
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005460:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005464:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800546a:	2b00      	cmp	r3, #0
 800546c:	d024      	beq.n	80054b8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005472:	781a      	ldrb	r2, [r3, #0]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800547e:	1c5a      	adds	r2, r3, #1
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005488:	b29b      	uxth	r3, r3
 800548a:	3b01      	subs	r3, #1
 800548c:	b29a      	uxth	r2, r3
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005496:	3b01      	subs	r3, #1
 8005498:	b29a      	uxth	r2, r3
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	3301      	adds	r3, #1
 80054a6:	b2da      	uxtb	r2, r3
 80054a8:	8979      	ldrh	r1, [r7, #10]
 80054aa:	4b4e      	ldr	r3, [pc, #312]	@ (80055e4 <HAL_I2C_Master_Transmit+0x228>)
 80054ac:	9300      	str	r3, [sp, #0]
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	68f8      	ldr	r0, [r7, #12]
 80054b2:	f000 fb6f 	bl	8005b94 <I2C_TransferConfig>
 80054b6:	e066      	b.n	8005586 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054bc:	b2da      	uxtb	r2, r3
 80054be:	8979      	ldrh	r1, [r7, #10]
 80054c0:	4b48      	ldr	r3, [pc, #288]	@ (80055e4 <HAL_I2C_Master_Transmit+0x228>)
 80054c2:	9300      	str	r3, [sp, #0]
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	68f8      	ldr	r0, [r7, #12]
 80054c8:	f000 fb64 	bl	8005b94 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80054cc:	e05b      	b.n	8005586 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054ce:	693a      	ldr	r2, [r7, #16]
 80054d0:	6a39      	ldr	r1, [r7, #32]
 80054d2:	68f8      	ldr	r0, [r7, #12]
 80054d4:	f000 f9f3 	bl	80058be <I2C_WaitOnTXISFlagUntilTimeout>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d001      	beq.n	80054e2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e07b      	b.n	80055da <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054e6:	781a      	ldrb	r2, [r3, #0]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f2:	1c5a      	adds	r2, r3, #1
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	3b01      	subs	r3, #1
 8005500:	b29a      	uxth	r2, r3
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800550a:	3b01      	subs	r3, #1
 800550c:	b29a      	uxth	r2, r3
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005516:	b29b      	uxth	r3, r3
 8005518:	2b00      	cmp	r3, #0
 800551a:	d034      	beq.n	8005586 <HAL_I2C_Master_Transmit+0x1ca>
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005520:	2b00      	cmp	r3, #0
 8005522:	d130      	bne.n	8005586 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	9300      	str	r3, [sp, #0]
 8005528:	6a3b      	ldr	r3, [r7, #32]
 800552a:	2200      	movs	r2, #0
 800552c:	2180      	movs	r1, #128	@ 0x80
 800552e:	68f8      	ldr	r0, [r7, #12]
 8005530:	f000 f96c 	bl	800580c <I2C_WaitOnFlagUntilTimeout>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d001      	beq.n	800553e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e04d      	b.n	80055da <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005542:	b29b      	uxth	r3, r3
 8005544:	2bff      	cmp	r3, #255	@ 0xff
 8005546:	d90e      	bls.n	8005566 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	22ff      	movs	r2, #255	@ 0xff
 800554c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005552:	b2da      	uxtb	r2, r3
 8005554:	8979      	ldrh	r1, [r7, #10]
 8005556:	2300      	movs	r3, #0
 8005558:	9300      	str	r3, [sp, #0]
 800555a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800555e:	68f8      	ldr	r0, [r7, #12]
 8005560:	f000 fb18 	bl	8005b94 <I2C_TransferConfig>
 8005564:	e00f      	b.n	8005586 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800556a:	b29a      	uxth	r2, r3
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005574:	b2da      	uxtb	r2, r3
 8005576:	8979      	ldrh	r1, [r7, #10]
 8005578:	2300      	movs	r3, #0
 800557a:	9300      	str	r3, [sp, #0]
 800557c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005580:	68f8      	ldr	r0, [r7, #12]
 8005582:	f000 fb07 	bl	8005b94 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800558a:	b29b      	uxth	r3, r3
 800558c:	2b00      	cmp	r3, #0
 800558e:	d19e      	bne.n	80054ce <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005590:	693a      	ldr	r2, [r7, #16]
 8005592:	6a39      	ldr	r1, [r7, #32]
 8005594:	68f8      	ldr	r0, [r7, #12]
 8005596:	f000 f9d9 	bl	800594c <I2C_WaitOnSTOPFlagUntilTimeout>
 800559a:	4603      	mov	r3, r0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d001      	beq.n	80055a4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e01a      	b.n	80055da <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2220      	movs	r2, #32
 80055aa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	6859      	ldr	r1, [r3, #4]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	4b0c      	ldr	r3, [pc, #48]	@ (80055e8 <HAL_I2C_Master_Transmit+0x22c>)
 80055b8:	400b      	ands	r3, r1
 80055ba:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2220      	movs	r2, #32
 80055c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80055d4:	2300      	movs	r3, #0
 80055d6:	e000      	b.n	80055da <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80055d8:	2302      	movs	r3, #2
  }
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3718      	adds	r7, #24
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	80002000 	.word	0x80002000
 80055e8:	fe00e800 	.word	0xfe00e800

080055ec <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b08a      	sub	sp, #40	@ 0x28
 80055f0:	af02      	add	r7, sp, #8
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	607a      	str	r2, [r7, #4]
 80055f6:	603b      	str	r3, [r7, #0]
 80055f8:	460b      	mov	r3, r1
 80055fa:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80055fc:	2300      	movs	r3, #0
 80055fe:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005606:	b2db      	uxtb	r3, r3
 8005608:	2b20      	cmp	r3, #32
 800560a:	f040 80d6 	bne.w	80057ba <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	699b      	ldr	r3, [r3, #24]
 8005614:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005618:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800561c:	d101      	bne.n	8005622 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800561e:	2302      	movs	r3, #2
 8005620:	e0cc      	b.n	80057bc <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005628:	2b01      	cmp	r3, #1
 800562a:	d101      	bne.n	8005630 <HAL_I2C_IsDeviceReady+0x44>
 800562c:	2302      	movs	r3, #2
 800562e:	e0c5      	b.n	80057bc <HAL_I2C_IsDeviceReady+0x1d0>
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2224      	movs	r2, #36	@ 0x24
 800563c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2200      	movs	r2, #0
 8005644:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	2b01      	cmp	r3, #1
 800564c:	d107      	bne.n	800565e <HAL_I2C_IsDeviceReady+0x72>
 800564e:	897b      	ldrh	r3, [r7, #10]
 8005650:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005654:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005658:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800565c:	e006      	b.n	800566c <HAL_I2C_IsDeviceReady+0x80>
 800565e:	897b      	ldrh	r3, [r7, #10]
 8005660:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005664:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005668:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	6812      	ldr	r2, [r2, #0]
 8005670:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8005672:	f7fd ff59 	bl	8003528 <HAL_GetTick>
 8005676:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	699b      	ldr	r3, [r3, #24]
 800567e:	f003 0320 	and.w	r3, r3, #32
 8005682:	2b20      	cmp	r3, #32
 8005684:	bf0c      	ite	eq
 8005686:	2301      	moveq	r3, #1
 8005688:	2300      	movne	r3, #0
 800568a:	b2db      	uxtb	r3, r3
 800568c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	699b      	ldr	r3, [r3, #24]
 8005694:	f003 0310 	and.w	r3, r3, #16
 8005698:	2b10      	cmp	r3, #16
 800569a:	bf0c      	ite	eq
 800569c:	2301      	moveq	r3, #1
 800569e:	2300      	movne	r3, #0
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80056a4:	e034      	b.n	8005710 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80056ac:	d01a      	beq.n	80056e4 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80056ae:	f7fd ff3b 	bl	8003528 <HAL_GetTick>
 80056b2:	4602      	mov	r2, r0
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	683a      	ldr	r2, [r7, #0]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d302      	bcc.n	80056c4 <HAL_I2C_IsDeviceReady+0xd8>
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d10f      	bne.n	80056e4 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2220      	movs	r2, #32
 80056c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056d0:	f043 0220 	orr.w	r2, r3, #32
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2200      	movs	r2, #0
 80056dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	e06b      	b.n	80057bc <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	699b      	ldr	r3, [r3, #24]
 80056ea:	f003 0320 	and.w	r3, r3, #32
 80056ee:	2b20      	cmp	r3, #32
 80056f0:	bf0c      	ite	eq
 80056f2:	2301      	moveq	r3, #1
 80056f4:	2300      	movne	r3, #0
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	699b      	ldr	r3, [r3, #24]
 8005700:	f003 0310 	and.w	r3, r3, #16
 8005704:	2b10      	cmp	r3, #16
 8005706:	bf0c      	ite	eq
 8005708:	2301      	moveq	r3, #1
 800570a:	2300      	movne	r3, #0
 800570c:	b2db      	uxtb	r3, r3
 800570e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005710:	7ffb      	ldrb	r3, [r7, #31]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d102      	bne.n	800571c <HAL_I2C_IsDeviceReady+0x130>
 8005716:	7fbb      	ldrb	r3, [r7, #30]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d0c4      	beq.n	80056a6 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	699b      	ldr	r3, [r3, #24]
 8005722:	f003 0310 	and.w	r3, r3, #16
 8005726:	2b10      	cmp	r3, #16
 8005728:	d01a      	beq.n	8005760 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	9300      	str	r3, [sp, #0]
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	2200      	movs	r2, #0
 8005732:	2120      	movs	r1, #32
 8005734:	68f8      	ldr	r0, [r7, #12]
 8005736:	f000 f869 	bl	800580c <I2C_WaitOnFlagUntilTimeout>
 800573a:	4603      	mov	r3, r0
 800573c:	2b00      	cmp	r3, #0
 800573e:	d001      	beq.n	8005744 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e03b      	b.n	80057bc <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2220      	movs	r2, #32
 800574a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2220      	movs	r2, #32
 8005750:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2200      	movs	r2, #0
 8005758:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 800575c:	2300      	movs	r3, #0
 800575e:	e02d      	b.n	80057bc <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	9300      	str	r3, [sp, #0]
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	2200      	movs	r2, #0
 8005768:	2120      	movs	r1, #32
 800576a:	68f8      	ldr	r0, [r7, #12]
 800576c:	f000 f84e 	bl	800580c <I2C_WaitOnFlagUntilTimeout>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d001      	beq.n	800577a <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e020      	b.n	80057bc <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	2210      	movs	r2, #16
 8005780:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	2220      	movs	r2, #32
 8005788:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	3301      	adds	r3, #1
 800578e:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	429a      	cmp	r2, r3
 8005796:	f63f af56 	bhi.w	8005646 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2220      	movs	r2, #32
 800579e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057a6:	f043 0220 	orr.w	r2, r3, #32
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e000      	b.n	80057bc <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 80057ba:	2302      	movs	r3, #2
  }
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3720      	adds	r7, #32
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b083      	sub	sp, #12
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	699b      	ldr	r3, [r3, #24]
 80057d2:	f003 0302 	and.w	r3, r3, #2
 80057d6:	2b02      	cmp	r3, #2
 80057d8:	d103      	bne.n	80057e2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	2200      	movs	r2, #0
 80057e0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	699b      	ldr	r3, [r3, #24]
 80057e8:	f003 0301 	and.w	r3, r3, #1
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d007      	beq.n	8005800 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	699a      	ldr	r2, [r3, #24]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f042 0201 	orr.w	r2, r2, #1
 80057fe:	619a      	str	r2, [r3, #24]
  }
}
 8005800:	bf00      	nop
 8005802:	370c      	adds	r7, #12
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	603b      	str	r3, [r7, #0]
 8005818:	4613      	mov	r3, r2
 800581a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800581c:	e03b      	b.n	8005896 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800581e:	69ba      	ldr	r2, [r7, #24]
 8005820:	6839      	ldr	r1, [r7, #0]
 8005822:	68f8      	ldr	r0, [r7, #12]
 8005824:	f000 f8d6 	bl	80059d4 <I2C_IsErrorOccurred>
 8005828:	4603      	mov	r3, r0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d001      	beq.n	8005832 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e041      	b.n	80058b6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005838:	d02d      	beq.n	8005896 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800583a:	f7fd fe75 	bl	8003528 <HAL_GetTick>
 800583e:	4602      	mov	r2, r0
 8005840:	69bb      	ldr	r3, [r7, #24]
 8005842:	1ad3      	subs	r3, r2, r3
 8005844:	683a      	ldr	r2, [r7, #0]
 8005846:	429a      	cmp	r2, r3
 8005848:	d302      	bcc.n	8005850 <I2C_WaitOnFlagUntilTimeout+0x44>
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d122      	bne.n	8005896 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	699a      	ldr	r2, [r3, #24]
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	4013      	ands	r3, r2
 800585a:	68ba      	ldr	r2, [r7, #8]
 800585c:	429a      	cmp	r2, r3
 800585e:	bf0c      	ite	eq
 8005860:	2301      	moveq	r3, #1
 8005862:	2300      	movne	r3, #0
 8005864:	b2db      	uxtb	r3, r3
 8005866:	461a      	mov	r2, r3
 8005868:	79fb      	ldrb	r3, [r7, #7]
 800586a:	429a      	cmp	r2, r3
 800586c:	d113      	bne.n	8005896 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005872:	f043 0220 	orr.w	r2, r3, #32
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2220      	movs	r2, #32
 800587e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2200      	movs	r2, #0
 8005886:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2200      	movs	r2, #0
 800588e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e00f      	b.n	80058b6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	699a      	ldr	r2, [r3, #24]
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	4013      	ands	r3, r2
 80058a0:	68ba      	ldr	r2, [r7, #8]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	bf0c      	ite	eq
 80058a6:	2301      	moveq	r3, #1
 80058a8:	2300      	movne	r3, #0
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	461a      	mov	r2, r3
 80058ae:	79fb      	ldrb	r3, [r7, #7]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d0b4      	beq.n	800581e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3710      	adds	r7, #16
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}

080058be <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80058be:	b580      	push	{r7, lr}
 80058c0:	b084      	sub	sp, #16
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	60f8      	str	r0, [r7, #12]
 80058c6:	60b9      	str	r1, [r7, #8]
 80058c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80058ca:	e033      	b.n	8005934 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	68b9      	ldr	r1, [r7, #8]
 80058d0:	68f8      	ldr	r0, [r7, #12]
 80058d2:	f000 f87f 	bl	80059d4 <I2C_IsErrorOccurred>
 80058d6:	4603      	mov	r3, r0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d001      	beq.n	80058e0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	e031      	b.n	8005944 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80058e6:	d025      	beq.n	8005934 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058e8:	f7fd fe1e 	bl	8003528 <HAL_GetTick>
 80058ec:	4602      	mov	r2, r0
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	68ba      	ldr	r2, [r7, #8]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d302      	bcc.n	80058fe <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d11a      	bne.n	8005934 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	699b      	ldr	r3, [r3, #24]
 8005904:	f003 0302 	and.w	r3, r3, #2
 8005908:	2b02      	cmp	r3, #2
 800590a:	d013      	beq.n	8005934 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005910:	f043 0220 	orr.w	r2, r3, #32
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2220      	movs	r2, #32
 800591c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2200      	movs	r2, #0
 8005924:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e007      	b.n	8005944 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	699b      	ldr	r3, [r3, #24]
 800593a:	f003 0302 	and.w	r3, r3, #2
 800593e:	2b02      	cmp	r3, #2
 8005940:	d1c4      	bne.n	80058cc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005942:	2300      	movs	r3, #0
}
 8005944:	4618      	mov	r0, r3
 8005946:	3710      	adds	r7, #16
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	60b9      	str	r1, [r7, #8]
 8005956:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005958:	e02f      	b.n	80059ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	68b9      	ldr	r1, [r7, #8]
 800595e:	68f8      	ldr	r0, [r7, #12]
 8005960:	f000 f838 	bl	80059d4 <I2C_IsErrorOccurred>
 8005964:	4603      	mov	r3, r0
 8005966:	2b00      	cmp	r3, #0
 8005968:	d001      	beq.n	800596e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e02d      	b.n	80059ca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800596e:	f7fd fddb 	bl	8003528 <HAL_GetTick>
 8005972:	4602      	mov	r2, r0
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	68ba      	ldr	r2, [r7, #8]
 800597a:	429a      	cmp	r2, r3
 800597c:	d302      	bcc.n	8005984 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d11a      	bne.n	80059ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	699b      	ldr	r3, [r3, #24]
 800598a:	f003 0320 	and.w	r3, r3, #32
 800598e:	2b20      	cmp	r3, #32
 8005990:	d013      	beq.n	80059ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005996:	f043 0220 	orr.w	r2, r3, #32
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2220      	movs	r2, #32
 80059a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2200      	movs	r2, #0
 80059b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e007      	b.n	80059ca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	699b      	ldr	r3, [r3, #24]
 80059c0:	f003 0320 	and.w	r3, r3, #32
 80059c4:	2b20      	cmp	r3, #32
 80059c6:	d1c8      	bne.n	800595a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3710      	adds	r7, #16
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
	...

080059d4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b08a      	sub	sp, #40	@ 0x28
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059e0:	2300      	movs	r3, #0
 80059e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	699b      	ldr	r3, [r3, #24]
 80059ec:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80059ee:	2300      	movs	r3, #0
 80059f0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	f003 0310 	and.w	r3, r3, #16
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d068      	beq.n	8005ad2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2210      	movs	r2, #16
 8005a06:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005a08:	e049      	b.n	8005a9e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a10:	d045      	beq.n	8005a9e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005a12:	f7fd fd89 	bl	8003528 <HAL_GetTick>
 8005a16:	4602      	mov	r2, r0
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	1ad3      	subs	r3, r2, r3
 8005a1c:	68ba      	ldr	r2, [r7, #8]
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d302      	bcc.n	8005a28 <I2C_IsErrorOccurred+0x54>
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d13a      	bne.n	8005a9e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a32:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005a3a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	699b      	ldr	r3, [r3, #24]
 8005a42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a4a:	d121      	bne.n	8005a90 <I2C_IsErrorOccurred+0xbc>
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a52:	d01d      	beq.n	8005a90 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005a54:	7cfb      	ldrb	r3, [r7, #19]
 8005a56:	2b20      	cmp	r3, #32
 8005a58:	d01a      	beq.n	8005a90 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	685a      	ldr	r2, [r3, #4]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005a68:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005a6a:	f7fd fd5d 	bl	8003528 <HAL_GetTick>
 8005a6e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a70:	e00e      	b.n	8005a90 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005a72:	f7fd fd59 	bl	8003528 <HAL_GetTick>
 8005a76:	4602      	mov	r2, r0
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	1ad3      	subs	r3, r2, r3
 8005a7c:	2b19      	cmp	r3, #25
 8005a7e:	d907      	bls.n	8005a90 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005a80:	6a3b      	ldr	r3, [r7, #32]
 8005a82:	f043 0320 	orr.w	r3, r3, #32
 8005a86:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005a8e:	e006      	b.n	8005a9e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	699b      	ldr	r3, [r3, #24]
 8005a96:	f003 0320 	and.w	r3, r3, #32
 8005a9a:	2b20      	cmp	r3, #32
 8005a9c:	d1e9      	bne.n	8005a72 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	699b      	ldr	r3, [r3, #24]
 8005aa4:	f003 0320 	and.w	r3, r3, #32
 8005aa8:	2b20      	cmp	r3, #32
 8005aaa:	d003      	beq.n	8005ab4 <I2C_IsErrorOccurred+0xe0>
 8005aac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d0aa      	beq.n	8005a0a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005ab4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d103      	bne.n	8005ac4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2220      	movs	r2, #32
 8005ac2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005ac4:	6a3b      	ldr	r3, [r7, #32]
 8005ac6:	f043 0304 	orr.w	r3, r3, #4
 8005aca:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	699b      	ldr	r3, [r3, #24]
 8005ad8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d00b      	beq.n	8005afc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005ae4:	6a3b      	ldr	r3, [r7, #32]
 8005ae6:	f043 0301 	orr.w	r3, r3, #1
 8005aea:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005af4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005afc:	69bb      	ldr	r3, [r7, #24]
 8005afe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d00b      	beq.n	8005b1e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005b06:	6a3b      	ldr	r3, [r7, #32]
 8005b08:	f043 0308 	orr.w	r3, r3, #8
 8005b0c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005b16:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005b1e:	69bb      	ldr	r3, [r7, #24]
 8005b20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d00b      	beq.n	8005b40 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005b28:	6a3b      	ldr	r3, [r7, #32]
 8005b2a:	f043 0302 	orr.w	r3, r3, #2
 8005b2e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b38:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005b40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d01c      	beq.n	8005b82 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005b48:	68f8      	ldr	r0, [r7, #12]
 8005b4a:	f7ff fe3b 	bl	80057c4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	6859      	ldr	r1, [r3, #4]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	4b0d      	ldr	r3, [pc, #52]	@ (8005b90 <I2C_IsErrorOccurred+0x1bc>)
 8005b5a:	400b      	ands	r3, r1
 8005b5c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b62:	6a3b      	ldr	r3, [r7, #32]
 8005b64:	431a      	orrs	r2, r3
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2220      	movs	r2, #32
 8005b6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005b82:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3728      	adds	r7, #40	@ 0x28
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	bf00      	nop
 8005b90:	fe00e800 	.word	0xfe00e800

08005b94 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b087      	sub	sp, #28
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	607b      	str	r3, [r7, #4]
 8005b9e:	460b      	mov	r3, r1
 8005ba0:	817b      	strh	r3, [r7, #10]
 8005ba2:	4613      	mov	r3, r2
 8005ba4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005ba6:	897b      	ldrh	r3, [r7, #10]
 8005ba8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005bac:	7a7b      	ldrb	r3, [r7, #9]
 8005bae:	041b      	lsls	r3, r3, #16
 8005bb0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005bb4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005bba:	6a3b      	ldr	r3, [r7, #32]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005bc2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	685a      	ldr	r2, [r3, #4]
 8005bca:	6a3b      	ldr	r3, [r7, #32]
 8005bcc:	0d5b      	lsrs	r3, r3, #21
 8005bce:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005bd2:	4b08      	ldr	r3, [pc, #32]	@ (8005bf4 <I2C_TransferConfig+0x60>)
 8005bd4:	430b      	orrs	r3, r1
 8005bd6:	43db      	mvns	r3, r3
 8005bd8:	ea02 0103 	and.w	r1, r2, r3
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	697a      	ldr	r2, [r7, #20]
 8005be2:	430a      	orrs	r2, r1
 8005be4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005be6:	bf00      	nop
 8005be8:	371c      	adds	r7, #28
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr
 8005bf2:	bf00      	nop
 8005bf4:	03ff63ff 	.word	0x03ff63ff

08005bf8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	2b20      	cmp	r3, #32
 8005c0c:	d138      	bne.n	8005c80 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d101      	bne.n	8005c1c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005c18:	2302      	movs	r3, #2
 8005c1a:	e032      	b.n	8005c82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2224      	movs	r2, #36	@ 0x24
 8005c28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f022 0201 	bic.w	r2, r2, #1
 8005c3a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005c4a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	6819      	ldr	r1, [r3, #0]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	683a      	ldr	r2, [r7, #0]
 8005c58:	430a      	orrs	r2, r1
 8005c5a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f042 0201 	orr.w	r2, r2, #1
 8005c6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2220      	movs	r2, #32
 8005c70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	e000      	b.n	8005c82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005c80:	2302      	movs	r3, #2
  }
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	370c      	adds	r7, #12
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr

08005c8e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005c8e:	b480      	push	{r7}
 8005c90:	b085      	sub	sp, #20
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
 8005c96:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	2b20      	cmp	r3, #32
 8005ca2:	d139      	bne.n	8005d18 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d101      	bne.n	8005cb2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005cae:	2302      	movs	r3, #2
 8005cb0:	e033      	b.n	8005d1a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2224      	movs	r2, #36	@ 0x24
 8005cbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f022 0201 	bic.w	r2, r2, #1
 8005cd0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005ce0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	021b      	lsls	r3, r3, #8
 8005ce6:	68fa      	ldr	r2, [r7, #12]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f042 0201 	orr.w	r2, r2, #1
 8005d02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2220      	movs	r2, #32
 8005d08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005d14:	2300      	movs	r3, #0
 8005d16:	e000      	b.n	8005d1a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005d18:	2302      	movs	r3, #2
  }
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3714      	adds	r7, #20
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr
	...

08005d28 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005d2c:	4b04      	ldr	r3, [pc, #16]	@ (8005d40 <HAL_PWREx_GetVoltageRange+0x18>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr
 8005d3e:	bf00      	nop
 8005d40:	40007000 	.word	0x40007000

08005d44 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b085      	sub	sp, #20
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d52:	d130      	bne.n	8005db6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005d54:	4b23      	ldr	r3, [pc, #140]	@ (8005de4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005d5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d60:	d038      	beq.n	8005dd4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005d62:	4b20      	ldr	r3, [pc, #128]	@ (8005de4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005d6a:	4a1e      	ldr	r2, [pc, #120]	@ (8005de4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005d6c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005d70:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005d72:	4b1d      	ldr	r3, [pc, #116]	@ (8005de8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	2232      	movs	r2, #50	@ 0x32
 8005d78:	fb02 f303 	mul.w	r3, r2, r3
 8005d7c:	4a1b      	ldr	r2, [pc, #108]	@ (8005dec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d82:	0c9b      	lsrs	r3, r3, #18
 8005d84:	3301      	adds	r3, #1
 8005d86:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d88:	e002      	b.n	8005d90 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	3b01      	subs	r3, #1
 8005d8e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d90:	4b14      	ldr	r3, [pc, #80]	@ (8005de4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005d92:	695b      	ldr	r3, [r3, #20]
 8005d94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d9c:	d102      	bne.n	8005da4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d1f2      	bne.n	8005d8a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005da4:	4b0f      	ldr	r3, [pc, #60]	@ (8005de4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005da6:	695b      	ldr	r3, [r3, #20]
 8005da8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005dac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005db0:	d110      	bne.n	8005dd4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005db2:	2303      	movs	r3, #3
 8005db4:	e00f      	b.n	8005dd6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005db6:	4b0b      	ldr	r3, [pc, #44]	@ (8005de4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005dbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005dc2:	d007      	beq.n	8005dd4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005dc4:	4b07      	ldr	r3, [pc, #28]	@ (8005de4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005dcc:	4a05      	ldr	r2, [pc, #20]	@ (8005de4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005dce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005dd2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3714      	adds	r7, #20
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr
 8005de2:	bf00      	nop
 8005de4:	40007000 	.word	0x40007000
 8005de8:	20000020 	.word	0x20000020
 8005dec:	431bde83 	.word	0x431bde83

08005df0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b08a      	sub	sp, #40	@ 0x28
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d102      	bne.n	8005e04 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	f000 bc4f 	b.w	80066a2 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e04:	4b97      	ldr	r3, [pc, #604]	@ (8006064 <HAL_RCC_OscConfig+0x274>)
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	f003 030c 	and.w	r3, r3, #12
 8005e0c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e0e:	4b95      	ldr	r3, [pc, #596]	@ (8006064 <HAL_RCC_OscConfig+0x274>)
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	f003 0303 	and.w	r3, r3, #3
 8005e16:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 0310 	and.w	r3, r3, #16
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	f000 80e6 	beq.w	8005ff2 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005e26:	6a3b      	ldr	r3, [r7, #32]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d007      	beq.n	8005e3c <HAL_RCC_OscConfig+0x4c>
 8005e2c:	6a3b      	ldr	r3, [r7, #32]
 8005e2e:	2b0c      	cmp	r3, #12
 8005e30:	f040 808d 	bne.w	8005f4e <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	f040 8089 	bne.w	8005f4e <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005e3c:	4b89      	ldr	r3, [pc, #548]	@ (8006064 <HAL_RCC_OscConfig+0x274>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f003 0302 	and.w	r3, r3, #2
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d006      	beq.n	8005e56 <HAL_RCC_OscConfig+0x66>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	69db      	ldr	r3, [r3, #28]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d102      	bne.n	8005e56 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	f000 bc26 	b.w	80066a2 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005e5a:	4b82      	ldr	r3, [pc, #520]	@ (8006064 <HAL_RCC_OscConfig+0x274>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 0308 	and.w	r3, r3, #8
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d004      	beq.n	8005e70 <HAL_RCC_OscConfig+0x80>
 8005e66:	4b7f      	ldr	r3, [pc, #508]	@ (8006064 <HAL_RCC_OscConfig+0x274>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005e6e:	e005      	b.n	8005e7c <HAL_RCC_OscConfig+0x8c>
 8005e70:	4b7c      	ldr	r3, [pc, #496]	@ (8006064 <HAL_RCC_OscConfig+0x274>)
 8005e72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e76:	091b      	lsrs	r3, r3, #4
 8005e78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d224      	bcs.n	8005eca <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e84:	4618      	mov	r0, r3
 8005e86:	f000 fdd9 	bl	8006a3c <RCC_SetFlashLatencyFromMSIRange>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d002      	beq.n	8005e96 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	f000 bc06 	b.w	80066a2 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005e96:	4b73      	ldr	r3, [pc, #460]	@ (8006064 <HAL_RCC_OscConfig+0x274>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a72      	ldr	r2, [pc, #456]	@ (8006064 <HAL_RCC_OscConfig+0x274>)
 8005e9c:	f043 0308 	orr.w	r3, r3, #8
 8005ea0:	6013      	str	r3, [r2, #0]
 8005ea2:	4b70      	ldr	r3, [pc, #448]	@ (8006064 <HAL_RCC_OscConfig+0x274>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eae:	496d      	ldr	r1, [pc, #436]	@ (8006064 <HAL_RCC_OscConfig+0x274>)
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005eb4:	4b6b      	ldr	r3, [pc, #428]	@ (8006064 <HAL_RCC_OscConfig+0x274>)
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6a1b      	ldr	r3, [r3, #32]
 8005ec0:	021b      	lsls	r3, r3, #8
 8005ec2:	4968      	ldr	r1, [pc, #416]	@ (8006064 <HAL_RCC_OscConfig+0x274>)
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	604b      	str	r3, [r1, #4]
 8005ec8:	e025      	b.n	8005f16 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005eca:	4b66      	ldr	r3, [pc, #408]	@ (8006064 <HAL_RCC_OscConfig+0x274>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a65      	ldr	r2, [pc, #404]	@ (8006064 <HAL_RCC_OscConfig+0x274>)
 8005ed0:	f043 0308 	orr.w	r3, r3, #8
 8005ed4:	6013      	str	r3, [r2, #0]
 8005ed6:	4b63      	ldr	r3, [pc, #396]	@ (8006064 <HAL_RCC_OscConfig+0x274>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ee2:	4960      	ldr	r1, [pc, #384]	@ (8006064 <HAL_RCC_OscConfig+0x274>)
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005ee8:	4b5e      	ldr	r3, [pc, #376]	@ (8006064 <HAL_RCC_OscConfig+0x274>)
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6a1b      	ldr	r3, [r3, #32]
 8005ef4:	021b      	lsls	r3, r3, #8
 8005ef6:	495b      	ldr	r1, [pc, #364]	@ (8006064 <HAL_RCC_OscConfig+0x274>)
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005efc:	6a3b      	ldr	r3, [r7, #32]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d109      	bne.n	8005f16 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f06:	4618      	mov	r0, r3
 8005f08:	f000 fd98 	bl	8006a3c <RCC_SetFlashLatencyFromMSIRange>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d001      	beq.n	8005f16 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e3c5      	b.n	80066a2 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005f16:	f000 fccd 	bl	80068b4 <HAL_RCC_GetSysClockFreq>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	4b51      	ldr	r3, [pc, #324]	@ (8006064 <HAL_RCC_OscConfig+0x274>)
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	091b      	lsrs	r3, r3, #4
 8005f22:	f003 030f 	and.w	r3, r3, #15
 8005f26:	4950      	ldr	r1, [pc, #320]	@ (8006068 <HAL_RCC_OscConfig+0x278>)
 8005f28:	5ccb      	ldrb	r3, [r1, r3]
 8005f2a:	f003 031f 	and.w	r3, r3, #31
 8005f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8005f32:	4a4e      	ldr	r2, [pc, #312]	@ (800606c <HAL_RCC_OscConfig+0x27c>)
 8005f34:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005f36:	4b4e      	ldr	r3, [pc, #312]	@ (8006070 <HAL_RCC_OscConfig+0x280>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f7fd faa4 	bl	8003488 <HAL_InitTick>
 8005f40:	4603      	mov	r3, r0
 8005f42:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8005f44:	7dfb      	ldrb	r3, [r7, #23]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d052      	beq.n	8005ff0 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8005f4a:	7dfb      	ldrb	r3, [r7, #23]
 8005f4c:	e3a9      	b.n	80066a2 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	69db      	ldr	r3, [r3, #28]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d032      	beq.n	8005fbc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005f56:	4b43      	ldr	r3, [pc, #268]	@ (8006064 <HAL_RCC_OscConfig+0x274>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a42      	ldr	r2, [pc, #264]	@ (8006064 <HAL_RCC_OscConfig+0x274>)
 8005f5c:	f043 0301 	orr.w	r3, r3, #1
 8005f60:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005f62:	f7fd fae1 	bl	8003528 <HAL_GetTick>
 8005f66:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005f68:	e008      	b.n	8005f7c <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005f6a:	f7fd fadd 	bl	8003528 <HAL_GetTick>
 8005f6e:	4602      	mov	r2, r0
 8005f70:	69bb      	ldr	r3, [r7, #24]
 8005f72:	1ad3      	subs	r3, r2, r3
 8005f74:	2b02      	cmp	r3, #2
 8005f76:	d901      	bls.n	8005f7c <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8005f78:	2303      	movs	r3, #3
 8005f7a:	e392      	b.n	80066a2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005f7c:	4b39      	ldr	r3, [pc, #228]	@ (8006064 <HAL_RCC_OscConfig+0x274>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 0302 	and.w	r3, r3, #2
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d0f0      	beq.n	8005f6a <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005f88:	4b36      	ldr	r3, [pc, #216]	@ (8006064 <HAL_RCC_OscConfig+0x274>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a35      	ldr	r2, [pc, #212]	@ (8006064 <HAL_RCC_OscConfig+0x274>)
 8005f8e:	f043 0308 	orr.w	r3, r3, #8
 8005f92:	6013      	str	r3, [r2, #0]
 8005f94:	4b33      	ldr	r3, [pc, #204]	@ (8006064 <HAL_RCC_OscConfig+0x274>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fa0:	4930      	ldr	r1, [pc, #192]	@ (8006064 <HAL_RCC_OscConfig+0x274>)
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005fa6:	4b2f      	ldr	r3, [pc, #188]	@ (8006064 <HAL_RCC_OscConfig+0x274>)
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6a1b      	ldr	r3, [r3, #32]
 8005fb2:	021b      	lsls	r3, r3, #8
 8005fb4:	492b      	ldr	r1, [pc, #172]	@ (8006064 <HAL_RCC_OscConfig+0x274>)
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	604b      	str	r3, [r1, #4]
 8005fba:	e01a      	b.n	8005ff2 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005fbc:	4b29      	ldr	r3, [pc, #164]	@ (8006064 <HAL_RCC_OscConfig+0x274>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a28      	ldr	r2, [pc, #160]	@ (8006064 <HAL_RCC_OscConfig+0x274>)
 8005fc2:	f023 0301 	bic.w	r3, r3, #1
 8005fc6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005fc8:	f7fd faae 	bl	8003528 <HAL_GetTick>
 8005fcc:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005fce:	e008      	b.n	8005fe2 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005fd0:	f7fd faaa 	bl	8003528 <HAL_GetTick>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	1ad3      	subs	r3, r2, r3
 8005fda:	2b02      	cmp	r3, #2
 8005fdc:	d901      	bls.n	8005fe2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005fde:	2303      	movs	r3, #3
 8005fe0:	e35f      	b.n	80066a2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005fe2:	4b20      	ldr	r3, [pc, #128]	@ (8006064 <HAL_RCC_OscConfig+0x274>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f003 0302 	and.w	r3, r3, #2
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d1f0      	bne.n	8005fd0 <HAL_RCC_OscConfig+0x1e0>
 8005fee:	e000      	b.n	8005ff2 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005ff0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f003 0301 	and.w	r3, r3, #1
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d073      	beq.n	80060e6 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005ffe:	6a3b      	ldr	r3, [r7, #32]
 8006000:	2b08      	cmp	r3, #8
 8006002:	d005      	beq.n	8006010 <HAL_RCC_OscConfig+0x220>
 8006004:	6a3b      	ldr	r3, [r7, #32]
 8006006:	2b0c      	cmp	r3, #12
 8006008:	d10e      	bne.n	8006028 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	2b03      	cmp	r3, #3
 800600e:	d10b      	bne.n	8006028 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006010:	4b14      	ldr	r3, [pc, #80]	@ (8006064 <HAL_RCC_OscConfig+0x274>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006018:	2b00      	cmp	r3, #0
 800601a:	d063      	beq.n	80060e4 <HAL_RCC_OscConfig+0x2f4>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d15f      	bne.n	80060e4 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	e33c      	b.n	80066a2 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006030:	d106      	bne.n	8006040 <HAL_RCC_OscConfig+0x250>
 8006032:	4b0c      	ldr	r3, [pc, #48]	@ (8006064 <HAL_RCC_OscConfig+0x274>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a0b      	ldr	r2, [pc, #44]	@ (8006064 <HAL_RCC_OscConfig+0x274>)
 8006038:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800603c:	6013      	str	r3, [r2, #0]
 800603e:	e025      	b.n	800608c <HAL_RCC_OscConfig+0x29c>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006048:	d114      	bne.n	8006074 <HAL_RCC_OscConfig+0x284>
 800604a:	4b06      	ldr	r3, [pc, #24]	@ (8006064 <HAL_RCC_OscConfig+0x274>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a05      	ldr	r2, [pc, #20]	@ (8006064 <HAL_RCC_OscConfig+0x274>)
 8006050:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006054:	6013      	str	r3, [r2, #0]
 8006056:	4b03      	ldr	r3, [pc, #12]	@ (8006064 <HAL_RCC_OscConfig+0x274>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a02      	ldr	r2, [pc, #8]	@ (8006064 <HAL_RCC_OscConfig+0x274>)
 800605c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006060:	6013      	str	r3, [r2, #0]
 8006062:	e013      	b.n	800608c <HAL_RCC_OscConfig+0x29c>
 8006064:	40021000 	.word	0x40021000
 8006068:	08009494 	.word	0x08009494
 800606c:	20000020 	.word	0x20000020
 8006070:	20000024 	.word	0x20000024
 8006074:	4b8f      	ldr	r3, [pc, #572]	@ (80062b4 <HAL_RCC_OscConfig+0x4c4>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a8e      	ldr	r2, [pc, #568]	@ (80062b4 <HAL_RCC_OscConfig+0x4c4>)
 800607a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800607e:	6013      	str	r3, [r2, #0]
 8006080:	4b8c      	ldr	r3, [pc, #560]	@ (80062b4 <HAL_RCC_OscConfig+0x4c4>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a8b      	ldr	r2, [pc, #556]	@ (80062b4 <HAL_RCC_OscConfig+0x4c4>)
 8006086:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800608a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d013      	beq.n	80060bc <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006094:	f7fd fa48 	bl	8003528 <HAL_GetTick>
 8006098:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800609a:	e008      	b.n	80060ae <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800609c:	f7fd fa44 	bl	8003528 <HAL_GetTick>
 80060a0:	4602      	mov	r2, r0
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	1ad3      	subs	r3, r2, r3
 80060a6:	2b64      	cmp	r3, #100	@ 0x64
 80060a8:	d901      	bls.n	80060ae <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80060aa:	2303      	movs	r3, #3
 80060ac:	e2f9      	b.n	80066a2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80060ae:	4b81      	ldr	r3, [pc, #516]	@ (80062b4 <HAL_RCC_OscConfig+0x4c4>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d0f0      	beq.n	800609c <HAL_RCC_OscConfig+0x2ac>
 80060ba:	e014      	b.n	80060e6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060bc:	f7fd fa34 	bl	8003528 <HAL_GetTick>
 80060c0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80060c2:	e008      	b.n	80060d6 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060c4:	f7fd fa30 	bl	8003528 <HAL_GetTick>
 80060c8:	4602      	mov	r2, r0
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	1ad3      	subs	r3, r2, r3
 80060ce:	2b64      	cmp	r3, #100	@ 0x64
 80060d0:	d901      	bls.n	80060d6 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80060d2:	2303      	movs	r3, #3
 80060d4:	e2e5      	b.n	80066a2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80060d6:	4b77      	ldr	r3, [pc, #476]	@ (80062b4 <HAL_RCC_OscConfig+0x4c4>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d1f0      	bne.n	80060c4 <HAL_RCC_OscConfig+0x2d4>
 80060e2:	e000      	b.n	80060e6 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f003 0302 	and.w	r3, r3, #2
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d060      	beq.n	80061b4 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80060f2:	6a3b      	ldr	r3, [r7, #32]
 80060f4:	2b04      	cmp	r3, #4
 80060f6:	d005      	beq.n	8006104 <HAL_RCC_OscConfig+0x314>
 80060f8:	6a3b      	ldr	r3, [r7, #32]
 80060fa:	2b0c      	cmp	r3, #12
 80060fc:	d119      	bne.n	8006132 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	2b02      	cmp	r3, #2
 8006102:	d116      	bne.n	8006132 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006104:	4b6b      	ldr	r3, [pc, #428]	@ (80062b4 <HAL_RCC_OscConfig+0x4c4>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800610c:	2b00      	cmp	r3, #0
 800610e:	d005      	beq.n	800611c <HAL_RCC_OscConfig+0x32c>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d101      	bne.n	800611c <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	e2c2      	b.n	80066a2 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800611c:	4b65      	ldr	r3, [pc, #404]	@ (80062b4 <HAL_RCC_OscConfig+0x4c4>)
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	691b      	ldr	r3, [r3, #16]
 8006128:	061b      	lsls	r3, r3, #24
 800612a:	4962      	ldr	r1, [pc, #392]	@ (80062b4 <HAL_RCC_OscConfig+0x4c4>)
 800612c:	4313      	orrs	r3, r2
 800612e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006130:	e040      	b.n	80061b4 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d023      	beq.n	8006182 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800613a:	4b5e      	ldr	r3, [pc, #376]	@ (80062b4 <HAL_RCC_OscConfig+0x4c4>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a5d      	ldr	r2, [pc, #372]	@ (80062b4 <HAL_RCC_OscConfig+0x4c4>)
 8006140:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006144:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006146:	f7fd f9ef 	bl	8003528 <HAL_GetTick>
 800614a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800614c:	e008      	b.n	8006160 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800614e:	f7fd f9eb 	bl	8003528 <HAL_GetTick>
 8006152:	4602      	mov	r2, r0
 8006154:	69bb      	ldr	r3, [r7, #24]
 8006156:	1ad3      	subs	r3, r2, r3
 8006158:	2b02      	cmp	r3, #2
 800615a:	d901      	bls.n	8006160 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 800615c:	2303      	movs	r3, #3
 800615e:	e2a0      	b.n	80066a2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006160:	4b54      	ldr	r3, [pc, #336]	@ (80062b4 <HAL_RCC_OscConfig+0x4c4>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006168:	2b00      	cmp	r3, #0
 800616a:	d0f0      	beq.n	800614e <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800616c:	4b51      	ldr	r3, [pc, #324]	@ (80062b4 <HAL_RCC_OscConfig+0x4c4>)
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	061b      	lsls	r3, r3, #24
 800617a:	494e      	ldr	r1, [pc, #312]	@ (80062b4 <HAL_RCC_OscConfig+0x4c4>)
 800617c:	4313      	orrs	r3, r2
 800617e:	604b      	str	r3, [r1, #4]
 8006180:	e018      	b.n	80061b4 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006182:	4b4c      	ldr	r3, [pc, #304]	@ (80062b4 <HAL_RCC_OscConfig+0x4c4>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a4b      	ldr	r2, [pc, #300]	@ (80062b4 <HAL_RCC_OscConfig+0x4c4>)
 8006188:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800618c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800618e:	f7fd f9cb 	bl	8003528 <HAL_GetTick>
 8006192:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006194:	e008      	b.n	80061a8 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006196:	f7fd f9c7 	bl	8003528 <HAL_GetTick>
 800619a:	4602      	mov	r2, r0
 800619c:	69bb      	ldr	r3, [r7, #24]
 800619e:	1ad3      	subs	r3, r2, r3
 80061a0:	2b02      	cmp	r3, #2
 80061a2:	d901      	bls.n	80061a8 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80061a4:	2303      	movs	r3, #3
 80061a6:	e27c      	b.n	80066a2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80061a8:	4b42      	ldr	r3, [pc, #264]	@ (80062b4 <HAL_RCC_OscConfig+0x4c4>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d1f0      	bne.n	8006196 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f003 0308 	and.w	r3, r3, #8
 80061bc:	2b00      	cmp	r3, #0
 80061be:	f000 8082 	beq.w	80062c6 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	695b      	ldr	r3, [r3, #20]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d05f      	beq.n	800628a <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80061ca:	4b3a      	ldr	r3, [pc, #232]	@ (80062b4 <HAL_RCC_OscConfig+0x4c4>)
 80061cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80061d0:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	699a      	ldr	r2, [r3, #24]
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	f003 0310 	and.w	r3, r3, #16
 80061dc:	429a      	cmp	r2, r3
 80061de:	d037      	beq.n	8006250 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	f003 0302 	and.w	r3, r3, #2
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d006      	beq.n	80061f8 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d101      	bne.n	80061f8 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	e254      	b.n	80066a2 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	f003 0301 	and.w	r3, r3, #1
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d01b      	beq.n	800623a <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8006202:	4b2c      	ldr	r3, [pc, #176]	@ (80062b4 <HAL_RCC_OscConfig+0x4c4>)
 8006204:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006208:	4a2a      	ldr	r2, [pc, #168]	@ (80062b4 <HAL_RCC_OscConfig+0x4c4>)
 800620a:	f023 0301 	bic.w	r3, r3, #1
 800620e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006212:	f7fd f989 	bl	8003528 <HAL_GetTick>
 8006216:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006218:	e008      	b.n	800622c <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800621a:	f7fd f985 	bl	8003528 <HAL_GetTick>
 800621e:	4602      	mov	r2, r0
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	1ad3      	subs	r3, r2, r3
 8006224:	2b11      	cmp	r3, #17
 8006226:	d901      	bls.n	800622c <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8006228:	2303      	movs	r3, #3
 800622a:	e23a      	b.n	80066a2 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800622c:	4b21      	ldr	r3, [pc, #132]	@ (80062b4 <HAL_RCC_OscConfig+0x4c4>)
 800622e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006232:	f003 0302 	and.w	r3, r3, #2
 8006236:	2b00      	cmp	r3, #0
 8006238:	d1ef      	bne.n	800621a <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 800623a:	4b1e      	ldr	r3, [pc, #120]	@ (80062b4 <HAL_RCC_OscConfig+0x4c4>)
 800623c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006240:	f023 0210 	bic.w	r2, r3, #16
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	699b      	ldr	r3, [r3, #24]
 8006248:	491a      	ldr	r1, [pc, #104]	@ (80062b4 <HAL_RCC_OscConfig+0x4c4>)
 800624a:	4313      	orrs	r3, r2
 800624c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006250:	4b18      	ldr	r3, [pc, #96]	@ (80062b4 <HAL_RCC_OscConfig+0x4c4>)
 8006252:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006256:	4a17      	ldr	r2, [pc, #92]	@ (80062b4 <HAL_RCC_OscConfig+0x4c4>)
 8006258:	f043 0301 	orr.w	r3, r3, #1
 800625c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006260:	f7fd f962 	bl	8003528 <HAL_GetTick>
 8006264:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006266:	e008      	b.n	800627a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006268:	f7fd f95e 	bl	8003528 <HAL_GetTick>
 800626c:	4602      	mov	r2, r0
 800626e:	69bb      	ldr	r3, [r7, #24]
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	2b11      	cmp	r3, #17
 8006274:	d901      	bls.n	800627a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8006276:	2303      	movs	r3, #3
 8006278:	e213      	b.n	80066a2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800627a:	4b0e      	ldr	r3, [pc, #56]	@ (80062b4 <HAL_RCC_OscConfig+0x4c4>)
 800627c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006280:	f003 0302 	and.w	r3, r3, #2
 8006284:	2b00      	cmp	r3, #0
 8006286:	d0ef      	beq.n	8006268 <HAL_RCC_OscConfig+0x478>
 8006288:	e01d      	b.n	80062c6 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800628a:	4b0a      	ldr	r3, [pc, #40]	@ (80062b4 <HAL_RCC_OscConfig+0x4c4>)
 800628c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006290:	4a08      	ldr	r2, [pc, #32]	@ (80062b4 <HAL_RCC_OscConfig+0x4c4>)
 8006292:	f023 0301 	bic.w	r3, r3, #1
 8006296:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800629a:	f7fd f945 	bl	8003528 <HAL_GetTick>
 800629e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80062a0:	e00a      	b.n	80062b8 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062a2:	f7fd f941 	bl	8003528 <HAL_GetTick>
 80062a6:	4602      	mov	r2, r0
 80062a8:	69bb      	ldr	r3, [r7, #24]
 80062aa:	1ad3      	subs	r3, r2, r3
 80062ac:	2b11      	cmp	r3, #17
 80062ae:	d903      	bls.n	80062b8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80062b0:	2303      	movs	r3, #3
 80062b2:	e1f6      	b.n	80066a2 <HAL_RCC_OscConfig+0x8b2>
 80062b4:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80062b8:	4ba9      	ldr	r3, [pc, #676]	@ (8006560 <HAL_RCC_OscConfig+0x770>)
 80062ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80062be:	f003 0302 	and.w	r3, r3, #2
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d1ed      	bne.n	80062a2 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f003 0304 	and.w	r3, r3, #4
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	f000 80bd 	beq.w	800644e <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80062d4:	2300      	movs	r3, #0
 80062d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80062da:	4ba1      	ldr	r3, [pc, #644]	@ (8006560 <HAL_RCC_OscConfig+0x770>)
 80062dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d10e      	bne.n	8006304 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062e6:	4b9e      	ldr	r3, [pc, #632]	@ (8006560 <HAL_RCC_OscConfig+0x770>)
 80062e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062ea:	4a9d      	ldr	r2, [pc, #628]	@ (8006560 <HAL_RCC_OscConfig+0x770>)
 80062ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80062f2:	4b9b      	ldr	r3, [pc, #620]	@ (8006560 <HAL_RCC_OscConfig+0x770>)
 80062f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062fa:	60fb      	str	r3, [r7, #12]
 80062fc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80062fe:	2301      	movs	r3, #1
 8006300:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006304:	4b97      	ldr	r3, [pc, #604]	@ (8006564 <HAL_RCC_OscConfig+0x774>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800630c:	2b00      	cmp	r3, #0
 800630e:	d118      	bne.n	8006342 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006310:	4b94      	ldr	r3, [pc, #592]	@ (8006564 <HAL_RCC_OscConfig+0x774>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a93      	ldr	r2, [pc, #588]	@ (8006564 <HAL_RCC_OscConfig+0x774>)
 8006316:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800631a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800631c:	f7fd f904 	bl	8003528 <HAL_GetTick>
 8006320:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006322:	e008      	b.n	8006336 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006324:	f7fd f900 	bl	8003528 <HAL_GetTick>
 8006328:	4602      	mov	r2, r0
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	1ad3      	subs	r3, r2, r3
 800632e:	2b02      	cmp	r3, #2
 8006330:	d901      	bls.n	8006336 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8006332:	2303      	movs	r3, #3
 8006334:	e1b5      	b.n	80066a2 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006336:	4b8b      	ldr	r3, [pc, #556]	@ (8006564 <HAL_RCC_OscConfig+0x774>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800633e:	2b00      	cmp	r3, #0
 8006340:	d0f0      	beq.n	8006324 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	f003 0301 	and.w	r3, r3, #1
 800634a:	2b00      	cmp	r3, #0
 800634c:	d02c      	beq.n	80063a8 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 800634e:	4b84      	ldr	r3, [pc, #528]	@ (8006560 <HAL_RCC_OscConfig+0x770>)
 8006350:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006354:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006360:	497f      	ldr	r1, [pc, #508]	@ (8006560 <HAL_RCC_OscConfig+0x770>)
 8006362:	4313      	orrs	r3, r2
 8006364:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	f003 0304 	and.w	r3, r3, #4
 8006370:	2b00      	cmp	r3, #0
 8006372:	d010      	beq.n	8006396 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006374:	4b7a      	ldr	r3, [pc, #488]	@ (8006560 <HAL_RCC_OscConfig+0x770>)
 8006376:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800637a:	4a79      	ldr	r2, [pc, #484]	@ (8006560 <HAL_RCC_OscConfig+0x770>)
 800637c:	f043 0304 	orr.w	r3, r3, #4
 8006380:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006384:	4b76      	ldr	r3, [pc, #472]	@ (8006560 <HAL_RCC_OscConfig+0x770>)
 8006386:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800638a:	4a75      	ldr	r2, [pc, #468]	@ (8006560 <HAL_RCC_OscConfig+0x770>)
 800638c:	f043 0301 	orr.w	r3, r3, #1
 8006390:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006394:	e018      	b.n	80063c8 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006396:	4b72      	ldr	r3, [pc, #456]	@ (8006560 <HAL_RCC_OscConfig+0x770>)
 8006398:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800639c:	4a70      	ldr	r2, [pc, #448]	@ (8006560 <HAL_RCC_OscConfig+0x770>)
 800639e:	f043 0301 	orr.w	r3, r3, #1
 80063a2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80063a6:	e00f      	b.n	80063c8 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80063a8:	4b6d      	ldr	r3, [pc, #436]	@ (8006560 <HAL_RCC_OscConfig+0x770>)
 80063aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063ae:	4a6c      	ldr	r2, [pc, #432]	@ (8006560 <HAL_RCC_OscConfig+0x770>)
 80063b0:	f023 0301 	bic.w	r3, r3, #1
 80063b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80063b8:	4b69      	ldr	r3, [pc, #420]	@ (8006560 <HAL_RCC_OscConfig+0x770>)
 80063ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063be:	4a68      	ldr	r2, [pc, #416]	@ (8006560 <HAL_RCC_OscConfig+0x770>)
 80063c0:	f023 0304 	bic.w	r3, r3, #4
 80063c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d016      	beq.n	80063fe <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063d0:	f7fd f8aa 	bl	8003528 <HAL_GetTick>
 80063d4:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80063d6:	e00a      	b.n	80063ee <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063d8:	f7fd f8a6 	bl	8003528 <HAL_GetTick>
 80063dc:	4602      	mov	r2, r0
 80063de:	69bb      	ldr	r3, [r7, #24]
 80063e0:	1ad3      	subs	r3, r2, r3
 80063e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d901      	bls.n	80063ee <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 80063ea:	2303      	movs	r3, #3
 80063ec:	e159      	b.n	80066a2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80063ee:	4b5c      	ldr	r3, [pc, #368]	@ (8006560 <HAL_RCC_OscConfig+0x770>)
 80063f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063f4:	f003 0302 	and.w	r3, r3, #2
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d0ed      	beq.n	80063d8 <HAL_RCC_OscConfig+0x5e8>
 80063fc:	e01d      	b.n	800643a <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063fe:	f7fd f893 	bl	8003528 <HAL_GetTick>
 8006402:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006404:	e00a      	b.n	800641c <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006406:	f7fd f88f 	bl	8003528 <HAL_GetTick>
 800640a:	4602      	mov	r2, r0
 800640c:	69bb      	ldr	r3, [r7, #24]
 800640e:	1ad3      	subs	r3, r2, r3
 8006410:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006414:	4293      	cmp	r3, r2
 8006416:	d901      	bls.n	800641c <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8006418:	2303      	movs	r3, #3
 800641a:	e142      	b.n	80066a2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800641c:	4b50      	ldr	r3, [pc, #320]	@ (8006560 <HAL_RCC_OscConfig+0x770>)
 800641e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006422:	f003 0302 	and.w	r3, r3, #2
 8006426:	2b00      	cmp	r3, #0
 8006428:	d1ed      	bne.n	8006406 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 800642a:	4b4d      	ldr	r3, [pc, #308]	@ (8006560 <HAL_RCC_OscConfig+0x770>)
 800642c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006430:	4a4b      	ldr	r2, [pc, #300]	@ (8006560 <HAL_RCC_OscConfig+0x770>)
 8006432:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006436:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800643a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800643e:	2b01      	cmp	r3, #1
 8006440:	d105      	bne.n	800644e <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006442:	4b47      	ldr	r3, [pc, #284]	@ (8006560 <HAL_RCC_OscConfig+0x770>)
 8006444:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006446:	4a46      	ldr	r2, [pc, #280]	@ (8006560 <HAL_RCC_OscConfig+0x770>)
 8006448:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800644c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f003 0320 	and.w	r3, r3, #32
 8006456:	2b00      	cmp	r3, #0
 8006458:	d03c      	beq.n	80064d4 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800645e:	2b00      	cmp	r3, #0
 8006460:	d01c      	beq.n	800649c <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006462:	4b3f      	ldr	r3, [pc, #252]	@ (8006560 <HAL_RCC_OscConfig+0x770>)
 8006464:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006468:	4a3d      	ldr	r2, [pc, #244]	@ (8006560 <HAL_RCC_OscConfig+0x770>)
 800646a:	f043 0301 	orr.w	r3, r3, #1
 800646e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006472:	f7fd f859 	bl	8003528 <HAL_GetTick>
 8006476:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006478:	e008      	b.n	800648c <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800647a:	f7fd f855 	bl	8003528 <HAL_GetTick>
 800647e:	4602      	mov	r2, r0
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	1ad3      	subs	r3, r2, r3
 8006484:	2b02      	cmp	r3, #2
 8006486:	d901      	bls.n	800648c <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8006488:	2303      	movs	r3, #3
 800648a:	e10a      	b.n	80066a2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800648c:	4b34      	ldr	r3, [pc, #208]	@ (8006560 <HAL_RCC_OscConfig+0x770>)
 800648e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006492:	f003 0302 	and.w	r3, r3, #2
 8006496:	2b00      	cmp	r3, #0
 8006498:	d0ef      	beq.n	800647a <HAL_RCC_OscConfig+0x68a>
 800649a:	e01b      	b.n	80064d4 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800649c:	4b30      	ldr	r3, [pc, #192]	@ (8006560 <HAL_RCC_OscConfig+0x770>)
 800649e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80064a2:	4a2f      	ldr	r2, [pc, #188]	@ (8006560 <HAL_RCC_OscConfig+0x770>)
 80064a4:	f023 0301 	bic.w	r3, r3, #1
 80064a8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064ac:	f7fd f83c 	bl	8003528 <HAL_GetTick>
 80064b0:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80064b2:	e008      	b.n	80064c6 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80064b4:	f7fd f838 	bl	8003528 <HAL_GetTick>
 80064b8:	4602      	mov	r2, r0
 80064ba:	69bb      	ldr	r3, [r7, #24]
 80064bc:	1ad3      	subs	r3, r2, r3
 80064be:	2b02      	cmp	r3, #2
 80064c0:	d901      	bls.n	80064c6 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 80064c2:	2303      	movs	r3, #3
 80064c4:	e0ed      	b.n	80066a2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80064c6:	4b26      	ldr	r3, [pc, #152]	@ (8006560 <HAL_RCC_OscConfig+0x770>)
 80064c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80064cc:	f003 0302 	and.w	r3, r3, #2
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d1ef      	bne.n	80064b4 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064d8:	2b00      	cmp	r3, #0
 80064da:	f000 80e1 	beq.w	80066a0 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064e2:	2b02      	cmp	r3, #2
 80064e4:	f040 80b5 	bne.w	8006652 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80064e8:	4b1d      	ldr	r3, [pc, #116]	@ (8006560 <HAL_RCC_OscConfig+0x770>)
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80064ee:	69fb      	ldr	r3, [r7, #28]
 80064f0:	f003 0203 	and.w	r2, r3, #3
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d124      	bne.n	8006546 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006506:	3b01      	subs	r3, #1
 8006508:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800650a:	429a      	cmp	r2, r3
 800650c:	d11b      	bne.n	8006546 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006518:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800651a:	429a      	cmp	r2, r3
 800651c:	d113      	bne.n	8006546 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006528:	085b      	lsrs	r3, r3, #1
 800652a:	3b01      	subs	r3, #1
 800652c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800652e:	429a      	cmp	r2, r3
 8006530:	d109      	bne.n	8006546 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800653c:	085b      	lsrs	r3, r3, #1
 800653e:	3b01      	subs	r3, #1
 8006540:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006542:	429a      	cmp	r2, r3
 8006544:	d05f      	beq.n	8006606 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006546:	6a3b      	ldr	r3, [r7, #32]
 8006548:	2b0c      	cmp	r3, #12
 800654a:	d05a      	beq.n	8006602 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800654c:	4b04      	ldr	r3, [pc, #16]	@ (8006560 <HAL_RCC_OscConfig+0x770>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a03      	ldr	r2, [pc, #12]	@ (8006560 <HAL_RCC_OscConfig+0x770>)
 8006552:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006556:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006558:	f7fc ffe6 	bl	8003528 <HAL_GetTick>
 800655c:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800655e:	e00c      	b.n	800657a <HAL_RCC_OscConfig+0x78a>
 8006560:	40021000 	.word	0x40021000
 8006564:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006568:	f7fc ffde 	bl	8003528 <HAL_GetTick>
 800656c:	4602      	mov	r2, r0
 800656e:	69bb      	ldr	r3, [r7, #24]
 8006570:	1ad3      	subs	r3, r2, r3
 8006572:	2b02      	cmp	r3, #2
 8006574:	d901      	bls.n	800657a <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8006576:	2303      	movs	r3, #3
 8006578:	e093      	b.n	80066a2 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800657a:	4b4c      	ldr	r3, [pc, #304]	@ (80066ac <HAL_RCC_OscConfig+0x8bc>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006582:	2b00      	cmp	r3, #0
 8006584:	d1f0      	bne.n	8006568 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006586:	4b49      	ldr	r3, [pc, #292]	@ (80066ac <HAL_RCC_OscConfig+0x8bc>)
 8006588:	68da      	ldr	r2, [r3, #12]
 800658a:	4b49      	ldr	r3, [pc, #292]	@ (80066b0 <HAL_RCC_OscConfig+0x8c0>)
 800658c:	4013      	ands	r3, r2
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006596:	3a01      	subs	r2, #1
 8006598:	0112      	lsls	r2, r2, #4
 800659a:	4311      	orrs	r1, r2
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80065a0:	0212      	lsls	r2, r2, #8
 80065a2:	4311      	orrs	r1, r2
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80065a8:	0852      	lsrs	r2, r2, #1
 80065aa:	3a01      	subs	r2, #1
 80065ac:	0552      	lsls	r2, r2, #21
 80065ae:	4311      	orrs	r1, r2
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80065b4:	0852      	lsrs	r2, r2, #1
 80065b6:	3a01      	subs	r2, #1
 80065b8:	0652      	lsls	r2, r2, #25
 80065ba:	430a      	orrs	r2, r1
 80065bc:	493b      	ldr	r1, [pc, #236]	@ (80066ac <HAL_RCC_OscConfig+0x8bc>)
 80065be:	4313      	orrs	r3, r2
 80065c0:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80065c2:	4b3a      	ldr	r3, [pc, #232]	@ (80066ac <HAL_RCC_OscConfig+0x8bc>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a39      	ldr	r2, [pc, #228]	@ (80066ac <HAL_RCC_OscConfig+0x8bc>)
 80065c8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80065cc:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80065ce:	4b37      	ldr	r3, [pc, #220]	@ (80066ac <HAL_RCC_OscConfig+0x8bc>)
 80065d0:	68db      	ldr	r3, [r3, #12]
 80065d2:	4a36      	ldr	r2, [pc, #216]	@ (80066ac <HAL_RCC_OscConfig+0x8bc>)
 80065d4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80065d8:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80065da:	f7fc ffa5 	bl	8003528 <HAL_GetTick>
 80065de:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80065e0:	e008      	b.n	80065f4 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065e2:	f7fc ffa1 	bl	8003528 <HAL_GetTick>
 80065e6:	4602      	mov	r2, r0
 80065e8:	69bb      	ldr	r3, [r7, #24]
 80065ea:	1ad3      	subs	r3, r2, r3
 80065ec:	2b02      	cmp	r3, #2
 80065ee:	d901      	bls.n	80065f4 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 80065f0:	2303      	movs	r3, #3
 80065f2:	e056      	b.n	80066a2 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80065f4:	4b2d      	ldr	r3, [pc, #180]	@ (80066ac <HAL_RCC_OscConfig+0x8bc>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d0f0      	beq.n	80065e2 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006600:	e04e      	b.n	80066a0 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	e04d      	b.n	80066a2 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006606:	4b29      	ldr	r3, [pc, #164]	@ (80066ac <HAL_RCC_OscConfig+0x8bc>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800660e:	2b00      	cmp	r3, #0
 8006610:	d146      	bne.n	80066a0 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006612:	4b26      	ldr	r3, [pc, #152]	@ (80066ac <HAL_RCC_OscConfig+0x8bc>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a25      	ldr	r2, [pc, #148]	@ (80066ac <HAL_RCC_OscConfig+0x8bc>)
 8006618:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800661c:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800661e:	4b23      	ldr	r3, [pc, #140]	@ (80066ac <HAL_RCC_OscConfig+0x8bc>)
 8006620:	68db      	ldr	r3, [r3, #12]
 8006622:	4a22      	ldr	r2, [pc, #136]	@ (80066ac <HAL_RCC_OscConfig+0x8bc>)
 8006624:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006628:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800662a:	f7fc ff7d 	bl	8003528 <HAL_GetTick>
 800662e:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006630:	e008      	b.n	8006644 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006632:	f7fc ff79 	bl	8003528 <HAL_GetTick>
 8006636:	4602      	mov	r2, r0
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	1ad3      	subs	r3, r2, r3
 800663c:	2b02      	cmp	r3, #2
 800663e:	d901      	bls.n	8006644 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8006640:	2303      	movs	r3, #3
 8006642:	e02e      	b.n	80066a2 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006644:	4b19      	ldr	r3, [pc, #100]	@ (80066ac <HAL_RCC_OscConfig+0x8bc>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800664c:	2b00      	cmp	r3, #0
 800664e:	d0f0      	beq.n	8006632 <HAL_RCC_OscConfig+0x842>
 8006650:	e026      	b.n	80066a0 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006652:	6a3b      	ldr	r3, [r7, #32]
 8006654:	2b0c      	cmp	r3, #12
 8006656:	d021      	beq.n	800669c <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006658:	4b14      	ldr	r3, [pc, #80]	@ (80066ac <HAL_RCC_OscConfig+0x8bc>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a13      	ldr	r2, [pc, #76]	@ (80066ac <HAL_RCC_OscConfig+0x8bc>)
 800665e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006662:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006664:	f7fc ff60 	bl	8003528 <HAL_GetTick>
 8006668:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800666a:	e008      	b.n	800667e <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800666c:	f7fc ff5c 	bl	8003528 <HAL_GetTick>
 8006670:	4602      	mov	r2, r0
 8006672:	69bb      	ldr	r3, [r7, #24]
 8006674:	1ad3      	subs	r3, r2, r3
 8006676:	2b02      	cmp	r3, #2
 8006678:	d901      	bls.n	800667e <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 800667a:	2303      	movs	r3, #3
 800667c:	e011      	b.n	80066a2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800667e:	4b0b      	ldr	r3, [pc, #44]	@ (80066ac <HAL_RCC_OscConfig+0x8bc>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006686:	2b00      	cmp	r3, #0
 8006688:	d1f0      	bne.n	800666c <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 800668a:	4b08      	ldr	r3, [pc, #32]	@ (80066ac <HAL_RCC_OscConfig+0x8bc>)
 800668c:	68db      	ldr	r3, [r3, #12]
 800668e:	4a07      	ldr	r2, [pc, #28]	@ (80066ac <HAL_RCC_OscConfig+0x8bc>)
 8006690:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8006694:	f023 0303 	bic.w	r3, r3, #3
 8006698:	60d3      	str	r3, [r2, #12]
 800669a:	e001      	b.n	80066a0 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	e000      	b.n	80066a2 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3728      	adds	r7, #40	@ 0x28
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
 80066aa:	bf00      	nop
 80066ac:	40021000 	.word	0x40021000
 80066b0:	f99f808c 	.word	0xf99f808c

080066b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d101      	bne.n	80066c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	e0e7      	b.n	8006898 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80066c8:	4b75      	ldr	r3, [pc, #468]	@ (80068a0 <HAL_RCC_ClockConfig+0x1ec>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 0307 	and.w	r3, r3, #7
 80066d0:	683a      	ldr	r2, [r7, #0]
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d910      	bls.n	80066f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066d6:	4b72      	ldr	r3, [pc, #456]	@ (80068a0 <HAL_RCC_ClockConfig+0x1ec>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f023 0207 	bic.w	r2, r3, #7
 80066de:	4970      	ldr	r1, [pc, #448]	@ (80068a0 <HAL_RCC_ClockConfig+0x1ec>)
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066e6:	4b6e      	ldr	r3, [pc, #440]	@ (80068a0 <HAL_RCC_ClockConfig+0x1ec>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f003 0307 	and.w	r3, r3, #7
 80066ee:	683a      	ldr	r2, [r7, #0]
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d001      	beq.n	80066f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	e0cf      	b.n	8006898 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f003 0302 	and.w	r3, r3, #2
 8006700:	2b00      	cmp	r3, #0
 8006702:	d010      	beq.n	8006726 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	689a      	ldr	r2, [r3, #8]
 8006708:	4b66      	ldr	r3, [pc, #408]	@ (80068a4 <HAL_RCC_ClockConfig+0x1f0>)
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006710:	429a      	cmp	r2, r3
 8006712:	d908      	bls.n	8006726 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006714:	4b63      	ldr	r3, [pc, #396]	@ (80068a4 <HAL_RCC_ClockConfig+0x1f0>)
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	4960      	ldr	r1, [pc, #384]	@ (80068a4 <HAL_RCC_ClockConfig+0x1f0>)
 8006722:	4313      	orrs	r3, r2
 8006724:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f003 0301 	and.w	r3, r3, #1
 800672e:	2b00      	cmp	r3, #0
 8006730:	d04c      	beq.n	80067cc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	2b03      	cmp	r3, #3
 8006738:	d107      	bne.n	800674a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800673a:	4b5a      	ldr	r3, [pc, #360]	@ (80068a4 <HAL_RCC_ClockConfig+0x1f0>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006742:	2b00      	cmp	r3, #0
 8006744:	d121      	bne.n	800678a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	e0a6      	b.n	8006898 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	2b02      	cmp	r3, #2
 8006750:	d107      	bne.n	8006762 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006752:	4b54      	ldr	r3, [pc, #336]	@ (80068a4 <HAL_RCC_ClockConfig+0x1f0>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800675a:	2b00      	cmp	r3, #0
 800675c:	d115      	bne.n	800678a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	e09a      	b.n	8006898 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d107      	bne.n	800677a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800676a:	4b4e      	ldr	r3, [pc, #312]	@ (80068a4 <HAL_RCC_ClockConfig+0x1f0>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f003 0302 	and.w	r3, r3, #2
 8006772:	2b00      	cmp	r3, #0
 8006774:	d109      	bne.n	800678a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	e08e      	b.n	8006898 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800677a:	4b4a      	ldr	r3, [pc, #296]	@ (80068a4 <HAL_RCC_ClockConfig+0x1f0>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006782:	2b00      	cmp	r3, #0
 8006784:	d101      	bne.n	800678a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	e086      	b.n	8006898 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800678a:	4b46      	ldr	r3, [pc, #280]	@ (80068a4 <HAL_RCC_ClockConfig+0x1f0>)
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	f023 0203 	bic.w	r2, r3, #3
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	4943      	ldr	r1, [pc, #268]	@ (80068a4 <HAL_RCC_ClockConfig+0x1f0>)
 8006798:	4313      	orrs	r3, r2
 800679a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800679c:	f7fc fec4 	bl	8003528 <HAL_GetTick>
 80067a0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067a2:	e00a      	b.n	80067ba <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067a4:	f7fc fec0 	bl	8003528 <HAL_GetTick>
 80067a8:	4602      	mov	r2, r0
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	1ad3      	subs	r3, r2, r3
 80067ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d901      	bls.n	80067ba <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80067b6:	2303      	movs	r3, #3
 80067b8:	e06e      	b.n	8006898 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067ba:	4b3a      	ldr	r3, [pc, #232]	@ (80068a4 <HAL_RCC_ClockConfig+0x1f0>)
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	f003 020c 	and.w	r2, r3, #12
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d1eb      	bne.n	80067a4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f003 0302 	and.w	r3, r3, #2
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d010      	beq.n	80067fa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	689a      	ldr	r2, [r3, #8]
 80067dc:	4b31      	ldr	r3, [pc, #196]	@ (80068a4 <HAL_RCC_ClockConfig+0x1f0>)
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d208      	bcs.n	80067fa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067e8:	4b2e      	ldr	r3, [pc, #184]	@ (80068a4 <HAL_RCC_ClockConfig+0x1f0>)
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	492b      	ldr	r1, [pc, #172]	@ (80068a4 <HAL_RCC_ClockConfig+0x1f0>)
 80067f6:	4313      	orrs	r3, r2
 80067f8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80067fa:	4b29      	ldr	r3, [pc, #164]	@ (80068a0 <HAL_RCC_ClockConfig+0x1ec>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f003 0307 	and.w	r3, r3, #7
 8006802:	683a      	ldr	r2, [r7, #0]
 8006804:	429a      	cmp	r2, r3
 8006806:	d210      	bcs.n	800682a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006808:	4b25      	ldr	r3, [pc, #148]	@ (80068a0 <HAL_RCC_ClockConfig+0x1ec>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f023 0207 	bic.w	r2, r3, #7
 8006810:	4923      	ldr	r1, [pc, #140]	@ (80068a0 <HAL_RCC_ClockConfig+0x1ec>)
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	4313      	orrs	r3, r2
 8006816:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006818:	4b21      	ldr	r3, [pc, #132]	@ (80068a0 <HAL_RCC_ClockConfig+0x1ec>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f003 0307 	and.w	r3, r3, #7
 8006820:	683a      	ldr	r2, [r7, #0]
 8006822:	429a      	cmp	r2, r3
 8006824:	d001      	beq.n	800682a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e036      	b.n	8006898 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 0304 	and.w	r3, r3, #4
 8006832:	2b00      	cmp	r3, #0
 8006834:	d008      	beq.n	8006848 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006836:	4b1b      	ldr	r3, [pc, #108]	@ (80068a4 <HAL_RCC_ClockConfig+0x1f0>)
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	68db      	ldr	r3, [r3, #12]
 8006842:	4918      	ldr	r1, [pc, #96]	@ (80068a4 <HAL_RCC_ClockConfig+0x1f0>)
 8006844:	4313      	orrs	r3, r2
 8006846:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f003 0308 	and.w	r3, r3, #8
 8006850:	2b00      	cmp	r3, #0
 8006852:	d009      	beq.n	8006868 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006854:	4b13      	ldr	r3, [pc, #76]	@ (80068a4 <HAL_RCC_ClockConfig+0x1f0>)
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	691b      	ldr	r3, [r3, #16]
 8006860:	00db      	lsls	r3, r3, #3
 8006862:	4910      	ldr	r1, [pc, #64]	@ (80068a4 <HAL_RCC_ClockConfig+0x1f0>)
 8006864:	4313      	orrs	r3, r2
 8006866:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006868:	f000 f824 	bl	80068b4 <HAL_RCC_GetSysClockFreq>
 800686c:	4602      	mov	r2, r0
 800686e:	4b0d      	ldr	r3, [pc, #52]	@ (80068a4 <HAL_RCC_ClockConfig+0x1f0>)
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	091b      	lsrs	r3, r3, #4
 8006874:	f003 030f 	and.w	r3, r3, #15
 8006878:	490b      	ldr	r1, [pc, #44]	@ (80068a8 <HAL_RCC_ClockConfig+0x1f4>)
 800687a:	5ccb      	ldrb	r3, [r1, r3]
 800687c:	f003 031f 	and.w	r3, r3, #31
 8006880:	fa22 f303 	lsr.w	r3, r2, r3
 8006884:	4a09      	ldr	r2, [pc, #36]	@ (80068ac <HAL_RCC_ClockConfig+0x1f8>)
 8006886:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006888:	4b09      	ldr	r3, [pc, #36]	@ (80068b0 <HAL_RCC_ClockConfig+0x1fc>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4618      	mov	r0, r3
 800688e:	f7fc fdfb 	bl	8003488 <HAL_InitTick>
 8006892:	4603      	mov	r3, r0
 8006894:	72fb      	strb	r3, [r7, #11]

  return status;
 8006896:	7afb      	ldrb	r3, [r7, #11]
}
 8006898:	4618      	mov	r0, r3
 800689a:	3710      	adds	r7, #16
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}
 80068a0:	40022000 	.word	0x40022000
 80068a4:	40021000 	.word	0x40021000
 80068a8:	08009494 	.word	0x08009494
 80068ac:	20000020 	.word	0x20000020
 80068b0:	20000024 	.word	0x20000024

080068b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b089      	sub	sp, #36	@ 0x24
 80068b8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80068ba:	2300      	movs	r3, #0
 80068bc:	61fb      	str	r3, [r7, #28]
 80068be:	2300      	movs	r3, #0
 80068c0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068c2:	4b3e      	ldr	r3, [pc, #248]	@ (80069bc <HAL_RCC_GetSysClockFreq+0x108>)
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	f003 030c 	and.w	r3, r3, #12
 80068ca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80068cc:	4b3b      	ldr	r3, [pc, #236]	@ (80069bc <HAL_RCC_GetSysClockFreq+0x108>)
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	f003 0303 	and.w	r3, r3, #3
 80068d4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d005      	beq.n	80068e8 <HAL_RCC_GetSysClockFreq+0x34>
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	2b0c      	cmp	r3, #12
 80068e0:	d121      	bne.n	8006926 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d11e      	bne.n	8006926 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80068e8:	4b34      	ldr	r3, [pc, #208]	@ (80069bc <HAL_RCC_GetSysClockFreq+0x108>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 0308 	and.w	r3, r3, #8
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d107      	bne.n	8006904 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80068f4:	4b31      	ldr	r3, [pc, #196]	@ (80069bc <HAL_RCC_GetSysClockFreq+0x108>)
 80068f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80068fa:	0a1b      	lsrs	r3, r3, #8
 80068fc:	f003 030f 	and.w	r3, r3, #15
 8006900:	61fb      	str	r3, [r7, #28]
 8006902:	e005      	b.n	8006910 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006904:	4b2d      	ldr	r3, [pc, #180]	@ (80069bc <HAL_RCC_GetSysClockFreq+0x108>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	091b      	lsrs	r3, r3, #4
 800690a:	f003 030f 	and.w	r3, r3, #15
 800690e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006910:	4a2b      	ldr	r2, [pc, #172]	@ (80069c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006912:	69fb      	ldr	r3, [r7, #28]
 8006914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006918:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d10d      	bne.n	800693c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006920:	69fb      	ldr	r3, [r7, #28]
 8006922:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006924:	e00a      	b.n	800693c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	2b04      	cmp	r3, #4
 800692a:	d102      	bne.n	8006932 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800692c:	4b25      	ldr	r3, [pc, #148]	@ (80069c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800692e:	61bb      	str	r3, [r7, #24]
 8006930:	e004      	b.n	800693c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	2b08      	cmp	r3, #8
 8006936:	d101      	bne.n	800693c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006938:	4b23      	ldr	r3, [pc, #140]	@ (80069c8 <HAL_RCC_GetSysClockFreq+0x114>)
 800693a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	2b0c      	cmp	r3, #12
 8006940:	d134      	bne.n	80069ac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006942:	4b1e      	ldr	r3, [pc, #120]	@ (80069bc <HAL_RCC_GetSysClockFreq+0x108>)
 8006944:	68db      	ldr	r3, [r3, #12]
 8006946:	f003 0303 	and.w	r3, r3, #3
 800694a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	2b02      	cmp	r3, #2
 8006950:	d003      	beq.n	800695a <HAL_RCC_GetSysClockFreq+0xa6>
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	2b03      	cmp	r3, #3
 8006956:	d003      	beq.n	8006960 <HAL_RCC_GetSysClockFreq+0xac>
 8006958:	e005      	b.n	8006966 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800695a:	4b1a      	ldr	r3, [pc, #104]	@ (80069c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800695c:	617b      	str	r3, [r7, #20]
      break;
 800695e:	e005      	b.n	800696c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006960:	4b19      	ldr	r3, [pc, #100]	@ (80069c8 <HAL_RCC_GetSysClockFreq+0x114>)
 8006962:	617b      	str	r3, [r7, #20]
      break;
 8006964:	e002      	b.n	800696c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006966:	69fb      	ldr	r3, [r7, #28]
 8006968:	617b      	str	r3, [r7, #20]
      break;
 800696a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800696c:	4b13      	ldr	r3, [pc, #76]	@ (80069bc <HAL_RCC_GetSysClockFreq+0x108>)
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	091b      	lsrs	r3, r3, #4
 8006972:	f003 0307 	and.w	r3, r3, #7
 8006976:	3301      	adds	r3, #1
 8006978:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800697a:	4b10      	ldr	r3, [pc, #64]	@ (80069bc <HAL_RCC_GetSysClockFreq+0x108>)
 800697c:	68db      	ldr	r3, [r3, #12]
 800697e:	0a1b      	lsrs	r3, r3, #8
 8006980:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006984:	697a      	ldr	r2, [r7, #20]
 8006986:	fb03 f202 	mul.w	r2, r3, r2
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006990:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006992:	4b0a      	ldr	r3, [pc, #40]	@ (80069bc <HAL_RCC_GetSysClockFreq+0x108>)
 8006994:	68db      	ldr	r3, [r3, #12]
 8006996:	0e5b      	lsrs	r3, r3, #25
 8006998:	f003 0303 	and.w	r3, r3, #3
 800699c:	3301      	adds	r3, #1
 800699e:	005b      	lsls	r3, r3, #1
 80069a0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80069a2:	697a      	ldr	r2, [r7, #20]
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80069aa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80069ac:	69bb      	ldr	r3, [r7, #24]
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3724      	adds	r7, #36	@ 0x24
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr
 80069ba:	bf00      	nop
 80069bc:	40021000 	.word	0x40021000
 80069c0:	080094ac 	.word	0x080094ac
 80069c4:	00f42400 	.word	0x00f42400
 80069c8:	007a1200 	.word	0x007a1200

080069cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80069cc:	b480      	push	{r7}
 80069ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80069d0:	4b03      	ldr	r3, [pc, #12]	@ (80069e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80069d2:	681b      	ldr	r3, [r3, #0]
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr
 80069de:	bf00      	nop
 80069e0:	20000020 	.word	0x20000020

080069e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80069e8:	f7ff fff0 	bl	80069cc <HAL_RCC_GetHCLKFreq>
 80069ec:	4602      	mov	r2, r0
 80069ee:	4b06      	ldr	r3, [pc, #24]	@ (8006a08 <HAL_RCC_GetPCLK1Freq+0x24>)
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	0a1b      	lsrs	r3, r3, #8
 80069f4:	f003 0307 	and.w	r3, r3, #7
 80069f8:	4904      	ldr	r1, [pc, #16]	@ (8006a0c <HAL_RCC_GetPCLK1Freq+0x28>)
 80069fa:	5ccb      	ldrb	r3, [r1, r3]
 80069fc:	f003 031f 	and.w	r3, r3, #31
 8006a00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	bd80      	pop	{r7, pc}
 8006a08:	40021000 	.word	0x40021000
 8006a0c:	080094a4 	.word	0x080094a4

08006a10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006a14:	f7ff ffda 	bl	80069cc <HAL_RCC_GetHCLKFreq>
 8006a18:	4602      	mov	r2, r0
 8006a1a:	4b06      	ldr	r3, [pc, #24]	@ (8006a34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	0adb      	lsrs	r3, r3, #11
 8006a20:	f003 0307 	and.w	r3, r3, #7
 8006a24:	4904      	ldr	r1, [pc, #16]	@ (8006a38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006a26:	5ccb      	ldrb	r3, [r1, r3]
 8006a28:	f003 031f 	and.w	r3, r3, #31
 8006a2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	bd80      	pop	{r7, pc}
 8006a34:	40021000 	.word	0x40021000
 8006a38:	080094a4 	.word	0x080094a4

08006a3c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b086      	sub	sp, #24
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006a44:	2300      	movs	r3, #0
 8006a46:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006a48:	4b2a      	ldr	r3, [pc, #168]	@ (8006af4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006a4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d003      	beq.n	8006a5c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006a54:	f7ff f968 	bl	8005d28 <HAL_PWREx_GetVoltageRange>
 8006a58:	6178      	str	r0, [r7, #20]
 8006a5a:	e014      	b.n	8006a86 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006a5c:	4b25      	ldr	r3, [pc, #148]	@ (8006af4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006a5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a60:	4a24      	ldr	r2, [pc, #144]	@ (8006af4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006a62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a66:	6593      	str	r3, [r2, #88]	@ 0x58
 8006a68:	4b22      	ldr	r3, [pc, #136]	@ (8006af4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006a6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a70:	60fb      	str	r3, [r7, #12]
 8006a72:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006a74:	f7ff f958 	bl	8005d28 <HAL_PWREx_GetVoltageRange>
 8006a78:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006a7a:	4b1e      	ldr	r3, [pc, #120]	@ (8006af4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006a7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a7e:	4a1d      	ldr	r2, [pc, #116]	@ (8006af4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006a80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006a84:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a8c:	d10b      	bne.n	8006aa6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2b80      	cmp	r3, #128	@ 0x80
 8006a92:	d919      	bls.n	8006ac8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2ba0      	cmp	r3, #160	@ 0xa0
 8006a98:	d902      	bls.n	8006aa0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006a9a:	2302      	movs	r3, #2
 8006a9c:	613b      	str	r3, [r7, #16]
 8006a9e:	e013      	b.n	8006ac8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	613b      	str	r3, [r7, #16]
 8006aa4:	e010      	b.n	8006ac8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2b80      	cmp	r3, #128	@ 0x80
 8006aaa:	d902      	bls.n	8006ab2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006aac:	2303      	movs	r3, #3
 8006aae:	613b      	str	r3, [r7, #16]
 8006ab0:	e00a      	b.n	8006ac8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2b80      	cmp	r3, #128	@ 0x80
 8006ab6:	d102      	bne.n	8006abe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006ab8:	2302      	movs	r3, #2
 8006aba:	613b      	str	r3, [r7, #16]
 8006abc:	e004      	b.n	8006ac8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2b70      	cmp	r3, #112	@ 0x70
 8006ac2:	d101      	bne.n	8006ac8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006ac8:	4b0b      	ldr	r3, [pc, #44]	@ (8006af8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f023 0207 	bic.w	r2, r3, #7
 8006ad0:	4909      	ldr	r1, [pc, #36]	@ (8006af8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006ad8:	4b07      	ldr	r3, [pc, #28]	@ (8006af8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f003 0307 	and.w	r3, r3, #7
 8006ae0:	693a      	ldr	r2, [r7, #16]
 8006ae2:	429a      	cmp	r2, r3
 8006ae4:	d001      	beq.n	8006aea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e000      	b.n	8006aec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006aea:	2300      	movs	r3, #0
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3718      	adds	r7, #24
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}
 8006af4:	40021000 	.word	0x40021000
 8006af8:	40022000 	.word	0x40022000

08006afc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b086      	sub	sp, #24
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006b04:	2300      	movs	r3, #0
 8006b06:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006b08:	2300      	movs	r3, #0
 8006b0a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	f000 809e 	beq.w	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006b1e:	4b46      	ldr	r3, [pc, #280]	@ (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006b20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d101      	bne.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	e000      	b.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8006b2e:	2300      	movs	r3, #0
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d00d      	beq.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b34:	4b40      	ldr	r3, [pc, #256]	@ (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006b36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b38:	4a3f      	ldr	r2, [pc, #252]	@ (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006b3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b40:	4b3d      	ldr	r3, [pc, #244]	@ (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006b42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b48:	60bb      	str	r3, [r7, #8]
 8006b4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006b50:	4b3a      	ldr	r3, [pc, #232]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a39      	ldr	r2, [pc, #228]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8006b56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b5a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006b5c:	f7fc fce4 	bl	8003528 <HAL_GetTick>
 8006b60:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006b62:	e009      	b.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b64:	f7fc fce0 	bl	8003528 <HAL_GetTick>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	1ad3      	subs	r3, r2, r3
 8006b6e:	2b02      	cmp	r3, #2
 8006b70:	d902      	bls.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8006b72:	2303      	movs	r3, #3
 8006b74:	74fb      	strb	r3, [r7, #19]
        break;
 8006b76:	e005      	b.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006b78:	4b30      	ldr	r3, [pc, #192]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d0ef      	beq.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8006b84:	7cfb      	ldrb	r3, [r7, #19]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d15a      	bne.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006b8a:	4b2b      	ldr	r3, [pc, #172]	@ (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b90:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b94:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d01e      	beq.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0xde>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ba0:	697a      	ldr	r2, [r7, #20]
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d019      	beq.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006ba6:	4b24      	ldr	r3, [pc, #144]	@ (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006bb0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006bb2:	4b21      	ldr	r3, [pc, #132]	@ (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bb8:	4a1f      	ldr	r2, [pc, #124]	@ (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006bba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006bbe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006bc2:	4b1d      	ldr	r3, [pc, #116]	@ (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bc8:	4a1b      	ldr	r2, [pc, #108]	@ (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006bca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006bd2:	4a19      	ldr	r2, [pc, #100]	@ (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	f003 0301 	and.w	r3, r3, #1
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d016      	beq.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006be4:	f7fc fca0 	bl	8003528 <HAL_GetTick>
 8006be8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006bea:	e00b      	b.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bec:	f7fc fc9c 	bl	8003528 <HAL_GetTick>
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	1ad3      	subs	r3, r2, r3
 8006bf6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d902      	bls.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8006bfe:	2303      	movs	r3, #3
 8006c00:	74fb      	strb	r3, [r7, #19]
            break;
 8006c02:	e006      	b.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c04:	4b0c      	ldr	r3, [pc, #48]	@ (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c0a:	f003 0302 	and.w	r3, r3, #2
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d0ec      	beq.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8006c12:	7cfb      	ldrb	r3, [r7, #19]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d10b      	bne.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c18:	4b07      	ldr	r3, [pc, #28]	@ (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c1e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c26:	4904      	ldr	r1, [pc, #16]	@ (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006c2e:	e009      	b.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006c30:	7cfb      	ldrb	r3, [r7, #19]
 8006c32:	74bb      	strb	r3, [r7, #18]
 8006c34:	e006      	b.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8006c36:	bf00      	nop
 8006c38:	40021000 	.word	0x40021000
 8006c3c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c40:	7cfb      	ldrb	r3, [r7, #19]
 8006c42:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006c44:	7c7b      	ldrb	r3, [r7, #17]
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d105      	bne.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c4a:	4b6e      	ldr	r3, [pc, #440]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006c4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c4e:	4a6d      	ldr	r2, [pc, #436]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006c50:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006c54:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f003 0301 	and.w	r3, r3, #1
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d00a      	beq.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006c62:	4b68      	ldr	r3, [pc, #416]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c68:	f023 0203 	bic.w	r2, r3, #3
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	4964      	ldr	r1, [pc, #400]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006c72:	4313      	orrs	r3, r2
 8006c74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f003 0302 	and.w	r3, r3, #2
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d00a      	beq.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006c84:	4b5f      	ldr	r3, [pc, #380]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c8a:	f023 020c 	bic.w	r2, r3, #12
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	495c      	ldr	r1, [pc, #368]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006c94:	4313      	orrs	r3, r2
 8006c96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f003 0304 	and.w	r3, r3, #4
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d00a      	beq.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006ca6:	4b57      	ldr	r3, [pc, #348]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cac:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	4953      	ldr	r1, [pc, #332]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f003 0320 	and.w	r3, r3, #32
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d00a      	beq.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006cc8:	4b4e      	ldr	r3, [pc, #312]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cce:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	691b      	ldr	r3, [r3, #16]
 8006cd6:	494b      	ldr	r1, [pc, #300]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d00a      	beq.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006cea:	4b46      	ldr	r3, [pc, #280]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cf0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6a1b      	ldr	r3, [r3, #32]
 8006cf8:	4942      	ldr	r1, [pc, #264]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d00a      	beq.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006d0c:	4b3d      	ldr	r3, [pc, #244]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d12:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d1a:	493a      	ldr	r1, [pc, #232]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d00a      	beq.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006d2e:	4b35      	ldr	r3, [pc, #212]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d34:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	695b      	ldr	r3, [r3, #20]
 8006d3c:	4931      	ldr	r1, [pc, #196]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d00a      	beq.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006d50:	4b2c      	ldr	r3, [pc, #176]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d56:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	699b      	ldr	r3, [r3, #24]
 8006d5e:	4929      	ldr	r1, [pc, #164]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006d60:	4313      	orrs	r3, r2
 8006d62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d00a      	beq.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006d72:	4b24      	ldr	r3, [pc, #144]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d78:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	69db      	ldr	r3, [r3, #28]
 8006d80:	4920      	ldr	r1, [pc, #128]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006d82:	4313      	orrs	r3, r2
 8006d84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d015      	beq.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006d94:	4b1b      	ldr	r3, [pc, #108]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d9a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006da2:	4918      	ldr	r1, [pc, #96]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006da4:	4313      	orrs	r3, r2
 8006da6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006db2:	d105      	bne.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006db4:	4b13      	ldr	r3, [pc, #76]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	4a12      	ldr	r2, [pc, #72]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006dba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006dbe:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d015      	beq.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006dcc:	4b0d      	ldr	r3, [pc, #52]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dd2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dda:	490a      	ldr	r1, [pc, #40]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006de6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006dea:	d105      	bne.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006dec:	4b05      	ldr	r3, [pc, #20]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006dee:	68db      	ldr	r3, [r3, #12]
 8006df0:	4a04      	ldr	r2, [pc, #16]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006df2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006df6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006df8:	7cbb      	ldrb	r3, [r7, #18]
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3718      	adds	r7, #24
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}
 8006e02:	bf00      	nop
 8006e04:	40021000 	.word	0x40021000

08006e08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b082      	sub	sp, #8
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d101      	bne.n	8006e1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	e049      	b.n	8006eae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e20:	b2db      	uxtb	r3, r3
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d106      	bne.n	8006e34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f7fc f8f8 	bl	8003024 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2202      	movs	r2, #2
 8006e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681a      	ldr	r2, [r3, #0]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	3304      	adds	r3, #4
 8006e44:	4619      	mov	r1, r3
 8006e46:	4610      	mov	r0, r2
 8006e48:	f000 f98e 	bl	8007168 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2201      	movs	r2, #1
 8006e78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2201      	movs	r2, #1
 8006e88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2201      	movs	r2, #1
 8006e90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2201      	movs	r2, #1
 8006e98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006eac:	2300      	movs	r3, #0
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3708      	adds	r7, #8
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
	...

08006eb8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b085      	sub	sp, #20
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ec6:	b2db      	uxtb	r3, r3
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d001      	beq.n	8006ed0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e033      	b.n	8006f38 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2202      	movs	r2, #2
 8006ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a19      	ldr	r2, [pc, #100]	@ (8006f44 <HAL_TIM_Base_Start+0x8c>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d009      	beq.n	8006ef6 <HAL_TIM_Base_Start+0x3e>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006eea:	d004      	beq.n	8006ef6 <HAL_TIM_Base_Start+0x3e>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a15      	ldr	r2, [pc, #84]	@ (8006f48 <HAL_TIM_Base_Start+0x90>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d115      	bne.n	8006f22 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	689a      	ldr	r2, [r3, #8]
 8006efc:	4b13      	ldr	r3, [pc, #76]	@ (8006f4c <HAL_TIM_Base_Start+0x94>)
 8006efe:	4013      	ands	r3, r2
 8006f00:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2b06      	cmp	r3, #6
 8006f06:	d015      	beq.n	8006f34 <HAL_TIM_Base_Start+0x7c>
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f0e:	d011      	beq.n	8006f34 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f042 0201 	orr.w	r2, r2, #1
 8006f1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f20:	e008      	b.n	8006f34 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f042 0201 	orr.w	r2, r2, #1
 8006f30:	601a      	str	r2, [r3, #0]
 8006f32:	e000      	b.n	8006f36 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f34:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006f36:	2300      	movs	r3, #0
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3714      	adds	r7, #20
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr
 8006f44:	40012c00 	.word	0x40012c00
 8006f48:	40014000 	.word	0x40014000
 8006f4c:	00010007 	.word	0x00010007

08006f50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b084      	sub	sp, #16
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d101      	bne.n	8006f6c <HAL_TIM_ConfigClockSource+0x1c>
 8006f68:	2302      	movs	r3, #2
 8006f6a:	e0b6      	b.n	80070da <HAL_TIM_ConfigClockSource+0x18a>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2202      	movs	r2, #2
 8006f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	689b      	ldr	r3, [r3, #8]
 8006f82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f8a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006f8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006f96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	68ba      	ldr	r2, [r7, #8]
 8006f9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fa8:	d03e      	beq.n	8007028 <HAL_TIM_ConfigClockSource+0xd8>
 8006faa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fae:	f200 8087 	bhi.w	80070c0 <HAL_TIM_ConfigClockSource+0x170>
 8006fb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fb6:	f000 8086 	beq.w	80070c6 <HAL_TIM_ConfigClockSource+0x176>
 8006fba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fbe:	d87f      	bhi.n	80070c0 <HAL_TIM_ConfigClockSource+0x170>
 8006fc0:	2b70      	cmp	r3, #112	@ 0x70
 8006fc2:	d01a      	beq.n	8006ffa <HAL_TIM_ConfigClockSource+0xaa>
 8006fc4:	2b70      	cmp	r3, #112	@ 0x70
 8006fc6:	d87b      	bhi.n	80070c0 <HAL_TIM_ConfigClockSource+0x170>
 8006fc8:	2b60      	cmp	r3, #96	@ 0x60
 8006fca:	d050      	beq.n	800706e <HAL_TIM_ConfigClockSource+0x11e>
 8006fcc:	2b60      	cmp	r3, #96	@ 0x60
 8006fce:	d877      	bhi.n	80070c0 <HAL_TIM_ConfigClockSource+0x170>
 8006fd0:	2b50      	cmp	r3, #80	@ 0x50
 8006fd2:	d03c      	beq.n	800704e <HAL_TIM_ConfigClockSource+0xfe>
 8006fd4:	2b50      	cmp	r3, #80	@ 0x50
 8006fd6:	d873      	bhi.n	80070c0 <HAL_TIM_ConfigClockSource+0x170>
 8006fd8:	2b40      	cmp	r3, #64	@ 0x40
 8006fda:	d058      	beq.n	800708e <HAL_TIM_ConfigClockSource+0x13e>
 8006fdc:	2b40      	cmp	r3, #64	@ 0x40
 8006fde:	d86f      	bhi.n	80070c0 <HAL_TIM_ConfigClockSource+0x170>
 8006fe0:	2b30      	cmp	r3, #48	@ 0x30
 8006fe2:	d064      	beq.n	80070ae <HAL_TIM_ConfigClockSource+0x15e>
 8006fe4:	2b30      	cmp	r3, #48	@ 0x30
 8006fe6:	d86b      	bhi.n	80070c0 <HAL_TIM_ConfigClockSource+0x170>
 8006fe8:	2b20      	cmp	r3, #32
 8006fea:	d060      	beq.n	80070ae <HAL_TIM_ConfigClockSource+0x15e>
 8006fec:	2b20      	cmp	r3, #32
 8006fee:	d867      	bhi.n	80070c0 <HAL_TIM_ConfigClockSource+0x170>
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d05c      	beq.n	80070ae <HAL_TIM_ConfigClockSource+0x15e>
 8006ff4:	2b10      	cmp	r3, #16
 8006ff6:	d05a      	beq.n	80070ae <HAL_TIM_ConfigClockSource+0x15e>
 8006ff8:	e062      	b.n	80070c0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800700a:	f000 fa2a 	bl	8007462 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	689b      	ldr	r3, [r3, #8]
 8007014:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800701c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	68ba      	ldr	r2, [r7, #8]
 8007024:	609a      	str	r2, [r3, #8]
      break;
 8007026:	e04f      	b.n	80070c8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007038:	f000 fa13 	bl	8007462 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	689a      	ldr	r2, [r3, #8]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800704a:	609a      	str	r2, [r3, #8]
      break;
 800704c:	e03c      	b.n	80070c8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800705a:	461a      	mov	r2, r3
 800705c:	f000 f987 	bl	800736e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	2150      	movs	r1, #80	@ 0x50
 8007066:	4618      	mov	r0, r3
 8007068:	f000 f9e0 	bl	800742c <TIM_ITRx_SetConfig>
      break;
 800706c:	e02c      	b.n	80070c8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800707a:	461a      	mov	r2, r3
 800707c:	f000 f9a6 	bl	80073cc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	2160      	movs	r1, #96	@ 0x60
 8007086:	4618      	mov	r0, r3
 8007088:	f000 f9d0 	bl	800742c <TIM_ITRx_SetConfig>
      break;
 800708c:	e01c      	b.n	80070c8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800709a:	461a      	mov	r2, r3
 800709c:	f000 f967 	bl	800736e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	2140      	movs	r1, #64	@ 0x40
 80070a6:	4618      	mov	r0, r3
 80070a8:	f000 f9c0 	bl	800742c <TIM_ITRx_SetConfig>
      break;
 80070ac:	e00c      	b.n	80070c8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681a      	ldr	r2, [r3, #0]
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4619      	mov	r1, r3
 80070b8:	4610      	mov	r0, r2
 80070ba:	f000 f9b7 	bl	800742c <TIM_ITRx_SetConfig>
      break;
 80070be:	e003      	b.n	80070c8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80070c0:	2301      	movs	r3, #1
 80070c2:	73fb      	strb	r3, [r7, #15]
      break;
 80070c4:	e000      	b.n	80070c8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80070c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2201      	movs	r2, #1
 80070cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80070d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3710      	adds	r7, #16
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}

080070e2 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80070e2:	b580      	push	{r7, lr}
 80070e4:	b082      	sub	sp, #8
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	6078      	str	r0, [r7, #4]
 80070ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	d101      	bne.n	80070fa <HAL_TIM_SlaveConfigSynchro+0x18>
 80070f6:	2302      	movs	r3, #2
 80070f8:	e031      	b.n	800715e <HAL_TIM_SlaveConfigSynchro+0x7c>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2201      	movs	r2, #1
 80070fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2202      	movs	r2, #2
 8007106:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800710a:	6839      	ldr	r1, [r7, #0]
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f000 f89b 	bl	8007248 <TIM_SlaveTimer_SetConfig>
 8007112:	4603      	mov	r3, r0
 8007114:	2b00      	cmp	r3, #0
 8007116:	d009      	beq.n	800712c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2201      	movs	r2, #1
 800711c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2200      	movs	r2, #0
 8007124:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8007128:	2301      	movs	r3, #1
 800712a:	e018      	b.n	800715e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	68da      	ldr	r2, [r3, #12]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800713a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	68da      	ldr	r2, [r3, #12]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800714a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2201      	movs	r2, #1
 8007150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800715c:	2300      	movs	r3, #0
}
 800715e:	4618      	mov	r0, r3
 8007160:	3708      	adds	r7, #8
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
	...

08007168 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007168:	b480      	push	{r7}
 800716a:	b085      	sub	sp, #20
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	4a30      	ldr	r2, [pc, #192]	@ (800723c <TIM_Base_SetConfig+0xd4>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d003      	beq.n	8007188 <TIM_Base_SetConfig+0x20>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007186:	d108      	bne.n	800719a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800718e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	68fa      	ldr	r2, [r7, #12]
 8007196:	4313      	orrs	r3, r2
 8007198:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	4a27      	ldr	r2, [pc, #156]	@ (800723c <TIM_Base_SetConfig+0xd4>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d00b      	beq.n	80071ba <TIM_Base_SetConfig+0x52>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071a8:	d007      	beq.n	80071ba <TIM_Base_SetConfig+0x52>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	4a24      	ldr	r2, [pc, #144]	@ (8007240 <TIM_Base_SetConfig+0xd8>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d003      	beq.n	80071ba <TIM_Base_SetConfig+0x52>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	4a23      	ldr	r2, [pc, #140]	@ (8007244 <TIM_Base_SetConfig+0xdc>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d108      	bne.n	80071cc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	68db      	ldr	r3, [r3, #12]
 80071c6:	68fa      	ldr	r2, [r7, #12]
 80071c8:	4313      	orrs	r3, r2
 80071ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	695b      	ldr	r3, [r3, #20]
 80071d6:	4313      	orrs	r3, r2
 80071d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	68fa      	ldr	r2, [r7, #12]
 80071de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	689a      	ldr	r2, [r3, #8]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	4a12      	ldr	r2, [pc, #72]	@ (800723c <TIM_Base_SetConfig+0xd4>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d007      	beq.n	8007208 <TIM_Base_SetConfig+0xa0>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	4a11      	ldr	r2, [pc, #68]	@ (8007240 <TIM_Base_SetConfig+0xd8>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d003      	beq.n	8007208 <TIM_Base_SetConfig+0xa0>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	4a10      	ldr	r2, [pc, #64]	@ (8007244 <TIM_Base_SetConfig+0xdc>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d103      	bne.n	8007210 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	691a      	ldr	r2, [r3, #16]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2201      	movs	r2, #1
 8007214:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	691b      	ldr	r3, [r3, #16]
 800721a:	f003 0301 	and.w	r3, r3, #1
 800721e:	2b01      	cmp	r3, #1
 8007220:	d105      	bne.n	800722e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	691b      	ldr	r3, [r3, #16]
 8007226:	f023 0201 	bic.w	r2, r3, #1
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	611a      	str	r2, [r3, #16]
  }
}
 800722e:	bf00      	nop
 8007230:	3714      	adds	r7, #20
 8007232:	46bd      	mov	sp, r7
 8007234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007238:	4770      	bx	lr
 800723a:	bf00      	nop
 800723c:	40012c00 	.word	0x40012c00
 8007240:	40014000 	.word	0x40014000
 8007244:	40014400 	.word	0x40014400

08007248 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b086      	sub	sp, #24
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007252:	2300      	movs	r3, #0
 8007254:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007264:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	693a      	ldr	r2, [r7, #16]
 800726c:	4313      	orrs	r3, r2
 800726e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007276:	f023 0307 	bic.w	r3, r3, #7
 800727a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	693a      	ldr	r2, [r7, #16]
 8007282:	4313      	orrs	r3, r2
 8007284:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	693a      	ldr	r2, [r7, #16]
 800728c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	2b70      	cmp	r3, #112	@ 0x70
 8007294:	d01a      	beq.n	80072cc <TIM_SlaveTimer_SetConfig+0x84>
 8007296:	2b70      	cmp	r3, #112	@ 0x70
 8007298:	d860      	bhi.n	800735c <TIM_SlaveTimer_SetConfig+0x114>
 800729a:	2b60      	cmp	r3, #96	@ 0x60
 800729c:	d054      	beq.n	8007348 <TIM_SlaveTimer_SetConfig+0x100>
 800729e:	2b60      	cmp	r3, #96	@ 0x60
 80072a0:	d85c      	bhi.n	800735c <TIM_SlaveTimer_SetConfig+0x114>
 80072a2:	2b50      	cmp	r3, #80	@ 0x50
 80072a4:	d046      	beq.n	8007334 <TIM_SlaveTimer_SetConfig+0xec>
 80072a6:	2b50      	cmp	r3, #80	@ 0x50
 80072a8:	d858      	bhi.n	800735c <TIM_SlaveTimer_SetConfig+0x114>
 80072aa:	2b40      	cmp	r3, #64	@ 0x40
 80072ac:	d019      	beq.n	80072e2 <TIM_SlaveTimer_SetConfig+0x9a>
 80072ae:	2b40      	cmp	r3, #64	@ 0x40
 80072b0:	d854      	bhi.n	800735c <TIM_SlaveTimer_SetConfig+0x114>
 80072b2:	2b30      	cmp	r3, #48	@ 0x30
 80072b4:	d055      	beq.n	8007362 <TIM_SlaveTimer_SetConfig+0x11a>
 80072b6:	2b30      	cmp	r3, #48	@ 0x30
 80072b8:	d850      	bhi.n	800735c <TIM_SlaveTimer_SetConfig+0x114>
 80072ba:	2b20      	cmp	r3, #32
 80072bc:	d051      	beq.n	8007362 <TIM_SlaveTimer_SetConfig+0x11a>
 80072be:	2b20      	cmp	r3, #32
 80072c0:	d84c      	bhi.n	800735c <TIM_SlaveTimer_SetConfig+0x114>
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d04d      	beq.n	8007362 <TIM_SlaveTimer_SetConfig+0x11a>
 80072c6:	2b10      	cmp	r3, #16
 80072c8:	d04b      	beq.n	8007362 <TIM_SlaveTimer_SetConfig+0x11a>
 80072ca:	e047      	b.n	800735c <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80072dc:	f000 f8c1 	bl	8007462 <TIM_ETR_SetConfig>
      break;
 80072e0:	e040      	b.n	8007364 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	2b05      	cmp	r3, #5
 80072e8:	d101      	bne.n	80072ee <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 80072ea:	2301      	movs	r3, #1
 80072ec:	e03b      	b.n	8007366 <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	6a1b      	ldr	r3, [r3, #32]
 80072f4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	6a1a      	ldr	r2, [r3, #32]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f022 0201 	bic.w	r2, r2, #1
 8007304:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	699b      	ldr	r3, [r3, #24]
 800730c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007314:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	691b      	ldr	r3, [r3, #16]
 800731a:	011b      	lsls	r3, r3, #4
 800731c:	68ba      	ldr	r2, [r7, #8]
 800731e:	4313      	orrs	r3, r2
 8007320:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	68ba      	ldr	r2, [r7, #8]
 8007328:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	68fa      	ldr	r2, [r7, #12]
 8007330:	621a      	str	r2, [r3, #32]
      break;
 8007332:	e017      	b.n	8007364 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007340:	461a      	mov	r2, r3
 8007342:	f000 f814 	bl	800736e <TIM_TI1_ConfigInputStage>
      break;
 8007346:	e00d      	b.n	8007364 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007354:	461a      	mov	r2, r3
 8007356:	f000 f839 	bl	80073cc <TIM_TI2_ConfigInputStage>
      break;
 800735a:	e003      	b.n	8007364 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800735c:	2301      	movs	r3, #1
 800735e:	75fb      	strb	r3, [r7, #23]
      break;
 8007360:	e000      	b.n	8007364 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 8007362:	bf00      	nop
  }

  return status;
 8007364:	7dfb      	ldrb	r3, [r7, #23]
}
 8007366:	4618      	mov	r0, r3
 8007368:	3718      	adds	r7, #24
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}

0800736e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800736e:	b480      	push	{r7}
 8007370:	b087      	sub	sp, #28
 8007372:	af00      	add	r7, sp, #0
 8007374:	60f8      	str	r0, [r7, #12]
 8007376:	60b9      	str	r1, [r7, #8]
 8007378:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	6a1b      	ldr	r3, [r3, #32]
 800737e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	6a1b      	ldr	r3, [r3, #32]
 8007384:	f023 0201 	bic.w	r2, r3, #1
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	699b      	ldr	r3, [r3, #24]
 8007390:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007398:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	011b      	lsls	r3, r3, #4
 800739e:	693a      	ldr	r2, [r7, #16]
 80073a0:	4313      	orrs	r3, r2
 80073a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	f023 030a 	bic.w	r3, r3, #10
 80073aa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80073ac:	697a      	ldr	r2, [r7, #20]
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	4313      	orrs	r3, r2
 80073b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	693a      	ldr	r2, [r7, #16]
 80073b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	697a      	ldr	r2, [r7, #20]
 80073be:	621a      	str	r2, [r3, #32]
}
 80073c0:	bf00      	nop
 80073c2:	371c      	adds	r7, #28
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b087      	sub	sp, #28
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	60f8      	str	r0, [r7, #12]
 80073d4:	60b9      	str	r1, [r7, #8]
 80073d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	6a1b      	ldr	r3, [r3, #32]
 80073dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	6a1b      	ldr	r3, [r3, #32]
 80073e2:	f023 0210 	bic.w	r2, r3, #16
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	699b      	ldr	r3, [r3, #24]
 80073ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80073f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	031b      	lsls	r3, r3, #12
 80073fc:	693a      	ldr	r2, [r7, #16]
 80073fe:	4313      	orrs	r3, r2
 8007400:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007408:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	011b      	lsls	r3, r3, #4
 800740e:	697a      	ldr	r2, [r7, #20]
 8007410:	4313      	orrs	r3, r2
 8007412:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	693a      	ldr	r2, [r7, #16]
 8007418:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	697a      	ldr	r2, [r7, #20]
 800741e:	621a      	str	r2, [r3, #32]
}
 8007420:	bf00      	nop
 8007422:	371c      	adds	r7, #28
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr

0800742c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800742c:	b480      	push	{r7}
 800742e:	b085      	sub	sp, #20
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007442:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007444:	683a      	ldr	r2, [r7, #0]
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	4313      	orrs	r3, r2
 800744a:	f043 0307 	orr.w	r3, r3, #7
 800744e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	68fa      	ldr	r2, [r7, #12]
 8007454:	609a      	str	r2, [r3, #8]
}
 8007456:	bf00      	nop
 8007458:	3714      	adds	r7, #20
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr

08007462 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007462:	b480      	push	{r7}
 8007464:	b087      	sub	sp, #28
 8007466:	af00      	add	r7, sp, #0
 8007468:	60f8      	str	r0, [r7, #12]
 800746a:	60b9      	str	r1, [r7, #8]
 800746c:	607a      	str	r2, [r7, #4]
 800746e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800747c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	021a      	lsls	r2, r3, #8
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	431a      	orrs	r2, r3
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	4313      	orrs	r3, r2
 800748a:	697a      	ldr	r2, [r7, #20]
 800748c:	4313      	orrs	r3, r2
 800748e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	697a      	ldr	r2, [r7, #20]
 8007494:	609a      	str	r2, [r3, #8]
}
 8007496:	bf00      	nop
 8007498:	371c      	adds	r7, #28
 800749a:	46bd      	mov	sp, r7
 800749c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a0:	4770      	bx	lr
	...

080074a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b085      	sub	sp, #20
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d101      	bne.n	80074bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80074b8:	2302      	movs	r3, #2
 80074ba:	e04f      	b.n	800755c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2201      	movs	r2, #1
 80074c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2202      	movs	r2, #2
 80074c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	689b      	ldr	r3, [r3, #8]
 80074da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a21      	ldr	r2, [pc, #132]	@ (8007568 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d108      	bne.n	80074f8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80074ec:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	68fa      	ldr	r2, [r7, #12]
 80074f4:	4313      	orrs	r3, r2
 80074f6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	68fa      	ldr	r2, [r7, #12]
 8007506:	4313      	orrs	r3, r2
 8007508:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	68fa      	ldr	r2, [r7, #12]
 8007510:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a14      	ldr	r2, [pc, #80]	@ (8007568 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d009      	beq.n	8007530 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007524:	d004      	beq.n	8007530 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a10      	ldr	r2, [pc, #64]	@ (800756c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d10c      	bne.n	800754a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007536:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	68ba      	ldr	r2, [r7, #8]
 800753e:	4313      	orrs	r3, r2
 8007540:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	68ba      	ldr	r2, [r7, #8]
 8007548:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2201      	movs	r2, #1
 800754e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2200      	movs	r2, #0
 8007556:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800755a:	2300      	movs	r3, #0
}
 800755c:	4618      	mov	r0, r3
 800755e:	3714      	adds	r7, #20
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr
 8007568:	40012c00 	.word	0x40012c00
 800756c:	40014000 	.word	0x40014000

08007570 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b082      	sub	sp, #8
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d101      	bne.n	8007582 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800757e:	2301      	movs	r3, #1
 8007580:	e040      	b.n	8007604 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007586:	2b00      	cmp	r3, #0
 8007588:	d106      	bne.n	8007598 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2200      	movs	r2, #0
 800758e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f7fb fdba 	bl	800310c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2224      	movs	r2, #36	@ 0x24
 800759c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f022 0201 	bic.w	r2, r2, #1
 80075ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d002      	beq.n	80075bc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 fa82 	bl	8007ac0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f000 f825 	bl	800760c <UART_SetConfig>
 80075c2:	4603      	mov	r3, r0
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d101      	bne.n	80075cc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80075c8:	2301      	movs	r3, #1
 80075ca:	e01b      	b.n	8007604 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	685a      	ldr	r2, [r3, #4]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80075da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	689a      	ldr	r2, [r3, #8]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80075ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	681a      	ldr	r2, [r3, #0]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f042 0201 	orr.w	r2, r2, #1
 80075fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f000 fb01 	bl	8007c04 <UART_CheckIdleState>
 8007602:	4603      	mov	r3, r0
}
 8007604:	4618      	mov	r0, r3
 8007606:	3708      	adds	r7, #8
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}

0800760c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800760c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007610:	b08a      	sub	sp, #40	@ 0x28
 8007612:	af00      	add	r7, sp, #0
 8007614:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007616:	2300      	movs	r3, #0
 8007618:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	689a      	ldr	r2, [r3, #8]
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	691b      	ldr	r3, [r3, #16]
 8007624:	431a      	orrs	r2, r3
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	695b      	ldr	r3, [r3, #20]
 800762a:	431a      	orrs	r2, r3
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	69db      	ldr	r3, [r3, #28]
 8007630:	4313      	orrs	r3, r2
 8007632:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	681a      	ldr	r2, [r3, #0]
 800763a:	4b9e      	ldr	r3, [pc, #632]	@ (80078b4 <UART_SetConfig+0x2a8>)
 800763c:	4013      	ands	r3, r2
 800763e:	68fa      	ldr	r2, [r7, #12]
 8007640:	6812      	ldr	r2, [r2, #0]
 8007642:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007644:	430b      	orrs	r3, r1
 8007646:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	68da      	ldr	r2, [r3, #12]
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	430a      	orrs	r2, r1
 800765c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	699b      	ldr	r3, [r3, #24]
 8007662:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a93      	ldr	r2, [pc, #588]	@ (80078b8 <UART_SetConfig+0x2ac>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d004      	beq.n	8007678 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	6a1b      	ldr	r3, [r3, #32]
 8007672:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007674:	4313      	orrs	r3, r2
 8007676:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007688:	430a      	orrs	r2, r1
 800768a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a8a      	ldr	r2, [pc, #552]	@ (80078bc <UART_SetConfig+0x2b0>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d126      	bne.n	80076e4 <UART_SetConfig+0xd8>
 8007696:	4b8a      	ldr	r3, [pc, #552]	@ (80078c0 <UART_SetConfig+0x2b4>)
 8007698:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800769c:	f003 0303 	and.w	r3, r3, #3
 80076a0:	2b03      	cmp	r3, #3
 80076a2:	d81b      	bhi.n	80076dc <UART_SetConfig+0xd0>
 80076a4:	a201      	add	r2, pc, #4	@ (adr r2, 80076ac <UART_SetConfig+0xa0>)
 80076a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076aa:	bf00      	nop
 80076ac:	080076bd 	.word	0x080076bd
 80076b0:	080076cd 	.word	0x080076cd
 80076b4:	080076c5 	.word	0x080076c5
 80076b8:	080076d5 	.word	0x080076d5
 80076bc:	2301      	movs	r3, #1
 80076be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076c2:	e0ab      	b.n	800781c <UART_SetConfig+0x210>
 80076c4:	2302      	movs	r3, #2
 80076c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076ca:	e0a7      	b.n	800781c <UART_SetConfig+0x210>
 80076cc:	2304      	movs	r3, #4
 80076ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076d2:	e0a3      	b.n	800781c <UART_SetConfig+0x210>
 80076d4:	2308      	movs	r3, #8
 80076d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076da:	e09f      	b.n	800781c <UART_SetConfig+0x210>
 80076dc:	2310      	movs	r3, #16
 80076de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076e2:	e09b      	b.n	800781c <UART_SetConfig+0x210>
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a76      	ldr	r2, [pc, #472]	@ (80078c4 <UART_SetConfig+0x2b8>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d138      	bne.n	8007760 <UART_SetConfig+0x154>
 80076ee:	4b74      	ldr	r3, [pc, #464]	@ (80078c0 <UART_SetConfig+0x2b4>)
 80076f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076f4:	f003 030c 	and.w	r3, r3, #12
 80076f8:	2b0c      	cmp	r3, #12
 80076fa:	d82d      	bhi.n	8007758 <UART_SetConfig+0x14c>
 80076fc:	a201      	add	r2, pc, #4	@ (adr r2, 8007704 <UART_SetConfig+0xf8>)
 80076fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007702:	bf00      	nop
 8007704:	08007739 	.word	0x08007739
 8007708:	08007759 	.word	0x08007759
 800770c:	08007759 	.word	0x08007759
 8007710:	08007759 	.word	0x08007759
 8007714:	08007749 	.word	0x08007749
 8007718:	08007759 	.word	0x08007759
 800771c:	08007759 	.word	0x08007759
 8007720:	08007759 	.word	0x08007759
 8007724:	08007741 	.word	0x08007741
 8007728:	08007759 	.word	0x08007759
 800772c:	08007759 	.word	0x08007759
 8007730:	08007759 	.word	0x08007759
 8007734:	08007751 	.word	0x08007751
 8007738:	2300      	movs	r3, #0
 800773a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800773e:	e06d      	b.n	800781c <UART_SetConfig+0x210>
 8007740:	2302      	movs	r3, #2
 8007742:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007746:	e069      	b.n	800781c <UART_SetConfig+0x210>
 8007748:	2304      	movs	r3, #4
 800774a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800774e:	e065      	b.n	800781c <UART_SetConfig+0x210>
 8007750:	2308      	movs	r3, #8
 8007752:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007756:	e061      	b.n	800781c <UART_SetConfig+0x210>
 8007758:	2310      	movs	r3, #16
 800775a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800775e:	e05d      	b.n	800781c <UART_SetConfig+0x210>
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a58      	ldr	r2, [pc, #352]	@ (80078c8 <UART_SetConfig+0x2bc>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d125      	bne.n	80077b6 <UART_SetConfig+0x1aa>
 800776a:	4b55      	ldr	r3, [pc, #340]	@ (80078c0 <UART_SetConfig+0x2b4>)
 800776c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007770:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007774:	2b30      	cmp	r3, #48	@ 0x30
 8007776:	d016      	beq.n	80077a6 <UART_SetConfig+0x19a>
 8007778:	2b30      	cmp	r3, #48	@ 0x30
 800777a:	d818      	bhi.n	80077ae <UART_SetConfig+0x1a2>
 800777c:	2b20      	cmp	r3, #32
 800777e:	d00a      	beq.n	8007796 <UART_SetConfig+0x18a>
 8007780:	2b20      	cmp	r3, #32
 8007782:	d814      	bhi.n	80077ae <UART_SetConfig+0x1a2>
 8007784:	2b00      	cmp	r3, #0
 8007786:	d002      	beq.n	800778e <UART_SetConfig+0x182>
 8007788:	2b10      	cmp	r3, #16
 800778a:	d008      	beq.n	800779e <UART_SetConfig+0x192>
 800778c:	e00f      	b.n	80077ae <UART_SetConfig+0x1a2>
 800778e:	2300      	movs	r3, #0
 8007790:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007794:	e042      	b.n	800781c <UART_SetConfig+0x210>
 8007796:	2302      	movs	r3, #2
 8007798:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800779c:	e03e      	b.n	800781c <UART_SetConfig+0x210>
 800779e:	2304      	movs	r3, #4
 80077a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077a4:	e03a      	b.n	800781c <UART_SetConfig+0x210>
 80077a6:	2308      	movs	r3, #8
 80077a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077ac:	e036      	b.n	800781c <UART_SetConfig+0x210>
 80077ae:	2310      	movs	r3, #16
 80077b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077b4:	e032      	b.n	800781c <UART_SetConfig+0x210>
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a3f      	ldr	r2, [pc, #252]	@ (80078b8 <UART_SetConfig+0x2ac>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d12a      	bne.n	8007816 <UART_SetConfig+0x20a>
 80077c0:	4b3f      	ldr	r3, [pc, #252]	@ (80078c0 <UART_SetConfig+0x2b4>)
 80077c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077c6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80077ca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80077ce:	d01a      	beq.n	8007806 <UART_SetConfig+0x1fa>
 80077d0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80077d4:	d81b      	bhi.n	800780e <UART_SetConfig+0x202>
 80077d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80077da:	d00c      	beq.n	80077f6 <UART_SetConfig+0x1ea>
 80077dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80077e0:	d815      	bhi.n	800780e <UART_SetConfig+0x202>
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d003      	beq.n	80077ee <UART_SetConfig+0x1e2>
 80077e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80077ea:	d008      	beq.n	80077fe <UART_SetConfig+0x1f2>
 80077ec:	e00f      	b.n	800780e <UART_SetConfig+0x202>
 80077ee:	2300      	movs	r3, #0
 80077f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077f4:	e012      	b.n	800781c <UART_SetConfig+0x210>
 80077f6:	2302      	movs	r3, #2
 80077f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077fc:	e00e      	b.n	800781c <UART_SetConfig+0x210>
 80077fe:	2304      	movs	r3, #4
 8007800:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007804:	e00a      	b.n	800781c <UART_SetConfig+0x210>
 8007806:	2308      	movs	r3, #8
 8007808:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800780c:	e006      	b.n	800781c <UART_SetConfig+0x210>
 800780e:	2310      	movs	r3, #16
 8007810:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007814:	e002      	b.n	800781c <UART_SetConfig+0x210>
 8007816:	2310      	movs	r3, #16
 8007818:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a25      	ldr	r2, [pc, #148]	@ (80078b8 <UART_SetConfig+0x2ac>)
 8007822:	4293      	cmp	r3, r2
 8007824:	f040 808a 	bne.w	800793c <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007828:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800782c:	2b08      	cmp	r3, #8
 800782e:	d824      	bhi.n	800787a <UART_SetConfig+0x26e>
 8007830:	a201      	add	r2, pc, #4	@ (adr r2, 8007838 <UART_SetConfig+0x22c>)
 8007832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007836:	bf00      	nop
 8007838:	0800785d 	.word	0x0800785d
 800783c:	0800787b 	.word	0x0800787b
 8007840:	08007865 	.word	0x08007865
 8007844:	0800787b 	.word	0x0800787b
 8007848:	0800786b 	.word	0x0800786b
 800784c:	0800787b 	.word	0x0800787b
 8007850:	0800787b 	.word	0x0800787b
 8007854:	0800787b 	.word	0x0800787b
 8007858:	08007873 	.word	0x08007873
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800785c:	f7ff f8c2 	bl	80069e4 <HAL_RCC_GetPCLK1Freq>
 8007860:	61f8      	str	r0, [r7, #28]
        break;
 8007862:	e010      	b.n	8007886 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007864:	4b19      	ldr	r3, [pc, #100]	@ (80078cc <UART_SetConfig+0x2c0>)
 8007866:	61fb      	str	r3, [r7, #28]
        break;
 8007868:	e00d      	b.n	8007886 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800786a:	f7ff f823 	bl	80068b4 <HAL_RCC_GetSysClockFreq>
 800786e:	61f8      	str	r0, [r7, #28]
        break;
 8007870:	e009      	b.n	8007886 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007872:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007876:	61fb      	str	r3, [r7, #28]
        break;
 8007878:	e005      	b.n	8007886 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800787a:	2300      	movs	r3, #0
 800787c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007884:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007886:	69fb      	ldr	r3, [r7, #28]
 8007888:	2b00      	cmp	r3, #0
 800788a:	f000 8109 	beq.w	8007aa0 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	685a      	ldr	r2, [r3, #4]
 8007892:	4613      	mov	r3, r2
 8007894:	005b      	lsls	r3, r3, #1
 8007896:	4413      	add	r3, r2
 8007898:	69fa      	ldr	r2, [r7, #28]
 800789a:	429a      	cmp	r2, r3
 800789c:	d305      	bcc.n	80078aa <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80078a4:	69fa      	ldr	r2, [r7, #28]
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d912      	bls.n	80078d0 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 80078aa:	2301      	movs	r3, #1
 80078ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80078b0:	e0f6      	b.n	8007aa0 <UART_SetConfig+0x494>
 80078b2:	bf00      	nop
 80078b4:	efff69f3 	.word	0xefff69f3
 80078b8:	40008000 	.word	0x40008000
 80078bc:	40013800 	.word	0x40013800
 80078c0:	40021000 	.word	0x40021000
 80078c4:	40004400 	.word	0x40004400
 80078c8:	40004800 	.word	0x40004800
 80078cc:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80078d0:	69fb      	ldr	r3, [r7, #28]
 80078d2:	2200      	movs	r2, #0
 80078d4:	461c      	mov	r4, r3
 80078d6:	4615      	mov	r5, r2
 80078d8:	f04f 0200 	mov.w	r2, #0
 80078dc:	f04f 0300 	mov.w	r3, #0
 80078e0:	022b      	lsls	r3, r5, #8
 80078e2:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80078e6:	0222      	lsls	r2, r4, #8
 80078e8:	68f9      	ldr	r1, [r7, #12]
 80078ea:	6849      	ldr	r1, [r1, #4]
 80078ec:	0849      	lsrs	r1, r1, #1
 80078ee:	2000      	movs	r0, #0
 80078f0:	4688      	mov	r8, r1
 80078f2:	4681      	mov	r9, r0
 80078f4:	eb12 0a08 	adds.w	sl, r2, r8
 80078f8:	eb43 0b09 	adc.w	fp, r3, r9
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	2200      	movs	r2, #0
 8007902:	603b      	str	r3, [r7, #0]
 8007904:	607a      	str	r2, [r7, #4]
 8007906:	e9d7 2300 	ldrd	r2, r3, [r7]
 800790a:	4650      	mov	r0, sl
 800790c:	4659      	mov	r1, fp
 800790e:	f7f9 f845 	bl	800099c <__aeabi_uldivmod>
 8007912:	4602      	mov	r2, r0
 8007914:	460b      	mov	r3, r1
 8007916:	4613      	mov	r3, r2
 8007918:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800791a:	69bb      	ldr	r3, [r7, #24]
 800791c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007920:	d308      	bcc.n	8007934 <UART_SetConfig+0x328>
 8007922:	69bb      	ldr	r3, [r7, #24]
 8007924:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007928:	d204      	bcs.n	8007934 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	69ba      	ldr	r2, [r7, #24]
 8007930:	60da      	str	r2, [r3, #12]
 8007932:	e0b5      	b.n	8007aa0 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8007934:	2301      	movs	r3, #1
 8007936:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800793a:	e0b1      	b.n	8007aa0 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	69db      	ldr	r3, [r3, #28]
 8007940:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007944:	d15d      	bne.n	8007a02 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8007946:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800794a:	2b08      	cmp	r3, #8
 800794c:	d827      	bhi.n	800799e <UART_SetConfig+0x392>
 800794e:	a201      	add	r2, pc, #4	@ (adr r2, 8007954 <UART_SetConfig+0x348>)
 8007950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007954:	08007979 	.word	0x08007979
 8007958:	08007981 	.word	0x08007981
 800795c:	08007989 	.word	0x08007989
 8007960:	0800799f 	.word	0x0800799f
 8007964:	0800798f 	.word	0x0800798f
 8007968:	0800799f 	.word	0x0800799f
 800796c:	0800799f 	.word	0x0800799f
 8007970:	0800799f 	.word	0x0800799f
 8007974:	08007997 	.word	0x08007997
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007978:	f7ff f834 	bl	80069e4 <HAL_RCC_GetPCLK1Freq>
 800797c:	61f8      	str	r0, [r7, #28]
        break;
 800797e:	e014      	b.n	80079aa <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007980:	f7ff f846 	bl	8006a10 <HAL_RCC_GetPCLK2Freq>
 8007984:	61f8      	str	r0, [r7, #28]
        break;
 8007986:	e010      	b.n	80079aa <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007988:	4b4c      	ldr	r3, [pc, #304]	@ (8007abc <UART_SetConfig+0x4b0>)
 800798a:	61fb      	str	r3, [r7, #28]
        break;
 800798c:	e00d      	b.n	80079aa <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800798e:	f7fe ff91 	bl	80068b4 <HAL_RCC_GetSysClockFreq>
 8007992:	61f8      	str	r0, [r7, #28]
        break;
 8007994:	e009      	b.n	80079aa <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007996:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800799a:	61fb      	str	r3, [r7, #28]
        break;
 800799c:	e005      	b.n	80079aa <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 800799e:	2300      	movs	r3, #0
 80079a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80079a2:	2301      	movs	r3, #1
 80079a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80079a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80079aa:	69fb      	ldr	r3, [r7, #28]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d077      	beq.n	8007aa0 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80079b0:	69fb      	ldr	r3, [r7, #28]
 80079b2:	005a      	lsls	r2, r3, #1
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	085b      	lsrs	r3, r3, #1
 80079ba:	441a      	add	r2, r3
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80079c4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079c6:	69bb      	ldr	r3, [r7, #24]
 80079c8:	2b0f      	cmp	r3, #15
 80079ca:	d916      	bls.n	80079fa <UART_SetConfig+0x3ee>
 80079cc:	69bb      	ldr	r3, [r7, #24]
 80079ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079d2:	d212      	bcs.n	80079fa <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80079d4:	69bb      	ldr	r3, [r7, #24]
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	f023 030f 	bic.w	r3, r3, #15
 80079dc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80079de:	69bb      	ldr	r3, [r7, #24]
 80079e0:	085b      	lsrs	r3, r3, #1
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	f003 0307 	and.w	r3, r3, #7
 80079e8:	b29a      	uxth	r2, r3
 80079ea:	8afb      	ldrh	r3, [r7, #22]
 80079ec:	4313      	orrs	r3, r2
 80079ee:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	8afa      	ldrh	r2, [r7, #22]
 80079f6:	60da      	str	r2, [r3, #12]
 80079f8:	e052      	b.n	8007aa0 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80079fa:	2301      	movs	r3, #1
 80079fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007a00:	e04e      	b.n	8007aa0 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007a02:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007a06:	2b08      	cmp	r3, #8
 8007a08:	d827      	bhi.n	8007a5a <UART_SetConfig+0x44e>
 8007a0a:	a201      	add	r2, pc, #4	@ (adr r2, 8007a10 <UART_SetConfig+0x404>)
 8007a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a10:	08007a35 	.word	0x08007a35
 8007a14:	08007a3d 	.word	0x08007a3d
 8007a18:	08007a45 	.word	0x08007a45
 8007a1c:	08007a5b 	.word	0x08007a5b
 8007a20:	08007a4b 	.word	0x08007a4b
 8007a24:	08007a5b 	.word	0x08007a5b
 8007a28:	08007a5b 	.word	0x08007a5b
 8007a2c:	08007a5b 	.word	0x08007a5b
 8007a30:	08007a53 	.word	0x08007a53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a34:	f7fe ffd6 	bl	80069e4 <HAL_RCC_GetPCLK1Freq>
 8007a38:	61f8      	str	r0, [r7, #28]
        break;
 8007a3a:	e014      	b.n	8007a66 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a3c:	f7fe ffe8 	bl	8006a10 <HAL_RCC_GetPCLK2Freq>
 8007a40:	61f8      	str	r0, [r7, #28]
        break;
 8007a42:	e010      	b.n	8007a66 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a44:	4b1d      	ldr	r3, [pc, #116]	@ (8007abc <UART_SetConfig+0x4b0>)
 8007a46:	61fb      	str	r3, [r7, #28]
        break;
 8007a48:	e00d      	b.n	8007a66 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a4a:	f7fe ff33 	bl	80068b4 <HAL_RCC_GetSysClockFreq>
 8007a4e:	61f8      	str	r0, [r7, #28]
        break;
 8007a50:	e009      	b.n	8007a66 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a56:	61fb      	str	r3, [r7, #28]
        break;
 8007a58:	e005      	b.n	8007a66 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007a64:	bf00      	nop
    }

    if (pclk != 0U)
 8007a66:	69fb      	ldr	r3, [r7, #28]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d019      	beq.n	8007aa0 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	085a      	lsrs	r2, r3, #1
 8007a72:	69fb      	ldr	r3, [r7, #28]
 8007a74:	441a      	add	r2, r3
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a7e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a80:	69bb      	ldr	r3, [r7, #24]
 8007a82:	2b0f      	cmp	r3, #15
 8007a84:	d909      	bls.n	8007a9a <UART_SetConfig+0x48e>
 8007a86:	69bb      	ldr	r3, [r7, #24]
 8007a88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a8c:	d205      	bcs.n	8007a9a <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007a8e:	69bb      	ldr	r3, [r7, #24]
 8007a90:	b29a      	uxth	r2, r3
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	60da      	str	r2, [r3, #12]
 8007a98:	e002      	b.n	8007aa0 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007aac:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3728      	adds	r7, #40	@ 0x28
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007aba:	bf00      	nop
 8007abc:	00f42400 	.word	0x00f42400

08007ac0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b083      	sub	sp, #12
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007acc:	f003 0308 	and.w	r3, r3, #8
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d00a      	beq.n	8007aea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	430a      	orrs	r2, r1
 8007ae8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aee:	f003 0301 	and.w	r3, r3, #1
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d00a      	beq.n	8007b0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	430a      	orrs	r2, r1
 8007b0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b10:	f003 0302 	and.w	r3, r3, #2
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d00a      	beq.n	8007b2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	430a      	orrs	r2, r1
 8007b2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b32:	f003 0304 	and.w	r3, r3, #4
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d00a      	beq.n	8007b50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	430a      	orrs	r2, r1
 8007b4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b54:	f003 0310 	and.w	r3, r3, #16
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d00a      	beq.n	8007b72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	689b      	ldr	r3, [r3, #8]
 8007b62:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	430a      	orrs	r2, r1
 8007b70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b76:	f003 0320 	and.w	r3, r3, #32
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d00a      	beq.n	8007b94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	689b      	ldr	r3, [r3, #8]
 8007b84:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	430a      	orrs	r2, r1
 8007b92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d01a      	beq.n	8007bd6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	430a      	orrs	r2, r1
 8007bb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007bbe:	d10a      	bne.n	8007bd6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	430a      	orrs	r2, r1
 8007bd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d00a      	beq.n	8007bf8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	430a      	orrs	r2, r1
 8007bf6:	605a      	str	r2, [r3, #4]
  }
}
 8007bf8:	bf00      	nop
 8007bfa:	370c      	adds	r7, #12
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c02:	4770      	bx	lr

08007c04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b098      	sub	sp, #96	@ 0x60
 8007c08:	af02      	add	r7, sp, #8
 8007c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c14:	f7fb fc88 	bl	8003528 <HAL_GetTick>
 8007c18:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f003 0308 	and.w	r3, r3, #8
 8007c24:	2b08      	cmp	r3, #8
 8007c26:	d12e      	bne.n	8007c86 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c28:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007c2c:	9300      	str	r3, [sp, #0]
 8007c2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c30:	2200      	movs	r2, #0
 8007c32:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 f88c 	bl	8007d54 <UART_WaitOnFlagUntilTimeout>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d021      	beq.n	8007c86 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c4a:	e853 3f00 	ldrex	r3, [r3]
 8007c4e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007c50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c56:	653b      	str	r3, [r7, #80]	@ 0x50
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	461a      	mov	r2, r3
 8007c5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c60:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c62:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c64:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007c66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c68:	e841 2300 	strex	r3, r2, [r1]
 8007c6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007c6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d1e6      	bne.n	8007c42 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2220      	movs	r2, #32
 8007c78:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c82:	2303      	movs	r3, #3
 8007c84:	e062      	b.n	8007d4c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f003 0304 	and.w	r3, r3, #4
 8007c90:	2b04      	cmp	r3, #4
 8007c92:	d149      	bne.n	8007d28 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c94:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007c98:	9300      	str	r3, [sp, #0]
 8007c9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 f856 	bl	8007d54 <UART_WaitOnFlagUntilTimeout>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d03c      	beq.n	8007d28 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cb6:	e853 3f00 	ldrex	r3, [r3]
 8007cba:	623b      	str	r3, [r7, #32]
   return(result);
 8007cbc:	6a3b      	ldr	r3, [r7, #32]
 8007cbe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007cc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	461a      	mov	r2, r3
 8007cca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ccc:	633b      	str	r3, [r7, #48]	@ 0x30
 8007cce:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007cd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cd4:	e841 2300 	strex	r3, r2, [r1]
 8007cd8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d1e6      	bne.n	8007cae <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	3308      	adds	r3, #8
 8007ce6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	e853 3f00 	ldrex	r3, [r3]
 8007cee:	60fb      	str	r3, [r7, #12]
   return(result);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f023 0301 	bic.w	r3, r3, #1
 8007cf6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	3308      	adds	r3, #8
 8007cfe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d00:	61fa      	str	r2, [r7, #28]
 8007d02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d04:	69b9      	ldr	r1, [r7, #24]
 8007d06:	69fa      	ldr	r2, [r7, #28]
 8007d08:	e841 2300 	strex	r3, r2, [r1]
 8007d0c:	617b      	str	r3, [r7, #20]
   return(result);
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d1e5      	bne.n	8007ce0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2220      	movs	r2, #32
 8007d18:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d24:	2303      	movs	r3, #3
 8007d26:	e011      	b.n	8007d4c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2220      	movs	r2, #32
 8007d2c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2220      	movs	r2, #32
 8007d32:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2200      	movs	r2, #0
 8007d46:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007d4a:	2300      	movs	r3, #0
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3758      	adds	r7, #88	@ 0x58
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}

08007d54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b084      	sub	sp, #16
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	60f8      	str	r0, [r7, #12]
 8007d5c:	60b9      	str	r1, [r7, #8]
 8007d5e:	603b      	str	r3, [r7, #0]
 8007d60:	4613      	mov	r3, r2
 8007d62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d64:	e04f      	b.n	8007e06 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d66:	69bb      	ldr	r3, [r7, #24]
 8007d68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007d6c:	d04b      	beq.n	8007e06 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d6e:	f7fb fbdb 	bl	8003528 <HAL_GetTick>
 8007d72:	4602      	mov	r2, r0
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	1ad3      	subs	r3, r2, r3
 8007d78:	69ba      	ldr	r2, [r7, #24]
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	d302      	bcc.n	8007d84 <UART_WaitOnFlagUntilTimeout+0x30>
 8007d7e:	69bb      	ldr	r3, [r7, #24]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d101      	bne.n	8007d88 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007d84:	2303      	movs	r3, #3
 8007d86:	e04e      	b.n	8007e26 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f003 0304 	and.w	r3, r3, #4
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d037      	beq.n	8007e06 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	2b80      	cmp	r3, #128	@ 0x80
 8007d9a:	d034      	beq.n	8007e06 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	2b40      	cmp	r3, #64	@ 0x40
 8007da0:	d031      	beq.n	8007e06 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	69db      	ldr	r3, [r3, #28]
 8007da8:	f003 0308 	and.w	r3, r3, #8
 8007dac:	2b08      	cmp	r3, #8
 8007dae:	d110      	bne.n	8007dd2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	2208      	movs	r2, #8
 8007db6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007db8:	68f8      	ldr	r0, [r7, #12]
 8007dba:	f000 f838 	bl	8007e2e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2208      	movs	r2, #8
 8007dc2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007dce:	2301      	movs	r3, #1
 8007dd0:	e029      	b.n	8007e26 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	69db      	ldr	r3, [r3, #28]
 8007dd8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007ddc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007de0:	d111      	bne.n	8007e06 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007dea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007dec:	68f8      	ldr	r0, [r7, #12]
 8007dee:	f000 f81e 	bl	8007e2e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2220      	movs	r2, #32
 8007df6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007e02:	2303      	movs	r3, #3
 8007e04:	e00f      	b.n	8007e26 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	69da      	ldr	r2, [r3, #28]
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	4013      	ands	r3, r2
 8007e10:	68ba      	ldr	r2, [r7, #8]
 8007e12:	429a      	cmp	r2, r3
 8007e14:	bf0c      	ite	eq
 8007e16:	2301      	moveq	r3, #1
 8007e18:	2300      	movne	r3, #0
 8007e1a:	b2db      	uxtb	r3, r3
 8007e1c:	461a      	mov	r2, r3
 8007e1e:	79fb      	ldrb	r3, [r7, #7]
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d0a0      	beq.n	8007d66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e24:	2300      	movs	r3, #0
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3710      	adds	r7, #16
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}

08007e2e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e2e:	b480      	push	{r7}
 8007e30:	b095      	sub	sp, #84	@ 0x54
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e3e:	e853 3f00 	ldrex	r3, [r3]
 8007e42:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e46:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	461a      	mov	r2, r3
 8007e52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e54:	643b      	str	r3, [r7, #64]	@ 0x40
 8007e56:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e58:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007e5a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007e5c:	e841 2300 	strex	r3, r2, [r1]
 8007e60:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d1e6      	bne.n	8007e36 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	3308      	adds	r3, #8
 8007e6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e70:	6a3b      	ldr	r3, [r7, #32]
 8007e72:	e853 3f00 	ldrex	r3, [r3]
 8007e76:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e78:	69fb      	ldr	r3, [r7, #28]
 8007e7a:	f023 0301 	bic.w	r3, r3, #1
 8007e7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	3308      	adds	r3, #8
 8007e86:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007e88:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007e8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007e8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e90:	e841 2300 	strex	r3, r2, [r1]
 8007e94:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d1e5      	bne.n	8007e68 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	d118      	bne.n	8007ed6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	e853 3f00 	ldrex	r3, [r3]
 8007eb0:	60bb      	str	r3, [r7, #8]
   return(result);
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	f023 0310 	bic.w	r3, r3, #16
 8007eb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	461a      	mov	r2, r3
 8007ec0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ec2:	61bb      	str	r3, [r7, #24]
 8007ec4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ec6:	6979      	ldr	r1, [r7, #20]
 8007ec8:	69ba      	ldr	r2, [r7, #24]
 8007eca:	e841 2300 	strex	r3, r2, [r1]
 8007ece:	613b      	str	r3, [r7, #16]
   return(result);
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d1e6      	bne.n	8007ea4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2220      	movs	r2, #32
 8007eda:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007eea:	bf00      	nop
 8007eec:	3754      	adds	r7, #84	@ 0x54
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef4:	4770      	bx	lr

08007ef6 <_ZdlPvj>:
 8007ef6:	f000 b81a 	b.w	8007f2e <_ZdlPv>

08007efa <_Znwj>:
 8007efa:	2801      	cmp	r0, #1
 8007efc:	bf38      	it	cc
 8007efe:	2001      	movcc	r0, #1
 8007f00:	b510      	push	{r4, lr}
 8007f02:	4604      	mov	r4, r0
 8007f04:	4620      	mov	r0, r4
 8007f06:	f000 f825 	bl	8007f54 <malloc>
 8007f0a:	b100      	cbz	r0, 8007f0e <_Znwj+0x14>
 8007f0c:	bd10      	pop	{r4, pc}
 8007f0e:	f000 f811 	bl	8007f34 <_ZSt15get_new_handlerv>
 8007f12:	b908      	cbnz	r0, 8007f18 <_Znwj+0x1e>
 8007f14:	f000 f816 	bl	8007f44 <abort>
 8007f18:	4780      	blx	r0
 8007f1a:	e7f3      	b.n	8007f04 <_Znwj+0xa>

08007f1c <_ZSt17__throw_bad_allocv>:
 8007f1c:	b508      	push	{r3, lr}
 8007f1e:	f000 f811 	bl	8007f44 <abort>

08007f22 <_ZSt28__throw_bad_array_new_lengthv>:
 8007f22:	b508      	push	{r3, lr}
 8007f24:	f000 f80e 	bl	8007f44 <abort>

08007f28 <_ZSt20__throw_length_errorPKc>:
 8007f28:	b508      	push	{r3, lr}
 8007f2a:	f000 f80b 	bl	8007f44 <abort>

08007f2e <_ZdlPv>:
 8007f2e:	f000 b819 	b.w	8007f64 <free>
	...

08007f34 <_ZSt15get_new_handlerv>:
 8007f34:	4b02      	ldr	r3, [pc, #8]	@ (8007f40 <_ZSt15get_new_handlerv+0xc>)
 8007f36:	6818      	ldr	r0, [r3, #0]
 8007f38:	f3bf 8f5b 	dmb	ish
 8007f3c:	4770      	bx	lr
 8007f3e:	bf00      	nop
 8007f40:	200002dc 	.word	0x200002dc

08007f44 <abort>:
 8007f44:	b508      	push	{r3, lr}
 8007f46:	2006      	movs	r0, #6
 8007f48:	f000 fa74 	bl	8008434 <raise>
 8007f4c:	2001      	movs	r0, #1
 8007f4e:	f7fb f998 	bl	8003282 <_exit>
	...

08007f54 <malloc>:
 8007f54:	4b02      	ldr	r3, [pc, #8]	@ (8007f60 <malloc+0xc>)
 8007f56:	4601      	mov	r1, r0
 8007f58:	6818      	ldr	r0, [r3, #0]
 8007f5a:	f000 b82d 	b.w	8007fb8 <_malloc_r>
 8007f5e:	bf00      	nop
 8007f60:	20000038 	.word	0x20000038

08007f64 <free>:
 8007f64:	4b02      	ldr	r3, [pc, #8]	@ (8007f70 <free+0xc>)
 8007f66:	4601      	mov	r1, r0
 8007f68:	6818      	ldr	r0, [r3, #0]
 8007f6a:	f000 babd 	b.w	80084e8 <_free_r>
 8007f6e:	bf00      	nop
 8007f70:	20000038 	.word	0x20000038

08007f74 <sbrk_aligned>:
 8007f74:	b570      	push	{r4, r5, r6, lr}
 8007f76:	4e0f      	ldr	r6, [pc, #60]	@ (8007fb4 <sbrk_aligned+0x40>)
 8007f78:	460c      	mov	r4, r1
 8007f7a:	6831      	ldr	r1, [r6, #0]
 8007f7c:	4605      	mov	r5, r0
 8007f7e:	b911      	cbnz	r1, 8007f86 <sbrk_aligned+0x12>
 8007f80:	f000 fa74 	bl	800846c <_sbrk_r>
 8007f84:	6030      	str	r0, [r6, #0]
 8007f86:	4621      	mov	r1, r4
 8007f88:	4628      	mov	r0, r5
 8007f8a:	f000 fa6f 	bl	800846c <_sbrk_r>
 8007f8e:	1c43      	adds	r3, r0, #1
 8007f90:	d103      	bne.n	8007f9a <sbrk_aligned+0x26>
 8007f92:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007f96:	4620      	mov	r0, r4
 8007f98:	bd70      	pop	{r4, r5, r6, pc}
 8007f9a:	1cc4      	adds	r4, r0, #3
 8007f9c:	f024 0403 	bic.w	r4, r4, #3
 8007fa0:	42a0      	cmp	r0, r4
 8007fa2:	d0f8      	beq.n	8007f96 <sbrk_aligned+0x22>
 8007fa4:	1a21      	subs	r1, r4, r0
 8007fa6:	4628      	mov	r0, r5
 8007fa8:	f000 fa60 	bl	800846c <_sbrk_r>
 8007fac:	3001      	adds	r0, #1
 8007fae:	d1f2      	bne.n	8007f96 <sbrk_aligned+0x22>
 8007fb0:	e7ef      	b.n	8007f92 <sbrk_aligned+0x1e>
 8007fb2:	bf00      	nop
 8007fb4:	200002e0 	.word	0x200002e0

08007fb8 <_malloc_r>:
 8007fb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fbc:	1ccd      	adds	r5, r1, #3
 8007fbe:	f025 0503 	bic.w	r5, r5, #3
 8007fc2:	3508      	adds	r5, #8
 8007fc4:	2d0c      	cmp	r5, #12
 8007fc6:	bf38      	it	cc
 8007fc8:	250c      	movcc	r5, #12
 8007fca:	2d00      	cmp	r5, #0
 8007fcc:	4606      	mov	r6, r0
 8007fce:	db01      	blt.n	8007fd4 <_malloc_r+0x1c>
 8007fd0:	42a9      	cmp	r1, r5
 8007fd2:	d904      	bls.n	8007fde <_malloc_r+0x26>
 8007fd4:	230c      	movs	r3, #12
 8007fd6:	6033      	str	r3, [r6, #0]
 8007fd8:	2000      	movs	r0, #0
 8007fda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fde:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80080b4 <_malloc_r+0xfc>
 8007fe2:	f000 f89f 	bl	8008124 <__malloc_lock>
 8007fe6:	f8d8 3000 	ldr.w	r3, [r8]
 8007fea:	461c      	mov	r4, r3
 8007fec:	bb44      	cbnz	r4, 8008040 <_malloc_r+0x88>
 8007fee:	4629      	mov	r1, r5
 8007ff0:	4630      	mov	r0, r6
 8007ff2:	f7ff ffbf 	bl	8007f74 <sbrk_aligned>
 8007ff6:	1c43      	adds	r3, r0, #1
 8007ff8:	4604      	mov	r4, r0
 8007ffa:	d158      	bne.n	80080ae <_malloc_r+0xf6>
 8007ffc:	f8d8 4000 	ldr.w	r4, [r8]
 8008000:	4627      	mov	r7, r4
 8008002:	2f00      	cmp	r7, #0
 8008004:	d143      	bne.n	800808e <_malloc_r+0xd6>
 8008006:	2c00      	cmp	r4, #0
 8008008:	d04b      	beq.n	80080a2 <_malloc_r+0xea>
 800800a:	6823      	ldr	r3, [r4, #0]
 800800c:	4639      	mov	r1, r7
 800800e:	4630      	mov	r0, r6
 8008010:	eb04 0903 	add.w	r9, r4, r3
 8008014:	f000 fa2a 	bl	800846c <_sbrk_r>
 8008018:	4581      	cmp	r9, r0
 800801a:	d142      	bne.n	80080a2 <_malloc_r+0xea>
 800801c:	6821      	ldr	r1, [r4, #0]
 800801e:	1a6d      	subs	r5, r5, r1
 8008020:	4629      	mov	r1, r5
 8008022:	4630      	mov	r0, r6
 8008024:	f7ff ffa6 	bl	8007f74 <sbrk_aligned>
 8008028:	3001      	adds	r0, #1
 800802a:	d03a      	beq.n	80080a2 <_malloc_r+0xea>
 800802c:	6823      	ldr	r3, [r4, #0]
 800802e:	442b      	add	r3, r5
 8008030:	6023      	str	r3, [r4, #0]
 8008032:	f8d8 3000 	ldr.w	r3, [r8]
 8008036:	685a      	ldr	r2, [r3, #4]
 8008038:	bb62      	cbnz	r2, 8008094 <_malloc_r+0xdc>
 800803a:	f8c8 7000 	str.w	r7, [r8]
 800803e:	e00f      	b.n	8008060 <_malloc_r+0xa8>
 8008040:	6822      	ldr	r2, [r4, #0]
 8008042:	1b52      	subs	r2, r2, r5
 8008044:	d420      	bmi.n	8008088 <_malloc_r+0xd0>
 8008046:	2a0b      	cmp	r2, #11
 8008048:	d917      	bls.n	800807a <_malloc_r+0xc2>
 800804a:	1961      	adds	r1, r4, r5
 800804c:	42a3      	cmp	r3, r4
 800804e:	6025      	str	r5, [r4, #0]
 8008050:	bf18      	it	ne
 8008052:	6059      	strne	r1, [r3, #4]
 8008054:	6863      	ldr	r3, [r4, #4]
 8008056:	bf08      	it	eq
 8008058:	f8c8 1000 	streq.w	r1, [r8]
 800805c:	5162      	str	r2, [r4, r5]
 800805e:	604b      	str	r3, [r1, #4]
 8008060:	4630      	mov	r0, r6
 8008062:	f000 f865 	bl	8008130 <__malloc_unlock>
 8008066:	f104 000b 	add.w	r0, r4, #11
 800806a:	1d23      	adds	r3, r4, #4
 800806c:	f020 0007 	bic.w	r0, r0, #7
 8008070:	1ac2      	subs	r2, r0, r3
 8008072:	bf1c      	itt	ne
 8008074:	1a1b      	subne	r3, r3, r0
 8008076:	50a3      	strne	r3, [r4, r2]
 8008078:	e7af      	b.n	8007fda <_malloc_r+0x22>
 800807a:	6862      	ldr	r2, [r4, #4]
 800807c:	42a3      	cmp	r3, r4
 800807e:	bf0c      	ite	eq
 8008080:	f8c8 2000 	streq.w	r2, [r8]
 8008084:	605a      	strne	r2, [r3, #4]
 8008086:	e7eb      	b.n	8008060 <_malloc_r+0xa8>
 8008088:	4623      	mov	r3, r4
 800808a:	6864      	ldr	r4, [r4, #4]
 800808c:	e7ae      	b.n	8007fec <_malloc_r+0x34>
 800808e:	463c      	mov	r4, r7
 8008090:	687f      	ldr	r7, [r7, #4]
 8008092:	e7b6      	b.n	8008002 <_malloc_r+0x4a>
 8008094:	461a      	mov	r2, r3
 8008096:	685b      	ldr	r3, [r3, #4]
 8008098:	42a3      	cmp	r3, r4
 800809a:	d1fb      	bne.n	8008094 <_malloc_r+0xdc>
 800809c:	2300      	movs	r3, #0
 800809e:	6053      	str	r3, [r2, #4]
 80080a0:	e7de      	b.n	8008060 <_malloc_r+0xa8>
 80080a2:	230c      	movs	r3, #12
 80080a4:	6033      	str	r3, [r6, #0]
 80080a6:	4630      	mov	r0, r6
 80080a8:	f000 f842 	bl	8008130 <__malloc_unlock>
 80080ac:	e794      	b.n	8007fd8 <_malloc_r+0x20>
 80080ae:	6005      	str	r5, [r0, #0]
 80080b0:	e7d6      	b.n	8008060 <_malloc_r+0xa8>
 80080b2:	bf00      	nop
 80080b4:	200002e4 	.word	0x200002e4

080080b8 <sniprintf>:
 80080b8:	b40c      	push	{r2, r3}
 80080ba:	b530      	push	{r4, r5, lr}
 80080bc:	4b18      	ldr	r3, [pc, #96]	@ (8008120 <sniprintf+0x68>)
 80080be:	1e0c      	subs	r4, r1, #0
 80080c0:	681d      	ldr	r5, [r3, #0]
 80080c2:	b09d      	sub	sp, #116	@ 0x74
 80080c4:	da08      	bge.n	80080d8 <sniprintf+0x20>
 80080c6:	238b      	movs	r3, #139	@ 0x8b
 80080c8:	602b      	str	r3, [r5, #0]
 80080ca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80080ce:	b01d      	add	sp, #116	@ 0x74
 80080d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80080d4:	b002      	add	sp, #8
 80080d6:	4770      	bx	lr
 80080d8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80080dc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80080e0:	f04f 0300 	mov.w	r3, #0
 80080e4:	931b      	str	r3, [sp, #108]	@ 0x6c
 80080e6:	bf14      	ite	ne
 80080e8:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80080ec:	4623      	moveq	r3, r4
 80080ee:	9304      	str	r3, [sp, #16]
 80080f0:	9307      	str	r3, [sp, #28]
 80080f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80080f6:	9002      	str	r0, [sp, #8]
 80080f8:	9006      	str	r0, [sp, #24]
 80080fa:	f8ad 3016 	strh.w	r3, [sp, #22]
 80080fe:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008100:	ab21      	add	r3, sp, #132	@ 0x84
 8008102:	a902      	add	r1, sp, #8
 8008104:	4628      	mov	r0, r5
 8008106:	9301      	str	r3, [sp, #4]
 8008108:	f000 fa94 	bl	8008634 <_svfiprintf_r>
 800810c:	1c43      	adds	r3, r0, #1
 800810e:	bfbc      	itt	lt
 8008110:	238b      	movlt	r3, #139	@ 0x8b
 8008112:	602b      	strlt	r3, [r5, #0]
 8008114:	2c00      	cmp	r4, #0
 8008116:	d0da      	beq.n	80080ce <sniprintf+0x16>
 8008118:	9b02      	ldr	r3, [sp, #8]
 800811a:	2200      	movs	r2, #0
 800811c:	701a      	strb	r2, [r3, #0]
 800811e:	e7d6      	b.n	80080ce <sniprintf+0x16>
 8008120:	20000038 	.word	0x20000038

08008124 <__malloc_lock>:
 8008124:	4801      	ldr	r0, [pc, #4]	@ (800812c <__malloc_lock+0x8>)
 8008126:	f000 b9dc 	b.w	80084e2 <__retarget_lock_acquire_recursive>
 800812a:	bf00      	nop
 800812c:	20000424 	.word	0x20000424

08008130 <__malloc_unlock>:
 8008130:	4801      	ldr	r0, [pc, #4]	@ (8008138 <__malloc_unlock+0x8>)
 8008132:	f000 b9d7 	b.w	80084e4 <__retarget_lock_release_recursive>
 8008136:	bf00      	nop
 8008138:	20000424 	.word	0x20000424

0800813c <std>:
 800813c:	2300      	movs	r3, #0
 800813e:	b510      	push	{r4, lr}
 8008140:	4604      	mov	r4, r0
 8008142:	e9c0 3300 	strd	r3, r3, [r0]
 8008146:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800814a:	6083      	str	r3, [r0, #8]
 800814c:	8181      	strh	r1, [r0, #12]
 800814e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008150:	81c2      	strh	r2, [r0, #14]
 8008152:	6183      	str	r3, [r0, #24]
 8008154:	4619      	mov	r1, r3
 8008156:	2208      	movs	r2, #8
 8008158:	305c      	adds	r0, #92	@ 0x5c
 800815a:	f000 f93b 	bl	80083d4 <memset>
 800815e:	4b0d      	ldr	r3, [pc, #52]	@ (8008194 <std+0x58>)
 8008160:	6263      	str	r3, [r4, #36]	@ 0x24
 8008162:	4b0d      	ldr	r3, [pc, #52]	@ (8008198 <std+0x5c>)
 8008164:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008166:	4b0d      	ldr	r3, [pc, #52]	@ (800819c <std+0x60>)
 8008168:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800816a:	4b0d      	ldr	r3, [pc, #52]	@ (80081a0 <std+0x64>)
 800816c:	6323      	str	r3, [r4, #48]	@ 0x30
 800816e:	4b0d      	ldr	r3, [pc, #52]	@ (80081a4 <std+0x68>)
 8008170:	6224      	str	r4, [r4, #32]
 8008172:	429c      	cmp	r4, r3
 8008174:	d006      	beq.n	8008184 <std+0x48>
 8008176:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800817a:	4294      	cmp	r4, r2
 800817c:	d002      	beq.n	8008184 <std+0x48>
 800817e:	33d0      	adds	r3, #208	@ 0xd0
 8008180:	429c      	cmp	r4, r3
 8008182:	d105      	bne.n	8008190 <std+0x54>
 8008184:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800818c:	f000 b9a8 	b.w	80084e0 <__retarget_lock_init_recursive>
 8008190:	bd10      	pop	{r4, pc}
 8008192:	bf00      	nop
 8008194:	08008f21 	.word	0x08008f21
 8008198:	08008f43 	.word	0x08008f43
 800819c:	08008f7b 	.word	0x08008f7b
 80081a0:	08008f9f 	.word	0x08008f9f
 80081a4:	200002e8 	.word	0x200002e8

080081a8 <stdio_exit_handler>:
 80081a8:	4a02      	ldr	r2, [pc, #8]	@ (80081b4 <stdio_exit_handler+0xc>)
 80081aa:	4903      	ldr	r1, [pc, #12]	@ (80081b8 <stdio_exit_handler+0x10>)
 80081ac:	4803      	ldr	r0, [pc, #12]	@ (80081bc <stdio_exit_handler+0x14>)
 80081ae:	f000 b869 	b.w	8008284 <_fwalk_sglue>
 80081b2:	bf00      	nop
 80081b4:	2000002c 	.word	0x2000002c
 80081b8:	08008ed1 	.word	0x08008ed1
 80081bc:	2000003c 	.word	0x2000003c

080081c0 <cleanup_stdio>:
 80081c0:	6841      	ldr	r1, [r0, #4]
 80081c2:	4b0c      	ldr	r3, [pc, #48]	@ (80081f4 <cleanup_stdio+0x34>)
 80081c4:	4299      	cmp	r1, r3
 80081c6:	b510      	push	{r4, lr}
 80081c8:	4604      	mov	r4, r0
 80081ca:	d001      	beq.n	80081d0 <cleanup_stdio+0x10>
 80081cc:	f000 fe80 	bl	8008ed0 <_fflush_r>
 80081d0:	68a1      	ldr	r1, [r4, #8]
 80081d2:	4b09      	ldr	r3, [pc, #36]	@ (80081f8 <cleanup_stdio+0x38>)
 80081d4:	4299      	cmp	r1, r3
 80081d6:	d002      	beq.n	80081de <cleanup_stdio+0x1e>
 80081d8:	4620      	mov	r0, r4
 80081da:	f000 fe79 	bl	8008ed0 <_fflush_r>
 80081de:	68e1      	ldr	r1, [r4, #12]
 80081e0:	4b06      	ldr	r3, [pc, #24]	@ (80081fc <cleanup_stdio+0x3c>)
 80081e2:	4299      	cmp	r1, r3
 80081e4:	d004      	beq.n	80081f0 <cleanup_stdio+0x30>
 80081e6:	4620      	mov	r0, r4
 80081e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081ec:	f000 be70 	b.w	8008ed0 <_fflush_r>
 80081f0:	bd10      	pop	{r4, pc}
 80081f2:	bf00      	nop
 80081f4:	200002e8 	.word	0x200002e8
 80081f8:	20000350 	.word	0x20000350
 80081fc:	200003b8 	.word	0x200003b8

08008200 <global_stdio_init.part.0>:
 8008200:	b510      	push	{r4, lr}
 8008202:	4b0b      	ldr	r3, [pc, #44]	@ (8008230 <global_stdio_init.part.0+0x30>)
 8008204:	4c0b      	ldr	r4, [pc, #44]	@ (8008234 <global_stdio_init.part.0+0x34>)
 8008206:	4a0c      	ldr	r2, [pc, #48]	@ (8008238 <global_stdio_init.part.0+0x38>)
 8008208:	601a      	str	r2, [r3, #0]
 800820a:	4620      	mov	r0, r4
 800820c:	2200      	movs	r2, #0
 800820e:	2104      	movs	r1, #4
 8008210:	f7ff ff94 	bl	800813c <std>
 8008214:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008218:	2201      	movs	r2, #1
 800821a:	2109      	movs	r1, #9
 800821c:	f7ff ff8e 	bl	800813c <std>
 8008220:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008224:	2202      	movs	r2, #2
 8008226:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800822a:	2112      	movs	r1, #18
 800822c:	f7ff bf86 	b.w	800813c <std>
 8008230:	20000420 	.word	0x20000420
 8008234:	200002e8 	.word	0x200002e8
 8008238:	080081a9 	.word	0x080081a9

0800823c <__sfp_lock_acquire>:
 800823c:	4801      	ldr	r0, [pc, #4]	@ (8008244 <__sfp_lock_acquire+0x8>)
 800823e:	f000 b950 	b.w	80084e2 <__retarget_lock_acquire_recursive>
 8008242:	bf00      	nop
 8008244:	20000425 	.word	0x20000425

08008248 <__sfp_lock_release>:
 8008248:	4801      	ldr	r0, [pc, #4]	@ (8008250 <__sfp_lock_release+0x8>)
 800824a:	f000 b94b 	b.w	80084e4 <__retarget_lock_release_recursive>
 800824e:	bf00      	nop
 8008250:	20000425 	.word	0x20000425

08008254 <__sinit>:
 8008254:	b510      	push	{r4, lr}
 8008256:	4604      	mov	r4, r0
 8008258:	f7ff fff0 	bl	800823c <__sfp_lock_acquire>
 800825c:	6a23      	ldr	r3, [r4, #32]
 800825e:	b11b      	cbz	r3, 8008268 <__sinit+0x14>
 8008260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008264:	f7ff bff0 	b.w	8008248 <__sfp_lock_release>
 8008268:	4b04      	ldr	r3, [pc, #16]	@ (800827c <__sinit+0x28>)
 800826a:	6223      	str	r3, [r4, #32]
 800826c:	4b04      	ldr	r3, [pc, #16]	@ (8008280 <__sinit+0x2c>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d1f5      	bne.n	8008260 <__sinit+0xc>
 8008274:	f7ff ffc4 	bl	8008200 <global_stdio_init.part.0>
 8008278:	e7f2      	b.n	8008260 <__sinit+0xc>
 800827a:	bf00      	nop
 800827c:	080081c1 	.word	0x080081c1
 8008280:	20000420 	.word	0x20000420

08008284 <_fwalk_sglue>:
 8008284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008288:	4607      	mov	r7, r0
 800828a:	4688      	mov	r8, r1
 800828c:	4614      	mov	r4, r2
 800828e:	2600      	movs	r6, #0
 8008290:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008294:	f1b9 0901 	subs.w	r9, r9, #1
 8008298:	d505      	bpl.n	80082a6 <_fwalk_sglue+0x22>
 800829a:	6824      	ldr	r4, [r4, #0]
 800829c:	2c00      	cmp	r4, #0
 800829e:	d1f7      	bne.n	8008290 <_fwalk_sglue+0xc>
 80082a0:	4630      	mov	r0, r6
 80082a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082a6:	89ab      	ldrh	r3, [r5, #12]
 80082a8:	2b01      	cmp	r3, #1
 80082aa:	d907      	bls.n	80082bc <_fwalk_sglue+0x38>
 80082ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80082b0:	3301      	adds	r3, #1
 80082b2:	d003      	beq.n	80082bc <_fwalk_sglue+0x38>
 80082b4:	4629      	mov	r1, r5
 80082b6:	4638      	mov	r0, r7
 80082b8:	47c0      	blx	r8
 80082ba:	4306      	orrs	r6, r0
 80082bc:	3568      	adds	r5, #104	@ 0x68
 80082be:	e7e9      	b.n	8008294 <_fwalk_sglue+0x10>

080082c0 <iprintf>:
 80082c0:	b40f      	push	{r0, r1, r2, r3}
 80082c2:	b507      	push	{r0, r1, r2, lr}
 80082c4:	4906      	ldr	r1, [pc, #24]	@ (80082e0 <iprintf+0x20>)
 80082c6:	ab04      	add	r3, sp, #16
 80082c8:	6808      	ldr	r0, [r1, #0]
 80082ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80082ce:	6881      	ldr	r1, [r0, #8]
 80082d0:	9301      	str	r3, [sp, #4]
 80082d2:	f000 fad5 	bl	8008880 <_vfiprintf_r>
 80082d6:	b003      	add	sp, #12
 80082d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80082dc:	b004      	add	sp, #16
 80082de:	4770      	bx	lr
 80082e0:	20000038 	.word	0x20000038

080082e4 <_puts_r>:
 80082e4:	6a03      	ldr	r3, [r0, #32]
 80082e6:	b570      	push	{r4, r5, r6, lr}
 80082e8:	6884      	ldr	r4, [r0, #8]
 80082ea:	4605      	mov	r5, r0
 80082ec:	460e      	mov	r6, r1
 80082ee:	b90b      	cbnz	r3, 80082f4 <_puts_r+0x10>
 80082f0:	f7ff ffb0 	bl	8008254 <__sinit>
 80082f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80082f6:	07db      	lsls	r3, r3, #31
 80082f8:	d405      	bmi.n	8008306 <_puts_r+0x22>
 80082fa:	89a3      	ldrh	r3, [r4, #12]
 80082fc:	0598      	lsls	r0, r3, #22
 80082fe:	d402      	bmi.n	8008306 <_puts_r+0x22>
 8008300:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008302:	f000 f8ee 	bl	80084e2 <__retarget_lock_acquire_recursive>
 8008306:	89a3      	ldrh	r3, [r4, #12]
 8008308:	0719      	lsls	r1, r3, #28
 800830a:	d502      	bpl.n	8008312 <_puts_r+0x2e>
 800830c:	6923      	ldr	r3, [r4, #16]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d135      	bne.n	800837e <_puts_r+0x9a>
 8008312:	4621      	mov	r1, r4
 8008314:	4628      	mov	r0, r5
 8008316:	f000 feb3 	bl	8009080 <__swsetup_r>
 800831a:	b380      	cbz	r0, 800837e <_puts_r+0x9a>
 800831c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8008320:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008322:	07da      	lsls	r2, r3, #31
 8008324:	d405      	bmi.n	8008332 <_puts_r+0x4e>
 8008326:	89a3      	ldrh	r3, [r4, #12]
 8008328:	059b      	lsls	r3, r3, #22
 800832a:	d402      	bmi.n	8008332 <_puts_r+0x4e>
 800832c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800832e:	f000 f8d9 	bl	80084e4 <__retarget_lock_release_recursive>
 8008332:	4628      	mov	r0, r5
 8008334:	bd70      	pop	{r4, r5, r6, pc}
 8008336:	2b00      	cmp	r3, #0
 8008338:	da04      	bge.n	8008344 <_puts_r+0x60>
 800833a:	69a2      	ldr	r2, [r4, #24]
 800833c:	429a      	cmp	r2, r3
 800833e:	dc17      	bgt.n	8008370 <_puts_r+0x8c>
 8008340:	290a      	cmp	r1, #10
 8008342:	d015      	beq.n	8008370 <_puts_r+0x8c>
 8008344:	6823      	ldr	r3, [r4, #0]
 8008346:	1c5a      	adds	r2, r3, #1
 8008348:	6022      	str	r2, [r4, #0]
 800834a:	7019      	strb	r1, [r3, #0]
 800834c:	68a3      	ldr	r3, [r4, #8]
 800834e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008352:	3b01      	subs	r3, #1
 8008354:	60a3      	str	r3, [r4, #8]
 8008356:	2900      	cmp	r1, #0
 8008358:	d1ed      	bne.n	8008336 <_puts_r+0x52>
 800835a:	2b00      	cmp	r3, #0
 800835c:	da11      	bge.n	8008382 <_puts_r+0x9e>
 800835e:	4622      	mov	r2, r4
 8008360:	210a      	movs	r1, #10
 8008362:	4628      	mov	r0, r5
 8008364:	f000 fe4d 	bl	8009002 <__swbuf_r>
 8008368:	3001      	adds	r0, #1
 800836a:	d0d7      	beq.n	800831c <_puts_r+0x38>
 800836c:	250a      	movs	r5, #10
 800836e:	e7d7      	b.n	8008320 <_puts_r+0x3c>
 8008370:	4622      	mov	r2, r4
 8008372:	4628      	mov	r0, r5
 8008374:	f000 fe45 	bl	8009002 <__swbuf_r>
 8008378:	3001      	adds	r0, #1
 800837a:	d1e7      	bne.n	800834c <_puts_r+0x68>
 800837c:	e7ce      	b.n	800831c <_puts_r+0x38>
 800837e:	3e01      	subs	r6, #1
 8008380:	e7e4      	b.n	800834c <_puts_r+0x68>
 8008382:	6823      	ldr	r3, [r4, #0]
 8008384:	1c5a      	adds	r2, r3, #1
 8008386:	6022      	str	r2, [r4, #0]
 8008388:	220a      	movs	r2, #10
 800838a:	701a      	strb	r2, [r3, #0]
 800838c:	e7ee      	b.n	800836c <_puts_r+0x88>
	...

08008390 <puts>:
 8008390:	4b02      	ldr	r3, [pc, #8]	@ (800839c <puts+0xc>)
 8008392:	4601      	mov	r1, r0
 8008394:	6818      	ldr	r0, [r3, #0]
 8008396:	f7ff bfa5 	b.w	80082e4 <_puts_r>
 800839a:	bf00      	nop
 800839c:	20000038 	.word	0x20000038

080083a0 <memmove>:
 80083a0:	4288      	cmp	r0, r1
 80083a2:	b510      	push	{r4, lr}
 80083a4:	eb01 0402 	add.w	r4, r1, r2
 80083a8:	d902      	bls.n	80083b0 <memmove+0x10>
 80083aa:	4284      	cmp	r4, r0
 80083ac:	4623      	mov	r3, r4
 80083ae:	d807      	bhi.n	80083c0 <memmove+0x20>
 80083b0:	1e43      	subs	r3, r0, #1
 80083b2:	42a1      	cmp	r1, r4
 80083b4:	d008      	beq.n	80083c8 <memmove+0x28>
 80083b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80083ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80083be:	e7f8      	b.n	80083b2 <memmove+0x12>
 80083c0:	4402      	add	r2, r0
 80083c2:	4601      	mov	r1, r0
 80083c4:	428a      	cmp	r2, r1
 80083c6:	d100      	bne.n	80083ca <memmove+0x2a>
 80083c8:	bd10      	pop	{r4, pc}
 80083ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80083ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80083d2:	e7f7      	b.n	80083c4 <memmove+0x24>

080083d4 <memset>:
 80083d4:	4402      	add	r2, r0
 80083d6:	4603      	mov	r3, r0
 80083d8:	4293      	cmp	r3, r2
 80083da:	d100      	bne.n	80083de <memset+0xa>
 80083dc:	4770      	bx	lr
 80083de:	f803 1b01 	strb.w	r1, [r3], #1
 80083e2:	e7f9      	b.n	80083d8 <memset+0x4>

080083e4 <_raise_r>:
 80083e4:	291f      	cmp	r1, #31
 80083e6:	b538      	push	{r3, r4, r5, lr}
 80083e8:	4605      	mov	r5, r0
 80083ea:	460c      	mov	r4, r1
 80083ec:	d904      	bls.n	80083f8 <_raise_r+0x14>
 80083ee:	2316      	movs	r3, #22
 80083f0:	6003      	str	r3, [r0, #0]
 80083f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80083f6:	bd38      	pop	{r3, r4, r5, pc}
 80083f8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80083fa:	b112      	cbz	r2, 8008402 <_raise_r+0x1e>
 80083fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008400:	b94b      	cbnz	r3, 8008416 <_raise_r+0x32>
 8008402:	4628      	mov	r0, r5
 8008404:	f000 f830 	bl	8008468 <_getpid_r>
 8008408:	4622      	mov	r2, r4
 800840a:	4601      	mov	r1, r0
 800840c:	4628      	mov	r0, r5
 800840e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008412:	f000 b817 	b.w	8008444 <_kill_r>
 8008416:	2b01      	cmp	r3, #1
 8008418:	d00a      	beq.n	8008430 <_raise_r+0x4c>
 800841a:	1c59      	adds	r1, r3, #1
 800841c:	d103      	bne.n	8008426 <_raise_r+0x42>
 800841e:	2316      	movs	r3, #22
 8008420:	6003      	str	r3, [r0, #0]
 8008422:	2001      	movs	r0, #1
 8008424:	e7e7      	b.n	80083f6 <_raise_r+0x12>
 8008426:	2100      	movs	r1, #0
 8008428:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800842c:	4620      	mov	r0, r4
 800842e:	4798      	blx	r3
 8008430:	2000      	movs	r0, #0
 8008432:	e7e0      	b.n	80083f6 <_raise_r+0x12>

08008434 <raise>:
 8008434:	4b02      	ldr	r3, [pc, #8]	@ (8008440 <raise+0xc>)
 8008436:	4601      	mov	r1, r0
 8008438:	6818      	ldr	r0, [r3, #0]
 800843a:	f7ff bfd3 	b.w	80083e4 <_raise_r>
 800843e:	bf00      	nop
 8008440:	20000038 	.word	0x20000038

08008444 <_kill_r>:
 8008444:	b538      	push	{r3, r4, r5, lr}
 8008446:	4d07      	ldr	r5, [pc, #28]	@ (8008464 <_kill_r+0x20>)
 8008448:	2300      	movs	r3, #0
 800844a:	4604      	mov	r4, r0
 800844c:	4608      	mov	r0, r1
 800844e:	4611      	mov	r1, r2
 8008450:	602b      	str	r3, [r5, #0]
 8008452:	f7fa ff06 	bl	8003262 <_kill>
 8008456:	1c43      	adds	r3, r0, #1
 8008458:	d102      	bne.n	8008460 <_kill_r+0x1c>
 800845a:	682b      	ldr	r3, [r5, #0]
 800845c:	b103      	cbz	r3, 8008460 <_kill_r+0x1c>
 800845e:	6023      	str	r3, [r4, #0]
 8008460:	bd38      	pop	{r3, r4, r5, pc}
 8008462:	bf00      	nop
 8008464:	20000428 	.word	0x20000428

08008468 <_getpid_r>:
 8008468:	f7fa bef3 	b.w	8003252 <_getpid>

0800846c <_sbrk_r>:
 800846c:	b538      	push	{r3, r4, r5, lr}
 800846e:	4d06      	ldr	r5, [pc, #24]	@ (8008488 <_sbrk_r+0x1c>)
 8008470:	2300      	movs	r3, #0
 8008472:	4604      	mov	r4, r0
 8008474:	4608      	mov	r0, r1
 8008476:	602b      	str	r3, [r5, #0]
 8008478:	f7fa ff7c 	bl	8003374 <_sbrk>
 800847c:	1c43      	adds	r3, r0, #1
 800847e:	d102      	bne.n	8008486 <_sbrk_r+0x1a>
 8008480:	682b      	ldr	r3, [r5, #0]
 8008482:	b103      	cbz	r3, 8008486 <_sbrk_r+0x1a>
 8008484:	6023      	str	r3, [r4, #0]
 8008486:	bd38      	pop	{r3, r4, r5, pc}
 8008488:	20000428 	.word	0x20000428

0800848c <__errno>:
 800848c:	4b01      	ldr	r3, [pc, #4]	@ (8008494 <__errno+0x8>)
 800848e:	6818      	ldr	r0, [r3, #0]
 8008490:	4770      	bx	lr
 8008492:	bf00      	nop
 8008494:	20000038 	.word	0x20000038

08008498 <__libc_init_array>:
 8008498:	b570      	push	{r4, r5, r6, lr}
 800849a:	4d0d      	ldr	r5, [pc, #52]	@ (80084d0 <__libc_init_array+0x38>)
 800849c:	4c0d      	ldr	r4, [pc, #52]	@ (80084d4 <__libc_init_array+0x3c>)
 800849e:	1b64      	subs	r4, r4, r5
 80084a0:	10a4      	asrs	r4, r4, #2
 80084a2:	2600      	movs	r6, #0
 80084a4:	42a6      	cmp	r6, r4
 80084a6:	d109      	bne.n	80084bc <__libc_init_array+0x24>
 80084a8:	4d0b      	ldr	r5, [pc, #44]	@ (80084d8 <__libc_init_array+0x40>)
 80084aa:	4c0c      	ldr	r4, [pc, #48]	@ (80084dc <__libc_init_array+0x44>)
 80084ac:	f000 ff1e 	bl	80092ec <_init>
 80084b0:	1b64      	subs	r4, r4, r5
 80084b2:	10a4      	asrs	r4, r4, #2
 80084b4:	2600      	movs	r6, #0
 80084b6:	42a6      	cmp	r6, r4
 80084b8:	d105      	bne.n	80084c6 <__libc_init_array+0x2e>
 80084ba:	bd70      	pop	{r4, r5, r6, pc}
 80084bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80084c0:	4798      	blx	r3
 80084c2:	3601      	adds	r6, #1
 80084c4:	e7ee      	b.n	80084a4 <__libc_init_array+0xc>
 80084c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80084ca:	4798      	blx	r3
 80084cc:	3601      	adds	r6, #1
 80084ce:	e7f2      	b.n	80084b6 <__libc_init_array+0x1e>
 80084d0:	08009518 	.word	0x08009518
 80084d4:	08009518 	.word	0x08009518
 80084d8:	08009518 	.word	0x08009518
 80084dc:	08009520 	.word	0x08009520

080084e0 <__retarget_lock_init_recursive>:
 80084e0:	4770      	bx	lr

080084e2 <__retarget_lock_acquire_recursive>:
 80084e2:	4770      	bx	lr

080084e4 <__retarget_lock_release_recursive>:
 80084e4:	4770      	bx	lr
	...

080084e8 <_free_r>:
 80084e8:	b538      	push	{r3, r4, r5, lr}
 80084ea:	4605      	mov	r5, r0
 80084ec:	2900      	cmp	r1, #0
 80084ee:	d041      	beq.n	8008574 <_free_r+0x8c>
 80084f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084f4:	1f0c      	subs	r4, r1, #4
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	bfb8      	it	lt
 80084fa:	18e4      	addlt	r4, r4, r3
 80084fc:	f7ff fe12 	bl	8008124 <__malloc_lock>
 8008500:	4a1d      	ldr	r2, [pc, #116]	@ (8008578 <_free_r+0x90>)
 8008502:	6813      	ldr	r3, [r2, #0]
 8008504:	b933      	cbnz	r3, 8008514 <_free_r+0x2c>
 8008506:	6063      	str	r3, [r4, #4]
 8008508:	6014      	str	r4, [r2, #0]
 800850a:	4628      	mov	r0, r5
 800850c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008510:	f7ff be0e 	b.w	8008130 <__malloc_unlock>
 8008514:	42a3      	cmp	r3, r4
 8008516:	d908      	bls.n	800852a <_free_r+0x42>
 8008518:	6820      	ldr	r0, [r4, #0]
 800851a:	1821      	adds	r1, r4, r0
 800851c:	428b      	cmp	r3, r1
 800851e:	bf01      	itttt	eq
 8008520:	6819      	ldreq	r1, [r3, #0]
 8008522:	685b      	ldreq	r3, [r3, #4]
 8008524:	1809      	addeq	r1, r1, r0
 8008526:	6021      	streq	r1, [r4, #0]
 8008528:	e7ed      	b.n	8008506 <_free_r+0x1e>
 800852a:	461a      	mov	r2, r3
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	b10b      	cbz	r3, 8008534 <_free_r+0x4c>
 8008530:	42a3      	cmp	r3, r4
 8008532:	d9fa      	bls.n	800852a <_free_r+0x42>
 8008534:	6811      	ldr	r1, [r2, #0]
 8008536:	1850      	adds	r0, r2, r1
 8008538:	42a0      	cmp	r0, r4
 800853a:	d10b      	bne.n	8008554 <_free_r+0x6c>
 800853c:	6820      	ldr	r0, [r4, #0]
 800853e:	4401      	add	r1, r0
 8008540:	1850      	adds	r0, r2, r1
 8008542:	4283      	cmp	r3, r0
 8008544:	6011      	str	r1, [r2, #0]
 8008546:	d1e0      	bne.n	800850a <_free_r+0x22>
 8008548:	6818      	ldr	r0, [r3, #0]
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	6053      	str	r3, [r2, #4]
 800854e:	4408      	add	r0, r1
 8008550:	6010      	str	r0, [r2, #0]
 8008552:	e7da      	b.n	800850a <_free_r+0x22>
 8008554:	d902      	bls.n	800855c <_free_r+0x74>
 8008556:	230c      	movs	r3, #12
 8008558:	602b      	str	r3, [r5, #0]
 800855a:	e7d6      	b.n	800850a <_free_r+0x22>
 800855c:	6820      	ldr	r0, [r4, #0]
 800855e:	1821      	adds	r1, r4, r0
 8008560:	428b      	cmp	r3, r1
 8008562:	bf04      	itt	eq
 8008564:	6819      	ldreq	r1, [r3, #0]
 8008566:	685b      	ldreq	r3, [r3, #4]
 8008568:	6063      	str	r3, [r4, #4]
 800856a:	bf04      	itt	eq
 800856c:	1809      	addeq	r1, r1, r0
 800856e:	6021      	streq	r1, [r4, #0]
 8008570:	6054      	str	r4, [r2, #4]
 8008572:	e7ca      	b.n	800850a <_free_r+0x22>
 8008574:	bd38      	pop	{r3, r4, r5, pc}
 8008576:	bf00      	nop
 8008578:	200002e4 	.word	0x200002e4

0800857c <__ssputs_r>:
 800857c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008580:	688e      	ldr	r6, [r1, #8]
 8008582:	461f      	mov	r7, r3
 8008584:	42be      	cmp	r6, r7
 8008586:	680b      	ldr	r3, [r1, #0]
 8008588:	4682      	mov	sl, r0
 800858a:	460c      	mov	r4, r1
 800858c:	4690      	mov	r8, r2
 800858e:	d82d      	bhi.n	80085ec <__ssputs_r+0x70>
 8008590:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008594:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008598:	d026      	beq.n	80085e8 <__ssputs_r+0x6c>
 800859a:	6965      	ldr	r5, [r4, #20]
 800859c:	6909      	ldr	r1, [r1, #16]
 800859e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80085a2:	eba3 0901 	sub.w	r9, r3, r1
 80085a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80085aa:	1c7b      	adds	r3, r7, #1
 80085ac:	444b      	add	r3, r9
 80085ae:	106d      	asrs	r5, r5, #1
 80085b0:	429d      	cmp	r5, r3
 80085b2:	bf38      	it	cc
 80085b4:	461d      	movcc	r5, r3
 80085b6:	0553      	lsls	r3, r2, #21
 80085b8:	d527      	bpl.n	800860a <__ssputs_r+0x8e>
 80085ba:	4629      	mov	r1, r5
 80085bc:	f7ff fcfc 	bl	8007fb8 <_malloc_r>
 80085c0:	4606      	mov	r6, r0
 80085c2:	b360      	cbz	r0, 800861e <__ssputs_r+0xa2>
 80085c4:	6921      	ldr	r1, [r4, #16]
 80085c6:	464a      	mov	r2, r9
 80085c8:	f000 fe7a 	bl	80092c0 <memcpy>
 80085cc:	89a3      	ldrh	r3, [r4, #12]
 80085ce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80085d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085d6:	81a3      	strh	r3, [r4, #12]
 80085d8:	6126      	str	r6, [r4, #16]
 80085da:	6165      	str	r5, [r4, #20]
 80085dc:	444e      	add	r6, r9
 80085de:	eba5 0509 	sub.w	r5, r5, r9
 80085e2:	6026      	str	r6, [r4, #0]
 80085e4:	60a5      	str	r5, [r4, #8]
 80085e6:	463e      	mov	r6, r7
 80085e8:	42be      	cmp	r6, r7
 80085ea:	d900      	bls.n	80085ee <__ssputs_r+0x72>
 80085ec:	463e      	mov	r6, r7
 80085ee:	6820      	ldr	r0, [r4, #0]
 80085f0:	4632      	mov	r2, r6
 80085f2:	4641      	mov	r1, r8
 80085f4:	f7ff fed4 	bl	80083a0 <memmove>
 80085f8:	68a3      	ldr	r3, [r4, #8]
 80085fa:	1b9b      	subs	r3, r3, r6
 80085fc:	60a3      	str	r3, [r4, #8]
 80085fe:	6823      	ldr	r3, [r4, #0]
 8008600:	4433      	add	r3, r6
 8008602:	6023      	str	r3, [r4, #0]
 8008604:	2000      	movs	r0, #0
 8008606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800860a:	462a      	mov	r2, r5
 800860c:	f000 fccb 	bl	8008fa6 <_realloc_r>
 8008610:	4606      	mov	r6, r0
 8008612:	2800      	cmp	r0, #0
 8008614:	d1e0      	bne.n	80085d8 <__ssputs_r+0x5c>
 8008616:	6921      	ldr	r1, [r4, #16]
 8008618:	4650      	mov	r0, sl
 800861a:	f7ff ff65 	bl	80084e8 <_free_r>
 800861e:	230c      	movs	r3, #12
 8008620:	f8ca 3000 	str.w	r3, [sl]
 8008624:	89a3      	ldrh	r3, [r4, #12]
 8008626:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800862a:	81a3      	strh	r3, [r4, #12]
 800862c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008630:	e7e9      	b.n	8008606 <__ssputs_r+0x8a>
	...

08008634 <_svfiprintf_r>:
 8008634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008638:	4698      	mov	r8, r3
 800863a:	898b      	ldrh	r3, [r1, #12]
 800863c:	061b      	lsls	r3, r3, #24
 800863e:	b09d      	sub	sp, #116	@ 0x74
 8008640:	4607      	mov	r7, r0
 8008642:	460d      	mov	r5, r1
 8008644:	4614      	mov	r4, r2
 8008646:	d510      	bpl.n	800866a <_svfiprintf_r+0x36>
 8008648:	690b      	ldr	r3, [r1, #16]
 800864a:	b973      	cbnz	r3, 800866a <_svfiprintf_r+0x36>
 800864c:	2140      	movs	r1, #64	@ 0x40
 800864e:	f7ff fcb3 	bl	8007fb8 <_malloc_r>
 8008652:	6028      	str	r0, [r5, #0]
 8008654:	6128      	str	r0, [r5, #16]
 8008656:	b930      	cbnz	r0, 8008666 <_svfiprintf_r+0x32>
 8008658:	230c      	movs	r3, #12
 800865a:	603b      	str	r3, [r7, #0]
 800865c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008660:	b01d      	add	sp, #116	@ 0x74
 8008662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008666:	2340      	movs	r3, #64	@ 0x40
 8008668:	616b      	str	r3, [r5, #20]
 800866a:	2300      	movs	r3, #0
 800866c:	9309      	str	r3, [sp, #36]	@ 0x24
 800866e:	2320      	movs	r3, #32
 8008670:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008674:	f8cd 800c 	str.w	r8, [sp, #12]
 8008678:	2330      	movs	r3, #48	@ 0x30
 800867a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008818 <_svfiprintf_r+0x1e4>
 800867e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008682:	f04f 0901 	mov.w	r9, #1
 8008686:	4623      	mov	r3, r4
 8008688:	469a      	mov	sl, r3
 800868a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800868e:	b10a      	cbz	r2, 8008694 <_svfiprintf_r+0x60>
 8008690:	2a25      	cmp	r2, #37	@ 0x25
 8008692:	d1f9      	bne.n	8008688 <_svfiprintf_r+0x54>
 8008694:	ebba 0b04 	subs.w	fp, sl, r4
 8008698:	d00b      	beq.n	80086b2 <_svfiprintf_r+0x7e>
 800869a:	465b      	mov	r3, fp
 800869c:	4622      	mov	r2, r4
 800869e:	4629      	mov	r1, r5
 80086a0:	4638      	mov	r0, r7
 80086a2:	f7ff ff6b 	bl	800857c <__ssputs_r>
 80086a6:	3001      	adds	r0, #1
 80086a8:	f000 80a7 	beq.w	80087fa <_svfiprintf_r+0x1c6>
 80086ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80086ae:	445a      	add	r2, fp
 80086b0:	9209      	str	r2, [sp, #36]	@ 0x24
 80086b2:	f89a 3000 	ldrb.w	r3, [sl]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	f000 809f 	beq.w	80087fa <_svfiprintf_r+0x1c6>
 80086bc:	2300      	movs	r3, #0
 80086be:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80086c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086c6:	f10a 0a01 	add.w	sl, sl, #1
 80086ca:	9304      	str	r3, [sp, #16]
 80086cc:	9307      	str	r3, [sp, #28]
 80086ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80086d2:	931a      	str	r3, [sp, #104]	@ 0x68
 80086d4:	4654      	mov	r4, sl
 80086d6:	2205      	movs	r2, #5
 80086d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086dc:	484e      	ldr	r0, [pc, #312]	@ (8008818 <_svfiprintf_r+0x1e4>)
 80086de:	f7f7 fd77 	bl	80001d0 <memchr>
 80086e2:	9a04      	ldr	r2, [sp, #16]
 80086e4:	b9d8      	cbnz	r0, 800871e <_svfiprintf_r+0xea>
 80086e6:	06d0      	lsls	r0, r2, #27
 80086e8:	bf44      	itt	mi
 80086ea:	2320      	movmi	r3, #32
 80086ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80086f0:	0711      	lsls	r1, r2, #28
 80086f2:	bf44      	itt	mi
 80086f4:	232b      	movmi	r3, #43	@ 0x2b
 80086f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80086fa:	f89a 3000 	ldrb.w	r3, [sl]
 80086fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8008700:	d015      	beq.n	800872e <_svfiprintf_r+0xfa>
 8008702:	9a07      	ldr	r2, [sp, #28]
 8008704:	4654      	mov	r4, sl
 8008706:	2000      	movs	r0, #0
 8008708:	f04f 0c0a 	mov.w	ip, #10
 800870c:	4621      	mov	r1, r4
 800870e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008712:	3b30      	subs	r3, #48	@ 0x30
 8008714:	2b09      	cmp	r3, #9
 8008716:	d94b      	bls.n	80087b0 <_svfiprintf_r+0x17c>
 8008718:	b1b0      	cbz	r0, 8008748 <_svfiprintf_r+0x114>
 800871a:	9207      	str	r2, [sp, #28]
 800871c:	e014      	b.n	8008748 <_svfiprintf_r+0x114>
 800871e:	eba0 0308 	sub.w	r3, r0, r8
 8008722:	fa09 f303 	lsl.w	r3, r9, r3
 8008726:	4313      	orrs	r3, r2
 8008728:	9304      	str	r3, [sp, #16]
 800872a:	46a2      	mov	sl, r4
 800872c:	e7d2      	b.n	80086d4 <_svfiprintf_r+0xa0>
 800872e:	9b03      	ldr	r3, [sp, #12]
 8008730:	1d19      	adds	r1, r3, #4
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	9103      	str	r1, [sp, #12]
 8008736:	2b00      	cmp	r3, #0
 8008738:	bfbb      	ittet	lt
 800873a:	425b      	neglt	r3, r3
 800873c:	f042 0202 	orrlt.w	r2, r2, #2
 8008740:	9307      	strge	r3, [sp, #28]
 8008742:	9307      	strlt	r3, [sp, #28]
 8008744:	bfb8      	it	lt
 8008746:	9204      	strlt	r2, [sp, #16]
 8008748:	7823      	ldrb	r3, [r4, #0]
 800874a:	2b2e      	cmp	r3, #46	@ 0x2e
 800874c:	d10a      	bne.n	8008764 <_svfiprintf_r+0x130>
 800874e:	7863      	ldrb	r3, [r4, #1]
 8008750:	2b2a      	cmp	r3, #42	@ 0x2a
 8008752:	d132      	bne.n	80087ba <_svfiprintf_r+0x186>
 8008754:	9b03      	ldr	r3, [sp, #12]
 8008756:	1d1a      	adds	r2, r3, #4
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	9203      	str	r2, [sp, #12]
 800875c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008760:	3402      	adds	r4, #2
 8008762:	9305      	str	r3, [sp, #20]
 8008764:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008828 <_svfiprintf_r+0x1f4>
 8008768:	7821      	ldrb	r1, [r4, #0]
 800876a:	2203      	movs	r2, #3
 800876c:	4650      	mov	r0, sl
 800876e:	f7f7 fd2f 	bl	80001d0 <memchr>
 8008772:	b138      	cbz	r0, 8008784 <_svfiprintf_r+0x150>
 8008774:	9b04      	ldr	r3, [sp, #16]
 8008776:	eba0 000a 	sub.w	r0, r0, sl
 800877a:	2240      	movs	r2, #64	@ 0x40
 800877c:	4082      	lsls	r2, r0
 800877e:	4313      	orrs	r3, r2
 8008780:	3401      	adds	r4, #1
 8008782:	9304      	str	r3, [sp, #16]
 8008784:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008788:	4824      	ldr	r0, [pc, #144]	@ (800881c <_svfiprintf_r+0x1e8>)
 800878a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800878e:	2206      	movs	r2, #6
 8008790:	f7f7 fd1e 	bl	80001d0 <memchr>
 8008794:	2800      	cmp	r0, #0
 8008796:	d036      	beq.n	8008806 <_svfiprintf_r+0x1d2>
 8008798:	4b21      	ldr	r3, [pc, #132]	@ (8008820 <_svfiprintf_r+0x1ec>)
 800879a:	bb1b      	cbnz	r3, 80087e4 <_svfiprintf_r+0x1b0>
 800879c:	9b03      	ldr	r3, [sp, #12]
 800879e:	3307      	adds	r3, #7
 80087a0:	f023 0307 	bic.w	r3, r3, #7
 80087a4:	3308      	adds	r3, #8
 80087a6:	9303      	str	r3, [sp, #12]
 80087a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087aa:	4433      	add	r3, r6
 80087ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80087ae:	e76a      	b.n	8008686 <_svfiprintf_r+0x52>
 80087b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80087b4:	460c      	mov	r4, r1
 80087b6:	2001      	movs	r0, #1
 80087b8:	e7a8      	b.n	800870c <_svfiprintf_r+0xd8>
 80087ba:	2300      	movs	r3, #0
 80087bc:	3401      	adds	r4, #1
 80087be:	9305      	str	r3, [sp, #20]
 80087c0:	4619      	mov	r1, r3
 80087c2:	f04f 0c0a 	mov.w	ip, #10
 80087c6:	4620      	mov	r0, r4
 80087c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087cc:	3a30      	subs	r2, #48	@ 0x30
 80087ce:	2a09      	cmp	r2, #9
 80087d0:	d903      	bls.n	80087da <_svfiprintf_r+0x1a6>
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d0c6      	beq.n	8008764 <_svfiprintf_r+0x130>
 80087d6:	9105      	str	r1, [sp, #20]
 80087d8:	e7c4      	b.n	8008764 <_svfiprintf_r+0x130>
 80087da:	fb0c 2101 	mla	r1, ip, r1, r2
 80087de:	4604      	mov	r4, r0
 80087e0:	2301      	movs	r3, #1
 80087e2:	e7f0      	b.n	80087c6 <_svfiprintf_r+0x192>
 80087e4:	ab03      	add	r3, sp, #12
 80087e6:	9300      	str	r3, [sp, #0]
 80087e8:	462a      	mov	r2, r5
 80087ea:	4b0e      	ldr	r3, [pc, #56]	@ (8008824 <_svfiprintf_r+0x1f0>)
 80087ec:	a904      	add	r1, sp, #16
 80087ee:	4638      	mov	r0, r7
 80087f0:	f3af 8000 	nop.w
 80087f4:	1c42      	adds	r2, r0, #1
 80087f6:	4606      	mov	r6, r0
 80087f8:	d1d6      	bne.n	80087a8 <_svfiprintf_r+0x174>
 80087fa:	89ab      	ldrh	r3, [r5, #12]
 80087fc:	065b      	lsls	r3, r3, #25
 80087fe:	f53f af2d 	bmi.w	800865c <_svfiprintf_r+0x28>
 8008802:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008804:	e72c      	b.n	8008660 <_svfiprintf_r+0x2c>
 8008806:	ab03      	add	r3, sp, #12
 8008808:	9300      	str	r3, [sp, #0]
 800880a:	462a      	mov	r2, r5
 800880c:	4b05      	ldr	r3, [pc, #20]	@ (8008824 <_svfiprintf_r+0x1f0>)
 800880e:	a904      	add	r1, sp, #16
 8008810:	4638      	mov	r0, r7
 8008812:	f000 f9bb 	bl	8008b8c <_printf_i>
 8008816:	e7ed      	b.n	80087f4 <_svfiprintf_r+0x1c0>
 8008818:	080094dc 	.word	0x080094dc
 800881c:	080094e6 	.word	0x080094e6
 8008820:	00000000 	.word	0x00000000
 8008824:	0800857d 	.word	0x0800857d
 8008828:	080094e2 	.word	0x080094e2

0800882c <__sfputc_r>:
 800882c:	6893      	ldr	r3, [r2, #8]
 800882e:	3b01      	subs	r3, #1
 8008830:	2b00      	cmp	r3, #0
 8008832:	b410      	push	{r4}
 8008834:	6093      	str	r3, [r2, #8]
 8008836:	da08      	bge.n	800884a <__sfputc_r+0x1e>
 8008838:	6994      	ldr	r4, [r2, #24]
 800883a:	42a3      	cmp	r3, r4
 800883c:	db01      	blt.n	8008842 <__sfputc_r+0x16>
 800883e:	290a      	cmp	r1, #10
 8008840:	d103      	bne.n	800884a <__sfputc_r+0x1e>
 8008842:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008846:	f000 bbdc 	b.w	8009002 <__swbuf_r>
 800884a:	6813      	ldr	r3, [r2, #0]
 800884c:	1c58      	adds	r0, r3, #1
 800884e:	6010      	str	r0, [r2, #0]
 8008850:	7019      	strb	r1, [r3, #0]
 8008852:	4608      	mov	r0, r1
 8008854:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008858:	4770      	bx	lr

0800885a <__sfputs_r>:
 800885a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800885c:	4606      	mov	r6, r0
 800885e:	460f      	mov	r7, r1
 8008860:	4614      	mov	r4, r2
 8008862:	18d5      	adds	r5, r2, r3
 8008864:	42ac      	cmp	r4, r5
 8008866:	d101      	bne.n	800886c <__sfputs_r+0x12>
 8008868:	2000      	movs	r0, #0
 800886a:	e007      	b.n	800887c <__sfputs_r+0x22>
 800886c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008870:	463a      	mov	r2, r7
 8008872:	4630      	mov	r0, r6
 8008874:	f7ff ffda 	bl	800882c <__sfputc_r>
 8008878:	1c43      	adds	r3, r0, #1
 800887a:	d1f3      	bne.n	8008864 <__sfputs_r+0xa>
 800887c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008880 <_vfiprintf_r>:
 8008880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008884:	460d      	mov	r5, r1
 8008886:	b09d      	sub	sp, #116	@ 0x74
 8008888:	4614      	mov	r4, r2
 800888a:	4698      	mov	r8, r3
 800888c:	4606      	mov	r6, r0
 800888e:	b118      	cbz	r0, 8008898 <_vfiprintf_r+0x18>
 8008890:	6a03      	ldr	r3, [r0, #32]
 8008892:	b90b      	cbnz	r3, 8008898 <_vfiprintf_r+0x18>
 8008894:	f7ff fcde 	bl	8008254 <__sinit>
 8008898:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800889a:	07d9      	lsls	r1, r3, #31
 800889c:	d405      	bmi.n	80088aa <_vfiprintf_r+0x2a>
 800889e:	89ab      	ldrh	r3, [r5, #12]
 80088a0:	059a      	lsls	r2, r3, #22
 80088a2:	d402      	bmi.n	80088aa <_vfiprintf_r+0x2a>
 80088a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80088a6:	f7ff fe1c 	bl	80084e2 <__retarget_lock_acquire_recursive>
 80088aa:	89ab      	ldrh	r3, [r5, #12]
 80088ac:	071b      	lsls	r3, r3, #28
 80088ae:	d501      	bpl.n	80088b4 <_vfiprintf_r+0x34>
 80088b0:	692b      	ldr	r3, [r5, #16]
 80088b2:	b99b      	cbnz	r3, 80088dc <_vfiprintf_r+0x5c>
 80088b4:	4629      	mov	r1, r5
 80088b6:	4630      	mov	r0, r6
 80088b8:	f000 fbe2 	bl	8009080 <__swsetup_r>
 80088bc:	b170      	cbz	r0, 80088dc <_vfiprintf_r+0x5c>
 80088be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80088c0:	07dc      	lsls	r4, r3, #31
 80088c2:	d504      	bpl.n	80088ce <_vfiprintf_r+0x4e>
 80088c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80088c8:	b01d      	add	sp, #116	@ 0x74
 80088ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088ce:	89ab      	ldrh	r3, [r5, #12]
 80088d0:	0598      	lsls	r0, r3, #22
 80088d2:	d4f7      	bmi.n	80088c4 <_vfiprintf_r+0x44>
 80088d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80088d6:	f7ff fe05 	bl	80084e4 <__retarget_lock_release_recursive>
 80088da:	e7f3      	b.n	80088c4 <_vfiprintf_r+0x44>
 80088dc:	2300      	movs	r3, #0
 80088de:	9309      	str	r3, [sp, #36]	@ 0x24
 80088e0:	2320      	movs	r3, #32
 80088e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80088e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80088ea:	2330      	movs	r3, #48	@ 0x30
 80088ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008a9c <_vfiprintf_r+0x21c>
 80088f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80088f4:	f04f 0901 	mov.w	r9, #1
 80088f8:	4623      	mov	r3, r4
 80088fa:	469a      	mov	sl, r3
 80088fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008900:	b10a      	cbz	r2, 8008906 <_vfiprintf_r+0x86>
 8008902:	2a25      	cmp	r2, #37	@ 0x25
 8008904:	d1f9      	bne.n	80088fa <_vfiprintf_r+0x7a>
 8008906:	ebba 0b04 	subs.w	fp, sl, r4
 800890a:	d00b      	beq.n	8008924 <_vfiprintf_r+0xa4>
 800890c:	465b      	mov	r3, fp
 800890e:	4622      	mov	r2, r4
 8008910:	4629      	mov	r1, r5
 8008912:	4630      	mov	r0, r6
 8008914:	f7ff ffa1 	bl	800885a <__sfputs_r>
 8008918:	3001      	adds	r0, #1
 800891a:	f000 80a7 	beq.w	8008a6c <_vfiprintf_r+0x1ec>
 800891e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008920:	445a      	add	r2, fp
 8008922:	9209      	str	r2, [sp, #36]	@ 0x24
 8008924:	f89a 3000 	ldrb.w	r3, [sl]
 8008928:	2b00      	cmp	r3, #0
 800892a:	f000 809f 	beq.w	8008a6c <_vfiprintf_r+0x1ec>
 800892e:	2300      	movs	r3, #0
 8008930:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008934:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008938:	f10a 0a01 	add.w	sl, sl, #1
 800893c:	9304      	str	r3, [sp, #16]
 800893e:	9307      	str	r3, [sp, #28]
 8008940:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008944:	931a      	str	r3, [sp, #104]	@ 0x68
 8008946:	4654      	mov	r4, sl
 8008948:	2205      	movs	r2, #5
 800894a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800894e:	4853      	ldr	r0, [pc, #332]	@ (8008a9c <_vfiprintf_r+0x21c>)
 8008950:	f7f7 fc3e 	bl	80001d0 <memchr>
 8008954:	9a04      	ldr	r2, [sp, #16]
 8008956:	b9d8      	cbnz	r0, 8008990 <_vfiprintf_r+0x110>
 8008958:	06d1      	lsls	r1, r2, #27
 800895a:	bf44      	itt	mi
 800895c:	2320      	movmi	r3, #32
 800895e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008962:	0713      	lsls	r3, r2, #28
 8008964:	bf44      	itt	mi
 8008966:	232b      	movmi	r3, #43	@ 0x2b
 8008968:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800896c:	f89a 3000 	ldrb.w	r3, [sl]
 8008970:	2b2a      	cmp	r3, #42	@ 0x2a
 8008972:	d015      	beq.n	80089a0 <_vfiprintf_r+0x120>
 8008974:	9a07      	ldr	r2, [sp, #28]
 8008976:	4654      	mov	r4, sl
 8008978:	2000      	movs	r0, #0
 800897a:	f04f 0c0a 	mov.w	ip, #10
 800897e:	4621      	mov	r1, r4
 8008980:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008984:	3b30      	subs	r3, #48	@ 0x30
 8008986:	2b09      	cmp	r3, #9
 8008988:	d94b      	bls.n	8008a22 <_vfiprintf_r+0x1a2>
 800898a:	b1b0      	cbz	r0, 80089ba <_vfiprintf_r+0x13a>
 800898c:	9207      	str	r2, [sp, #28]
 800898e:	e014      	b.n	80089ba <_vfiprintf_r+0x13a>
 8008990:	eba0 0308 	sub.w	r3, r0, r8
 8008994:	fa09 f303 	lsl.w	r3, r9, r3
 8008998:	4313      	orrs	r3, r2
 800899a:	9304      	str	r3, [sp, #16]
 800899c:	46a2      	mov	sl, r4
 800899e:	e7d2      	b.n	8008946 <_vfiprintf_r+0xc6>
 80089a0:	9b03      	ldr	r3, [sp, #12]
 80089a2:	1d19      	adds	r1, r3, #4
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	9103      	str	r1, [sp, #12]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	bfbb      	ittet	lt
 80089ac:	425b      	neglt	r3, r3
 80089ae:	f042 0202 	orrlt.w	r2, r2, #2
 80089b2:	9307      	strge	r3, [sp, #28]
 80089b4:	9307      	strlt	r3, [sp, #28]
 80089b6:	bfb8      	it	lt
 80089b8:	9204      	strlt	r2, [sp, #16]
 80089ba:	7823      	ldrb	r3, [r4, #0]
 80089bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80089be:	d10a      	bne.n	80089d6 <_vfiprintf_r+0x156>
 80089c0:	7863      	ldrb	r3, [r4, #1]
 80089c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80089c4:	d132      	bne.n	8008a2c <_vfiprintf_r+0x1ac>
 80089c6:	9b03      	ldr	r3, [sp, #12]
 80089c8:	1d1a      	adds	r2, r3, #4
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	9203      	str	r2, [sp, #12]
 80089ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80089d2:	3402      	adds	r4, #2
 80089d4:	9305      	str	r3, [sp, #20]
 80089d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008aac <_vfiprintf_r+0x22c>
 80089da:	7821      	ldrb	r1, [r4, #0]
 80089dc:	2203      	movs	r2, #3
 80089de:	4650      	mov	r0, sl
 80089e0:	f7f7 fbf6 	bl	80001d0 <memchr>
 80089e4:	b138      	cbz	r0, 80089f6 <_vfiprintf_r+0x176>
 80089e6:	9b04      	ldr	r3, [sp, #16]
 80089e8:	eba0 000a 	sub.w	r0, r0, sl
 80089ec:	2240      	movs	r2, #64	@ 0x40
 80089ee:	4082      	lsls	r2, r0
 80089f0:	4313      	orrs	r3, r2
 80089f2:	3401      	adds	r4, #1
 80089f4:	9304      	str	r3, [sp, #16]
 80089f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089fa:	4829      	ldr	r0, [pc, #164]	@ (8008aa0 <_vfiprintf_r+0x220>)
 80089fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008a00:	2206      	movs	r2, #6
 8008a02:	f7f7 fbe5 	bl	80001d0 <memchr>
 8008a06:	2800      	cmp	r0, #0
 8008a08:	d03f      	beq.n	8008a8a <_vfiprintf_r+0x20a>
 8008a0a:	4b26      	ldr	r3, [pc, #152]	@ (8008aa4 <_vfiprintf_r+0x224>)
 8008a0c:	bb1b      	cbnz	r3, 8008a56 <_vfiprintf_r+0x1d6>
 8008a0e:	9b03      	ldr	r3, [sp, #12]
 8008a10:	3307      	adds	r3, #7
 8008a12:	f023 0307 	bic.w	r3, r3, #7
 8008a16:	3308      	adds	r3, #8
 8008a18:	9303      	str	r3, [sp, #12]
 8008a1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a1c:	443b      	add	r3, r7
 8008a1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a20:	e76a      	b.n	80088f8 <_vfiprintf_r+0x78>
 8008a22:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a26:	460c      	mov	r4, r1
 8008a28:	2001      	movs	r0, #1
 8008a2a:	e7a8      	b.n	800897e <_vfiprintf_r+0xfe>
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	3401      	adds	r4, #1
 8008a30:	9305      	str	r3, [sp, #20]
 8008a32:	4619      	mov	r1, r3
 8008a34:	f04f 0c0a 	mov.w	ip, #10
 8008a38:	4620      	mov	r0, r4
 8008a3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a3e:	3a30      	subs	r2, #48	@ 0x30
 8008a40:	2a09      	cmp	r2, #9
 8008a42:	d903      	bls.n	8008a4c <_vfiprintf_r+0x1cc>
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d0c6      	beq.n	80089d6 <_vfiprintf_r+0x156>
 8008a48:	9105      	str	r1, [sp, #20]
 8008a4a:	e7c4      	b.n	80089d6 <_vfiprintf_r+0x156>
 8008a4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a50:	4604      	mov	r4, r0
 8008a52:	2301      	movs	r3, #1
 8008a54:	e7f0      	b.n	8008a38 <_vfiprintf_r+0x1b8>
 8008a56:	ab03      	add	r3, sp, #12
 8008a58:	9300      	str	r3, [sp, #0]
 8008a5a:	462a      	mov	r2, r5
 8008a5c:	4b12      	ldr	r3, [pc, #72]	@ (8008aa8 <_vfiprintf_r+0x228>)
 8008a5e:	a904      	add	r1, sp, #16
 8008a60:	4630      	mov	r0, r6
 8008a62:	f3af 8000 	nop.w
 8008a66:	4607      	mov	r7, r0
 8008a68:	1c78      	adds	r0, r7, #1
 8008a6a:	d1d6      	bne.n	8008a1a <_vfiprintf_r+0x19a>
 8008a6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a6e:	07d9      	lsls	r1, r3, #31
 8008a70:	d405      	bmi.n	8008a7e <_vfiprintf_r+0x1fe>
 8008a72:	89ab      	ldrh	r3, [r5, #12]
 8008a74:	059a      	lsls	r2, r3, #22
 8008a76:	d402      	bmi.n	8008a7e <_vfiprintf_r+0x1fe>
 8008a78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a7a:	f7ff fd33 	bl	80084e4 <__retarget_lock_release_recursive>
 8008a7e:	89ab      	ldrh	r3, [r5, #12]
 8008a80:	065b      	lsls	r3, r3, #25
 8008a82:	f53f af1f 	bmi.w	80088c4 <_vfiprintf_r+0x44>
 8008a86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008a88:	e71e      	b.n	80088c8 <_vfiprintf_r+0x48>
 8008a8a:	ab03      	add	r3, sp, #12
 8008a8c:	9300      	str	r3, [sp, #0]
 8008a8e:	462a      	mov	r2, r5
 8008a90:	4b05      	ldr	r3, [pc, #20]	@ (8008aa8 <_vfiprintf_r+0x228>)
 8008a92:	a904      	add	r1, sp, #16
 8008a94:	4630      	mov	r0, r6
 8008a96:	f000 f879 	bl	8008b8c <_printf_i>
 8008a9a:	e7e4      	b.n	8008a66 <_vfiprintf_r+0x1e6>
 8008a9c:	080094dc 	.word	0x080094dc
 8008aa0:	080094e6 	.word	0x080094e6
 8008aa4:	00000000 	.word	0x00000000
 8008aa8:	0800885b 	.word	0x0800885b
 8008aac:	080094e2 	.word	0x080094e2

08008ab0 <_printf_common>:
 8008ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ab4:	4616      	mov	r6, r2
 8008ab6:	4698      	mov	r8, r3
 8008ab8:	688a      	ldr	r2, [r1, #8]
 8008aba:	690b      	ldr	r3, [r1, #16]
 8008abc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	bfb8      	it	lt
 8008ac4:	4613      	movlt	r3, r2
 8008ac6:	6033      	str	r3, [r6, #0]
 8008ac8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008acc:	4607      	mov	r7, r0
 8008ace:	460c      	mov	r4, r1
 8008ad0:	b10a      	cbz	r2, 8008ad6 <_printf_common+0x26>
 8008ad2:	3301      	adds	r3, #1
 8008ad4:	6033      	str	r3, [r6, #0]
 8008ad6:	6823      	ldr	r3, [r4, #0]
 8008ad8:	0699      	lsls	r1, r3, #26
 8008ada:	bf42      	ittt	mi
 8008adc:	6833      	ldrmi	r3, [r6, #0]
 8008ade:	3302      	addmi	r3, #2
 8008ae0:	6033      	strmi	r3, [r6, #0]
 8008ae2:	6825      	ldr	r5, [r4, #0]
 8008ae4:	f015 0506 	ands.w	r5, r5, #6
 8008ae8:	d106      	bne.n	8008af8 <_printf_common+0x48>
 8008aea:	f104 0a19 	add.w	sl, r4, #25
 8008aee:	68e3      	ldr	r3, [r4, #12]
 8008af0:	6832      	ldr	r2, [r6, #0]
 8008af2:	1a9b      	subs	r3, r3, r2
 8008af4:	42ab      	cmp	r3, r5
 8008af6:	dc26      	bgt.n	8008b46 <_printf_common+0x96>
 8008af8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008afc:	6822      	ldr	r2, [r4, #0]
 8008afe:	3b00      	subs	r3, #0
 8008b00:	bf18      	it	ne
 8008b02:	2301      	movne	r3, #1
 8008b04:	0692      	lsls	r2, r2, #26
 8008b06:	d42b      	bmi.n	8008b60 <_printf_common+0xb0>
 8008b08:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008b0c:	4641      	mov	r1, r8
 8008b0e:	4638      	mov	r0, r7
 8008b10:	47c8      	blx	r9
 8008b12:	3001      	adds	r0, #1
 8008b14:	d01e      	beq.n	8008b54 <_printf_common+0xa4>
 8008b16:	6823      	ldr	r3, [r4, #0]
 8008b18:	6922      	ldr	r2, [r4, #16]
 8008b1a:	f003 0306 	and.w	r3, r3, #6
 8008b1e:	2b04      	cmp	r3, #4
 8008b20:	bf02      	ittt	eq
 8008b22:	68e5      	ldreq	r5, [r4, #12]
 8008b24:	6833      	ldreq	r3, [r6, #0]
 8008b26:	1aed      	subeq	r5, r5, r3
 8008b28:	68a3      	ldr	r3, [r4, #8]
 8008b2a:	bf0c      	ite	eq
 8008b2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b30:	2500      	movne	r5, #0
 8008b32:	4293      	cmp	r3, r2
 8008b34:	bfc4      	itt	gt
 8008b36:	1a9b      	subgt	r3, r3, r2
 8008b38:	18ed      	addgt	r5, r5, r3
 8008b3a:	2600      	movs	r6, #0
 8008b3c:	341a      	adds	r4, #26
 8008b3e:	42b5      	cmp	r5, r6
 8008b40:	d11a      	bne.n	8008b78 <_printf_common+0xc8>
 8008b42:	2000      	movs	r0, #0
 8008b44:	e008      	b.n	8008b58 <_printf_common+0xa8>
 8008b46:	2301      	movs	r3, #1
 8008b48:	4652      	mov	r2, sl
 8008b4a:	4641      	mov	r1, r8
 8008b4c:	4638      	mov	r0, r7
 8008b4e:	47c8      	blx	r9
 8008b50:	3001      	adds	r0, #1
 8008b52:	d103      	bne.n	8008b5c <_printf_common+0xac>
 8008b54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b5c:	3501      	adds	r5, #1
 8008b5e:	e7c6      	b.n	8008aee <_printf_common+0x3e>
 8008b60:	18e1      	adds	r1, r4, r3
 8008b62:	1c5a      	adds	r2, r3, #1
 8008b64:	2030      	movs	r0, #48	@ 0x30
 8008b66:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008b6a:	4422      	add	r2, r4
 8008b6c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008b70:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008b74:	3302      	adds	r3, #2
 8008b76:	e7c7      	b.n	8008b08 <_printf_common+0x58>
 8008b78:	2301      	movs	r3, #1
 8008b7a:	4622      	mov	r2, r4
 8008b7c:	4641      	mov	r1, r8
 8008b7e:	4638      	mov	r0, r7
 8008b80:	47c8      	blx	r9
 8008b82:	3001      	adds	r0, #1
 8008b84:	d0e6      	beq.n	8008b54 <_printf_common+0xa4>
 8008b86:	3601      	adds	r6, #1
 8008b88:	e7d9      	b.n	8008b3e <_printf_common+0x8e>
	...

08008b8c <_printf_i>:
 8008b8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b90:	7e0f      	ldrb	r7, [r1, #24]
 8008b92:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008b94:	2f78      	cmp	r7, #120	@ 0x78
 8008b96:	4691      	mov	r9, r2
 8008b98:	4680      	mov	r8, r0
 8008b9a:	460c      	mov	r4, r1
 8008b9c:	469a      	mov	sl, r3
 8008b9e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008ba2:	d807      	bhi.n	8008bb4 <_printf_i+0x28>
 8008ba4:	2f62      	cmp	r7, #98	@ 0x62
 8008ba6:	d80a      	bhi.n	8008bbe <_printf_i+0x32>
 8008ba8:	2f00      	cmp	r7, #0
 8008baa:	f000 80d1 	beq.w	8008d50 <_printf_i+0x1c4>
 8008bae:	2f58      	cmp	r7, #88	@ 0x58
 8008bb0:	f000 80b8 	beq.w	8008d24 <_printf_i+0x198>
 8008bb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008bb8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008bbc:	e03a      	b.n	8008c34 <_printf_i+0xa8>
 8008bbe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008bc2:	2b15      	cmp	r3, #21
 8008bc4:	d8f6      	bhi.n	8008bb4 <_printf_i+0x28>
 8008bc6:	a101      	add	r1, pc, #4	@ (adr r1, 8008bcc <_printf_i+0x40>)
 8008bc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008bcc:	08008c25 	.word	0x08008c25
 8008bd0:	08008c39 	.word	0x08008c39
 8008bd4:	08008bb5 	.word	0x08008bb5
 8008bd8:	08008bb5 	.word	0x08008bb5
 8008bdc:	08008bb5 	.word	0x08008bb5
 8008be0:	08008bb5 	.word	0x08008bb5
 8008be4:	08008c39 	.word	0x08008c39
 8008be8:	08008bb5 	.word	0x08008bb5
 8008bec:	08008bb5 	.word	0x08008bb5
 8008bf0:	08008bb5 	.word	0x08008bb5
 8008bf4:	08008bb5 	.word	0x08008bb5
 8008bf8:	08008d37 	.word	0x08008d37
 8008bfc:	08008c63 	.word	0x08008c63
 8008c00:	08008cf1 	.word	0x08008cf1
 8008c04:	08008bb5 	.word	0x08008bb5
 8008c08:	08008bb5 	.word	0x08008bb5
 8008c0c:	08008d59 	.word	0x08008d59
 8008c10:	08008bb5 	.word	0x08008bb5
 8008c14:	08008c63 	.word	0x08008c63
 8008c18:	08008bb5 	.word	0x08008bb5
 8008c1c:	08008bb5 	.word	0x08008bb5
 8008c20:	08008cf9 	.word	0x08008cf9
 8008c24:	6833      	ldr	r3, [r6, #0]
 8008c26:	1d1a      	adds	r2, r3, #4
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	6032      	str	r2, [r6, #0]
 8008c2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008c30:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008c34:	2301      	movs	r3, #1
 8008c36:	e09c      	b.n	8008d72 <_printf_i+0x1e6>
 8008c38:	6833      	ldr	r3, [r6, #0]
 8008c3a:	6820      	ldr	r0, [r4, #0]
 8008c3c:	1d19      	adds	r1, r3, #4
 8008c3e:	6031      	str	r1, [r6, #0]
 8008c40:	0606      	lsls	r6, r0, #24
 8008c42:	d501      	bpl.n	8008c48 <_printf_i+0xbc>
 8008c44:	681d      	ldr	r5, [r3, #0]
 8008c46:	e003      	b.n	8008c50 <_printf_i+0xc4>
 8008c48:	0645      	lsls	r5, r0, #25
 8008c4a:	d5fb      	bpl.n	8008c44 <_printf_i+0xb8>
 8008c4c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008c50:	2d00      	cmp	r5, #0
 8008c52:	da03      	bge.n	8008c5c <_printf_i+0xd0>
 8008c54:	232d      	movs	r3, #45	@ 0x2d
 8008c56:	426d      	negs	r5, r5
 8008c58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c5c:	4858      	ldr	r0, [pc, #352]	@ (8008dc0 <_printf_i+0x234>)
 8008c5e:	230a      	movs	r3, #10
 8008c60:	e011      	b.n	8008c86 <_printf_i+0xfa>
 8008c62:	6821      	ldr	r1, [r4, #0]
 8008c64:	6833      	ldr	r3, [r6, #0]
 8008c66:	0608      	lsls	r0, r1, #24
 8008c68:	f853 5b04 	ldr.w	r5, [r3], #4
 8008c6c:	d402      	bmi.n	8008c74 <_printf_i+0xe8>
 8008c6e:	0649      	lsls	r1, r1, #25
 8008c70:	bf48      	it	mi
 8008c72:	b2ad      	uxthmi	r5, r5
 8008c74:	2f6f      	cmp	r7, #111	@ 0x6f
 8008c76:	4852      	ldr	r0, [pc, #328]	@ (8008dc0 <_printf_i+0x234>)
 8008c78:	6033      	str	r3, [r6, #0]
 8008c7a:	bf14      	ite	ne
 8008c7c:	230a      	movne	r3, #10
 8008c7e:	2308      	moveq	r3, #8
 8008c80:	2100      	movs	r1, #0
 8008c82:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008c86:	6866      	ldr	r6, [r4, #4]
 8008c88:	60a6      	str	r6, [r4, #8]
 8008c8a:	2e00      	cmp	r6, #0
 8008c8c:	db05      	blt.n	8008c9a <_printf_i+0x10e>
 8008c8e:	6821      	ldr	r1, [r4, #0]
 8008c90:	432e      	orrs	r6, r5
 8008c92:	f021 0104 	bic.w	r1, r1, #4
 8008c96:	6021      	str	r1, [r4, #0]
 8008c98:	d04b      	beq.n	8008d32 <_printf_i+0x1a6>
 8008c9a:	4616      	mov	r6, r2
 8008c9c:	fbb5 f1f3 	udiv	r1, r5, r3
 8008ca0:	fb03 5711 	mls	r7, r3, r1, r5
 8008ca4:	5dc7      	ldrb	r7, [r0, r7]
 8008ca6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008caa:	462f      	mov	r7, r5
 8008cac:	42bb      	cmp	r3, r7
 8008cae:	460d      	mov	r5, r1
 8008cb0:	d9f4      	bls.n	8008c9c <_printf_i+0x110>
 8008cb2:	2b08      	cmp	r3, #8
 8008cb4:	d10b      	bne.n	8008cce <_printf_i+0x142>
 8008cb6:	6823      	ldr	r3, [r4, #0]
 8008cb8:	07df      	lsls	r7, r3, #31
 8008cba:	d508      	bpl.n	8008cce <_printf_i+0x142>
 8008cbc:	6923      	ldr	r3, [r4, #16]
 8008cbe:	6861      	ldr	r1, [r4, #4]
 8008cc0:	4299      	cmp	r1, r3
 8008cc2:	bfde      	ittt	le
 8008cc4:	2330      	movle	r3, #48	@ 0x30
 8008cc6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008cca:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008cce:	1b92      	subs	r2, r2, r6
 8008cd0:	6122      	str	r2, [r4, #16]
 8008cd2:	f8cd a000 	str.w	sl, [sp]
 8008cd6:	464b      	mov	r3, r9
 8008cd8:	aa03      	add	r2, sp, #12
 8008cda:	4621      	mov	r1, r4
 8008cdc:	4640      	mov	r0, r8
 8008cde:	f7ff fee7 	bl	8008ab0 <_printf_common>
 8008ce2:	3001      	adds	r0, #1
 8008ce4:	d14a      	bne.n	8008d7c <_printf_i+0x1f0>
 8008ce6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008cea:	b004      	add	sp, #16
 8008cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cf0:	6823      	ldr	r3, [r4, #0]
 8008cf2:	f043 0320 	orr.w	r3, r3, #32
 8008cf6:	6023      	str	r3, [r4, #0]
 8008cf8:	4832      	ldr	r0, [pc, #200]	@ (8008dc4 <_printf_i+0x238>)
 8008cfa:	2778      	movs	r7, #120	@ 0x78
 8008cfc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008d00:	6823      	ldr	r3, [r4, #0]
 8008d02:	6831      	ldr	r1, [r6, #0]
 8008d04:	061f      	lsls	r7, r3, #24
 8008d06:	f851 5b04 	ldr.w	r5, [r1], #4
 8008d0a:	d402      	bmi.n	8008d12 <_printf_i+0x186>
 8008d0c:	065f      	lsls	r7, r3, #25
 8008d0e:	bf48      	it	mi
 8008d10:	b2ad      	uxthmi	r5, r5
 8008d12:	6031      	str	r1, [r6, #0]
 8008d14:	07d9      	lsls	r1, r3, #31
 8008d16:	bf44      	itt	mi
 8008d18:	f043 0320 	orrmi.w	r3, r3, #32
 8008d1c:	6023      	strmi	r3, [r4, #0]
 8008d1e:	b11d      	cbz	r5, 8008d28 <_printf_i+0x19c>
 8008d20:	2310      	movs	r3, #16
 8008d22:	e7ad      	b.n	8008c80 <_printf_i+0xf4>
 8008d24:	4826      	ldr	r0, [pc, #152]	@ (8008dc0 <_printf_i+0x234>)
 8008d26:	e7e9      	b.n	8008cfc <_printf_i+0x170>
 8008d28:	6823      	ldr	r3, [r4, #0]
 8008d2a:	f023 0320 	bic.w	r3, r3, #32
 8008d2e:	6023      	str	r3, [r4, #0]
 8008d30:	e7f6      	b.n	8008d20 <_printf_i+0x194>
 8008d32:	4616      	mov	r6, r2
 8008d34:	e7bd      	b.n	8008cb2 <_printf_i+0x126>
 8008d36:	6833      	ldr	r3, [r6, #0]
 8008d38:	6825      	ldr	r5, [r4, #0]
 8008d3a:	6961      	ldr	r1, [r4, #20]
 8008d3c:	1d18      	adds	r0, r3, #4
 8008d3e:	6030      	str	r0, [r6, #0]
 8008d40:	062e      	lsls	r6, r5, #24
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	d501      	bpl.n	8008d4a <_printf_i+0x1be>
 8008d46:	6019      	str	r1, [r3, #0]
 8008d48:	e002      	b.n	8008d50 <_printf_i+0x1c4>
 8008d4a:	0668      	lsls	r0, r5, #25
 8008d4c:	d5fb      	bpl.n	8008d46 <_printf_i+0x1ba>
 8008d4e:	8019      	strh	r1, [r3, #0]
 8008d50:	2300      	movs	r3, #0
 8008d52:	6123      	str	r3, [r4, #16]
 8008d54:	4616      	mov	r6, r2
 8008d56:	e7bc      	b.n	8008cd2 <_printf_i+0x146>
 8008d58:	6833      	ldr	r3, [r6, #0]
 8008d5a:	1d1a      	adds	r2, r3, #4
 8008d5c:	6032      	str	r2, [r6, #0]
 8008d5e:	681e      	ldr	r6, [r3, #0]
 8008d60:	6862      	ldr	r2, [r4, #4]
 8008d62:	2100      	movs	r1, #0
 8008d64:	4630      	mov	r0, r6
 8008d66:	f7f7 fa33 	bl	80001d0 <memchr>
 8008d6a:	b108      	cbz	r0, 8008d70 <_printf_i+0x1e4>
 8008d6c:	1b80      	subs	r0, r0, r6
 8008d6e:	6060      	str	r0, [r4, #4]
 8008d70:	6863      	ldr	r3, [r4, #4]
 8008d72:	6123      	str	r3, [r4, #16]
 8008d74:	2300      	movs	r3, #0
 8008d76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d7a:	e7aa      	b.n	8008cd2 <_printf_i+0x146>
 8008d7c:	6923      	ldr	r3, [r4, #16]
 8008d7e:	4632      	mov	r2, r6
 8008d80:	4649      	mov	r1, r9
 8008d82:	4640      	mov	r0, r8
 8008d84:	47d0      	blx	sl
 8008d86:	3001      	adds	r0, #1
 8008d88:	d0ad      	beq.n	8008ce6 <_printf_i+0x15a>
 8008d8a:	6823      	ldr	r3, [r4, #0]
 8008d8c:	079b      	lsls	r3, r3, #30
 8008d8e:	d413      	bmi.n	8008db8 <_printf_i+0x22c>
 8008d90:	68e0      	ldr	r0, [r4, #12]
 8008d92:	9b03      	ldr	r3, [sp, #12]
 8008d94:	4298      	cmp	r0, r3
 8008d96:	bfb8      	it	lt
 8008d98:	4618      	movlt	r0, r3
 8008d9a:	e7a6      	b.n	8008cea <_printf_i+0x15e>
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	4632      	mov	r2, r6
 8008da0:	4649      	mov	r1, r9
 8008da2:	4640      	mov	r0, r8
 8008da4:	47d0      	blx	sl
 8008da6:	3001      	adds	r0, #1
 8008da8:	d09d      	beq.n	8008ce6 <_printf_i+0x15a>
 8008daa:	3501      	adds	r5, #1
 8008dac:	68e3      	ldr	r3, [r4, #12]
 8008dae:	9903      	ldr	r1, [sp, #12]
 8008db0:	1a5b      	subs	r3, r3, r1
 8008db2:	42ab      	cmp	r3, r5
 8008db4:	dcf2      	bgt.n	8008d9c <_printf_i+0x210>
 8008db6:	e7eb      	b.n	8008d90 <_printf_i+0x204>
 8008db8:	2500      	movs	r5, #0
 8008dba:	f104 0619 	add.w	r6, r4, #25
 8008dbe:	e7f5      	b.n	8008dac <_printf_i+0x220>
 8008dc0:	080094ed 	.word	0x080094ed
 8008dc4:	080094fe 	.word	0x080094fe

08008dc8 <__sflush_r>:
 8008dc8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dd0:	0716      	lsls	r6, r2, #28
 8008dd2:	4605      	mov	r5, r0
 8008dd4:	460c      	mov	r4, r1
 8008dd6:	d454      	bmi.n	8008e82 <__sflush_r+0xba>
 8008dd8:	684b      	ldr	r3, [r1, #4]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	dc02      	bgt.n	8008de4 <__sflush_r+0x1c>
 8008dde:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	dd48      	ble.n	8008e76 <__sflush_r+0xae>
 8008de4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008de6:	2e00      	cmp	r6, #0
 8008de8:	d045      	beq.n	8008e76 <__sflush_r+0xae>
 8008dea:	2300      	movs	r3, #0
 8008dec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008df0:	682f      	ldr	r7, [r5, #0]
 8008df2:	6a21      	ldr	r1, [r4, #32]
 8008df4:	602b      	str	r3, [r5, #0]
 8008df6:	d030      	beq.n	8008e5a <__sflush_r+0x92>
 8008df8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008dfa:	89a3      	ldrh	r3, [r4, #12]
 8008dfc:	0759      	lsls	r1, r3, #29
 8008dfe:	d505      	bpl.n	8008e0c <__sflush_r+0x44>
 8008e00:	6863      	ldr	r3, [r4, #4]
 8008e02:	1ad2      	subs	r2, r2, r3
 8008e04:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008e06:	b10b      	cbz	r3, 8008e0c <__sflush_r+0x44>
 8008e08:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008e0a:	1ad2      	subs	r2, r2, r3
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008e10:	6a21      	ldr	r1, [r4, #32]
 8008e12:	4628      	mov	r0, r5
 8008e14:	47b0      	blx	r6
 8008e16:	1c43      	adds	r3, r0, #1
 8008e18:	89a3      	ldrh	r3, [r4, #12]
 8008e1a:	d106      	bne.n	8008e2a <__sflush_r+0x62>
 8008e1c:	6829      	ldr	r1, [r5, #0]
 8008e1e:	291d      	cmp	r1, #29
 8008e20:	d82b      	bhi.n	8008e7a <__sflush_r+0xb2>
 8008e22:	4a2a      	ldr	r2, [pc, #168]	@ (8008ecc <__sflush_r+0x104>)
 8008e24:	40ca      	lsrs	r2, r1
 8008e26:	07d6      	lsls	r6, r2, #31
 8008e28:	d527      	bpl.n	8008e7a <__sflush_r+0xb2>
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	6062      	str	r2, [r4, #4]
 8008e2e:	04d9      	lsls	r1, r3, #19
 8008e30:	6922      	ldr	r2, [r4, #16]
 8008e32:	6022      	str	r2, [r4, #0]
 8008e34:	d504      	bpl.n	8008e40 <__sflush_r+0x78>
 8008e36:	1c42      	adds	r2, r0, #1
 8008e38:	d101      	bne.n	8008e3e <__sflush_r+0x76>
 8008e3a:	682b      	ldr	r3, [r5, #0]
 8008e3c:	b903      	cbnz	r3, 8008e40 <__sflush_r+0x78>
 8008e3e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008e40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008e42:	602f      	str	r7, [r5, #0]
 8008e44:	b1b9      	cbz	r1, 8008e76 <__sflush_r+0xae>
 8008e46:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008e4a:	4299      	cmp	r1, r3
 8008e4c:	d002      	beq.n	8008e54 <__sflush_r+0x8c>
 8008e4e:	4628      	mov	r0, r5
 8008e50:	f7ff fb4a 	bl	80084e8 <_free_r>
 8008e54:	2300      	movs	r3, #0
 8008e56:	6363      	str	r3, [r4, #52]	@ 0x34
 8008e58:	e00d      	b.n	8008e76 <__sflush_r+0xae>
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	4628      	mov	r0, r5
 8008e5e:	47b0      	blx	r6
 8008e60:	4602      	mov	r2, r0
 8008e62:	1c50      	adds	r0, r2, #1
 8008e64:	d1c9      	bne.n	8008dfa <__sflush_r+0x32>
 8008e66:	682b      	ldr	r3, [r5, #0]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d0c6      	beq.n	8008dfa <__sflush_r+0x32>
 8008e6c:	2b1d      	cmp	r3, #29
 8008e6e:	d001      	beq.n	8008e74 <__sflush_r+0xac>
 8008e70:	2b16      	cmp	r3, #22
 8008e72:	d11e      	bne.n	8008eb2 <__sflush_r+0xea>
 8008e74:	602f      	str	r7, [r5, #0]
 8008e76:	2000      	movs	r0, #0
 8008e78:	e022      	b.n	8008ec0 <__sflush_r+0xf8>
 8008e7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e7e:	b21b      	sxth	r3, r3
 8008e80:	e01b      	b.n	8008eba <__sflush_r+0xf2>
 8008e82:	690f      	ldr	r7, [r1, #16]
 8008e84:	2f00      	cmp	r7, #0
 8008e86:	d0f6      	beq.n	8008e76 <__sflush_r+0xae>
 8008e88:	0793      	lsls	r3, r2, #30
 8008e8a:	680e      	ldr	r6, [r1, #0]
 8008e8c:	bf08      	it	eq
 8008e8e:	694b      	ldreq	r3, [r1, #20]
 8008e90:	600f      	str	r7, [r1, #0]
 8008e92:	bf18      	it	ne
 8008e94:	2300      	movne	r3, #0
 8008e96:	eba6 0807 	sub.w	r8, r6, r7
 8008e9a:	608b      	str	r3, [r1, #8]
 8008e9c:	f1b8 0f00 	cmp.w	r8, #0
 8008ea0:	dde9      	ble.n	8008e76 <__sflush_r+0xae>
 8008ea2:	6a21      	ldr	r1, [r4, #32]
 8008ea4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008ea6:	4643      	mov	r3, r8
 8008ea8:	463a      	mov	r2, r7
 8008eaa:	4628      	mov	r0, r5
 8008eac:	47b0      	blx	r6
 8008eae:	2800      	cmp	r0, #0
 8008eb0:	dc08      	bgt.n	8008ec4 <__sflush_r+0xfc>
 8008eb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008eb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008eba:	81a3      	strh	r3, [r4, #12]
 8008ebc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ec4:	4407      	add	r7, r0
 8008ec6:	eba8 0800 	sub.w	r8, r8, r0
 8008eca:	e7e7      	b.n	8008e9c <__sflush_r+0xd4>
 8008ecc:	20400001 	.word	0x20400001

08008ed0 <_fflush_r>:
 8008ed0:	b538      	push	{r3, r4, r5, lr}
 8008ed2:	690b      	ldr	r3, [r1, #16]
 8008ed4:	4605      	mov	r5, r0
 8008ed6:	460c      	mov	r4, r1
 8008ed8:	b913      	cbnz	r3, 8008ee0 <_fflush_r+0x10>
 8008eda:	2500      	movs	r5, #0
 8008edc:	4628      	mov	r0, r5
 8008ede:	bd38      	pop	{r3, r4, r5, pc}
 8008ee0:	b118      	cbz	r0, 8008eea <_fflush_r+0x1a>
 8008ee2:	6a03      	ldr	r3, [r0, #32]
 8008ee4:	b90b      	cbnz	r3, 8008eea <_fflush_r+0x1a>
 8008ee6:	f7ff f9b5 	bl	8008254 <__sinit>
 8008eea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d0f3      	beq.n	8008eda <_fflush_r+0xa>
 8008ef2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008ef4:	07d0      	lsls	r0, r2, #31
 8008ef6:	d404      	bmi.n	8008f02 <_fflush_r+0x32>
 8008ef8:	0599      	lsls	r1, r3, #22
 8008efa:	d402      	bmi.n	8008f02 <_fflush_r+0x32>
 8008efc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008efe:	f7ff faf0 	bl	80084e2 <__retarget_lock_acquire_recursive>
 8008f02:	4628      	mov	r0, r5
 8008f04:	4621      	mov	r1, r4
 8008f06:	f7ff ff5f 	bl	8008dc8 <__sflush_r>
 8008f0a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008f0c:	07da      	lsls	r2, r3, #31
 8008f0e:	4605      	mov	r5, r0
 8008f10:	d4e4      	bmi.n	8008edc <_fflush_r+0xc>
 8008f12:	89a3      	ldrh	r3, [r4, #12]
 8008f14:	059b      	lsls	r3, r3, #22
 8008f16:	d4e1      	bmi.n	8008edc <_fflush_r+0xc>
 8008f18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f1a:	f7ff fae3 	bl	80084e4 <__retarget_lock_release_recursive>
 8008f1e:	e7dd      	b.n	8008edc <_fflush_r+0xc>

08008f20 <__sread>:
 8008f20:	b510      	push	{r4, lr}
 8008f22:	460c      	mov	r4, r1
 8008f24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f28:	f000 f984 	bl	8009234 <_read_r>
 8008f2c:	2800      	cmp	r0, #0
 8008f2e:	bfab      	itete	ge
 8008f30:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008f32:	89a3      	ldrhlt	r3, [r4, #12]
 8008f34:	181b      	addge	r3, r3, r0
 8008f36:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008f3a:	bfac      	ite	ge
 8008f3c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008f3e:	81a3      	strhlt	r3, [r4, #12]
 8008f40:	bd10      	pop	{r4, pc}

08008f42 <__swrite>:
 8008f42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f46:	461f      	mov	r7, r3
 8008f48:	898b      	ldrh	r3, [r1, #12]
 8008f4a:	05db      	lsls	r3, r3, #23
 8008f4c:	4605      	mov	r5, r0
 8008f4e:	460c      	mov	r4, r1
 8008f50:	4616      	mov	r6, r2
 8008f52:	d505      	bpl.n	8008f60 <__swrite+0x1e>
 8008f54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f58:	2302      	movs	r3, #2
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	f000 f958 	bl	8009210 <_lseek_r>
 8008f60:	89a3      	ldrh	r3, [r4, #12]
 8008f62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f66:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008f6a:	81a3      	strh	r3, [r4, #12]
 8008f6c:	4632      	mov	r2, r6
 8008f6e:	463b      	mov	r3, r7
 8008f70:	4628      	mov	r0, r5
 8008f72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f76:	f000 b96f 	b.w	8009258 <_write_r>

08008f7a <__sseek>:
 8008f7a:	b510      	push	{r4, lr}
 8008f7c:	460c      	mov	r4, r1
 8008f7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f82:	f000 f945 	bl	8009210 <_lseek_r>
 8008f86:	1c43      	adds	r3, r0, #1
 8008f88:	89a3      	ldrh	r3, [r4, #12]
 8008f8a:	bf15      	itete	ne
 8008f8c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008f8e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008f92:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008f96:	81a3      	strheq	r3, [r4, #12]
 8008f98:	bf18      	it	ne
 8008f9a:	81a3      	strhne	r3, [r4, #12]
 8008f9c:	bd10      	pop	{r4, pc}

08008f9e <__sclose>:
 8008f9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fa2:	f000 b96b 	b.w	800927c <_close_r>

08008fa6 <_realloc_r>:
 8008fa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008faa:	4607      	mov	r7, r0
 8008fac:	4614      	mov	r4, r2
 8008fae:	460d      	mov	r5, r1
 8008fb0:	b921      	cbnz	r1, 8008fbc <_realloc_r+0x16>
 8008fb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008fb6:	4611      	mov	r1, r2
 8008fb8:	f7fe bffe 	b.w	8007fb8 <_malloc_r>
 8008fbc:	b92a      	cbnz	r2, 8008fca <_realloc_r+0x24>
 8008fbe:	f7ff fa93 	bl	80084e8 <_free_r>
 8008fc2:	4625      	mov	r5, r4
 8008fc4:	4628      	mov	r0, r5
 8008fc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fca:	f000 f987 	bl	80092dc <_malloc_usable_size_r>
 8008fce:	4284      	cmp	r4, r0
 8008fd0:	4606      	mov	r6, r0
 8008fd2:	d802      	bhi.n	8008fda <_realloc_r+0x34>
 8008fd4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008fd8:	d8f4      	bhi.n	8008fc4 <_realloc_r+0x1e>
 8008fda:	4621      	mov	r1, r4
 8008fdc:	4638      	mov	r0, r7
 8008fde:	f7fe ffeb 	bl	8007fb8 <_malloc_r>
 8008fe2:	4680      	mov	r8, r0
 8008fe4:	b908      	cbnz	r0, 8008fea <_realloc_r+0x44>
 8008fe6:	4645      	mov	r5, r8
 8008fe8:	e7ec      	b.n	8008fc4 <_realloc_r+0x1e>
 8008fea:	42b4      	cmp	r4, r6
 8008fec:	4622      	mov	r2, r4
 8008fee:	4629      	mov	r1, r5
 8008ff0:	bf28      	it	cs
 8008ff2:	4632      	movcs	r2, r6
 8008ff4:	f000 f964 	bl	80092c0 <memcpy>
 8008ff8:	4629      	mov	r1, r5
 8008ffa:	4638      	mov	r0, r7
 8008ffc:	f7ff fa74 	bl	80084e8 <_free_r>
 8009000:	e7f1      	b.n	8008fe6 <_realloc_r+0x40>

08009002 <__swbuf_r>:
 8009002:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009004:	460e      	mov	r6, r1
 8009006:	4614      	mov	r4, r2
 8009008:	4605      	mov	r5, r0
 800900a:	b118      	cbz	r0, 8009014 <__swbuf_r+0x12>
 800900c:	6a03      	ldr	r3, [r0, #32]
 800900e:	b90b      	cbnz	r3, 8009014 <__swbuf_r+0x12>
 8009010:	f7ff f920 	bl	8008254 <__sinit>
 8009014:	69a3      	ldr	r3, [r4, #24]
 8009016:	60a3      	str	r3, [r4, #8]
 8009018:	89a3      	ldrh	r3, [r4, #12]
 800901a:	071a      	lsls	r2, r3, #28
 800901c:	d501      	bpl.n	8009022 <__swbuf_r+0x20>
 800901e:	6923      	ldr	r3, [r4, #16]
 8009020:	b943      	cbnz	r3, 8009034 <__swbuf_r+0x32>
 8009022:	4621      	mov	r1, r4
 8009024:	4628      	mov	r0, r5
 8009026:	f000 f82b 	bl	8009080 <__swsetup_r>
 800902a:	b118      	cbz	r0, 8009034 <__swbuf_r+0x32>
 800902c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8009030:	4638      	mov	r0, r7
 8009032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009034:	6823      	ldr	r3, [r4, #0]
 8009036:	6922      	ldr	r2, [r4, #16]
 8009038:	1a98      	subs	r0, r3, r2
 800903a:	6963      	ldr	r3, [r4, #20]
 800903c:	b2f6      	uxtb	r6, r6
 800903e:	4283      	cmp	r3, r0
 8009040:	4637      	mov	r7, r6
 8009042:	dc05      	bgt.n	8009050 <__swbuf_r+0x4e>
 8009044:	4621      	mov	r1, r4
 8009046:	4628      	mov	r0, r5
 8009048:	f7ff ff42 	bl	8008ed0 <_fflush_r>
 800904c:	2800      	cmp	r0, #0
 800904e:	d1ed      	bne.n	800902c <__swbuf_r+0x2a>
 8009050:	68a3      	ldr	r3, [r4, #8]
 8009052:	3b01      	subs	r3, #1
 8009054:	60a3      	str	r3, [r4, #8]
 8009056:	6823      	ldr	r3, [r4, #0]
 8009058:	1c5a      	adds	r2, r3, #1
 800905a:	6022      	str	r2, [r4, #0]
 800905c:	701e      	strb	r6, [r3, #0]
 800905e:	6962      	ldr	r2, [r4, #20]
 8009060:	1c43      	adds	r3, r0, #1
 8009062:	429a      	cmp	r2, r3
 8009064:	d004      	beq.n	8009070 <__swbuf_r+0x6e>
 8009066:	89a3      	ldrh	r3, [r4, #12]
 8009068:	07db      	lsls	r3, r3, #31
 800906a:	d5e1      	bpl.n	8009030 <__swbuf_r+0x2e>
 800906c:	2e0a      	cmp	r6, #10
 800906e:	d1df      	bne.n	8009030 <__swbuf_r+0x2e>
 8009070:	4621      	mov	r1, r4
 8009072:	4628      	mov	r0, r5
 8009074:	f7ff ff2c 	bl	8008ed0 <_fflush_r>
 8009078:	2800      	cmp	r0, #0
 800907a:	d0d9      	beq.n	8009030 <__swbuf_r+0x2e>
 800907c:	e7d6      	b.n	800902c <__swbuf_r+0x2a>
	...

08009080 <__swsetup_r>:
 8009080:	b538      	push	{r3, r4, r5, lr}
 8009082:	4b29      	ldr	r3, [pc, #164]	@ (8009128 <__swsetup_r+0xa8>)
 8009084:	4605      	mov	r5, r0
 8009086:	6818      	ldr	r0, [r3, #0]
 8009088:	460c      	mov	r4, r1
 800908a:	b118      	cbz	r0, 8009094 <__swsetup_r+0x14>
 800908c:	6a03      	ldr	r3, [r0, #32]
 800908e:	b90b      	cbnz	r3, 8009094 <__swsetup_r+0x14>
 8009090:	f7ff f8e0 	bl	8008254 <__sinit>
 8009094:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009098:	0719      	lsls	r1, r3, #28
 800909a:	d422      	bmi.n	80090e2 <__swsetup_r+0x62>
 800909c:	06da      	lsls	r2, r3, #27
 800909e:	d407      	bmi.n	80090b0 <__swsetup_r+0x30>
 80090a0:	2209      	movs	r2, #9
 80090a2:	602a      	str	r2, [r5, #0]
 80090a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80090a8:	81a3      	strh	r3, [r4, #12]
 80090aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80090ae:	e033      	b.n	8009118 <__swsetup_r+0x98>
 80090b0:	0758      	lsls	r0, r3, #29
 80090b2:	d512      	bpl.n	80090da <__swsetup_r+0x5a>
 80090b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80090b6:	b141      	cbz	r1, 80090ca <__swsetup_r+0x4a>
 80090b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80090bc:	4299      	cmp	r1, r3
 80090be:	d002      	beq.n	80090c6 <__swsetup_r+0x46>
 80090c0:	4628      	mov	r0, r5
 80090c2:	f7ff fa11 	bl	80084e8 <_free_r>
 80090c6:	2300      	movs	r3, #0
 80090c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80090ca:	89a3      	ldrh	r3, [r4, #12]
 80090cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80090d0:	81a3      	strh	r3, [r4, #12]
 80090d2:	2300      	movs	r3, #0
 80090d4:	6063      	str	r3, [r4, #4]
 80090d6:	6923      	ldr	r3, [r4, #16]
 80090d8:	6023      	str	r3, [r4, #0]
 80090da:	89a3      	ldrh	r3, [r4, #12]
 80090dc:	f043 0308 	orr.w	r3, r3, #8
 80090e0:	81a3      	strh	r3, [r4, #12]
 80090e2:	6923      	ldr	r3, [r4, #16]
 80090e4:	b94b      	cbnz	r3, 80090fa <__swsetup_r+0x7a>
 80090e6:	89a3      	ldrh	r3, [r4, #12]
 80090e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80090ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80090f0:	d003      	beq.n	80090fa <__swsetup_r+0x7a>
 80090f2:	4621      	mov	r1, r4
 80090f4:	4628      	mov	r0, r5
 80090f6:	f000 f83f 	bl	8009178 <__smakebuf_r>
 80090fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090fe:	f013 0201 	ands.w	r2, r3, #1
 8009102:	d00a      	beq.n	800911a <__swsetup_r+0x9a>
 8009104:	2200      	movs	r2, #0
 8009106:	60a2      	str	r2, [r4, #8]
 8009108:	6962      	ldr	r2, [r4, #20]
 800910a:	4252      	negs	r2, r2
 800910c:	61a2      	str	r2, [r4, #24]
 800910e:	6922      	ldr	r2, [r4, #16]
 8009110:	b942      	cbnz	r2, 8009124 <__swsetup_r+0xa4>
 8009112:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009116:	d1c5      	bne.n	80090a4 <__swsetup_r+0x24>
 8009118:	bd38      	pop	{r3, r4, r5, pc}
 800911a:	0799      	lsls	r1, r3, #30
 800911c:	bf58      	it	pl
 800911e:	6962      	ldrpl	r2, [r4, #20]
 8009120:	60a2      	str	r2, [r4, #8]
 8009122:	e7f4      	b.n	800910e <__swsetup_r+0x8e>
 8009124:	2000      	movs	r0, #0
 8009126:	e7f7      	b.n	8009118 <__swsetup_r+0x98>
 8009128:	20000038 	.word	0x20000038

0800912c <__swhatbuf_r>:
 800912c:	b570      	push	{r4, r5, r6, lr}
 800912e:	460c      	mov	r4, r1
 8009130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009134:	2900      	cmp	r1, #0
 8009136:	b096      	sub	sp, #88	@ 0x58
 8009138:	4615      	mov	r5, r2
 800913a:	461e      	mov	r6, r3
 800913c:	da0d      	bge.n	800915a <__swhatbuf_r+0x2e>
 800913e:	89a3      	ldrh	r3, [r4, #12]
 8009140:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009144:	f04f 0100 	mov.w	r1, #0
 8009148:	bf14      	ite	ne
 800914a:	2340      	movne	r3, #64	@ 0x40
 800914c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009150:	2000      	movs	r0, #0
 8009152:	6031      	str	r1, [r6, #0]
 8009154:	602b      	str	r3, [r5, #0]
 8009156:	b016      	add	sp, #88	@ 0x58
 8009158:	bd70      	pop	{r4, r5, r6, pc}
 800915a:	466a      	mov	r2, sp
 800915c:	f000 f89e 	bl	800929c <_fstat_r>
 8009160:	2800      	cmp	r0, #0
 8009162:	dbec      	blt.n	800913e <__swhatbuf_r+0x12>
 8009164:	9901      	ldr	r1, [sp, #4]
 8009166:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800916a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800916e:	4259      	negs	r1, r3
 8009170:	4159      	adcs	r1, r3
 8009172:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009176:	e7eb      	b.n	8009150 <__swhatbuf_r+0x24>

08009178 <__smakebuf_r>:
 8009178:	898b      	ldrh	r3, [r1, #12]
 800917a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800917c:	079d      	lsls	r5, r3, #30
 800917e:	4606      	mov	r6, r0
 8009180:	460c      	mov	r4, r1
 8009182:	d507      	bpl.n	8009194 <__smakebuf_r+0x1c>
 8009184:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009188:	6023      	str	r3, [r4, #0]
 800918a:	6123      	str	r3, [r4, #16]
 800918c:	2301      	movs	r3, #1
 800918e:	6163      	str	r3, [r4, #20]
 8009190:	b003      	add	sp, #12
 8009192:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009194:	ab01      	add	r3, sp, #4
 8009196:	466a      	mov	r2, sp
 8009198:	f7ff ffc8 	bl	800912c <__swhatbuf_r>
 800919c:	9f00      	ldr	r7, [sp, #0]
 800919e:	4605      	mov	r5, r0
 80091a0:	4639      	mov	r1, r7
 80091a2:	4630      	mov	r0, r6
 80091a4:	f7fe ff08 	bl	8007fb8 <_malloc_r>
 80091a8:	b948      	cbnz	r0, 80091be <__smakebuf_r+0x46>
 80091aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091ae:	059a      	lsls	r2, r3, #22
 80091b0:	d4ee      	bmi.n	8009190 <__smakebuf_r+0x18>
 80091b2:	f023 0303 	bic.w	r3, r3, #3
 80091b6:	f043 0302 	orr.w	r3, r3, #2
 80091ba:	81a3      	strh	r3, [r4, #12]
 80091bc:	e7e2      	b.n	8009184 <__smakebuf_r+0xc>
 80091be:	89a3      	ldrh	r3, [r4, #12]
 80091c0:	6020      	str	r0, [r4, #0]
 80091c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091c6:	81a3      	strh	r3, [r4, #12]
 80091c8:	9b01      	ldr	r3, [sp, #4]
 80091ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80091ce:	b15b      	cbz	r3, 80091e8 <__smakebuf_r+0x70>
 80091d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091d4:	4630      	mov	r0, r6
 80091d6:	f000 f80b 	bl	80091f0 <_isatty_r>
 80091da:	b128      	cbz	r0, 80091e8 <__smakebuf_r+0x70>
 80091dc:	89a3      	ldrh	r3, [r4, #12]
 80091de:	f023 0303 	bic.w	r3, r3, #3
 80091e2:	f043 0301 	orr.w	r3, r3, #1
 80091e6:	81a3      	strh	r3, [r4, #12]
 80091e8:	89a3      	ldrh	r3, [r4, #12]
 80091ea:	431d      	orrs	r5, r3
 80091ec:	81a5      	strh	r5, [r4, #12]
 80091ee:	e7cf      	b.n	8009190 <__smakebuf_r+0x18>

080091f0 <_isatty_r>:
 80091f0:	b538      	push	{r3, r4, r5, lr}
 80091f2:	4d06      	ldr	r5, [pc, #24]	@ (800920c <_isatty_r+0x1c>)
 80091f4:	2300      	movs	r3, #0
 80091f6:	4604      	mov	r4, r0
 80091f8:	4608      	mov	r0, r1
 80091fa:	602b      	str	r3, [r5, #0]
 80091fc:	f7fa f8a1 	bl	8003342 <_isatty>
 8009200:	1c43      	adds	r3, r0, #1
 8009202:	d102      	bne.n	800920a <_isatty_r+0x1a>
 8009204:	682b      	ldr	r3, [r5, #0]
 8009206:	b103      	cbz	r3, 800920a <_isatty_r+0x1a>
 8009208:	6023      	str	r3, [r4, #0]
 800920a:	bd38      	pop	{r3, r4, r5, pc}
 800920c:	20000428 	.word	0x20000428

08009210 <_lseek_r>:
 8009210:	b538      	push	{r3, r4, r5, lr}
 8009212:	4d07      	ldr	r5, [pc, #28]	@ (8009230 <_lseek_r+0x20>)
 8009214:	4604      	mov	r4, r0
 8009216:	4608      	mov	r0, r1
 8009218:	4611      	mov	r1, r2
 800921a:	2200      	movs	r2, #0
 800921c:	602a      	str	r2, [r5, #0]
 800921e:	461a      	mov	r2, r3
 8009220:	f7fa f89a 	bl	8003358 <_lseek>
 8009224:	1c43      	adds	r3, r0, #1
 8009226:	d102      	bne.n	800922e <_lseek_r+0x1e>
 8009228:	682b      	ldr	r3, [r5, #0]
 800922a:	b103      	cbz	r3, 800922e <_lseek_r+0x1e>
 800922c:	6023      	str	r3, [r4, #0]
 800922e:	bd38      	pop	{r3, r4, r5, pc}
 8009230:	20000428 	.word	0x20000428

08009234 <_read_r>:
 8009234:	b538      	push	{r3, r4, r5, lr}
 8009236:	4d07      	ldr	r5, [pc, #28]	@ (8009254 <_read_r+0x20>)
 8009238:	4604      	mov	r4, r0
 800923a:	4608      	mov	r0, r1
 800923c:	4611      	mov	r1, r2
 800923e:	2200      	movs	r2, #0
 8009240:	602a      	str	r2, [r5, #0]
 8009242:	461a      	mov	r2, r3
 8009244:	f7fa f828 	bl	8003298 <_read>
 8009248:	1c43      	adds	r3, r0, #1
 800924a:	d102      	bne.n	8009252 <_read_r+0x1e>
 800924c:	682b      	ldr	r3, [r5, #0]
 800924e:	b103      	cbz	r3, 8009252 <_read_r+0x1e>
 8009250:	6023      	str	r3, [r4, #0]
 8009252:	bd38      	pop	{r3, r4, r5, pc}
 8009254:	20000428 	.word	0x20000428

08009258 <_write_r>:
 8009258:	b538      	push	{r3, r4, r5, lr}
 800925a:	4d07      	ldr	r5, [pc, #28]	@ (8009278 <_write_r+0x20>)
 800925c:	4604      	mov	r4, r0
 800925e:	4608      	mov	r0, r1
 8009260:	4611      	mov	r1, r2
 8009262:	2200      	movs	r2, #0
 8009264:	602a      	str	r2, [r5, #0]
 8009266:	461a      	mov	r2, r3
 8009268:	f7fa f833 	bl	80032d2 <_write>
 800926c:	1c43      	adds	r3, r0, #1
 800926e:	d102      	bne.n	8009276 <_write_r+0x1e>
 8009270:	682b      	ldr	r3, [r5, #0]
 8009272:	b103      	cbz	r3, 8009276 <_write_r+0x1e>
 8009274:	6023      	str	r3, [r4, #0]
 8009276:	bd38      	pop	{r3, r4, r5, pc}
 8009278:	20000428 	.word	0x20000428

0800927c <_close_r>:
 800927c:	b538      	push	{r3, r4, r5, lr}
 800927e:	4d06      	ldr	r5, [pc, #24]	@ (8009298 <_close_r+0x1c>)
 8009280:	2300      	movs	r3, #0
 8009282:	4604      	mov	r4, r0
 8009284:	4608      	mov	r0, r1
 8009286:	602b      	str	r3, [r5, #0]
 8009288:	f7fa f83f 	bl	800330a <_close>
 800928c:	1c43      	adds	r3, r0, #1
 800928e:	d102      	bne.n	8009296 <_close_r+0x1a>
 8009290:	682b      	ldr	r3, [r5, #0]
 8009292:	b103      	cbz	r3, 8009296 <_close_r+0x1a>
 8009294:	6023      	str	r3, [r4, #0]
 8009296:	bd38      	pop	{r3, r4, r5, pc}
 8009298:	20000428 	.word	0x20000428

0800929c <_fstat_r>:
 800929c:	b538      	push	{r3, r4, r5, lr}
 800929e:	4d07      	ldr	r5, [pc, #28]	@ (80092bc <_fstat_r+0x20>)
 80092a0:	2300      	movs	r3, #0
 80092a2:	4604      	mov	r4, r0
 80092a4:	4608      	mov	r0, r1
 80092a6:	4611      	mov	r1, r2
 80092a8:	602b      	str	r3, [r5, #0]
 80092aa:	f7fa f83a 	bl	8003322 <_fstat>
 80092ae:	1c43      	adds	r3, r0, #1
 80092b0:	d102      	bne.n	80092b8 <_fstat_r+0x1c>
 80092b2:	682b      	ldr	r3, [r5, #0]
 80092b4:	b103      	cbz	r3, 80092b8 <_fstat_r+0x1c>
 80092b6:	6023      	str	r3, [r4, #0]
 80092b8:	bd38      	pop	{r3, r4, r5, pc}
 80092ba:	bf00      	nop
 80092bc:	20000428 	.word	0x20000428

080092c0 <memcpy>:
 80092c0:	440a      	add	r2, r1
 80092c2:	4291      	cmp	r1, r2
 80092c4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80092c8:	d100      	bne.n	80092cc <memcpy+0xc>
 80092ca:	4770      	bx	lr
 80092cc:	b510      	push	{r4, lr}
 80092ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80092d6:	4291      	cmp	r1, r2
 80092d8:	d1f9      	bne.n	80092ce <memcpy+0xe>
 80092da:	bd10      	pop	{r4, pc}

080092dc <_malloc_usable_size_r>:
 80092dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092e0:	1f18      	subs	r0, r3, #4
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	bfbc      	itt	lt
 80092e6:	580b      	ldrlt	r3, [r1, r0]
 80092e8:	18c0      	addlt	r0, r0, r3
 80092ea:	4770      	bx	lr

080092ec <_init>:
 80092ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ee:	bf00      	nop
 80092f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092f2:	bc08      	pop	{r3}
 80092f4:	469e      	mov	lr, r3
 80092f6:	4770      	bx	lr

080092f8 <_fini>:
 80092f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092fa:	bf00      	nop
 80092fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092fe:	bc08      	pop	{r3}
 8009300:	469e      	mov	lr, r3
 8009302:	4770      	bx	lr
