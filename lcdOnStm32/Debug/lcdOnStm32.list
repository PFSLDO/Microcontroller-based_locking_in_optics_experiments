
lcdOnStm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005050  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080051dc  080051dc  000061dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005264  08005264  0000700c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005264  08005264  00006264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800526c  0800526c  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800526c  0800526c  0000626c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005270  08005270  00006270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005274  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  2000000c  08005280  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000208  08005280  00007208  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015e72  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027a2  00000000  00000000  0001ceae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001540  00000000  00000000  0001f650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010b6  00000000  00000000  00020b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bf1f  00000000  00000000  00021c46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000172df  00000000  00000000  0003db65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000baea3  00000000  00000000  00054e44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010fce7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c78  00000000  00000000  0010fd2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  001159a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080051c4 	.word	0x080051c4

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	080051c4 	.word	0x080051c4

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001e0:	f000 b988 	b.w	80004f4 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	468e      	mov	lr, r1
 8000204:	4604      	mov	r4, r0
 8000206:	4688      	mov	r8, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14a      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020c:	428a      	cmp	r2, r1
 800020e:	4617      	mov	r7, r2
 8000210:	d962      	bls.n	80002d8 <__udivmoddi4+0xdc>
 8000212:	fab2 f682 	clz	r6, r2
 8000216:	b14e      	cbz	r6, 800022c <__udivmoddi4+0x30>
 8000218:	f1c6 0320 	rsb	r3, r6, #32
 800021c:	fa01 f806 	lsl.w	r8, r1, r6
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	40b7      	lsls	r7, r6
 8000226:	ea43 0808 	orr.w	r8, r3, r8
 800022a:	40b4      	lsls	r4, r6
 800022c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000230:	fa1f fc87 	uxth.w	ip, r7
 8000234:	fbb8 f1fe 	udiv	r1, r8, lr
 8000238:	0c23      	lsrs	r3, r4, #16
 800023a:	fb0e 8811 	mls	r8, lr, r1, r8
 800023e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000242:	fb01 f20c 	mul.w	r2, r1, ip
 8000246:	429a      	cmp	r2, r3
 8000248:	d909      	bls.n	800025e <__udivmoddi4+0x62>
 800024a:	18fb      	adds	r3, r7, r3
 800024c:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000250:	f080 80ea 	bcs.w	8000428 <__udivmoddi4+0x22c>
 8000254:	429a      	cmp	r2, r3
 8000256:	f240 80e7 	bls.w	8000428 <__udivmoddi4+0x22c>
 800025a:	3902      	subs	r1, #2
 800025c:	443b      	add	r3, r7
 800025e:	1a9a      	subs	r2, r3, r2
 8000260:	b2a3      	uxth	r3, r4
 8000262:	fbb2 f0fe 	udiv	r0, r2, lr
 8000266:	fb0e 2210 	mls	r2, lr, r0, r2
 800026a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000272:	459c      	cmp	ip, r3
 8000274:	d909      	bls.n	800028a <__udivmoddi4+0x8e>
 8000276:	18fb      	adds	r3, r7, r3
 8000278:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 800027c:	f080 80d6 	bcs.w	800042c <__udivmoddi4+0x230>
 8000280:	459c      	cmp	ip, r3
 8000282:	f240 80d3 	bls.w	800042c <__udivmoddi4+0x230>
 8000286:	443b      	add	r3, r7
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028e:	eba3 030c 	sub.w	r3, r3, ip
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa2>
 8000296:	40f3      	lsrs	r3, r6
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xb6>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb0>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa2>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x14c>
 80002ba:	4573      	cmp	r3, lr
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xc8>
 80002be:	4282      	cmp	r2, r0
 80002c0:	f200 8105 	bhi.w	80004ce <__udivmoddi4+0x2d2>
 80002c4:	1a84      	subs	r4, r0, r2
 80002c6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	4690      	mov	r8, r2
 80002ce:	2d00      	cmp	r5, #0
 80002d0:	d0e5      	beq.n	800029e <__udivmoddi4+0xa2>
 80002d2:	e9c5 4800 	strd	r4, r8, [r5]
 80002d6:	e7e2      	b.n	800029e <__udivmoddi4+0xa2>
 80002d8:	2a00      	cmp	r2, #0
 80002da:	f000 8090 	beq.w	80003fe <__udivmoddi4+0x202>
 80002de:	fab2 f682 	clz	r6, r2
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f040 80a4 	bne.w	8000430 <__udivmoddi4+0x234>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	0c03      	lsrs	r3, r0, #16
 80002ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f0:	b280      	uxth	r0, r0
 80002f2:	b2bc      	uxth	r4, r7
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb2 fcfe 	udiv	ip, r2, lr
 80002fa:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000302:	fb04 f20c 	mul.w	r2, r4, ip
 8000306:	429a      	cmp	r2, r3
 8000308:	d907      	bls.n	800031a <__udivmoddi4+0x11e>
 800030a:	18fb      	adds	r3, r7, r3
 800030c:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000310:	d202      	bcs.n	8000318 <__udivmoddi4+0x11c>
 8000312:	429a      	cmp	r2, r3
 8000314:	f200 80e0 	bhi.w	80004d8 <__udivmoddi4+0x2dc>
 8000318:	46c4      	mov	ip, r8
 800031a:	1a9b      	subs	r3, r3, r2
 800031c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000320:	fb0e 3312 	mls	r3, lr, r2, r3
 8000324:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000328:	fb02 f404 	mul.w	r4, r2, r4
 800032c:	429c      	cmp	r4, r3
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x144>
 8000330:	18fb      	adds	r3, r7, r3
 8000332:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x142>
 8000338:	429c      	cmp	r4, r3
 800033a:	f200 80ca 	bhi.w	80004d2 <__udivmoddi4+0x2d6>
 800033e:	4602      	mov	r2, r0
 8000340:	1b1b      	subs	r3, r3, r4
 8000342:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x98>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa0e f401 	lsl.w	r4, lr, r1
 8000358:	fa20 f306 	lsr.w	r3, r0, r6
 800035c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000360:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000364:	4323      	orrs	r3, r4
 8000366:	fa00 f801 	lsl.w	r8, r0, r1
 800036a:	fa1f fc87 	uxth.w	ip, r7
 800036e:	fbbe f0f9 	udiv	r0, lr, r9
 8000372:	0c1c      	lsrs	r4, r3, #16
 8000374:	fb09 ee10 	mls	lr, r9, r0, lr
 8000378:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800037c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000380:	45a6      	cmp	lr, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x1a0>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800038e:	f080 809c 	bcs.w	80004ca <__udivmoddi4+0x2ce>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8099 	bls.w	80004ca <__udivmoddi4+0x2ce>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	eba4 040e 	sub.w	r4, r4, lr
 80003a0:	fa1f fe83 	uxth.w	lr, r3
 80003a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a8:	fb09 4413 	mls	r4, r9, r3, r4
 80003ac:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b4:	45a4      	cmp	ip, r4
 80003b6:	d908      	bls.n	80003ca <__udivmoddi4+0x1ce>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003be:	f080 8082 	bcs.w	80004c6 <__udivmoddi4+0x2ca>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d97f      	bls.n	80004c6 <__udivmoddi4+0x2ca>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ce:	eba4 040c 	sub.w	r4, r4, ip
 80003d2:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d6:	4564      	cmp	r4, ip
 80003d8:	4673      	mov	r3, lr
 80003da:	46e1      	mov	r9, ip
 80003dc:	d362      	bcc.n	80004a4 <__udivmoddi4+0x2a8>
 80003de:	d05f      	beq.n	80004a0 <__udivmoddi4+0x2a4>
 80003e0:	b15d      	cbz	r5, 80003fa <__udivmoddi4+0x1fe>
 80003e2:	ebb8 0203 	subs.w	r2, r8, r3
 80003e6:	eb64 0409 	sbc.w	r4, r4, r9
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	fa22 f301 	lsr.w	r3, r2, r1
 80003f2:	431e      	orrs	r6, r3
 80003f4:	40cc      	lsrs	r4, r1
 80003f6:	e9c5 6400 	strd	r6, r4, [r5]
 80003fa:	2100      	movs	r1, #0
 80003fc:	e74f      	b.n	800029e <__udivmoddi4+0xa2>
 80003fe:	fbb1 fcf2 	udiv	ip, r1, r2
 8000402:	0c01      	lsrs	r1, r0, #16
 8000404:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000408:	b280      	uxth	r0, r0
 800040a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040e:	463b      	mov	r3, r7
 8000410:	4638      	mov	r0, r7
 8000412:	463c      	mov	r4, r7
 8000414:	46b8      	mov	r8, r7
 8000416:	46be      	mov	lr, r7
 8000418:	2620      	movs	r6, #32
 800041a:	fbb1 f1f7 	udiv	r1, r1, r7
 800041e:	eba2 0208 	sub.w	r2, r2, r8
 8000422:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000426:	e766      	b.n	80002f6 <__udivmoddi4+0xfa>
 8000428:	4601      	mov	r1, r0
 800042a:	e718      	b.n	800025e <__udivmoddi4+0x62>
 800042c:	4610      	mov	r0, r2
 800042e:	e72c      	b.n	800028a <__udivmoddi4+0x8e>
 8000430:	f1c6 0220 	rsb	r2, r6, #32
 8000434:	fa2e f302 	lsr.w	r3, lr, r2
 8000438:	40b7      	lsls	r7, r6
 800043a:	40b1      	lsls	r1, r6
 800043c:	fa20 f202 	lsr.w	r2, r0, r2
 8000440:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000444:	430a      	orrs	r2, r1
 8000446:	fbb3 f8fe 	udiv	r8, r3, lr
 800044a:	b2bc      	uxth	r4, r7
 800044c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000456:	fb08 f904 	mul.w	r9, r8, r4
 800045a:	40b0      	lsls	r0, r6
 800045c:	4589      	cmp	r9, r1
 800045e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000462:	b280      	uxth	r0, r0
 8000464:	d93e      	bls.n	80004e4 <__udivmoddi4+0x2e8>
 8000466:	1879      	adds	r1, r7, r1
 8000468:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 800046c:	d201      	bcs.n	8000472 <__udivmoddi4+0x276>
 800046e:	4589      	cmp	r9, r1
 8000470:	d81f      	bhi.n	80004b2 <__udivmoddi4+0x2b6>
 8000472:	eba1 0109 	sub.w	r1, r1, r9
 8000476:	fbb1 f9fe 	udiv	r9, r1, lr
 800047a:	fb09 f804 	mul.w	r8, r9, r4
 800047e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000482:	b292      	uxth	r2, r2
 8000484:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000488:	4542      	cmp	r2, r8
 800048a:	d229      	bcs.n	80004e0 <__udivmoddi4+0x2e4>
 800048c:	18ba      	adds	r2, r7, r2
 800048e:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000492:	d2c4      	bcs.n	800041e <__udivmoddi4+0x222>
 8000494:	4542      	cmp	r2, r8
 8000496:	d2c2      	bcs.n	800041e <__udivmoddi4+0x222>
 8000498:	f1a9 0102 	sub.w	r1, r9, #2
 800049c:	443a      	add	r2, r7
 800049e:	e7be      	b.n	800041e <__udivmoddi4+0x222>
 80004a0:	45f0      	cmp	r8, lr
 80004a2:	d29d      	bcs.n	80003e0 <__udivmoddi4+0x1e4>
 80004a4:	ebbe 0302 	subs.w	r3, lr, r2
 80004a8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004ac:	3801      	subs	r0, #1
 80004ae:	46e1      	mov	r9, ip
 80004b0:	e796      	b.n	80003e0 <__udivmoddi4+0x1e4>
 80004b2:	eba7 0909 	sub.w	r9, r7, r9
 80004b6:	4449      	add	r1, r9
 80004b8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004bc:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c0:	fb09 f804 	mul.w	r8, r9, r4
 80004c4:	e7db      	b.n	800047e <__udivmoddi4+0x282>
 80004c6:	4673      	mov	r3, lr
 80004c8:	e77f      	b.n	80003ca <__udivmoddi4+0x1ce>
 80004ca:	4650      	mov	r0, sl
 80004cc:	e766      	b.n	800039c <__udivmoddi4+0x1a0>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e6fd      	b.n	80002ce <__udivmoddi4+0xd2>
 80004d2:	443b      	add	r3, r7
 80004d4:	3a02      	subs	r2, #2
 80004d6:	e733      	b.n	8000340 <__udivmoddi4+0x144>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	443b      	add	r3, r7
 80004de:	e71c      	b.n	800031a <__udivmoddi4+0x11e>
 80004e0:	4649      	mov	r1, r9
 80004e2:	e79c      	b.n	800041e <__udivmoddi4+0x222>
 80004e4:	eba1 0109 	sub.w	r1, r1, r9
 80004e8:	46c4      	mov	ip, r8
 80004ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ee:	fb09 f804 	mul.w	r8, r9, r4
 80004f2:	e7c4      	b.n	800047e <__udivmoddi4+0x282>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fc:	f000 fe37 	bl	800116e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000500:	f000 f82e 	bl	8000560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000504:	f000 fa06 	bl	8000914 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000508:	f000 f8e6 	bl	80006d8 <MX_I2C1_Init>
  MX_TIM1_Init();
 800050c:	f000 f924 	bl	8000758 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000510:	f000 f97c 	bl	800080c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000514:	f000 f9ce 	bl	80008b4 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000518:	f000 f868 	bl	80005ec <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 800051c:	f000 faf8 	bl	8000b10 <lcd_init>
  lcd_clear();
 8000520:	f000 fb24 	bl	8000b6c <lcd_clear>
  lcd_set_cursor(0, 3);
 8000524:	2103      	movs	r1, #3
 8000526:	2000      	movs	r0, #0
 8000528:	f000 fb2a 	bl	8000b80 <lcd_set_cursor>
  lcd_print("Travamento");
 800052c:	480a      	ldr	r0, [pc, #40]	@ (8000558 <main+0x60>)
 800052e:	f000 fb45 	bl	8000bbc <lcd_print>
  lcd_set_cursor(1, 0);
 8000532:	2100      	movs	r1, #0
 8000534:	2001      	movs	r0, #1
 8000536:	f000 fb23 	bl	8000b80 <lcd_set_cursor>
  lcd_print("Cavidade Triang");
 800053a:	4808      	ldr	r0, [pc, #32]	@ (800055c <main+0x64>)
 800053c:	f000 fb3e 	bl	8000bbc <lcd_print>
  HAL_Delay(2000);
 8000540:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000544:	f000 fe88 	bl	8001258 <HAL_Delay>
  lcd_clear();
 8000548:	f000 fb10 	bl	8000b6c <lcd_clear>
  lcd_set_cursor(0, 0);
 800054c:	2100      	movs	r1, #0
 800054e:	2000      	movs	r0, #0
 8000550:	f000 fb16 	bl	8000b80 <lcd_set_cursor>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000554:	bf00      	nop
 8000556:	e7fd      	b.n	8000554 <main+0x5c>
 8000558:	080051dc 	.word	0x080051dc
 800055c:	080051e8 	.word	0x080051e8

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b096      	sub	sp, #88	@ 0x58
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	f107 0314 	add.w	r3, r7, #20
 800056a:	2244      	movs	r2, #68	@ 0x44
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f004 fdfb 	bl	800516a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000574:	463b      	mov	r3, r7
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
 800057e:	60da      	str	r2, [r3, #12]
 8000580:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000582:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000586:	f002 fe49 	bl	800321c <HAL_PWREx_ControlVoltageScaling>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000590:	f000 fbf0 	bl	8000d74 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000594:	2310      	movs	r3, #16
 8000596:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000598:	2301      	movs	r3, #1
 800059a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800059c:	2300      	movs	r3, #0
 800059e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005a0:	2360      	movs	r3, #96	@ 0x60
 80005a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005a4:	2300      	movs	r3, #0
 80005a6:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a8:	f107 0314 	add.w	r3, r7, #20
 80005ac:	4618      	mov	r0, r3
 80005ae:	f002 fe8b 	bl	80032c8 <HAL_RCC_OscConfig>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80005b8:	f000 fbdc 	bl	8000d74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005bc:	230f      	movs	r3, #15
 80005be:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80005c0:	2300      	movs	r3, #0
 80005c2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005d0:	463b      	mov	r3, r7
 80005d2:	2100      	movs	r1, #0
 80005d4:	4618      	mov	r0, r3
 80005d6:	f003 fad9 	bl	8003b8c <HAL_RCC_ClockConfig>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005e0:	f000 fbc8 	bl	8000d74 <Error_Handler>
  }
}
 80005e4:	bf00      	nop
 80005e6:	3758      	adds	r7, #88	@ 0x58
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}

080005ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08a      	sub	sp, #40	@ 0x28
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005f2:	f107 031c 	add.w	r3, r7, #28
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]
 800060c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800060e:	4b2f      	ldr	r3, [pc, #188]	@ (80006cc <MX_ADC1_Init+0xe0>)
 8000610:	4a2f      	ldr	r2, [pc, #188]	@ (80006d0 <MX_ADC1_Init+0xe4>)
 8000612:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000614:	4b2d      	ldr	r3, [pc, #180]	@ (80006cc <MX_ADC1_Init+0xe0>)
 8000616:	2200      	movs	r2, #0
 8000618:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800061a:	4b2c      	ldr	r3, [pc, #176]	@ (80006cc <MX_ADC1_Init+0xe0>)
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000620:	4b2a      	ldr	r3, [pc, #168]	@ (80006cc <MX_ADC1_Init+0xe0>)
 8000622:	2200      	movs	r2, #0
 8000624:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000626:	4b29      	ldr	r3, [pc, #164]	@ (80006cc <MX_ADC1_Init+0xe0>)
 8000628:	2200      	movs	r2, #0
 800062a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800062c:	4b27      	ldr	r3, [pc, #156]	@ (80006cc <MX_ADC1_Init+0xe0>)
 800062e:	2204      	movs	r2, #4
 8000630:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000632:	4b26      	ldr	r3, [pc, #152]	@ (80006cc <MX_ADC1_Init+0xe0>)
 8000634:	2200      	movs	r2, #0
 8000636:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000638:	4b24      	ldr	r3, [pc, #144]	@ (80006cc <MX_ADC1_Init+0xe0>)
 800063a:	2200      	movs	r2, #0
 800063c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800063e:	4b23      	ldr	r3, [pc, #140]	@ (80006cc <MX_ADC1_Init+0xe0>)
 8000640:	2201      	movs	r2, #1
 8000642:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000644:	4b21      	ldr	r3, [pc, #132]	@ (80006cc <MX_ADC1_Init+0xe0>)
 8000646:	2200      	movs	r2, #0
 8000648:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800064c:	4b1f      	ldr	r3, [pc, #124]	@ (80006cc <MX_ADC1_Init+0xe0>)
 800064e:	2200      	movs	r2, #0
 8000650:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000652:	4b1e      	ldr	r3, [pc, #120]	@ (80006cc <MX_ADC1_Init+0xe0>)
 8000654:	2200      	movs	r2, #0
 8000656:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000658:	4b1c      	ldr	r3, [pc, #112]	@ (80006cc <MX_ADC1_Init+0xe0>)
 800065a:	2200      	movs	r2, #0
 800065c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000660:	4b1a      	ldr	r3, [pc, #104]	@ (80006cc <MX_ADC1_Init+0xe0>)
 8000662:	2200      	movs	r2, #0
 8000664:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000666:	4b19      	ldr	r3, [pc, #100]	@ (80006cc <MX_ADC1_Init+0xe0>)
 8000668:	2200      	movs	r2, #0
 800066a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800066e:	4817      	ldr	r0, [pc, #92]	@ (80006cc <MX_ADC1_Init+0xe0>)
 8000670:	f001 f85a 	bl	8001728 <HAL_ADC_Init>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800067a:	f000 fb7b 	bl	8000d74 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800067e:	2300      	movs	r3, #0
 8000680:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000682:	f107 031c 	add.w	r3, r7, #28
 8000686:	4619      	mov	r1, r3
 8000688:	4810      	ldr	r0, [pc, #64]	@ (80006cc <MX_ADC1_Init+0xe0>)
 800068a:	f002 f92f 	bl	80028ec <HAL_ADCEx_MultiModeConfigChannel>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000694:	f000 fb6e 	bl	8000d74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000698:	4b0e      	ldr	r3, [pc, #56]	@ (80006d4 <MX_ADC1_Init+0xe8>)
 800069a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800069c:	2306      	movs	r3, #6
 800069e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006a0:	2300      	movs	r3, #0
 80006a2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006a4:	237f      	movs	r3, #127	@ 0x7f
 80006a6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a8:	2304      	movs	r3, #4
 80006aa:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b0:	1d3b      	adds	r3, r7, #4
 80006b2:	4619      	mov	r1, r3
 80006b4:	4805      	ldr	r0, [pc, #20]	@ (80006cc <MX_ADC1_Init+0xe0>)
 80006b6:	f001 fb55 	bl	8001d64 <HAL_ADC_ConfigChannel>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80006c0:	f000 fb58 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006c4:	bf00      	nop
 80006c6:	3728      	adds	r7, #40	@ 0x28
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	20000028 	.word	0x20000028
 80006d0:	50040000 	.word	0x50040000
 80006d4:	19200040 	.word	0x19200040

080006d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006dc:	4b1b      	ldr	r3, [pc, #108]	@ (800074c <MX_I2C1_Init+0x74>)
 80006de:	4a1c      	ldr	r2, [pc, #112]	@ (8000750 <MX_I2C1_Init+0x78>)
 80006e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00100D14;
 80006e2:	4b1a      	ldr	r3, [pc, #104]	@ (800074c <MX_I2C1_Init+0x74>)
 80006e4:	4a1b      	ldr	r2, [pc, #108]	@ (8000754 <MX_I2C1_Init+0x7c>)
 80006e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006e8:	4b18      	ldr	r3, [pc, #96]	@ (800074c <MX_I2C1_Init+0x74>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006ee:	4b17      	ldr	r3, [pc, #92]	@ (800074c <MX_I2C1_Init+0x74>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006f4:	4b15      	ldr	r3, [pc, #84]	@ (800074c <MX_I2C1_Init+0x74>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006fa:	4b14      	ldr	r3, [pc, #80]	@ (800074c <MX_I2C1_Init+0x74>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000700:	4b12      	ldr	r3, [pc, #72]	@ (800074c <MX_I2C1_Init+0x74>)
 8000702:	2200      	movs	r2, #0
 8000704:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000706:	4b11      	ldr	r3, [pc, #68]	@ (800074c <MX_I2C1_Init+0x74>)
 8000708:	2200      	movs	r2, #0
 800070a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800070c:	4b0f      	ldr	r3, [pc, #60]	@ (800074c <MX_I2C1_Init+0x74>)
 800070e:	2200      	movs	r2, #0
 8000710:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000712:	480e      	ldr	r0, [pc, #56]	@ (800074c <MX_I2C1_Init+0x74>)
 8000714:	f002 fc42 	bl	8002f9c <HAL_I2C_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800071e:	f000 fb29 	bl	8000d74 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000722:	2100      	movs	r1, #0
 8000724:	4809      	ldr	r0, [pc, #36]	@ (800074c <MX_I2C1_Init+0x74>)
 8000726:	f002 fcd4 	bl	80030d2 <HAL_I2CEx_ConfigAnalogFilter>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000730:	f000 fb20 	bl	8000d74 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000734:	2100      	movs	r1, #0
 8000736:	4805      	ldr	r0, [pc, #20]	@ (800074c <MX_I2C1_Init+0x74>)
 8000738:	f002 fd16 	bl	8003168 <HAL_I2CEx_ConfigDigitalFilter>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000742:	f000 fb17 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	2000008c 	.word	0x2000008c
 8000750:	40005400 	.word	0x40005400
 8000754:	00100d14 	.word	0x00100d14

08000758 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b088      	sub	sp, #32
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800075e:	f107 030c 	add.w	r3, r7, #12
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
 800076c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800076e:	463b      	mov	r3, r7
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000778:	4b22      	ldr	r3, [pc, #136]	@ (8000804 <MX_TIM1_Init+0xac>)
 800077a:	4a23      	ldr	r2, [pc, #140]	@ (8000808 <MX_TIM1_Init+0xb0>)
 800077c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800077e:	4b21      	ldr	r3, [pc, #132]	@ (8000804 <MX_TIM1_Init+0xac>)
 8000780:	2200      	movs	r2, #0
 8000782:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000784:	4b1f      	ldr	r3, [pc, #124]	@ (8000804 <MX_TIM1_Init+0xac>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800078a:	4b1e      	ldr	r3, [pc, #120]	@ (8000804 <MX_TIM1_Init+0xac>)
 800078c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000790:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000792:	4b1c      	ldr	r3, [pc, #112]	@ (8000804 <MX_TIM1_Init+0xac>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000798:	4b1a      	ldr	r3, [pc, #104]	@ (8000804 <MX_TIM1_Init+0xac>)
 800079a:	2200      	movs	r2, #0
 800079c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800079e:	4b19      	ldr	r3, [pc, #100]	@ (8000804 <MX_TIM1_Init+0xac>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007a4:	4817      	ldr	r0, [pc, #92]	@ (8000804 <MX_TIM1_Init+0xac>)
 80007a6:	f003 fd9b 	bl	80042e0 <HAL_TIM_Base_Init>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 80007b0:	f000 fae0 	bl	8000d74 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80007b4:	2307      	movs	r3, #7
 80007b6:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80007b8:	2350      	movs	r3, #80	@ 0x50
 80007ba:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80007c4:	f107 030c 	add.w	r3, r7, #12
 80007c8:	4619      	mov	r1, r3
 80007ca:	480e      	ldr	r0, [pc, #56]	@ (8000804 <MX_TIM1_Init+0xac>)
 80007cc:	f003 fddf 	bl	800438e <HAL_TIM_SlaveConfigSynchro>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80007d6:	f000 facd 	bl	8000d74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007da:	2300      	movs	r3, #0
 80007dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007e2:	2300      	movs	r3, #0
 80007e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007e6:	463b      	mov	r3, r7
 80007e8:	4619      	mov	r1, r3
 80007ea:	4806      	ldr	r0, [pc, #24]	@ (8000804 <MX_TIM1_Init+0xac>)
 80007ec:	f003 ff94 	bl	8004718 <HAL_TIMEx_MasterConfigSynchronization>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 80007f6:	f000 fabd 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80007fa:	bf00      	nop
 80007fc:	3720      	adds	r7, #32
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	200000e0 	.word	0x200000e0
 8000808:	40012c00 	.word	0x40012c00

0800080c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b088      	sub	sp, #32
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000812:	f107 030c 	add.w	r3, r7, #12
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
 8000820:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000822:	463b      	mov	r3, r7
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800082c:	4b20      	ldr	r3, [pc, #128]	@ (80008b0 <MX_TIM2_Init+0xa4>)
 800082e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000832:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000834:	4b1e      	ldr	r3, [pc, #120]	@ (80008b0 <MX_TIM2_Init+0xa4>)
 8000836:	2200      	movs	r2, #0
 8000838:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800083a:	4b1d      	ldr	r3, [pc, #116]	@ (80008b0 <MX_TIM2_Init+0xa4>)
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000840:	4b1b      	ldr	r3, [pc, #108]	@ (80008b0 <MX_TIM2_Init+0xa4>)
 8000842:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000846:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000848:	4b19      	ldr	r3, [pc, #100]	@ (80008b0 <MX_TIM2_Init+0xa4>)
 800084a:	2200      	movs	r2, #0
 800084c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800084e:	4b18      	ldr	r3, [pc, #96]	@ (80008b0 <MX_TIM2_Init+0xa4>)
 8000850:	2200      	movs	r2, #0
 8000852:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000854:	4816      	ldr	r0, [pc, #88]	@ (80008b0 <MX_TIM2_Init+0xa4>)
 8000856:	f003 fd43 	bl	80042e0 <HAL_TIM_Base_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000860:	f000 fa88 	bl	8000d74 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000864:	2307      	movs	r3, #7
 8000866:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000868:	2350      	movs	r3, #80	@ 0x50
 800086a:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 800086c:	2300      	movs	r3, #0
 800086e:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 8000870:	2300      	movs	r3, #0
 8000872:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000874:	f107 030c 	add.w	r3, r7, #12
 8000878:	4619      	mov	r1, r3
 800087a:	480d      	ldr	r0, [pc, #52]	@ (80008b0 <MX_TIM2_Init+0xa4>)
 800087c:	f003 fd87 	bl	800438e <HAL_TIM_SlaveConfigSynchro>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000886:	f000 fa75 	bl	8000d74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800088a:	2300      	movs	r3, #0
 800088c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800088e:	2300      	movs	r3, #0
 8000890:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000892:	463b      	mov	r3, r7
 8000894:	4619      	mov	r1, r3
 8000896:	4806      	ldr	r0, [pc, #24]	@ (80008b0 <MX_TIM2_Init+0xa4>)
 8000898:	f003 ff3e 	bl	8004718 <HAL_TIMEx_MasterConfigSynchronization>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80008a2:	f000 fa67 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008a6:	bf00      	nop
 80008a8:	3720      	adds	r7, #32
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	2000012c 	.word	0x2000012c

080008b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008b8:	4b14      	ldr	r3, [pc, #80]	@ (800090c <MX_USART1_UART_Init+0x58>)
 80008ba:	4a15      	ldr	r2, [pc, #84]	@ (8000910 <MX_USART1_UART_Init+0x5c>)
 80008bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008be:	4b13      	ldr	r3, [pc, #76]	@ (800090c <MX_USART1_UART_Init+0x58>)
 80008c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008c6:	4b11      	ldr	r3, [pc, #68]	@ (800090c <MX_USART1_UART_Init+0x58>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008cc:	4b0f      	ldr	r3, [pc, #60]	@ (800090c <MX_USART1_UART_Init+0x58>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008d2:	4b0e      	ldr	r3, [pc, #56]	@ (800090c <MX_USART1_UART_Init+0x58>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008d8:	4b0c      	ldr	r3, [pc, #48]	@ (800090c <MX_USART1_UART_Init+0x58>)
 80008da:	220c      	movs	r2, #12
 80008dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008de:	4b0b      	ldr	r3, [pc, #44]	@ (800090c <MX_USART1_UART_Init+0x58>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e4:	4b09      	ldr	r3, [pc, #36]	@ (800090c <MX_USART1_UART_Init+0x58>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ea:	4b08      	ldr	r3, [pc, #32]	@ (800090c <MX_USART1_UART_Init+0x58>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008f0:	4b06      	ldr	r3, [pc, #24]	@ (800090c <MX_USART1_UART_Init+0x58>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008f6:	4805      	ldr	r0, [pc, #20]	@ (800090c <MX_USART1_UART_Init+0x58>)
 80008f8:	f003 ff74 	bl	80047e4 <HAL_UART_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000902:	f000 fa37 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	20000178 	.word	0x20000178
 8000910:	40013800 	.word	0x40013800

08000914 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b088      	sub	sp, #32
 8000918:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091a:	f107 030c 	add.w	r3, r7, #12
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
 8000926:	60da      	str	r2, [r3, #12]
 8000928:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092a:	4b23      	ldr	r3, [pc, #140]	@ (80009b8 <MX_GPIO_Init+0xa4>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800092e:	4a22      	ldr	r2, [pc, #136]	@ (80009b8 <MX_GPIO_Init+0xa4>)
 8000930:	f043 0301 	orr.w	r3, r3, #1
 8000934:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000936:	4b20      	ldr	r3, [pc, #128]	@ (80009b8 <MX_GPIO_Init+0xa4>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000942:	4b1d      	ldr	r3, [pc, #116]	@ (80009b8 <MX_GPIO_Init+0xa4>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000946:	4a1c      	ldr	r2, [pc, #112]	@ (80009b8 <MX_GPIO_Init+0xa4>)
 8000948:	f043 0302 	orr.w	r3, r3, #2
 800094c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800094e:	4b1a      	ldr	r3, [pc, #104]	@ (80009b8 <MX_GPIO_Init+0xa4>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000952:	f003 0302 	and.w	r3, r3, #2
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800095a:	2200      	movs	r2, #0
 800095c:	21fc      	movs	r1, #252	@ 0xfc
 800095e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000962:	f002 faeb 	bl	8002f3c <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000966:	2301      	movs	r3, #1
 8000968:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800096a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800096e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000974:	f107 030c 	add.w	r3, r7, #12
 8000978:	4619      	mov	r1, r3
 800097a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800097e:	f002 f96b 	bl	8002c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 PA5
                           PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000982:	23fc      	movs	r3, #252	@ 0xfc
 8000984:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000986:	2301      	movs	r3, #1
 8000988:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	2300      	movs	r3, #0
 8000990:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000992:	f107 030c 	add.w	r3, r7, #12
 8000996:	4619      	mov	r1, r3
 8000998:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800099c:	f002 f95c 	bl	8002c58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80009a0:	2200      	movs	r2, #0
 80009a2:	2100      	movs	r1, #0
 80009a4:	2006      	movs	r0, #6
 80009a6:	f002 f920 	bl	8002bea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80009aa:	2006      	movs	r0, #6
 80009ac:	f002 f939 	bl	8002c22 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009b0:	bf00      	nop
 80009b2:	3720      	adds	r7, #32
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40021000 	.word	0x40021000

080009bc <lcd_enable>:

/* USER CODE BEGIN 4 */
// Função para gerar o pulso de habilitação
void lcd_enable() {
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, LCD_E_PIN, GPIO_PIN_SET);
 80009c0:	2201      	movs	r2, #1
 80009c2:	2104      	movs	r1, #4
 80009c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009c8:	f002 fab8 	bl	8002f3c <HAL_GPIO_WritePin>
    HAL_Delay(2);  // Delay ajustado
 80009cc:	2002      	movs	r0, #2
 80009ce:	f000 fc43 	bl	8001258 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA, LCD_E_PIN, GPIO_PIN_RESET);
 80009d2:	2200      	movs	r2, #0
 80009d4:	2104      	movs	r1, #4
 80009d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009da:	f002 faaf 	bl	8002f3c <HAL_GPIO_WritePin>
    HAL_Delay(2);  // Delay ajustado
 80009de:	2002      	movs	r0, #2
 80009e0:	f000 fc3a 	bl	8001258 <HAL_Delay>
}
 80009e4:	bf00      	nop
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <lcd_send>:

// Função interna para enviar um byte (comando ou dado)
void lcd_send(uint8_t data) {
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	71fb      	strb	r3, [r7, #7]
    // Enviar nibble alto
    HAL_GPIO_WritePin(GPIOA, LCD_D7_PIN, (data >> 4) & 0x01);
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	091b      	lsrs	r3, r3, #4
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	f003 0301 	and.w	r3, r3, #1
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	461a      	mov	r2, r3
 8000a00:	2108      	movs	r1, #8
 8000a02:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a06:	f002 fa99 	bl	8002f3c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, LCD_D6_PIN, (data >> 5) & 0x01);
 8000a0a:	79fb      	ldrb	r3, [r7, #7]
 8000a0c:	095b      	lsrs	r3, r3, #5
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	f003 0301 	and.w	r3, r3, #1
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	461a      	mov	r2, r3
 8000a18:	2110      	movs	r1, #16
 8000a1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a1e:	f002 fa8d 	bl	8002f3c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, LCD_D5_PIN, (data >> 6) & 0x01);
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	099b      	lsrs	r3, r3, #6
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	f003 0301 	and.w	r3, r3, #1
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	461a      	mov	r2, r3
 8000a30:	2120      	movs	r1, #32
 8000a32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a36:	f002 fa81 	bl	8002f3c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, LCD_D4_PIN, (data >> 7) & 0x01);
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	09db      	lsrs	r3, r3, #7
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	461a      	mov	r2, r3
 8000a42:	2140      	movs	r1, #64	@ 0x40
 8000a44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a48:	f002 fa78 	bl	8002f3c <HAL_GPIO_WritePin>
    lcd_enable();
 8000a4c:	f7ff ffb6 	bl	80009bc <lcd_enable>

    // Enviar nibble baixo
    HAL_GPIO_WritePin(GPIOA, LCD_D7_PIN, (data >> 0) & 0x01);
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	461a      	mov	r2, r3
 8000a5a:	2108      	movs	r1, #8
 8000a5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a60:	f002 fa6c 	bl	8002f3c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, LCD_D6_PIN, (data >> 1) & 0x01);
 8000a64:	79fb      	ldrb	r3, [r7, #7]
 8000a66:	085b      	lsrs	r3, r3, #1
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	461a      	mov	r2, r3
 8000a72:	2110      	movs	r1, #16
 8000a74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a78:	f002 fa60 	bl	8002f3c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, LCD_D5_PIN, (data >> 2) & 0x01);
 8000a7c:	79fb      	ldrb	r3, [r7, #7]
 8000a7e:	089b      	lsrs	r3, r3, #2
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	461a      	mov	r2, r3
 8000a8a:	2120      	movs	r1, #32
 8000a8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a90:	f002 fa54 	bl	8002f3c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, LCD_D4_PIN, (data >> 3) & 0x01);
 8000a94:	79fb      	ldrb	r3, [r7, #7]
 8000a96:	08db      	lsrs	r3, r3, #3
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	2140      	movs	r1, #64	@ 0x40
 8000aa4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aa8:	f002 fa48 	bl	8002f3c <HAL_GPIO_WritePin>
    lcd_enable();
 8000aac:	f7ff ff86 	bl	80009bc <lcd_enable>
}
 8000ab0:	bf00      	nop
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <lcd_send_command>:

void lcd_send_command(uint8_t cmd) {
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(GPIOA, LCD_RS_PIN, GPIO_PIN_RESET);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2180      	movs	r1, #128	@ 0x80
 8000ac6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aca:	f002 fa37 	bl	8002f3c <HAL_GPIO_WritePin>
    lcd_send(cmd);
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff ff89 	bl	80009e8 <lcd_send>
    HAL_Delay(2);  // Delay adicional
 8000ad6:	2002      	movs	r0, #2
 8000ad8:	f000 fbbe 	bl	8001258 <HAL_Delay>
}
 8000adc:	bf00      	nop
 8000ade:	3708      	adds	r7, #8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <lcd_send_data>:

void lcd_send_data(uint8_t data) {
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(GPIOA, LCD_RS_PIN, GPIO_PIN_SET);
 8000aee:	2201      	movs	r2, #1
 8000af0:	2180      	movs	r1, #128	@ 0x80
 8000af2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000af6:	f002 fa21 	bl	8002f3c <HAL_GPIO_WritePin>
    lcd_send(data);
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff ff73 	bl	80009e8 <lcd_send>
    HAL_Delay(2);  // Delay adicional
 8000b02:	2002      	movs	r0, #2
 8000b04:	f000 fba8 	bl	8001258 <HAL_Delay>
}
 8000b08:	bf00      	nop
 8000b0a:	3708      	adds	r7, #8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <lcd_init>:

// Inicialização do LCD
void lcd_init() {
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
    HAL_Delay(50);  // Esperar mais tempo após o boot
 8000b14:	2032      	movs	r0, #50	@ 0x32
 8000b16:	f000 fb9f 	bl	8001258 <HAL_Delay>

    lcd_send_command(0x03);
 8000b1a:	2003      	movs	r0, #3
 8000b1c:	f7ff ffcc 	bl	8000ab8 <lcd_send_command>
    HAL_Delay(5);
 8000b20:	2005      	movs	r0, #5
 8000b22:	f000 fb99 	bl	8001258 <HAL_Delay>
    lcd_send_command(0x03);
 8000b26:	2003      	movs	r0, #3
 8000b28:	f7ff ffc6 	bl	8000ab8 <lcd_send_command>
    HAL_Delay(5);
 8000b2c:	2005      	movs	r0, #5
 8000b2e:	f000 fb93 	bl	8001258 <HAL_Delay>
    lcd_send_command(0x03);
 8000b32:	2003      	movs	r0, #3
 8000b34:	f7ff ffc0 	bl	8000ab8 <lcd_send_command>
    HAL_Delay(5);
 8000b38:	2005      	movs	r0, #5
 8000b3a:	f000 fb8d 	bl	8001258 <HAL_Delay>
    lcd_send_command(0x02);  // Modo 4 bits
 8000b3e:	2002      	movs	r0, #2
 8000b40:	f7ff ffba 	bl	8000ab8 <lcd_send_command>
    HAL_Delay(5);
 8000b44:	2005      	movs	r0, #5
 8000b46:	f000 fb87 	bl	8001258 <HAL_Delay>

    lcd_send_command(LCD_FUNCTION_SET | 0x08);
 8000b4a:	2028      	movs	r0, #40	@ 0x28
 8000b4c:	f7ff ffb4 	bl	8000ab8 <lcd_send_command>
    lcd_send_command(LCD_DISPLAY_CONTROL | LCD_DISPLAY_ON | LCD_CURSOR_OFF | LCD_BLINK_OFF);
 8000b50:	200c      	movs	r0, #12
 8000b52:	f7ff ffb1 	bl	8000ab8 <lcd_send_command>
    lcd_send_command(LCD_CLEAR_DISPLAY);
 8000b56:	2001      	movs	r0, #1
 8000b58:	f7ff ffae 	bl	8000ab8 <lcd_send_command>
    HAL_Delay(2);
 8000b5c:	2002      	movs	r0, #2
 8000b5e:	f000 fb7b 	bl	8001258 <HAL_Delay>
    lcd_send_command(LCD_ENTRY_MODE_SET | LCD_ENTRY_LEFT);
 8000b62:	2006      	movs	r0, #6
 8000b64:	f7ff ffa8 	bl	8000ab8 <lcd_send_command>
}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <lcd_clear>:

// Limpa o display
void lcd_clear(void) {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
    lcd_send_command(LCD_CLEAR_DISPLAY);
 8000b70:	2001      	movs	r0, #1
 8000b72:	f7ff ffa1 	bl	8000ab8 <lcd_send_command>
    HAL_Delay(2);
 8000b76:	2002      	movs	r0, #2
 8000b78:	f000 fb6e 	bl	8001258 <HAL_Delay>
}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <lcd_set_cursor>:

// Define a posição do cursor
void lcd_set_cursor(uint8_t row, uint8_t col) {
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	460a      	mov	r2, r1
 8000b8a:	71fb      	strb	r3, [r7, #7]
 8000b8c:	4613      	mov	r3, r2
 8000b8e:	71bb      	strb	r3, [r7, #6]
    uint8_t address = (row == 0) ? 0x00 : 0x40;
 8000b90:	79fb      	ldrb	r3, [r7, #7]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d101      	bne.n	8000b9a <lcd_set_cursor+0x1a>
 8000b96:	2300      	movs	r3, #0
 8000b98:	e000      	b.n	8000b9c <lcd_set_cursor+0x1c>
 8000b9a:	2340      	movs	r3, #64	@ 0x40
 8000b9c:	73fb      	strb	r3, [r7, #15]
    address += col;
 8000b9e:	7bfa      	ldrb	r2, [r7, #15]
 8000ba0:	79bb      	ldrb	r3, [r7, #6]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	73fb      	strb	r3, [r7, #15]
    lcd_send_command(LCD_SET_DDRAM_ADDR | address);
 8000ba6:	7bfb      	ldrb	r3, [r7, #15]
 8000ba8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f7ff ff82 	bl	8000ab8 <lcd_send_command>
}
 8000bb4:	bf00      	nop
 8000bb6:	3710      	adds	r7, #16
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <lcd_print>:

// Escreve uma string no LCD
void lcd_print(char *str) {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
    while (*str) {
 8000bc4:	e006      	b.n	8000bd4 <lcd_print+0x18>
        lcd_send_data(*str++);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	1c5a      	adds	r2, r3, #1
 8000bca:	607a      	str	r2, [r7, #4]
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff ff88 	bl	8000ae4 <lcd_send_data>
    while (*str) {
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d1f4      	bne.n	8000bc6 <lcd_print+0xa>
    }
}
 8000bdc:	bf00      	nop
 8000bde:	bf00      	nop
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
	...

08000be8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_0) {  // Interrupção no PA0 (botão pressionado)
 8000bf2:	88fb      	ldrh	r3, [r7, #6]
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d16b      	bne.n	8000cd0 <HAL_GPIO_EXTI_Callback+0xe8>
        buttonPressed = 1;          // Sinaliza que um botão foi pressionado
 8000bf8:	4b37      	ldr	r3, [pc, #220]	@ (8000cd8 <HAL_GPIO_EXTI_Callback+0xf0>)
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	701a      	strb	r2, [r3, #0]

        // Chama a função para interpretar a entrada do ADC (PA1)
        ButtonState button = readButton();
 8000bfe:	f000 f879 	bl	8000cf4 <readButton>
 8000c02:	4603      	mov	r3, r0
 8000c04:	73fb      	strb	r3, [r7, #15]

        // Faça o que precisar com o botão detectado
        switch (button) {
 8000c06:	7bfb      	ldrb	r3, [r7, #15]
 8000c08:	3b01      	subs	r3, #1
 8000c0a:	2b04      	cmp	r3, #4
 8000c0c:	d852      	bhi.n	8000cb4 <HAL_GPIO_EXTI_Callback+0xcc>
 8000c0e:	a201      	add	r2, pc, #4	@ (adr r2, 8000c14 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c14:	08000c29 	.word	0x08000c29
 8000c18:	08000c45 	.word	0x08000c45
 8000c1c:	08000c61 	.word	0x08000c61
 8000c20:	08000c7d 	.word	0x08000c7d
 8000c24:	08000c99 	.word	0x08000c99
            case BUTTON_RIGHT:
            	  lcd_set_cursor(0, 0);
 8000c28:	2100      	movs	r1, #0
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	f7ff ffa8 	bl	8000b80 <lcd_set_cursor>
            	  lcd_print("dir");
 8000c30:	482a      	ldr	r0, [pc, #168]	@ (8000cdc <HAL_GPIO_EXTI_Callback+0xf4>)
 8000c32:	f7ff ffc3 	bl	8000bbc <lcd_print>
            	  HAL_Delay(2000);
 8000c36:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000c3a:	f000 fb0d 	bl	8001258 <HAL_Delay>
            	  lcd_clear();
 8000c3e:	f7ff ff95 	bl	8000b6c <lcd_clear>
            	break;
 8000c42:	e045      	b.n	8000cd0 <HAL_GPIO_EXTI_Callback+0xe8>
            case BUTTON_UP:
          	  lcd_set_cursor(0, 0);
 8000c44:	2100      	movs	r1, #0
 8000c46:	2000      	movs	r0, #0
 8000c48:	f7ff ff9a 	bl	8000b80 <lcd_set_cursor>
          	  lcd_print("up");
 8000c4c:	4824      	ldr	r0, [pc, #144]	@ (8000ce0 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000c4e:	f7ff ffb5 	bl	8000bbc <lcd_print>
          	  HAL_Delay(2000);
 8000c52:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000c56:	f000 faff 	bl	8001258 <HAL_Delay>
          	  lcd_clear();
 8000c5a:	f7ff ff87 	bl	8000b6c <lcd_clear>
          	break;
 8000c5e:	e037      	b.n	8000cd0 <HAL_GPIO_EXTI_Callback+0xe8>
            case BUTTON_DOWN:
          	  lcd_set_cursor(0, 0);
 8000c60:	2100      	movs	r1, #0
 8000c62:	2000      	movs	r0, #0
 8000c64:	f7ff ff8c 	bl	8000b80 <lcd_set_cursor>
          	  lcd_print("down");
 8000c68:	481e      	ldr	r0, [pc, #120]	@ (8000ce4 <HAL_GPIO_EXTI_Callback+0xfc>)
 8000c6a:	f7ff ffa7 	bl	8000bbc <lcd_print>
          	  HAL_Delay(2000);
 8000c6e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000c72:	f000 faf1 	bl	8001258 <HAL_Delay>
          	  lcd_clear();
 8000c76:	f7ff ff79 	bl	8000b6c <lcd_clear>
          	break;
 8000c7a:	e029      	b.n	8000cd0 <HAL_GPIO_EXTI_Callback+0xe8>
            case BUTTON_LEFT:
          	  lcd_set_cursor(0, 0);
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	2000      	movs	r0, #0
 8000c80:	f7ff ff7e 	bl	8000b80 <lcd_set_cursor>
          	  lcd_print("esq");
 8000c84:	4818      	ldr	r0, [pc, #96]	@ (8000ce8 <HAL_GPIO_EXTI_Callback+0x100>)
 8000c86:	f7ff ff99 	bl	8000bbc <lcd_print>
          	  HAL_Delay(2000);
 8000c8a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000c8e:	f000 fae3 	bl	8001258 <HAL_Delay>
          	  lcd_clear();
 8000c92:	f7ff ff6b 	bl	8000b6c <lcd_clear>
          	break;
 8000c96:	e01b      	b.n	8000cd0 <HAL_GPIO_EXTI_Callback+0xe8>
            case BUTTON_SELECT:
          	  lcd_set_cursor(0, 0);
 8000c98:	2100      	movs	r1, #0
 8000c9a:	2000      	movs	r0, #0
 8000c9c:	f7ff ff70 	bl	8000b80 <lcd_set_cursor>
          	  lcd_print("sel");
 8000ca0:	4812      	ldr	r0, [pc, #72]	@ (8000cec <HAL_GPIO_EXTI_Callback+0x104>)
 8000ca2:	f7ff ff8b 	bl	8000bbc <lcd_print>
          	  HAL_Delay(2000);
 8000ca6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000caa:	f000 fad5 	bl	8001258 <HAL_Delay>
          	  lcd_clear();
 8000cae:	f7ff ff5d 	bl	8000b6c <lcd_clear>
          	break;
 8000cb2:	e00d      	b.n	8000cd0 <HAL_GPIO_EXTI_Callback+0xe8>
            default:
            	lcd_set_cursor(0, 0);
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	f7ff ff62 	bl	8000b80 <lcd_set_cursor>
            	          	  lcd_print("bah nao deu");
 8000cbc:	480c      	ldr	r0, [pc, #48]	@ (8000cf0 <HAL_GPIO_EXTI_Callback+0x108>)
 8000cbe:	f7ff ff7d 	bl	8000bbc <lcd_print>
            	          	  HAL_Delay(2000);
 8000cc2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000cc6:	f000 fac7 	bl	8001258 <HAL_Delay>
            	          	  lcd_clear();
 8000cca:	f7ff ff4f 	bl	8000b6c <lcd_clear>
            	          	break;
 8000cce:	bf00      	nop
        }
    }
}
 8000cd0:	bf00      	nop
 8000cd2:	3710      	adds	r7, #16
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	20000200 	.word	0x20000200
 8000cdc:	080051f8 	.word	0x080051f8
 8000ce0:	080051fc 	.word	0x080051fc
 8000ce4:	08005200 	.word	0x08005200
 8000ce8:	08005208 	.word	0x08005208
 8000cec:	0800520c 	.word	0x0800520c
 8000cf0:	08005210 	.word	0x08005210

08000cf4 <readButton>:

ButtonState readButton(void) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
    uint32_t adcValue = 0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	607b      	str	r3, [r7, #4]
    HAL_ADC_Start(&hadc1);
 8000cfe:	481c      	ldr	r0, [pc, #112]	@ (8000d70 <readButton+0x7c>)
 8000d00:	f000 fe5c 	bl	80019bc <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 8000d04:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000d08:	4819      	ldr	r0, [pc, #100]	@ (8000d70 <readButton+0x7c>)
 8000d0a:	f000 ff45 	bl	8001b98 <HAL_ADC_PollForConversion>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d103      	bne.n	8000d1c <readButton+0x28>
        adcValue = HAL_ADC_GetValue(&hadc1);
 8000d14:	4816      	ldr	r0, [pc, #88]	@ (8000d70 <readButton+0x7c>)
 8000d16:	f001 f817 	bl	8001d48 <HAL_ADC_GetValue>
 8000d1a:	6078      	str	r0, [r7, #4]
    }
    HAL_ADC_Stop(&hadc1);
 8000d1c:	4814      	ldr	r0, [pc, #80]	@ (8000d70 <readButton+0x7c>)
 8000d1e:	f000 ff07 	bl	8001b30 <HAL_ADC_Stop>

    if (adcValue < RIGHT_THRESHOLD) {
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2b31      	cmp	r3, #49	@ 0x31
 8000d26:	d801      	bhi.n	8000d2c <readButton+0x38>
        return BUTTON_RIGHT;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	e01c      	b.n	8000d66 <readButton+0x72>
    } else if (adcValue < UP_THRESHOLD) {
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f240 427d 	movw	r2, #1149	@ 0x47d
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d801      	bhi.n	8000d3a <readButton+0x46>
        return BUTTON_UP;
 8000d36:	2302      	movs	r3, #2
 8000d38:	e015      	b.n	8000d66 <readButton+0x72>
    } else if (adcValue < DOWN_THRESHOLD) {
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	f240 726b 	movw	r2, #1899	@ 0x76b
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d801      	bhi.n	8000d48 <readButton+0x54>
        return BUTTON_DOWN;
 8000d44:	2303      	movs	r3, #3
 8000d46:	e00e      	b.n	8000d66 <readButton+0x72>
    } else if (adcValue < LEFT_THRESHOLD) {
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	f640 2259 	movw	r2, #2649	@ 0xa59
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d801      	bhi.n	8000d56 <readButton+0x62>
        return BUTTON_LEFT;
 8000d52:	2304      	movs	r3, #4
 8000d54:	e007      	b.n	8000d66 <readButton+0x72>
    } else if (adcValue < SELECT_THRESHOLD) {
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	f640 62a5 	movw	r2, #3749	@ 0xea5
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d801      	bhi.n	8000d64 <readButton+0x70>
        return BUTTON_SELECT;
 8000d60:	2305      	movs	r3, #5
 8000d62:	e000      	b.n	8000d66 <readButton+0x72>
    } else {
        return BUTTON_NONE;
 8000d64:	2300      	movs	r3, #0
    }
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000028 	.word	0x20000028

08000d74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d78:	b672      	cpsid	i
}
 8000d7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d7c:	bf00      	nop
 8000d7e:	e7fd      	b.n	8000d7c <Error_Handler+0x8>

08000d80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d86:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc4 <HAL_MspInit+0x44>)
 8000d88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d8a:	4a0e      	ldr	r2, [pc, #56]	@ (8000dc4 <HAL_MspInit+0x44>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d92:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc4 <HAL_MspInit+0x44>)
 8000d94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	607b      	str	r3, [r7, #4]
 8000d9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d9e:	4b09      	ldr	r3, [pc, #36]	@ (8000dc4 <HAL_MspInit+0x44>)
 8000da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000da2:	4a08      	ldr	r2, [pc, #32]	@ (8000dc4 <HAL_MspInit+0x44>)
 8000da4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000da8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000daa:	4b06      	ldr	r3, [pc, #24]	@ (8000dc4 <HAL_MspInit+0x44>)
 8000dac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000db2:	603b      	str	r3, [r7, #0]
 8000db4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	40021000 	.word	0x40021000

08000dc8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b08a      	sub	sp, #40	@ 0x28
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a15      	ldr	r2, [pc, #84]	@ (8000e3c <HAL_ADC_MspInit+0x74>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d124      	bne.n	8000e34 <HAL_ADC_MspInit+0x6c>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000dea:	4b15      	ldr	r3, [pc, #84]	@ (8000e40 <HAL_ADC_MspInit+0x78>)
 8000dec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dee:	4a14      	ldr	r2, [pc, #80]	@ (8000e40 <HAL_ADC_MspInit+0x78>)
 8000df0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000df4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000df6:	4b12      	ldr	r3, [pc, #72]	@ (8000e40 <HAL_ADC_MspInit+0x78>)
 8000df8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dfa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000dfe:	613b      	str	r3, [r7, #16]
 8000e00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e02:	4b0f      	ldr	r3, [pc, #60]	@ (8000e40 <HAL_ADC_MspInit+0x78>)
 8000e04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e06:	4a0e      	ldr	r2, [pc, #56]	@ (8000e40 <HAL_ADC_MspInit+0x78>)
 8000e08:	f043 0301 	orr.w	r3, r3, #1
 8000e0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e40 <HAL_ADC_MspInit+0x78>)
 8000e10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e1e:	230b      	movs	r3, #11
 8000e20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e26:	f107 0314 	add.w	r3, r7, #20
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e30:	f001 ff12 	bl	8002c58 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000e34:	bf00      	nop
 8000e36:	3728      	adds	r7, #40	@ 0x28
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	50040000 	.word	0x50040000
 8000e40:	40021000 	.word	0x40021000

08000e44 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b096      	sub	sp, #88	@ 0x58
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e5c:	f107 0310 	add.w	r3, r7, #16
 8000e60:	2234      	movs	r2, #52	@ 0x34
 8000e62:	2100      	movs	r1, #0
 8000e64:	4618      	mov	r0, r3
 8000e66:	f004 f980 	bl	800516a <memset>
  if(hi2c->Instance==I2C1)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a1e      	ldr	r2, [pc, #120]	@ (8000ee8 <HAL_I2C_MspInit+0xa4>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d135      	bne.n	8000ee0 <HAL_I2C_MspInit+0x9c>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e74:	2340      	movs	r3, #64	@ 0x40
 8000e76:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e7c:	f107 0310 	add.w	r3, r7, #16
 8000e80:	4618      	mov	r0, r3
 8000e82:	f003 f8a7 	bl	8003fd4 <HAL_RCCEx_PeriphCLKConfig>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000e8c:	f7ff ff72 	bl	8000d74 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e90:	4b16      	ldr	r3, [pc, #88]	@ (8000eec <HAL_I2C_MspInit+0xa8>)
 8000e92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e94:	4a15      	ldr	r2, [pc, #84]	@ (8000eec <HAL_I2C_MspInit+0xa8>)
 8000e96:	f043 0302 	orr.w	r3, r3, #2
 8000e9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e9c:	4b13      	ldr	r3, [pc, #76]	@ (8000eec <HAL_I2C_MspInit+0xa8>)
 8000e9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ea0:	f003 0302 	and.w	r3, r3, #2
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ea8:	23c0      	movs	r3, #192	@ 0xc0
 8000eaa:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eac:	2312      	movs	r3, #18
 8000eae:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000eb8:	2304      	movs	r3, #4
 8000eba:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ebc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	480b      	ldr	r0, [pc, #44]	@ (8000ef0 <HAL_I2C_MspInit+0xac>)
 8000ec4:	f001 fec8 	bl	8002c58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ec8:	4b08      	ldr	r3, [pc, #32]	@ (8000eec <HAL_I2C_MspInit+0xa8>)
 8000eca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ecc:	4a07      	ldr	r2, [pc, #28]	@ (8000eec <HAL_I2C_MspInit+0xa8>)
 8000ece:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ed2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ed4:	4b05      	ldr	r3, [pc, #20]	@ (8000eec <HAL_I2C_MspInit+0xa8>)
 8000ed6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ed8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000edc:	60bb      	str	r3, [r7, #8]
 8000ede:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000ee0:	bf00      	nop
 8000ee2:	3758      	adds	r7, #88	@ 0x58
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	40005400 	.word	0x40005400
 8000eec:	40021000 	.word	0x40021000
 8000ef0:	48000400 	.word	0x48000400

08000ef4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08c      	sub	sp, #48	@ 0x30
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efc:	f107 031c 	add.w	r3, r7, #28
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a30      	ldr	r2, [pc, #192]	@ (8000fd4 <HAL_TIM_Base_MspInit+0xe0>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d12a      	bne.n	8000f6c <HAL_TIM_Base_MspInit+0x78>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f16:	4b30      	ldr	r3, [pc, #192]	@ (8000fd8 <HAL_TIM_Base_MspInit+0xe4>)
 8000f18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f1a:	4a2f      	ldr	r2, [pc, #188]	@ (8000fd8 <HAL_TIM_Base_MspInit+0xe4>)
 8000f1c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000f20:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f22:	4b2d      	ldr	r3, [pc, #180]	@ (8000fd8 <HAL_TIM_Base_MspInit+0xe4>)
 8000f24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f26:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000f2a:	61bb      	str	r3, [r7, #24]
 8000f2c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2e:	4b2a      	ldr	r3, [pc, #168]	@ (8000fd8 <HAL_TIM_Base_MspInit+0xe4>)
 8000f30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f32:	4a29      	ldr	r2, [pc, #164]	@ (8000fd8 <HAL_TIM_Base_MspInit+0xe4>)
 8000f34:	f043 0301 	orr.w	r3, r3, #1
 8000f38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f3a:	4b27      	ldr	r3, [pc, #156]	@ (8000fd8 <HAL_TIM_Base_MspInit+0xe4>)
 8000f3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	617b      	str	r3, [r7, #20]
 8000f44:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f46:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f54:	2300      	movs	r3, #0
 8000f56:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5c:	f107 031c 	add.w	r3, r7, #28
 8000f60:	4619      	mov	r1, r3
 8000f62:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f66:	f001 fe77 	bl	8002c58 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f6a:	e02e      	b.n	8000fca <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM2)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f74:	d129      	bne.n	8000fca <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f76:	4b18      	ldr	r3, [pc, #96]	@ (8000fd8 <HAL_TIM_Base_MspInit+0xe4>)
 8000f78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f7a:	4a17      	ldr	r2, [pc, #92]	@ (8000fd8 <HAL_TIM_Base_MspInit+0xe4>)
 8000f7c:	f043 0301 	orr.w	r3, r3, #1
 8000f80:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f82:	4b15      	ldr	r3, [pc, #84]	@ (8000fd8 <HAL_TIM_Base_MspInit+0xe4>)
 8000f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	613b      	str	r3, [r7, #16]
 8000f8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8e:	4b12      	ldr	r3, [pc, #72]	@ (8000fd8 <HAL_TIM_Base_MspInit+0xe4>)
 8000f90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f92:	4a11      	ldr	r2, [pc, #68]	@ (8000fd8 <HAL_TIM_Base_MspInit+0xe4>)
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd8 <HAL_TIM_Base_MspInit+0xe4>)
 8000f9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000fa6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000faa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fac:	2302      	movs	r3, #2
 8000fae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbc:	f107 031c 	add.w	r3, r7, #28
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fc6:	f001 fe47 	bl	8002c58 <HAL_GPIO_Init>
}
 8000fca:	bf00      	nop
 8000fcc:	3730      	adds	r7, #48	@ 0x30
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40012c00 	.word	0x40012c00
 8000fd8:	40021000 	.word	0x40021000

08000fdc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b096      	sub	sp, #88	@ 0x58
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ff4:	f107 0310 	add.w	r3, r7, #16
 8000ff8:	2234      	movs	r2, #52	@ 0x34
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f004 f8b4 	bl	800516a <memset>
  if(huart->Instance==USART1)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a1f      	ldr	r2, [pc, #124]	@ (8001084 <HAL_UART_MspInit+0xa8>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d137      	bne.n	800107c <HAL_UART_MspInit+0xa0>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800100c:	2301      	movs	r3, #1
 800100e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001014:	f107 0310 	add.w	r3, r7, #16
 8001018:	4618      	mov	r0, r3
 800101a:	f002 ffdb 	bl	8003fd4 <HAL_RCCEx_PeriphCLKConfig>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001024:	f7ff fea6 	bl	8000d74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001028:	4b17      	ldr	r3, [pc, #92]	@ (8001088 <HAL_UART_MspInit+0xac>)
 800102a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800102c:	4a16      	ldr	r2, [pc, #88]	@ (8001088 <HAL_UART_MspInit+0xac>)
 800102e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001032:	6613      	str	r3, [r2, #96]	@ 0x60
 8001034:	4b14      	ldr	r3, [pc, #80]	@ (8001088 <HAL_UART_MspInit+0xac>)
 8001036:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001038:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001040:	4b11      	ldr	r3, [pc, #68]	@ (8001088 <HAL_UART_MspInit+0xac>)
 8001042:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001044:	4a10      	ldr	r2, [pc, #64]	@ (8001088 <HAL_UART_MspInit+0xac>)
 8001046:	f043 0301 	orr.w	r3, r3, #1
 800104a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800104c:	4b0e      	ldr	r3, [pc, #56]	@ (8001088 <HAL_UART_MspInit+0xac>)
 800104e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001050:	f003 0301 	and.w	r3, r3, #1
 8001054:	60bb      	str	r3, [r7, #8]
 8001056:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001058:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800105c:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105e:	2302      	movs	r3, #2
 8001060:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001066:	2303      	movs	r3, #3
 8001068:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800106a:	2307      	movs	r3, #7
 800106c:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001072:	4619      	mov	r1, r3
 8001074:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001078:	f001 fdee 	bl	8002c58 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 800107c:	bf00      	nop
 800107e:	3758      	adds	r7, #88	@ 0x58
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40013800 	.word	0x40013800
 8001088:	40021000 	.word	0x40021000

0800108c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001090:	bf00      	nop
 8001092:	e7fd      	b.n	8001090 <NMI_Handler+0x4>

08001094 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001098:	bf00      	nop
 800109a:	e7fd      	b.n	8001098 <HardFault_Handler+0x4>

0800109c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010a0:	bf00      	nop
 80010a2:	e7fd      	b.n	80010a0 <MemManage_Handler+0x4>

080010a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010a8:	bf00      	nop
 80010aa:	e7fd      	b.n	80010a8 <BusFault_Handler+0x4>

080010ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b0:	bf00      	nop
 80010b2:	e7fd      	b.n	80010b0 <UsageFault_Handler+0x4>

080010b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010c2:	b480      	push	{r7}
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010e2:	f000 f899 	bl	8001218 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}

080010ea <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80010ee:	2001      	movs	r0, #1
 80010f0:	f001 ff3c 	bl	8002f6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010fc:	4b06      	ldr	r3, [pc, #24]	@ (8001118 <SystemInit+0x20>)
 80010fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001102:	4a05      	ldr	r2, [pc, #20]	@ (8001118 <SystemInit+0x20>)
 8001104:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001108:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800111c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001154 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001120:	f7ff ffea 	bl	80010f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001124:	480c      	ldr	r0, [pc, #48]	@ (8001158 <LoopForever+0x6>)
  ldr r1, =_edata
 8001126:	490d      	ldr	r1, [pc, #52]	@ (800115c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001128:	4a0d      	ldr	r2, [pc, #52]	@ (8001160 <LoopForever+0xe>)
  movs r3, #0
 800112a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800112c:	e002      	b.n	8001134 <LoopCopyDataInit>

0800112e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800112e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001130:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001132:	3304      	adds	r3, #4

08001134 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001134:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001136:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001138:	d3f9      	bcc.n	800112e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800113a:	4a0a      	ldr	r2, [pc, #40]	@ (8001164 <LoopForever+0x12>)
  ldr r4, =_ebss
 800113c:	4c0a      	ldr	r4, [pc, #40]	@ (8001168 <LoopForever+0x16>)
  movs r3, #0
 800113e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001140:	e001      	b.n	8001146 <LoopFillZerobss>

08001142 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001142:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001144:	3204      	adds	r2, #4

08001146 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001146:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001148:	d3fb      	bcc.n	8001142 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800114a:	f004 f817 	bl	800517c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800114e:	f7ff f9d3 	bl	80004f8 <main>

08001152 <LoopForever>:

LoopForever:
    b LoopForever
 8001152:	e7fe      	b.n	8001152 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001154:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001158:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800115c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001160:	08005274 	.word	0x08005274
  ldr r2, =_sbss
 8001164:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001168:	20000208 	.word	0x20000208

0800116c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800116c:	e7fe      	b.n	800116c <ADC1_2_IRQHandler>

0800116e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	b082      	sub	sp, #8
 8001172:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001174:	2300      	movs	r3, #0
 8001176:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001178:	2003      	movs	r0, #3
 800117a:	f001 fd2b 	bl	8002bd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800117e:	200f      	movs	r0, #15
 8001180:	f000 f80e 	bl	80011a0 <HAL_InitTick>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d002      	beq.n	8001190 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	71fb      	strb	r3, [r7, #7]
 800118e:	e001      	b.n	8001194 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001190:	f7ff fdf6 	bl	8000d80 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001194:	79fb      	ldrb	r3, [r7, #7]
}
 8001196:	4618      	mov	r0, r3
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
	...

080011a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011a8:	2300      	movs	r3, #0
 80011aa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011ac:	4b17      	ldr	r3, [pc, #92]	@ (800120c <HAL_InitTick+0x6c>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d023      	beq.n	80011fc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011b4:	4b16      	ldr	r3, [pc, #88]	@ (8001210 <HAL_InitTick+0x70>)
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	4b14      	ldr	r3, [pc, #80]	@ (800120c <HAL_InitTick+0x6c>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	4619      	mov	r1, r3
 80011be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ca:	4618      	mov	r0, r3
 80011cc:	f001 fd37 	bl	8002c3e <HAL_SYSTICK_Config>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d10f      	bne.n	80011f6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2b0f      	cmp	r3, #15
 80011da:	d809      	bhi.n	80011f0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011dc:	2200      	movs	r2, #0
 80011de:	6879      	ldr	r1, [r7, #4]
 80011e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80011e4:	f001 fd01 	bl	8002bea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011e8:	4a0a      	ldr	r2, [pc, #40]	@ (8001214 <HAL_InitTick+0x74>)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6013      	str	r3, [r2, #0]
 80011ee:	e007      	b.n	8001200 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	73fb      	strb	r3, [r7, #15]
 80011f4:	e004      	b.n	8001200 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	73fb      	strb	r3, [r7, #15]
 80011fa:	e001      	b.n	8001200 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001200:	7bfb      	ldrb	r3, [r7, #15]
}
 8001202:	4618      	mov	r0, r3
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20000008 	.word	0x20000008
 8001210:	20000000 	.word	0x20000000
 8001214:	20000004 	.word	0x20000004

08001218 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800121c:	4b06      	ldr	r3, [pc, #24]	@ (8001238 <HAL_IncTick+0x20>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	461a      	mov	r2, r3
 8001222:	4b06      	ldr	r3, [pc, #24]	@ (800123c <HAL_IncTick+0x24>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4413      	add	r3, r2
 8001228:	4a04      	ldr	r2, [pc, #16]	@ (800123c <HAL_IncTick+0x24>)
 800122a:	6013      	str	r3, [r2, #0]
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	20000008 	.word	0x20000008
 800123c:	20000204 	.word	0x20000204

08001240 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  return uwTick;
 8001244:	4b03      	ldr	r3, [pc, #12]	@ (8001254 <HAL_GetTick+0x14>)
 8001246:	681b      	ldr	r3, [r3, #0]
}
 8001248:	4618      	mov	r0, r3
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	20000204 	.word	0x20000204

08001258 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001260:	f7ff ffee 	bl	8001240 <HAL_GetTick>
 8001264:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001270:	d005      	beq.n	800127e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001272:	4b0a      	ldr	r3, [pc, #40]	@ (800129c <HAL_Delay+0x44>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	461a      	mov	r2, r3
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	4413      	add	r3, r2
 800127c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800127e:	bf00      	nop
 8001280:	f7ff ffde 	bl	8001240 <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	68fa      	ldr	r2, [r7, #12]
 800128c:	429a      	cmp	r2, r3
 800128e:	d8f7      	bhi.n	8001280 <HAL_Delay+0x28>
  {
  }
}
 8001290:	bf00      	nop
 8001292:	bf00      	nop
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000008 	.word	0x20000008

080012a0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	431a      	orrs	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	609a      	str	r2, [r3, #8]
}
 80012ba:	bf00      	nop
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80012c6:	b480      	push	{r7}
 80012c8:	b083      	sub	sp, #12
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
 80012ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	431a      	orrs	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	609a      	str	r2, [r3, #8]
}
 80012e0:	bf00      	nop
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001308:	b480      	push	{r7}
 800130a:	b087      	sub	sp, #28
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
 8001314:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	3360      	adds	r3, #96	@ 0x60
 800131a:	461a      	mov	r2, r3
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	4413      	add	r3, r2
 8001322:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	4b08      	ldr	r3, [pc, #32]	@ (800134c <LL_ADC_SetOffset+0x44>)
 800132a:	4013      	ands	r3, r2
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001332:	683a      	ldr	r2, [r7, #0]
 8001334:	430a      	orrs	r2, r1
 8001336:	4313      	orrs	r3, r2
 8001338:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001340:	bf00      	nop
 8001342:	371c      	adds	r7, #28
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	03fff000 	.word	0x03fff000

08001350 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001350:	b480      	push	{r7}
 8001352:	b085      	sub	sp, #20
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	3360      	adds	r3, #96	@ 0x60
 800135e:	461a      	mov	r2, r3
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	4413      	add	r3, r2
 8001366:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001370:	4618      	mov	r0, r3
 8001372:	3714      	adds	r7, #20
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800137c:	b480      	push	{r7}
 800137e:	b087      	sub	sp, #28
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	3360      	adds	r3, #96	@ 0x60
 800138c:	461a      	mov	r2, r3
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	4413      	add	r3, r2
 8001394:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	431a      	orrs	r2, r3
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80013a6:	bf00      	nop
 80013a8:	371c      	adds	r7, #28
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr

080013b2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80013b2:	b480      	push	{r7}
 80013b4:	b083      	sub	sp, #12
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
 80013ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	695b      	ldr	r3, [r3, #20]
 80013c0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	431a      	orrs	r2, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	615a      	str	r2, [r3, #20]
}
 80013cc:	bf00      	nop
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d101      	bne.n	80013f0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80013ec:	2301      	movs	r3, #1
 80013ee:	e000      	b.n	80013f2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr

080013fe <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80013fe:	b480      	push	{r7}
 8001400:	b087      	sub	sp, #28
 8001402:	af00      	add	r7, sp, #0
 8001404:	60f8      	str	r0, [r7, #12]
 8001406:	60b9      	str	r1, [r7, #8]
 8001408:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	3330      	adds	r3, #48	@ 0x30
 800140e:	461a      	mov	r2, r3
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	0a1b      	lsrs	r3, r3, #8
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	f003 030c 	and.w	r3, r3, #12
 800141a:	4413      	add	r3, r2
 800141c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	f003 031f 	and.w	r3, r3, #31
 8001428:	211f      	movs	r1, #31
 800142a:	fa01 f303 	lsl.w	r3, r1, r3
 800142e:	43db      	mvns	r3, r3
 8001430:	401a      	ands	r2, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	0e9b      	lsrs	r3, r3, #26
 8001436:	f003 011f 	and.w	r1, r3, #31
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	f003 031f 	and.w	r3, r3, #31
 8001440:	fa01 f303 	lsl.w	r3, r1, r3
 8001444:	431a      	orrs	r2, r3
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800144a:	bf00      	nop
 800144c:	371c      	adds	r7, #28
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001456:	b480      	push	{r7}
 8001458:	b087      	sub	sp, #28
 800145a:	af00      	add	r7, sp, #0
 800145c:	60f8      	str	r0, [r7, #12]
 800145e:	60b9      	str	r1, [r7, #8]
 8001460:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	3314      	adds	r3, #20
 8001466:	461a      	mov	r2, r3
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	0e5b      	lsrs	r3, r3, #25
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	f003 0304 	and.w	r3, r3, #4
 8001472:	4413      	add	r3, r2
 8001474:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	0d1b      	lsrs	r3, r3, #20
 800147e:	f003 031f 	and.w	r3, r3, #31
 8001482:	2107      	movs	r1, #7
 8001484:	fa01 f303 	lsl.w	r3, r1, r3
 8001488:	43db      	mvns	r3, r3
 800148a:	401a      	ands	r2, r3
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	0d1b      	lsrs	r3, r3, #20
 8001490:	f003 031f 	and.w	r3, r3, #31
 8001494:	6879      	ldr	r1, [r7, #4]
 8001496:	fa01 f303 	lsl.w	r3, r1, r3
 800149a:	431a      	orrs	r2, r3
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80014a0:	bf00      	nop
 80014a2:	371c      	adds	r7, #28
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014c4:	43db      	mvns	r3, r3
 80014c6:	401a      	ands	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f003 0318 	and.w	r3, r3, #24
 80014ce:	4908      	ldr	r1, [pc, #32]	@ (80014f0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80014d0:	40d9      	lsrs	r1, r3
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	400b      	ands	r3, r1
 80014d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014da:	431a      	orrs	r2, r3
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80014e2:	bf00      	nop
 80014e4:	3714      	adds	r7, #20
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	0007ffff 	.word	0x0007ffff

080014f4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	f003 031f 	and.w	r3, r3, #31
}
 8001504:	4618      	mov	r0, r3
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001520:	4618      	mov	r0, r3
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800153c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	6093      	str	r3, [r2, #8]
}
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001560:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001564:	d101      	bne.n	800156a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001566:	2301      	movs	r3, #1
 8001568:	e000      	b.n	800156c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800156a:	2300      	movs	r3, #0
}
 800156c:	4618      	mov	r0, r3
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001588:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800158c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80015b4:	d101      	bne.n	80015ba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80015b6:	2301      	movs	r3, #1
 80015b8:	e000      	b.n	80015bc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80015ba:	2300      	movs	r3, #0
}
 80015bc:	4618      	mov	r0, r3
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80015d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80015dc:	f043 0201 	orr.w	r2, r3, #1
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80015e4:	bf00      	nop
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001600:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001604:	f043 0202 	orr.w	r2, r3, #2
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	f003 0301 	and.w	r3, r3, #1
 8001628:	2b01      	cmp	r3, #1
 800162a:	d101      	bne.n	8001630 <LL_ADC_IsEnabled+0x18>
 800162c:	2301      	movs	r3, #1
 800162e:	e000      	b.n	8001632 <LL_ADC_IsEnabled+0x1a>
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr

0800163e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800163e:	b480      	push	{r7}
 8001640:	b083      	sub	sp, #12
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b02      	cmp	r3, #2
 8001650:	d101      	bne.n	8001656 <LL_ADC_IsDisableOngoing+0x18>
 8001652:	2301      	movs	r3, #1
 8001654:	e000      	b.n	8001658 <LL_ADC_IsDisableOngoing+0x1a>
 8001656:	2300      	movs	r3, #0
}
 8001658:	4618      	mov	r0, r3
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001674:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001678:	f043 0204 	orr.w	r2, r3, #4
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800169c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80016a0:	f043 0210 	orr.w	r2, r3, #16
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	f003 0304 	and.w	r3, r3, #4
 80016c4:	2b04      	cmp	r3, #4
 80016c6:	d101      	bne.n	80016cc <LL_ADC_REG_IsConversionOngoing+0x18>
 80016c8:	2301      	movs	r3, #1
 80016ca:	e000      	b.n	80016ce <LL_ADC_REG_IsConversionOngoing+0x1a>
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr

080016da <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80016da:	b480      	push	{r7}
 80016dc:	b083      	sub	sp, #12
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80016ea:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80016ee:	f043 0220 	orr.w	r2, r3, #32
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80016f6:	bf00      	nop
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001702:	b480      	push	{r7}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f003 0308 	and.w	r3, r3, #8
 8001712:	2b08      	cmp	r3, #8
 8001714:	d101      	bne.n	800171a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001716:	2301      	movs	r3, #1
 8001718:	e000      	b.n	800171c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800171a:	2300      	movs	r3, #0
}
 800171c:	4618      	mov	r0, r3
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001728:	b590      	push	{r4, r7, lr}
 800172a:	b089      	sub	sp, #36	@ 0x24
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001730:	2300      	movs	r3, #0
 8001732:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001734:	2300      	movs	r3, #0
 8001736:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d101      	bne.n	8001742 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e12b      	b.n	800199a <HAL_ADC_Init+0x272>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	691b      	ldr	r3, [r3, #16]
 8001746:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800174c:	2b00      	cmp	r3, #0
 800174e:	d109      	bne.n	8001764 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f7ff fb39 	bl	8000dc8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff fef1 	bl	8001550 <LL_ADC_IsDeepPowerDownEnabled>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d004      	beq.n	800177e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff fed7 	bl	800152c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff ff0c 	bl	80015a0 <LL_ADC_IsInternalRegulatorEnabled>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d115      	bne.n	80017ba <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff fef0 	bl	8001578 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001798:	4b82      	ldr	r3, [pc, #520]	@ (80019a4 <HAL_ADC_Init+0x27c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	099b      	lsrs	r3, r3, #6
 800179e:	4a82      	ldr	r2, [pc, #520]	@ (80019a8 <HAL_ADC_Init+0x280>)
 80017a0:	fba2 2303 	umull	r2, r3, r2, r3
 80017a4:	099b      	lsrs	r3, r3, #6
 80017a6:	3301      	adds	r3, #1
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80017ac:	e002      	b.n	80017b4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	3b01      	subs	r3, #1
 80017b2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1f9      	bne.n	80017ae <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff feee 	bl	80015a0 <LL_ADC_IsInternalRegulatorEnabled>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d10d      	bne.n	80017e6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017ce:	f043 0210 	orr.w	r2, r3, #16
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017da:	f043 0201 	orr.w	r2, r3, #1
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff ff62 	bl	80016b4 <LL_ADC_REG_IsConversionOngoing>
 80017f0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017f6:	f003 0310 	and.w	r3, r3, #16
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f040 80c4 	bne.w	8001988 <HAL_ADC_Init+0x260>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	2b00      	cmp	r3, #0
 8001804:	f040 80c0 	bne.w	8001988 <HAL_ADC_Init+0x260>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800180c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001810:	f043 0202 	orr.w	r2, r3, #2
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff fefb 	bl	8001618 <LL_ADC_IsEnabled>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d110      	bne.n	800184a <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001828:	4860      	ldr	r0, [pc, #384]	@ (80019ac <HAL_ADC_Init+0x284>)
 800182a:	f7ff fef5 	bl	8001618 <LL_ADC_IsEnabled>
 800182e:	4604      	mov	r4, r0
 8001830:	485f      	ldr	r0, [pc, #380]	@ (80019b0 <HAL_ADC_Init+0x288>)
 8001832:	f7ff fef1 	bl	8001618 <LL_ADC_IsEnabled>
 8001836:	4603      	mov	r3, r0
 8001838:	4323      	orrs	r3, r4
 800183a:	2b00      	cmp	r3, #0
 800183c:	d105      	bne.n	800184a <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	4619      	mov	r1, r3
 8001844:	485b      	ldr	r0, [pc, #364]	@ (80019b4 <HAL_ADC_Init+0x28c>)
 8001846:	f7ff fd2b 	bl	80012a0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	7e5b      	ldrb	r3, [r3, #25]
 800184e:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001854:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800185a:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001860:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001868:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800186a:	4313      	orrs	r3, r2
 800186c:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001874:	2b01      	cmp	r3, #1
 8001876:	d106      	bne.n	8001886 <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800187c:	3b01      	subs	r3, #1
 800187e:	045b      	lsls	r3, r3, #17
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	4313      	orrs	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800188a:	2b00      	cmp	r3, #0
 800188c:	d009      	beq.n	80018a2 <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001892:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800189a:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	4313      	orrs	r3, r2
 80018a0:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	68da      	ldr	r2, [r3, #12]
 80018a8:	4b43      	ldr	r3, [pc, #268]	@ (80019b8 <HAL_ADC_Init+0x290>)
 80018aa:	4013      	ands	r3, r2
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	6812      	ldr	r2, [r2, #0]
 80018b0:	69b9      	ldr	r1, [r7, #24]
 80018b2:	430b      	orrs	r3, r1
 80018b4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff ff21 	bl	8001702 <LL_ADC_INJ_IsConversionOngoing>
 80018c0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d13d      	bne.n	8001944 <HAL_ADC_Init+0x21c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d13a      	bne.n	8001944 <HAL_ADC_Init+0x21c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80018d2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80018da:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80018dc:	4313      	orrs	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80018ea:	f023 0302 	bic.w	r3, r3, #2
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	6812      	ldr	r2, [r2, #0]
 80018f2:	69b9      	ldr	r1, [r7, #24]
 80018f4:	430b      	orrs	r3, r1
 80018f6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d118      	bne.n	8001934 <HAL_ADC_Init+0x20c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	691b      	ldr	r3, [r3, #16]
 8001908:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800190c:	f023 0304 	bic.w	r3, r3, #4
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001918:	4311      	orrs	r1, r2
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800191e:	4311      	orrs	r1, r2
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001924:	430a      	orrs	r2, r1
 8001926:	431a      	orrs	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f042 0201 	orr.w	r2, r2, #1
 8001930:	611a      	str	r2, [r3, #16]
 8001932:	e007      	b.n	8001944 <HAL_ADC_Init+0x21c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	691a      	ldr	r2, [r3, #16]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f022 0201 	bic.w	r2, r2, #1
 8001942:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	691b      	ldr	r3, [r3, #16]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d10c      	bne.n	8001966 <HAL_ADC_Init+0x23e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001952:	f023 010f 	bic.w	r1, r3, #15
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	69db      	ldr	r3, [r3, #28]
 800195a:	1e5a      	subs	r2, r3, #1
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	430a      	orrs	r2, r1
 8001962:	631a      	str	r2, [r3, #48]	@ 0x30
 8001964:	e007      	b.n	8001976 <HAL_ADC_Init+0x24e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f022 020f 	bic.w	r2, r2, #15
 8001974:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800197a:	f023 0303 	bic.w	r3, r3, #3
 800197e:	f043 0201 	orr.w	r2, r3, #1
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	655a      	str	r2, [r3, #84]	@ 0x54
 8001986:	e007      	b.n	8001998 <HAL_ADC_Init+0x270>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800198c:	f043 0210 	orr.w	r2, r3, #16
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001998:	7ffb      	ldrb	r3, [r7, #31]
}
 800199a:	4618      	mov	r0, r3
 800199c:	3724      	adds	r7, #36	@ 0x24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd90      	pop	{r4, r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20000000 	.word	0x20000000
 80019a8:	053e2d63 	.word	0x053e2d63
 80019ac:	50040000 	.word	0x50040000
 80019b0:	50040100 	.word	0x50040100
 80019b4:	50040300 	.word	0x50040300
 80019b8:	fff0c007 	.word	0xfff0c007

080019bc <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80019c4:	4857      	ldr	r0, [pc, #348]	@ (8001b24 <HAL_ADC_Start+0x168>)
 80019c6:	f7ff fd95 	bl	80014f4 <LL_ADC_GetMultimode>
 80019ca:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff fe6f 	bl	80016b4 <LL_ADC_REG_IsConversionOngoing>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	f040 809c 	bne.w	8001b16 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d101      	bne.n	80019ec <HAL_ADC_Start+0x30>
 80019e8:	2302      	movs	r3, #2
 80019ea:	e097      	b.n	8001b1c <HAL_ADC_Start+0x160>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2201      	movs	r2, #1
 80019f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f000 fe6d 	bl	80026d4 <ADC_Enable>
 80019fa:	4603      	mov	r3, r0
 80019fc:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80019fe:	7dfb      	ldrb	r3, [r7, #23]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	f040 8083 	bne.w	8001b0c <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a0a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001a0e:	f023 0301 	bic.w	r3, r3, #1
 8001a12:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a42      	ldr	r2, [pc, #264]	@ (8001b28 <HAL_ADC_Start+0x16c>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d002      	beq.n	8001a2a <HAL_ADC_Start+0x6e>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	e000      	b.n	8001a2c <HAL_ADC_Start+0x70>
 8001a2a:	4b40      	ldr	r3, [pc, #256]	@ (8001b2c <HAL_ADC_Start+0x170>)
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	6812      	ldr	r2, [r2, #0]
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d002      	beq.n	8001a3a <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d105      	bne.n	8001a46 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a3e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a4a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a52:	d106      	bne.n	8001a62 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a58:	f023 0206 	bic.w	r2, r3, #6
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	659a      	str	r2, [r3, #88]	@ 0x58
 8001a60:	e002      	b.n	8001a68 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	221c      	movs	r2, #28
 8001a6e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a2a      	ldr	r2, [pc, #168]	@ (8001b28 <HAL_ADC_Start+0x16c>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d002      	beq.n	8001a88 <HAL_ADC_Start+0xcc>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	e000      	b.n	8001a8a <HAL_ADC_Start+0xce>
 8001a88:	4b28      	ldr	r3, [pc, #160]	@ (8001b2c <HAL_ADC_Start+0x170>)
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	6812      	ldr	r2, [r2, #0]
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d008      	beq.n	8001aa4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d005      	beq.n	8001aa4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	2b05      	cmp	r3, #5
 8001a9c:	d002      	beq.n	8001aa4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	2b09      	cmp	r3, #9
 8001aa2:	d114      	bne.n	8001ace <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d007      	beq.n	8001ac2 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ab6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001aba:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff fdcc 	bl	8001664 <LL_ADC_REG_StartConversion>
 8001acc:	e025      	b.n	8001b1a <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ad2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a12      	ldr	r2, [pc, #72]	@ (8001b28 <HAL_ADC_Start+0x16c>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d002      	beq.n	8001aea <HAL_ADC_Start+0x12e>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	e000      	b.n	8001aec <HAL_ADC_Start+0x130>
 8001aea:	4b10      	ldr	r3, [pc, #64]	@ (8001b2c <HAL_ADC_Start+0x170>)
 8001aec:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d00f      	beq.n	8001b1a <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001afe:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001b02:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	655a      	str	r2, [r3, #84]	@ 0x54
 8001b0a:	e006      	b.n	8001b1a <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001b14:	e001      	b.n	8001b1a <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001b16:	2302      	movs	r3, #2
 8001b18:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3718      	adds	r7, #24
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	50040300 	.word	0x50040300
 8001b28:	50040100 	.word	0x50040100
 8001b2c:	50040000 	.word	0x50040000

08001b30 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d101      	bne.n	8001b46 <HAL_ADC_Stop+0x16>
 8001b42:	2302      	movs	r3, #2
 8001b44:	e023      	b.n	8001b8e <HAL_ADC_Stop+0x5e>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001b4e:	2103      	movs	r1, #3
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f000 fd03 	bl	800255c <ADC_ConversionStop>
 8001b56:	4603      	mov	r3, r0
 8001b58:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001b5a:	7bfb      	ldrb	r3, [r7, #15]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d111      	bne.n	8001b84 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f000 fe3d 	bl	80027e0 <ADC_Disable>
 8001b66:	4603      	mov	r3, r0
 8001b68:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001b6a:	7bfb      	ldrb	r3, [r7, #15]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d109      	bne.n	8001b84 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b74:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001b78:	f023 0301 	bic.w	r3, r3, #1
 8001b7c:	f043 0201 	orr.w	r2, r3, #1
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3710      	adds	r7, #16
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
	...

08001b98 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b088      	sub	sp, #32
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ba2:	4866      	ldr	r0, [pc, #408]	@ (8001d3c <HAL_ADC_PollForConversion+0x1a4>)
 8001ba4:	f7ff fca6 	bl	80014f4 <LL_ADC_GetMultimode>
 8001ba8:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	2b08      	cmp	r3, #8
 8001bb0:	d102      	bne.n	8001bb8 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001bb2:	2308      	movs	r3, #8
 8001bb4:	61fb      	str	r3, [r7, #28]
 8001bb6:	e02a      	b.n	8001c0e <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d005      	beq.n	8001bca <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	2b05      	cmp	r3, #5
 8001bc2:	d002      	beq.n	8001bca <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	2b09      	cmp	r3, #9
 8001bc8:	d111      	bne.n	8001bee <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d007      	beq.n	8001be8 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bdc:	f043 0220 	orr.w	r2, r3, #32
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e0a4      	b.n	8001d32 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001be8:	2304      	movs	r3, #4
 8001bea:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001bec:	e00f      	b.n	8001c0e <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001bee:	4853      	ldr	r0, [pc, #332]	@ (8001d3c <HAL_ADC_PollForConversion+0x1a4>)
 8001bf0:	f7ff fc8e 	bl	8001510 <LL_ADC_GetMultiDMATransfer>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d007      	beq.n	8001c0a <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bfe:	f043 0220 	orr.w	r2, r3, #32
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e093      	b.n	8001d32 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001c0a:	2304      	movs	r3, #4
 8001c0c:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001c0e:	f7ff fb17 	bl	8001240 <HAL_GetTick>
 8001c12:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001c14:	e021      	b.n	8001c5a <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001c1c:	d01d      	beq.n	8001c5a <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001c1e:	f7ff fb0f 	bl	8001240 <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d302      	bcc.n	8001c34 <HAL_ADC_PollForConversion+0x9c>
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d112      	bne.n	8001c5a <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d10b      	bne.n	8001c5a <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c46:	f043 0204 	orr.w	r2, r3, #4
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e06b      	b.n	8001d32 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	4013      	ands	r3, r2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d0d6      	beq.n	8001c16 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c6c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff fbad 	bl	80013d8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d01c      	beq.n	8001cbe <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	7e5b      	ldrb	r3, [r3, #25]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d118      	bne.n	8001cbe <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0308 	and.w	r3, r3, #8
 8001c96:	2b08      	cmp	r3, #8
 8001c98:	d111      	bne.n	8001cbe <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c9e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001caa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d105      	bne.n	8001cbe <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cb6:	f043 0201 	orr.w	r2, r3, #1
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a1f      	ldr	r2, [pc, #124]	@ (8001d40 <HAL_ADC_PollForConversion+0x1a8>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d002      	beq.n	8001cce <HAL_ADC_PollForConversion+0x136>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	e000      	b.n	8001cd0 <HAL_ADC_PollForConversion+0x138>
 8001cce:	4b1d      	ldr	r3, [pc, #116]	@ (8001d44 <HAL_ADC_PollForConversion+0x1ac>)
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	6812      	ldr	r2, [r2, #0]
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d008      	beq.n	8001cea <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d005      	beq.n	8001cea <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	2b05      	cmp	r3, #5
 8001ce2:	d002      	beq.n	8001cea <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	2b09      	cmp	r3, #9
 8001ce8:	d104      	bne.n	8001cf4 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	61bb      	str	r3, [r7, #24]
 8001cf2:	e00c      	b.n	8001d0e <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a11      	ldr	r2, [pc, #68]	@ (8001d40 <HAL_ADC_PollForConversion+0x1a8>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d002      	beq.n	8001d04 <HAL_ADC_PollForConversion+0x16c>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	e000      	b.n	8001d06 <HAL_ADC_PollForConversion+0x16e>
 8001d04:	4b0f      	ldr	r3, [pc, #60]	@ (8001d44 <HAL_ADC_PollForConversion+0x1ac>)
 8001d06:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	2b08      	cmp	r3, #8
 8001d12:	d104      	bne.n	8001d1e <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2208      	movs	r2, #8
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	e008      	b.n	8001d30 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d103      	bne.n	8001d30 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	220c      	movs	r2, #12
 8001d2e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3720      	adds	r7, #32
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	50040300 	.word	0x50040300
 8001d40:	50040100 	.word	0x50040100
 8001d44:	50040000 	.word	0x50040000

08001d48 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
	...

08001d64 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b0b6      	sub	sp, #216	@ 0xd8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001d74:	2300      	movs	r3, #0
 8001d76:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d101      	bne.n	8001d86 <HAL_ADC_ConfigChannel+0x22>
 8001d82:	2302      	movs	r3, #2
 8001d84:	e3d5      	b.n	8002532 <HAL_ADC_ConfigChannel+0x7ce>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7ff fc8e 	bl	80016b4 <LL_ADC_REG_IsConversionOngoing>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	f040 83ba 	bne.w	8002514 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	2b05      	cmp	r3, #5
 8001dae:	d824      	bhi.n	8001dfa <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	3b02      	subs	r3, #2
 8001db6:	2b03      	cmp	r3, #3
 8001db8:	d81b      	bhi.n	8001df2 <HAL_ADC_ConfigChannel+0x8e>
 8001dba:	a201      	add	r2, pc, #4	@ (adr r2, 8001dc0 <HAL_ADC_ConfigChannel+0x5c>)
 8001dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dc0:	08001dd1 	.word	0x08001dd1
 8001dc4:	08001dd9 	.word	0x08001dd9
 8001dc8:	08001de1 	.word	0x08001de1
 8001dcc:	08001de9 	.word	0x08001de9
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001dd0:	230c      	movs	r3, #12
 8001dd2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001dd6:	e010      	b.n	8001dfa <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001dd8:	2312      	movs	r3, #18
 8001dda:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001dde:	e00c      	b.n	8001dfa <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001de0:	2318      	movs	r3, #24
 8001de2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001de6:	e008      	b.n	8001dfa <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001de8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001dec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001df0:	e003      	b.n	8001dfa <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001df2:	2306      	movs	r3, #6
 8001df4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001df8:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6818      	ldr	r0, [r3, #0]
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	461a      	mov	r2, r3
 8001e04:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001e08:	f7ff faf9 	bl	80013fe <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff fc4f 	bl	80016b4 <LL_ADC_REG_IsConversionOngoing>
 8001e16:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff fc6f 	bl	8001702 <LL_ADC_INJ_IsConversionOngoing>
 8001e24:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e28:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	f040 81bf 	bne.w	80021b0 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e32:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	f040 81ba 	bne.w	80021b0 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001e44:	d10f      	bne.n	8001e66 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6818      	ldr	r0, [r3, #0]
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	4619      	mov	r1, r3
 8001e52:	f7ff fb00 	bl	8001456 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff faa7 	bl	80013b2 <LL_ADC_SetSamplingTimeCommonConfig>
 8001e64:	e00e      	b.n	8001e84 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6818      	ldr	r0, [r3, #0]
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	6819      	ldr	r1, [r3, #0]
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	461a      	mov	r2, r3
 8001e74:	f7ff faef 	bl	8001456 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff fa97 	bl	80013b2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	695a      	ldr	r2, [r3, #20]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	08db      	lsrs	r3, r3, #3
 8001e90:	f003 0303 	and.w	r3, r3, #3
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	2b04      	cmp	r3, #4
 8001ea4:	d00a      	beq.n	8001ebc <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6818      	ldr	r0, [r3, #0]
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	6919      	ldr	r1, [r3, #16]
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001eb6:	f7ff fa27 	bl	8001308 <LL_ADC_SetOffset>
 8001eba:	e179      	b.n	80021b0 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff fa44 	bl	8001350 <LL_ADC_GetOffsetChannel>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d10a      	bne.n	8001ee8 <HAL_ADC_ConfigChannel+0x184>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff fa39 	bl	8001350 <LL_ADC_GetOffsetChannel>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	0e9b      	lsrs	r3, r3, #26
 8001ee2:	f003 021f 	and.w	r2, r3, #31
 8001ee6:	e01e      	b.n	8001f26 <HAL_ADC_ConfigChannel+0x1c2>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2100      	movs	r1, #0
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff fa2e 	bl	8001350 <LL_ADC_GetOffsetChannel>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001efe:	fa93 f3a3 	rbit	r3, r3
 8001f02:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f06:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001f0a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001f0e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d101      	bne.n	8001f1a <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8001f16:	2320      	movs	r3, #32
 8001f18:	e004      	b.n	8001f24 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8001f1a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001f1e:	fab3 f383 	clz	r3, r3
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d105      	bne.n	8001f3e <HAL_ADC_ConfigChannel+0x1da>
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	0e9b      	lsrs	r3, r3, #26
 8001f38:	f003 031f 	and.w	r3, r3, #31
 8001f3c:	e018      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x20c>
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001f4a:	fa93 f3a3 	rbit	r3, r3
 8001f4e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001f52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001f56:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001f5a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8001f62:	2320      	movs	r3, #32
 8001f64:	e004      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8001f66:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001f6a:	fab3 f383 	clz	r3, r3
 8001f6e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d106      	bne.n	8001f82 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff f9fd 	bl	800137c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2101      	movs	r1, #1
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff f9e1 	bl	8001350 <LL_ADC_GetOffsetChannel>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d10a      	bne.n	8001fae <HAL_ADC_ConfigChannel+0x24a>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2101      	movs	r1, #1
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff f9d6 	bl	8001350 <LL_ADC_GetOffsetChannel>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	0e9b      	lsrs	r3, r3, #26
 8001fa8:	f003 021f 	and.w	r2, r3, #31
 8001fac:	e01e      	b.n	8001fec <HAL_ADC_ConfigChannel+0x288>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2101      	movs	r1, #1
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff f9cb 	bl	8001350 <LL_ADC_GetOffsetChannel>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001fc4:	fa93 f3a3 	rbit	r3, r3
 8001fc8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8001fcc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001fd0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8001fd4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d101      	bne.n	8001fe0 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8001fdc:	2320      	movs	r3, #32
 8001fde:	e004      	b.n	8001fea <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8001fe0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001fe4:	fab3 f383 	clz	r3, r3
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d105      	bne.n	8002004 <HAL_ADC_ConfigChannel+0x2a0>
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	0e9b      	lsrs	r3, r3, #26
 8001ffe:	f003 031f 	and.w	r3, r3, #31
 8002002:	e018      	b.n	8002036 <HAL_ADC_ConfigChannel+0x2d2>
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002010:	fa93 f3a3 	rbit	r3, r3
 8002014:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002018:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800201c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002020:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002024:	2b00      	cmp	r3, #0
 8002026:	d101      	bne.n	800202c <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8002028:	2320      	movs	r3, #32
 800202a:	e004      	b.n	8002036 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 800202c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002030:	fab3 f383 	clz	r3, r3
 8002034:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002036:	429a      	cmp	r2, r3
 8002038:	d106      	bne.n	8002048 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2200      	movs	r2, #0
 8002040:	2101      	movs	r1, #1
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff f99a 	bl	800137c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2102      	movs	r1, #2
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff f97e 	bl	8001350 <LL_ADC_GetOffsetChannel>
 8002054:	4603      	mov	r3, r0
 8002056:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800205a:	2b00      	cmp	r3, #0
 800205c:	d10a      	bne.n	8002074 <HAL_ADC_ConfigChannel+0x310>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2102      	movs	r1, #2
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff f973 	bl	8001350 <LL_ADC_GetOffsetChannel>
 800206a:	4603      	mov	r3, r0
 800206c:	0e9b      	lsrs	r3, r3, #26
 800206e:	f003 021f 	and.w	r2, r3, #31
 8002072:	e01e      	b.n	80020b2 <HAL_ADC_ConfigChannel+0x34e>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2102      	movs	r1, #2
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff f968 	bl	8001350 <LL_ADC_GetOffsetChannel>
 8002080:	4603      	mov	r3, r0
 8002082:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002086:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800208a:	fa93 f3a3 	rbit	r3, r3
 800208e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002092:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002096:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800209a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d101      	bne.n	80020a6 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 80020a2:	2320      	movs	r3, #32
 80020a4:	e004      	b.n	80020b0 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 80020a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80020aa:	fab3 f383 	clz	r3, r3
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d105      	bne.n	80020ca <HAL_ADC_ConfigChannel+0x366>
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	0e9b      	lsrs	r3, r3, #26
 80020c4:	f003 031f 	and.w	r3, r3, #31
 80020c8:	e014      	b.n	80020f4 <HAL_ADC_ConfigChannel+0x390>
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80020d2:	fa93 f3a3 	rbit	r3, r3
 80020d6:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80020d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80020da:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80020de:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d101      	bne.n	80020ea <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 80020e6:	2320      	movs	r3, #32
 80020e8:	e004      	b.n	80020f4 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 80020ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80020ee:	fab3 f383 	clz	r3, r3
 80020f2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d106      	bne.n	8002106 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2200      	movs	r2, #0
 80020fe:	2102      	movs	r1, #2
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff f93b 	bl	800137c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2103      	movs	r1, #3
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff f91f 	bl	8001350 <LL_ADC_GetOffsetChannel>
 8002112:	4603      	mov	r3, r0
 8002114:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002118:	2b00      	cmp	r3, #0
 800211a:	d10a      	bne.n	8002132 <HAL_ADC_ConfigChannel+0x3ce>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2103      	movs	r1, #3
 8002122:	4618      	mov	r0, r3
 8002124:	f7ff f914 	bl	8001350 <LL_ADC_GetOffsetChannel>
 8002128:	4603      	mov	r3, r0
 800212a:	0e9b      	lsrs	r3, r3, #26
 800212c:	f003 021f 	and.w	r2, r3, #31
 8002130:	e017      	b.n	8002162 <HAL_ADC_ConfigChannel+0x3fe>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2103      	movs	r1, #3
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff f909 	bl	8001350 <LL_ADC_GetOffsetChannel>
 800213e:	4603      	mov	r3, r0
 8002140:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002142:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002144:	fa93 f3a3 	rbit	r3, r3
 8002148:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800214a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800214c:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800214e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002150:	2b00      	cmp	r3, #0
 8002152:	d101      	bne.n	8002158 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8002154:	2320      	movs	r3, #32
 8002156:	e003      	b.n	8002160 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8002158:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800215a:	fab3 f383 	clz	r3, r3
 800215e:	b2db      	uxtb	r3, r3
 8002160:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800216a:	2b00      	cmp	r3, #0
 800216c:	d105      	bne.n	800217a <HAL_ADC_ConfigChannel+0x416>
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	0e9b      	lsrs	r3, r3, #26
 8002174:	f003 031f 	and.w	r3, r3, #31
 8002178:	e011      	b.n	800219e <HAL_ADC_ConfigChannel+0x43a>
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002180:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002182:	fa93 f3a3 	rbit	r3, r3
 8002186:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002188:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800218a:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800218c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8002192:	2320      	movs	r3, #32
 8002194:	e003      	b.n	800219e <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8002196:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002198:	fab3 f383 	clz	r3, r3
 800219c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800219e:	429a      	cmp	r2, r3
 80021a0:	d106      	bne.n	80021b0 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2200      	movs	r2, #0
 80021a8:	2103      	movs	r1, #3
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7ff f8e6 	bl	800137c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff fa2f 	bl	8001618 <LL_ADC_IsEnabled>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f040 813f 	bne.w	8002440 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6818      	ldr	r0, [r3, #0]
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	6819      	ldr	r1, [r3, #0]
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	461a      	mov	r2, r3
 80021d0:	f7ff f96c 	bl	80014ac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	4a8e      	ldr	r2, [pc, #568]	@ (8002414 <HAL_ADC_ConfigChannel+0x6b0>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	f040 8130 	bne.w	8002440 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d10b      	bne.n	8002208 <HAL_ADC_ConfigChannel+0x4a4>
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	0e9b      	lsrs	r3, r3, #26
 80021f6:	3301      	adds	r3, #1
 80021f8:	f003 031f 	and.w	r3, r3, #31
 80021fc:	2b09      	cmp	r3, #9
 80021fe:	bf94      	ite	ls
 8002200:	2301      	movls	r3, #1
 8002202:	2300      	movhi	r3, #0
 8002204:	b2db      	uxtb	r3, r3
 8002206:	e019      	b.n	800223c <HAL_ADC_ConfigChannel+0x4d8>
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002210:	fa93 f3a3 	rbit	r3, r3
 8002214:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002216:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002218:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800221a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800221c:	2b00      	cmp	r3, #0
 800221e:	d101      	bne.n	8002224 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8002220:	2320      	movs	r3, #32
 8002222:	e003      	b.n	800222c <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002224:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002226:	fab3 f383 	clz	r3, r3
 800222a:	b2db      	uxtb	r3, r3
 800222c:	3301      	adds	r3, #1
 800222e:	f003 031f 	and.w	r3, r3, #31
 8002232:	2b09      	cmp	r3, #9
 8002234:	bf94      	ite	ls
 8002236:	2301      	movls	r3, #1
 8002238:	2300      	movhi	r3, #0
 800223a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800223c:	2b00      	cmp	r3, #0
 800223e:	d079      	beq.n	8002334 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002248:	2b00      	cmp	r3, #0
 800224a:	d107      	bne.n	800225c <HAL_ADC_ConfigChannel+0x4f8>
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	0e9b      	lsrs	r3, r3, #26
 8002252:	3301      	adds	r3, #1
 8002254:	069b      	lsls	r3, r3, #26
 8002256:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800225a:	e015      	b.n	8002288 <HAL_ADC_ConfigChannel+0x524>
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002262:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002264:	fa93 f3a3 	rbit	r3, r3
 8002268:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800226a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800226c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800226e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002270:	2b00      	cmp	r3, #0
 8002272:	d101      	bne.n	8002278 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002274:	2320      	movs	r3, #32
 8002276:	e003      	b.n	8002280 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002278:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800227a:	fab3 f383 	clz	r3, r3
 800227e:	b2db      	uxtb	r3, r3
 8002280:	3301      	adds	r3, #1
 8002282:	069b      	lsls	r3, r3, #26
 8002284:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002290:	2b00      	cmp	r3, #0
 8002292:	d109      	bne.n	80022a8 <HAL_ADC_ConfigChannel+0x544>
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	0e9b      	lsrs	r3, r3, #26
 800229a:	3301      	adds	r3, #1
 800229c:	f003 031f 	and.w	r3, r3, #31
 80022a0:	2101      	movs	r1, #1
 80022a2:	fa01 f303 	lsl.w	r3, r1, r3
 80022a6:	e017      	b.n	80022d8 <HAL_ADC_ConfigChannel+0x574>
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022b0:	fa93 f3a3 	rbit	r3, r3
 80022b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80022b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022b8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80022ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d101      	bne.n	80022c4 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80022c0:	2320      	movs	r3, #32
 80022c2:	e003      	b.n	80022cc <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80022c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022c6:	fab3 f383 	clz	r3, r3
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	3301      	adds	r3, #1
 80022ce:	f003 031f 	and.w	r3, r3, #31
 80022d2:	2101      	movs	r1, #1
 80022d4:	fa01 f303 	lsl.w	r3, r1, r3
 80022d8:	ea42 0103 	orr.w	r1, r2, r3
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d10a      	bne.n	80022fe <HAL_ADC_ConfigChannel+0x59a>
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	0e9b      	lsrs	r3, r3, #26
 80022ee:	3301      	adds	r3, #1
 80022f0:	f003 021f 	and.w	r2, r3, #31
 80022f4:	4613      	mov	r3, r2
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	4413      	add	r3, r2
 80022fa:	051b      	lsls	r3, r3, #20
 80022fc:	e018      	b.n	8002330 <HAL_ADC_ConfigChannel+0x5cc>
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002304:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002306:	fa93 f3a3 	rbit	r3, r3
 800230a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800230c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800230e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8002316:	2320      	movs	r3, #32
 8002318:	e003      	b.n	8002322 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 800231a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800231c:	fab3 f383 	clz	r3, r3
 8002320:	b2db      	uxtb	r3, r3
 8002322:	3301      	adds	r3, #1
 8002324:	f003 021f 	and.w	r2, r3, #31
 8002328:	4613      	mov	r3, r2
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	4413      	add	r3, r2
 800232e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002330:	430b      	orrs	r3, r1
 8002332:	e080      	b.n	8002436 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800233c:	2b00      	cmp	r3, #0
 800233e:	d107      	bne.n	8002350 <HAL_ADC_ConfigChannel+0x5ec>
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	0e9b      	lsrs	r3, r3, #26
 8002346:	3301      	adds	r3, #1
 8002348:	069b      	lsls	r3, r3, #26
 800234a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800234e:	e015      	b.n	800237c <HAL_ADC_ConfigChannel+0x618>
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002358:	fa93 f3a3 	rbit	r3, r3
 800235c:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800235e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002360:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002364:	2b00      	cmp	r3, #0
 8002366:	d101      	bne.n	800236c <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8002368:	2320      	movs	r3, #32
 800236a:	e003      	b.n	8002374 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 800236c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800236e:	fab3 f383 	clz	r3, r3
 8002372:	b2db      	uxtb	r3, r3
 8002374:	3301      	adds	r3, #1
 8002376:	069b      	lsls	r3, r3, #26
 8002378:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002384:	2b00      	cmp	r3, #0
 8002386:	d109      	bne.n	800239c <HAL_ADC_ConfigChannel+0x638>
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	0e9b      	lsrs	r3, r3, #26
 800238e:	3301      	adds	r3, #1
 8002390:	f003 031f 	and.w	r3, r3, #31
 8002394:	2101      	movs	r1, #1
 8002396:	fa01 f303 	lsl.w	r3, r1, r3
 800239a:	e017      	b.n	80023cc <HAL_ADC_ConfigChannel+0x668>
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	fa93 f3a3 	rbit	r3, r3
 80023a8:	61bb      	str	r3, [r7, #24]
  return result;
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80023ae:	6a3b      	ldr	r3, [r7, #32]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d101      	bne.n	80023b8 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80023b4:	2320      	movs	r3, #32
 80023b6:	e003      	b.n	80023c0 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80023b8:	6a3b      	ldr	r3, [r7, #32]
 80023ba:	fab3 f383 	clz	r3, r3
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	3301      	adds	r3, #1
 80023c2:	f003 031f 	and.w	r3, r3, #31
 80023c6:	2101      	movs	r1, #1
 80023c8:	fa01 f303 	lsl.w	r3, r1, r3
 80023cc:	ea42 0103 	orr.w	r1, r2, r3
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d10d      	bne.n	80023f8 <HAL_ADC_ConfigChannel+0x694>
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	0e9b      	lsrs	r3, r3, #26
 80023e2:	3301      	adds	r3, #1
 80023e4:	f003 021f 	and.w	r2, r3, #31
 80023e8:	4613      	mov	r3, r2
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	4413      	add	r3, r2
 80023ee:	3b1e      	subs	r3, #30
 80023f0:	051b      	lsls	r3, r3, #20
 80023f2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80023f6:	e01d      	b.n	8002434 <HAL_ADC_ConfigChannel+0x6d0>
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	fa93 f3a3 	rbit	r3, r3
 8002404:	60fb      	str	r3, [r7, #12]
  return result;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d103      	bne.n	8002418 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002410:	2320      	movs	r3, #32
 8002412:	e005      	b.n	8002420 <HAL_ADC_ConfigChannel+0x6bc>
 8002414:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	fab3 f383 	clz	r3, r3
 800241e:	b2db      	uxtb	r3, r3
 8002420:	3301      	adds	r3, #1
 8002422:	f003 021f 	and.w	r2, r3, #31
 8002426:	4613      	mov	r3, r2
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	4413      	add	r3, r2
 800242c:	3b1e      	subs	r3, #30
 800242e:	051b      	lsls	r3, r3, #20
 8002430:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002434:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002436:	683a      	ldr	r2, [r7, #0]
 8002438:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800243a:	4619      	mov	r1, r3
 800243c:	f7ff f80b 	bl	8001456 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	4b3d      	ldr	r3, [pc, #244]	@ (800253c <HAL_ADC_ConfigChannel+0x7d8>)
 8002446:	4013      	ands	r3, r2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d06c      	beq.n	8002526 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800244c:	483c      	ldr	r0, [pc, #240]	@ (8002540 <HAL_ADC_ConfigChannel+0x7dc>)
 800244e:	f7fe ff4d 	bl	80012ec <LL_ADC_GetCommonPathInternalCh>
 8002452:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a3a      	ldr	r2, [pc, #232]	@ (8002544 <HAL_ADC_ConfigChannel+0x7e0>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d127      	bne.n	80024b0 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002460:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002464:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d121      	bne.n	80024b0 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a35      	ldr	r2, [pc, #212]	@ (8002548 <HAL_ADC_ConfigChannel+0x7e4>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d157      	bne.n	8002526 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002476:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800247a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800247e:	4619      	mov	r1, r3
 8002480:	482f      	ldr	r0, [pc, #188]	@ (8002540 <HAL_ADC_ConfigChannel+0x7dc>)
 8002482:	f7fe ff20 	bl	80012c6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002486:	4b31      	ldr	r3, [pc, #196]	@ (800254c <HAL_ADC_ConfigChannel+0x7e8>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	099b      	lsrs	r3, r3, #6
 800248c:	4a30      	ldr	r2, [pc, #192]	@ (8002550 <HAL_ADC_ConfigChannel+0x7ec>)
 800248e:	fba2 2303 	umull	r2, r3, r2, r3
 8002492:	099b      	lsrs	r3, r3, #6
 8002494:	1c5a      	adds	r2, r3, #1
 8002496:	4613      	mov	r3, r2
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	4413      	add	r3, r2
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80024a0:	e002      	b.n	80024a8 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	3b01      	subs	r3, #1
 80024a6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1f9      	bne.n	80024a2 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024ae:	e03a      	b.n	8002526 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a27      	ldr	r2, [pc, #156]	@ (8002554 <HAL_ADC_ConfigChannel+0x7f0>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d113      	bne.n	80024e2 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80024ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80024be:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10d      	bne.n	80024e2 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a1f      	ldr	r2, [pc, #124]	@ (8002548 <HAL_ADC_ConfigChannel+0x7e4>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d12a      	bne.n	8002526 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80024d4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024d8:	4619      	mov	r1, r3
 80024da:	4819      	ldr	r0, [pc, #100]	@ (8002540 <HAL_ADC_ConfigChannel+0x7dc>)
 80024dc:	f7fe fef3 	bl	80012c6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024e0:	e021      	b.n	8002526 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a1c      	ldr	r2, [pc, #112]	@ (8002558 <HAL_ADC_ConfigChannel+0x7f4>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d11c      	bne.n	8002526 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80024ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80024f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d116      	bne.n	8002526 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a12      	ldr	r2, [pc, #72]	@ (8002548 <HAL_ADC_ConfigChannel+0x7e4>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d111      	bne.n	8002526 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002502:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002506:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800250a:	4619      	mov	r1, r3
 800250c:	480c      	ldr	r0, [pc, #48]	@ (8002540 <HAL_ADC_ConfigChannel+0x7dc>)
 800250e:	f7fe feda 	bl	80012c6 <LL_ADC_SetCommonPathInternalCh>
 8002512:	e008      	b.n	8002526 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002518:	f043 0220 	orr.w	r2, r3, #32
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800252e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002532:	4618      	mov	r0, r3
 8002534:	37d8      	adds	r7, #216	@ 0xd8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	80080000 	.word	0x80080000
 8002540:	50040300 	.word	0x50040300
 8002544:	c7520000 	.word	0xc7520000
 8002548:	50040000 	.word	0x50040000
 800254c:	20000000 	.word	0x20000000
 8002550:	053e2d63 	.word	0x053e2d63
 8002554:	cb840000 	.word	0xcb840000
 8002558:	80000001 	.word	0x80000001

0800255c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b088      	sub	sp, #32
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002566:	2300      	movs	r3, #0
 8002568:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4618      	mov	r0, r3
 8002574:	f7ff f89e 	bl	80016b4 <LL_ADC_REG_IsConversionOngoing>
 8002578:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4618      	mov	r0, r3
 8002580:	f7ff f8bf 	bl	8001702 <LL_ADC_INJ_IsConversionOngoing>
 8002584:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d103      	bne.n	8002594 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2b00      	cmp	r3, #0
 8002590:	f000 8098 	beq.w	80026c4 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d02a      	beq.n	80025f8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	7e5b      	ldrb	r3, [r3, #25]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d126      	bne.n	80025f8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	7e1b      	ldrb	r3, [r3, #24]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d122      	bne.n	80025f8 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80025b2:	2301      	movs	r3, #1
 80025b4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80025b6:	e014      	b.n	80025e2 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	4a45      	ldr	r2, [pc, #276]	@ (80026d0 <ADC_ConversionStop+0x174>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d90d      	bls.n	80025dc <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025c4:	f043 0210 	orr.w	r2, r3, #16
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025d0:	f043 0201 	orr.w	r2, r3, #1
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e074      	b.n	80026c6 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	3301      	adds	r3, #1
 80025e0:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025ec:	2b40      	cmp	r3, #64	@ 0x40
 80025ee:	d1e3      	bne.n	80025b8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2240      	movs	r2, #64	@ 0x40
 80025f6:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d014      	beq.n	8002628 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f7ff f856 	bl	80016b4 <LL_ADC_REG_IsConversionOngoing>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d00c      	beq.n	8002628 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4618      	mov	r0, r3
 8002614:	f7ff f813 	bl	800163e <LL_ADC_IsDisableOngoing>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d104      	bne.n	8002628 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4618      	mov	r0, r3
 8002624:	f7ff f832 	bl	800168c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d014      	beq.n	8002658 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4618      	mov	r0, r3
 8002634:	f7ff f865 	bl	8001702 <LL_ADC_INJ_IsConversionOngoing>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00c      	beq.n	8002658 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4618      	mov	r0, r3
 8002644:	f7fe fffb 	bl	800163e <LL_ADC_IsDisableOngoing>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d104      	bne.n	8002658 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4618      	mov	r0, r3
 8002654:	f7ff f841 	bl	80016da <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	2b02      	cmp	r3, #2
 800265c:	d005      	beq.n	800266a <ADC_ConversionStop+0x10e>
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	2b03      	cmp	r3, #3
 8002662:	d105      	bne.n	8002670 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002664:	230c      	movs	r3, #12
 8002666:	617b      	str	r3, [r7, #20]
        break;
 8002668:	e005      	b.n	8002676 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800266a:	2308      	movs	r3, #8
 800266c:	617b      	str	r3, [r7, #20]
        break;
 800266e:	e002      	b.n	8002676 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002670:	2304      	movs	r3, #4
 8002672:	617b      	str	r3, [r7, #20]
        break;
 8002674:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002676:	f7fe fde3 	bl	8001240 <HAL_GetTick>
 800267a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800267c:	e01b      	b.n	80026b6 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800267e:	f7fe fddf 	bl	8001240 <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	2b05      	cmp	r3, #5
 800268a:	d914      	bls.n	80026b6 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	689a      	ldr	r2, [r3, #8]
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	4013      	ands	r3, r2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00d      	beq.n	80026b6 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800269e:	f043 0210 	orr.w	r2, r3, #16
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026aa:	f043 0201 	orr.w	r2, r3, #1
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e007      	b.n	80026c6 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	4013      	ands	r3, r2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d1dc      	bne.n	800267e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3720      	adds	r7, #32
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	a33fffff 	.word	0xa33fffff

080026d4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80026dc:	2300      	movs	r3, #0
 80026de:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7fe ff97 	bl	8001618 <LL_ADC_IsEnabled>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d169      	bne.n	80027c4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	689a      	ldr	r2, [r3, #8]
 80026f6:	4b36      	ldr	r3, [pc, #216]	@ (80027d0 <ADC_Enable+0xfc>)
 80026f8:	4013      	ands	r3, r2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d00d      	beq.n	800271a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002702:	f043 0210 	orr.w	r2, r3, #16
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800270e:	f043 0201 	orr.w	r2, r3, #1
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e055      	b.n	80027c6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4618      	mov	r0, r3
 8002720:	f7fe ff52 	bl	80015c8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002724:	482b      	ldr	r0, [pc, #172]	@ (80027d4 <ADC_Enable+0x100>)
 8002726:	f7fe fde1 	bl	80012ec <LL_ADC_GetCommonPathInternalCh>
 800272a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800272c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002730:	2b00      	cmp	r3, #0
 8002732:	d013      	beq.n	800275c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002734:	4b28      	ldr	r3, [pc, #160]	@ (80027d8 <ADC_Enable+0x104>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	099b      	lsrs	r3, r3, #6
 800273a:	4a28      	ldr	r2, [pc, #160]	@ (80027dc <ADC_Enable+0x108>)
 800273c:	fba2 2303 	umull	r2, r3, r2, r3
 8002740:	099b      	lsrs	r3, r3, #6
 8002742:	1c5a      	adds	r2, r3, #1
 8002744:	4613      	mov	r3, r2
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	4413      	add	r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800274e:	e002      	b.n	8002756 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	3b01      	subs	r3, #1
 8002754:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1f9      	bne.n	8002750 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800275c:	f7fe fd70 	bl	8001240 <HAL_GetTick>
 8002760:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002762:	e028      	b.n	80027b6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4618      	mov	r0, r3
 800276a:	f7fe ff55 	bl	8001618 <LL_ADC_IsEnabled>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d104      	bne.n	800277e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4618      	mov	r0, r3
 800277a:	f7fe ff25 	bl	80015c8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800277e:	f7fe fd5f 	bl	8001240 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d914      	bls.n	80027b6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	2b01      	cmp	r3, #1
 8002798:	d00d      	beq.n	80027b6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800279e:	f043 0210 	orr.w	r2, r3, #16
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027aa:	f043 0201 	orr.w	r2, r3, #1
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e007      	b.n	80027c6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0301 	and.w	r3, r3, #1
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d1cf      	bne.n	8002764 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3710      	adds	r7, #16
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	8000003f 	.word	0x8000003f
 80027d4:	50040300 	.word	0x50040300
 80027d8:	20000000 	.word	0x20000000
 80027dc:	053e2d63 	.word	0x053e2d63

080027e0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7fe ff26 	bl	800163e <LL_ADC_IsDisableOngoing>
 80027f2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7fe ff0d 	bl	8001618 <LL_ADC_IsEnabled>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d047      	beq.n	8002894 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d144      	bne.n	8002894 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f003 030d 	and.w	r3, r3, #13
 8002814:	2b01      	cmp	r3, #1
 8002816:	d10c      	bne.n	8002832 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4618      	mov	r0, r3
 800281e:	f7fe fee7 	bl	80015f0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2203      	movs	r2, #3
 8002828:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800282a:	f7fe fd09 	bl	8001240 <HAL_GetTick>
 800282e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002830:	e029      	b.n	8002886 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002836:	f043 0210 	orr.w	r2, r3, #16
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002842:	f043 0201 	orr.w	r2, r3, #1
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e023      	b.n	8002896 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800284e:	f7fe fcf7 	bl	8001240 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d914      	bls.n	8002886 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	2b00      	cmp	r3, #0
 8002868:	d00d      	beq.n	8002886 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800286e:	f043 0210 	orr.w	r2, r3, #16
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800287a:	f043 0201 	orr.w	r2, r3, #1
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e007      	b.n	8002896 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	2b00      	cmp	r3, #0
 8002892:	d1dc      	bne.n	800284e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <LL_ADC_IsEnabled>:
{
 800289e:	b480      	push	{r7}
 80028a0:	b083      	sub	sp, #12
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d101      	bne.n	80028b6 <LL_ADC_IsEnabled+0x18>
 80028b2:	2301      	movs	r3, #1
 80028b4:	e000      	b.n	80028b8 <LL_ADC_IsEnabled+0x1a>
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <LL_ADC_REG_IsConversionOngoing>:
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f003 0304 	and.w	r3, r3, #4
 80028d4:	2b04      	cmp	r3, #4
 80028d6:	d101      	bne.n	80028dc <LL_ADC_REG_IsConversionOngoing+0x18>
 80028d8:	2301      	movs	r3, #1
 80028da:	e000      	b.n	80028de <LL_ADC_REG_IsConversionOngoing+0x1a>
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
	...

080028ec <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80028ec:	b590      	push	{r4, r7, lr}
 80028ee:	b09f      	sub	sp, #124	@ 0x7c
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028f6:	2300      	movs	r3, #0
 80028f8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002902:	2b01      	cmp	r3, #1
 8002904:	d101      	bne.n	800290a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002906:	2302      	movs	r3, #2
 8002908:	e089      	b.n	8002a1e <HAL_ADCEx_MultiModeConfigChannel+0x132>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2201      	movs	r2, #1
 800290e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002912:	2300      	movs	r3, #0
 8002914:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002916:	2300      	movs	r3, #0
 8002918:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a42      	ldr	r2, [pc, #264]	@ (8002a28 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d102      	bne.n	800292a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002924:	4b41      	ldr	r3, [pc, #260]	@ (8002a2c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002926:	60bb      	str	r3, [r7, #8]
 8002928:	e001      	b.n	800292e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800292a:	2300      	movs	r3, #0
 800292c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d10b      	bne.n	800294c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002938:	f043 0220 	orr.w	r2, r3, #32
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e068      	b.n	8002a1e <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	4618      	mov	r0, r3
 8002950:	f7ff ffb8 	bl	80028c4 <LL_ADC_REG_IsConversionOngoing>
 8002954:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4618      	mov	r0, r3
 800295c:	f7ff ffb2 	bl	80028c4 <LL_ADC_REG_IsConversionOngoing>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d14a      	bne.n	80029fc <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002966:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002968:	2b00      	cmp	r3, #0
 800296a:	d147      	bne.n	80029fc <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800296c:	4b30      	ldr	r3, [pc, #192]	@ (8002a30 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800296e:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d027      	beq.n	80029c8 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002978:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	6859      	ldr	r1, [r3, #4]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800298a:	035b      	lsls	r3, r3, #13
 800298c:	430b      	orrs	r3, r1
 800298e:	431a      	orrs	r2, r3
 8002990:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002992:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002994:	4824      	ldr	r0, [pc, #144]	@ (8002a28 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002996:	f7ff ff82 	bl	800289e <LL_ADC_IsEnabled>
 800299a:	4604      	mov	r4, r0
 800299c:	4823      	ldr	r0, [pc, #140]	@ (8002a2c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800299e:	f7ff ff7e 	bl	800289e <LL_ADC_IsEnabled>
 80029a2:	4603      	mov	r3, r0
 80029a4:	4323      	orrs	r3, r4
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d132      	bne.n	8002a10 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80029aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80029b2:	f023 030f 	bic.w	r3, r3, #15
 80029b6:	683a      	ldr	r2, [r7, #0]
 80029b8:	6811      	ldr	r1, [r2, #0]
 80029ba:	683a      	ldr	r2, [r7, #0]
 80029bc:	6892      	ldr	r2, [r2, #8]
 80029be:	430a      	orrs	r2, r1
 80029c0:	431a      	orrs	r2, r3
 80029c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029c4:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80029c6:	e023      	b.n	8002a10 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80029c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80029d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029d2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029d4:	4814      	ldr	r0, [pc, #80]	@ (8002a28 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80029d6:	f7ff ff62 	bl	800289e <LL_ADC_IsEnabled>
 80029da:	4604      	mov	r4, r0
 80029dc:	4813      	ldr	r0, [pc, #76]	@ (8002a2c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80029de:	f7ff ff5e 	bl	800289e <LL_ADC_IsEnabled>
 80029e2:	4603      	mov	r3, r0
 80029e4:	4323      	orrs	r3, r4
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d112      	bne.n	8002a10 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80029ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80029f2:	f023 030f 	bic.w	r3, r3, #15
 80029f6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80029f8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80029fa:	e009      	b.n	8002a10 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a00:	f043 0220 	orr.w	r2, r3, #32
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002a0e:	e000      	b.n	8002a12 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002a10:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002a1a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	377c      	adds	r7, #124	@ 0x7c
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd90      	pop	{r4, r7, pc}
 8002a26:	bf00      	nop
 8002a28:	50040000 	.word	0x50040000
 8002a2c:	50040100 	.word	0x50040100
 8002a30:	50040300 	.word	0x50040300

08002a34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b085      	sub	sp, #20
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f003 0307 	and.w	r3, r3, #7
 8002a42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a44:	4b0c      	ldr	r3, [pc, #48]	@ (8002a78 <__NVIC_SetPriorityGrouping+0x44>)
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a4a:	68ba      	ldr	r2, [r7, #8]
 8002a4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a50:	4013      	ands	r3, r2
 8002a52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a66:	4a04      	ldr	r2, [pc, #16]	@ (8002a78 <__NVIC_SetPriorityGrouping+0x44>)
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	60d3      	str	r3, [r2, #12]
}
 8002a6c:	bf00      	nop
 8002a6e:	3714      	adds	r7, #20
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr
 8002a78:	e000ed00 	.word	0xe000ed00

08002a7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a80:	4b04      	ldr	r3, [pc, #16]	@ (8002a94 <__NVIC_GetPriorityGrouping+0x18>)
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	0a1b      	lsrs	r3, r3, #8
 8002a86:	f003 0307 	and.w	r3, r3, #7
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr
 8002a94:	e000ed00 	.word	0xe000ed00

08002a98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	db0b      	blt.n	8002ac2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aaa:	79fb      	ldrb	r3, [r7, #7]
 8002aac:	f003 021f 	and.w	r2, r3, #31
 8002ab0:	4907      	ldr	r1, [pc, #28]	@ (8002ad0 <__NVIC_EnableIRQ+0x38>)
 8002ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab6:	095b      	lsrs	r3, r3, #5
 8002ab8:	2001      	movs	r0, #1
 8002aba:	fa00 f202 	lsl.w	r2, r0, r2
 8002abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ac2:	bf00      	nop
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	e000e100 	.word	0xe000e100

08002ad4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	4603      	mov	r3, r0
 8002adc:	6039      	str	r1, [r7, #0]
 8002ade:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	db0a      	blt.n	8002afe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	b2da      	uxtb	r2, r3
 8002aec:	490c      	ldr	r1, [pc, #48]	@ (8002b20 <__NVIC_SetPriority+0x4c>)
 8002aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af2:	0112      	lsls	r2, r2, #4
 8002af4:	b2d2      	uxtb	r2, r2
 8002af6:	440b      	add	r3, r1
 8002af8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002afc:	e00a      	b.n	8002b14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	b2da      	uxtb	r2, r3
 8002b02:	4908      	ldr	r1, [pc, #32]	@ (8002b24 <__NVIC_SetPriority+0x50>)
 8002b04:	79fb      	ldrb	r3, [r7, #7]
 8002b06:	f003 030f 	and.w	r3, r3, #15
 8002b0a:	3b04      	subs	r3, #4
 8002b0c:	0112      	lsls	r2, r2, #4
 8002b0e:	b2d2      	uxtb	r2, r2
 8002b10:	440b      	add	r3, r1
 8002b12:	761a      	strb	r2, [r3, #24]
}
 8002b14:	bf00      	nop
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr
 8002b20:	e000e100 	.word	0xe000e100
 8002b24:	e000ed00 	.word	0xe000ed00

08002b28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b089      	sub	sp, #36	@ 0x24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f003 0307 	and.w	r3, r3, #7
 8002b3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	f1c3 0307 	rsb	r3, r3, #7
 8002b42:	2b04      	cmp	r3, #4
 8002b44:	bf28      	it	cs
 8002b46:	2304      	movcs	r3, #4
 8002b48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	3304      	adds	r3, #4
 8002b4e:	2b06      	cmp	r3, #6
 8002b50:	d902      	bls.n	8002b58 <NVIC_EncodePriority+0x30>
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	3b03      	subs	r3, #3
 8002b56:	e000      	b.n	8002b5a <NVIC_EncodePriority+0x32>
 8002b58:	2300      	movs	r3, #0
 8002b5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b5c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	fa02 f303 	lsl.w	r3, r2, r3
 8002b66:	43da      	mvns	r2, r3
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	401a      	ands	r2, r3
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b70:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	fa01 f303 	lsl.w	r3, r1, r3
 8002b7a:	43d9      	mvns	r1, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b80:	4313      	orrs	r3, r2
         );
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3724      	adds	r7, #36	@ 0x24
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
	...

08002b90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ba0:	d301      	bcc.n	8002ba6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e00f      	b.n	8002bc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ba6:	4a0a      	ldr	r2, [pc, #40]	@ (8002bd0 <SysTick_Config+0x40>)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	3b01      	subs	r3, #1
 8002bac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bae:	210f      	movs	r1, #15
 8002bb0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002bb4:	f7ff ff8e 	bl	8002ad4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bb8:	4b05      	ldr	r3, [pc, #20]	@ (8002bd0 <SysTick_Config+0x40>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bbe:	4b04      	ldr	r3, [pc, #16]	@ (8002bd0 <SysTick_Config+0x40>)
 8002bc0:	2207      	movs	r2, #7
 8002bc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3708      	adds	r7, #8
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	e000e010 	.word	0xe000e010

08002bd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f7ff ff29 	bl	8002a34 <__NVIC_SetPriorityGrouping>
}
 8002be2:	bf00      	nop
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b086      	sub	sp, #24
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	60b9      	str	r1, [r7, #8]
 8002bf4:	607a      	str	r2, [r7, #4]
 8002bf6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002bfc:	f7ff ff3e 	bl	8002a7c <__NVIC_GetPriorityGrouping>
 8002c00:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	68b9      	ldr	r1, [r7, #8]
 8002c06:	6978      	ldr	r0, [r7, #20]
 8002c08:	f7ff ff8e 	bl	8002b28 <NVIC_EncodePriority>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c12:	4611      	mov	r1, r2
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7ff ff5d 	bl	8002ad4 <__NVIC_SetPriority>
}
 8002c1a:	bf00      	nop
 8002c1c:	3718      	adds	r7, #24
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b082      	sub	sp, #8
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	4603      	mov	r3, r0
 8002c2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7ff ff31 	bl	8002a98 <__NVIC_EnableIRQ>
}
 8002c36:	bf00      	nop
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b082      	sub	sp, #8
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f7ff ffa2 	bl	8002b90 <SysTick_Config>
 8002c4c:	4603      	mov	r3, r0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
	...

08002c58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b087      	sub	sp, #28
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c62:	2300      	movs	r3, #0
 8002c64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c66:	e14e      	b.n	8002f06 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	2101      	movs	r1, #1
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	fa01 f303 	lsl.w	r3, r1, r3
 8002c74:	4013      	ands	r3, r2
 8002c76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	f000 8140 	beq.w	8002f00 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f003 0303 	and.w	r3, r3, #3
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d005      	beq.n	8002c98 <HAL_GPIO_Init+0x40>
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f003 0303 	and.w	r3, r3, #3
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d130      	bne.n	8002cfa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	2203      	movs	r2, #3
 8002ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca8:	43db      	mvns	r3, r3
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	4013      	ands	r3, r2
 8002cae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	68da      	ldr	r2, [r3, #12]
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	693a      	ldr	r2, [r7, #16]
 8002cc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002cce:	2201      	movs	r2, #1
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd6:	43db      	mvns	r3, r3
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	4013      	ands	r3, r2
 8002cdc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	091b      	lsrs	r3, r3, #4
 8002ce4:	f003 0201 	and.w	r2, r3, #1
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	fa02 f303 	lsl.w	r3, r2, r3
 8002cee:	693a      	ldr	r2, [r7, #16]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	693a      	ldr	r2, [r7, #16]
 8002cf8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f003 0303 	and.w	r3, r3, #3
 8002d02:	2b03      	cmp	r3, #3
 8002d04:	d017      	beq.n	8002d36 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	2203      	movs	r2, #3
 8002d12:	fa02 f303 	lsl.w	r3, r2, r3
 8002d16:	43db      	mvns	r3, r3
 8002d18:	693a      	ldr	r2, [r7, #16]
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	689a      	ldr	r2, [r3, #8]
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2a:	693a      	ldr	r2, [r7, #16]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f003 0303 	and.w	r3, r3, #3
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d123      	bne.n	8002d8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	08da      	lsrs	r2, r3, #3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	3208      	adds	r2, #8
 8002d4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	f003 0307 	and.w	r3, r3, #7
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	220f      	movs	r2, #15
 8002d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5e:	43db      	mvns	r3, r3
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	4013      	ands	r3, r2
 8002d64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	691a      	ldr	r2, [r3, #16]
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	f003 0307 	and.w	r3, r3, #7
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	fa02 f303 	lsl.w	r3, r2, r3
 8002d76:	693a      	ldr	r2, [r7, #16]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	08da      	lsrs	r2, r3, #3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	3208      	adds	r2, #8
 8002d84:	6939      	ldr	r1, [r7, #16]
 8002d86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	005b      	lsls	r3, r3, #1
 8002d94:	2203      	movs	r2, #3
 8002d96:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9a:	43db      	mvns	r3, r3
 8002d9c:	693a      	ldr	r2, [r7, #16]
 8002d9e:	4013      	ands	r3, r2
 8002da0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f003 0203 	and.w	r2, r3, #3
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	005b      	lsls	r3, r3, #1
 8002dae:	fa02 f303 	lsl.w	r3, r2, r3
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	693a      	ldr	r2, [r7, #16]
 8002dbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	f000 809a 	beq.w	8002f00 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dcc:	4b55      	ldr	r3, [pc, #340]	@ (8002f24 <HAL_GPIO_Init+0x2cc>)
 8002dce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dd0:	4a54      	ldr	r2, [pc, #336]	@ (8002f24 <HAL_GPIO_Init+0x2cc>)
 8002dd2:	f043 0301 	orr.w	r3, r3, #1
 8002dd6:	6613      	str	r3, [r2, #96]	@ 0x60
 8002dd8:	4b52      	ldr	r3, [pc, #328]	@ (8002f24 <HAL_GPIO_Init+0x2cc>)
 8002dda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ddc:	f003 0301 	and.w	r3, r3, #1
 8002de0:	60bb      	str	r3, [r7, #8]
 8002de2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002de4:	4a50      	ldr	r2, [pc, #320]	@ (8002f28 <HAL_GPIO_Init+0x2d0>)
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	089b      	lsrs	r3, r3, #2
 8002dea:	3302      	adds	r3, #2
 8002dec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002df0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	f003 0303 	and.w	r3, r3, #3
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	220f      	movs	r2, #15
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	43db      	mvns	r3, r3
 8002e02:	693a      	ldr	r2, [r7, #16]
 8002e04:	4013      	ands	r3, r2
 8002e06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002e0e:	d013      	beq.n	8002e38 <HAL_GPIO_Init+0x1e0>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a46      	ldr	r2, [pc, #280]	@ (8002f2c <HAL_GPIO_Init+0x2d4>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d00d      	beq.n	8002e34 <HAL_GPIO_Init+0x1dc>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4a45      	ldr	r2, [pc, #276]	@ (8002f30 <HAL_GPIO_Init+0x2d8>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d007      	beq.n	8002e30 <HAL_GPIO_Init+0x1d8>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a44      	ldr	r2, [pc, #272]	@ (8002f34 <HAL_GPIO_Init+0x2dc>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d101      	bne.n	8002e2c <HAL_GPIO_Init+0x1d4>
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e006      	b.n	8002e3a <HAL_GPIO_Init+0x1e2>
 8002e2c:	2307      	movs	r3, #7
 8002e2e:	e004      	b.n	8002e3a <HAL_GPIO_Init+0x1e2>
 8002e30:	2302      	movs	r3, #2
 8002e32:	e002      	b.n	8002e3a <HAL_GPIO_Init+0x1e2>
 8002e34:	2301      	movs	r3, #1
 8002e36:	e000      	b.n	8002e3a <HAL_GPIO_Init+0x1e2>
 8002e38:	2300      	movs	r3, #0
 8002e3a:	697a      	ldr	r2, [r7, #20]
 8002e3c:	f002 0203 	and.w	r2, r2, #3
 8002e40:	0092      	lsls	r2, r2, #2
 8002e42:	4093      	lsls	r3, r2
 8002e44:	693a      	ldr	r2, [r7, #16]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e4a:	4937      	ldr	r1, [pc, #220]	@ (8002f28 <HAL_GPIO_Init+0x2d0>)
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	089b      	lsrs	r3, r3, #2
 8002e50:	3302      	adds	r3, #2
 8002e52:	693a      	ldr	r2, [r7, #16]
 8002e54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e58:	4b37      	ldr	r3, [pc, #220]	@ (8002f38 <HAL_GPIO_Init+0x2e0>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	43db      	mvns	r3, r3
 8002e62:	693a      	ldr	r2, [r7, #16]
 8002e64:	4013      	ands	r3, r2
 8002e66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d003      	beq.n	8002e7c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002e74:	693a      	ldr	r2, [r7, #16]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e7c:	4a2e      	ldr	r2, [pc, #184]	@ (8002f38 <HAL_GPIO_Init+0x2e0>)
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002e82:	4b2d      	ldr	r3, [pc, #180]	@ (8002f38 <HAL_GPIO_Init+0x2e0>)
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	43db      	mvns	r3, r3
 8002e8c:	693a      	ldr	r2, [r7, #16]
 8002e8e:	4013      	ands	r3, r2
 8002e90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d003      	beq.n	8002ea6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002e9e:	693a      	ldr	r2, [r7, #16]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ea6:	4a24      	ldr	r2, [pc, #144]	@ (8002f38 <HAL_GPIO_Init+0x2e0>)
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002eac:	4b22      	ldr	r3, [pc, #136]	@ (8002f38 <HAL_GPIO_Init+0x2e0>)
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	43db      	mvns	r3, r3
 8002eb6:	693a      	ldr	r2, [r7, #16]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d003      	beq.n	8002ed0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ed0:	4a19      	ldr	r2, [pc, #100]	@ (8002f38 <HAL_GPIO_Init+0x2e0>)
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002ed6:	4b18      	ldr	r3, [pc, #96]	@ (8002f38 <HAL_GPIO_Init+0x2e0>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	43db      	mvns	r3, r3
 8002ee0:	693a      	ldr	r2, [r7, #16]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d003      	beq.n	8002efa <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002efa:	4a0f      	ldr	r2, [pc, #60]	@ (8002f38 <HAL_GPIO_Init+0x2e0>)
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	3301      	adds	r3, #1
 8002f04:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	f47f aea9 	bne.w	8002c68 <HAL_GPIO_Init+0x10>
  }
}
 8002f16:	bf00      	nop
 8002f18:	bf00      	nop
 8002f1a:	371c      	adds	r7, #28
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr
 8002f24:	40021000 	.word	0x40021000
 8002f28:	40010000 	.word	0x40010000
 8002f2c:	48000400 	.word	0x48000400
 8002f30:	48000800 	.word	0x48000800
 8002f34:	48000c00 	.word	0x48000c00
 8002f38:	40010400 	.word	0x40010400

08002f3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	460b      	mov	r3, r1
 8002f46:	807b      	strh	r3, [r7, #2]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f4c:	787b      	ldrb	r3, [r7, #1]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d003      	beq.n	8002f5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f52:	887a      	ldrh	r2, [r7, #2]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f58:	e002      	b.n	8002f60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f5a:	887a      	ldrh	r2, [r7, #2]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	4603      	mov	r3, r0
 8002f74:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002f76:	4b08      	ldr	r3, [pc, #32]	@ (8002f98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f78:	695a      	ldr	r2, [r3, #20]
 8002f7a:	88fb      	ldrh	r3, [r7, #6]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d006      	beq.n	8002f90 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f82:	4a05      	ldr	r2, [pc, #20]	@ (8002f98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f84:	88fb      	ldrh	r3, [r7, #6]
 8002f86:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f88:	88fb      	ldrh	r3, [r7, #6]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7fd fe2c 	bl	8000be8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f90:	bf00      	nop
 8002f92:	3708      	adds	r7, #8
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	40010400 	.word	0x40010400

08002f9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d101      	bne.n	8002fae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e08d      	b.n	80030ca <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d106      	bne.n	8002fc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f7fd ff3e 	bl	8000e44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2224      	movs	r2, #36	@ 0x24
 8002fcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f022 0201 	bic.w	r2, r2, #1
 8002fde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002fec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689a      	ldr	r2, [r3, #8]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ffc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	2b01      	cmp	r3, #1
 8003004:	d107      	bne.n	8003016 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	689a      	ldr	r2, [r3, #8]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003012:	609a      	str	r2, [r3, #8]
 8003014:	e006      	b.n	8003024 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	689a      	ldr	r2, [r3, #8]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003022:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	2b02      	cmp	r3, #2
 800302a:	d108      	bne.n	800303e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	685a      	ldr	r2, [r3, #4]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800303a:	605a      	str	r2, [r3, #4]
 800303c:	e007      	b.n	800304e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	685a      	ldr	r2, [r3, #4]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800304c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	6812      	ldr	r2, [r2, #0]
 8003058:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800305c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003060:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68da      	ldr	r2, [r3, #12]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003070:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	691a      	ldr	r2, [r3, #16]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	430a      	orrs	r2, r1
 800308a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	69d9      	ldr	r1, [r3, #28]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a1a      	ldr	r2, [r3, #32]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	430a      	orrs	r2, r1
 800309a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f042 0201 	orr.w	r2, r2, #1
 80030aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2220      	movs	r2, #32
 80030b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3708      	adds	r7, #8
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80030d2:	b480      	push	{r7}
 80030d4:	b083      	sub	sp, #12
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
 80030da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2b20      	cmp	r3, #32
 80030e6:	d138      	bne.n	800315a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d101      	bne.n	80030f6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80030f2:	2302      	movs	r3, #2
 80030f4:	e032      	b.n	800315c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2224      	movs	r2, #36	@ 0x24
 8003102:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f022 0201 	bic.w	r2, r2, #1
 8003114:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003124:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	6819      	ldr	r1, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	683a      	ldr	r2, [r7, #0]
 8003132:	430a      	orrs	r2, r1
 8003134:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f042 0201 	orr.w	r2, r2, #1
 8003144:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2220      	movs	r2, #32
 800314a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003156:	2300      	movs	r3, #0
 8003158:	e000      	b.n	800315c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800315a:	2302      	movs	r3, #2
  }
}
 800315c:	4618      	mov	r0, r3
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003168:	b480      	push	{r7}
 800316a:	b085      	sub	sp, #20
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b20      	cmp	r3, #32
 800317c:	d139      	bne.n	80031f2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003184:	2b01      	cmp	r3, #1
 8003186:	d101      	bne.n	800318c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003188:	2302      	movs	r3, #2
 800318a:	e033      	b.n	80031f4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2224      	movs	r2, #36	@ 0x24
 8003198:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f022 0201 	bic.w	r2, r2, #1
 80031aa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80031ba:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	021b      	lsls	r3, r3, #8
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68fa      	ldr	r2, [r7, #12]
 80031cc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f042 0201 	orr.w	r2, r2, #1
 80031dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2220      	movs	r2, #32
 80031e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80031ee:	2300      	movs	r3, #0
 80031f0:	e000      	b.n	80031f4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80031f2:	2302      	movs	r3, #2
  }
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3714      	adds	r7, #20
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003204:	4b04      	ldr	r3, [pc, #16]	@ (8003218 <HAL_PWREx_GetVoltageRange+0x18>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800320c:	4618      	mov	r0, r3
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	40007000 	.word	0x40007000

0800321c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800322a:	d130      	bne.n	800328e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800322c:	4b23      	ldr	r3, [pc, #140]	@ (80032bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003234:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003238:	d038      	beq.n	80032ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800323a:	4b20      	ldr	r3, [pc, #128]	@ (80032bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003242:	4a1e      	ldr	r2, [pc, #120]	@ (80032bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003244:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003248:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800324a:	4b1d      	ldr	r3, [pc, #116]	@ (80032c0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2232      	movs	r2, #50	@ 0x32
 8003250:	fb02 f303 	mul.w	r3, r2, r3
 8003254:	4a1b      	ldr	r2, [pc, #108]	@ (80032c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003256:	fba2 2303 	umull	r2, r3, r2, r3
 800325a:	0c9b      	lsrs	r3, r3, #18
 800325c:	3301      	adds	r3, #1
 800325e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003260:	e002      	b.n	8003268 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	3b01      	subs	r3, #1
 8003266:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003268:	4b14      	ldr	r3, [pc, #80]	@ (80032bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800326a:	695b      	ldr	r3, [r3, #20]
 800326c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003270:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003274:	d102      	bne.n	800327c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d1f2      	bne.n	8003262 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800327c:	4b0f      	ldr	r3, [pc, #60]	@ (80032bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800327e:	695b      	ldr	r3, [r3, #20]
 8003280:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003284:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003288:	d110      	bne.n	80032ac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e00f      	b.n	80032ae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800328e:	4b0b      	ldr	r3, [pc, #44]	@ (80032bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003296:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800329a:	d007      	beq.n	80032ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800329c:	4b07      	ldr	r3, [pc, #28]	@ (80032bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80032a4:	4a05      	ldr	r2, [pc, #20]	@ (80032bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80032aa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3714      	adds	r7, #20
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	40007000 	.word	0x40007000
 80032c0:	20000000 	.word	0x20000000
 80032c4:	431bde83 	.word	0x431bde83

080032c8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b08a      	sub	sp, #40	@ 0x28
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d102      	bne.n	80032dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	f000 bc4f 	b.w	8003b7a <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032dc:	4b97      	ldr	r3, [pc, #604]	@ (800353c <HAL_RCC_OscConfig+0x274>)
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f003 030c 	and.w	r3, r3, #12
 80032e4:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032e6:	4b95      	ldr	r3, [pc, #596]	@ (800353c <HAL_RCC_OscConfig+0x274>)
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	f003 0303 	and.w	r3, r3, #3
 80032ee:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0310 	and.w	r3, r3, #16
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f000 80e6 	beq.w	80034ca <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80032fe:	6a3b      	ldr	r3, [r7, #32]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d007      	beq.n	8003314 <HAL_RCC_OscConfig+0x4c>
 8003304:	6a3b      	ldr	r3, [r7, #32]
 8003306:	2b0c      	cmp	r3, #12
 8003308:	f040 808d 	bne.w	8003426 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	2b01      	cmp	r3, #1
 8003310:	f040 8089 	bne.w	8003426 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003314:	4b89      	ldr	r3, [pc, #548]	@ (800353c <HAL_RCC_OscConfig+0x274>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0302 	and.w	r3, r3, #2
 800331c:	2b00      	cmp	r3, #0
 800331e:	d006      	beq.n	800332e <HAL_RCC_OscConfig+0x66>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	69db      	ldr	r3, [r3, #28]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d102      	bne.n	800332e <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	f000 bc26 	b.w	8003b7a <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003332:	4b82      	ldr	r3, [pc, #520]	@ (800353c <HAL_RCC_OscConfig+0x274>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0308 	and.w	r3, r3, #8
 800333a:	2b00      	cmp	r3, #0
 800333c:	d004      	beq.n	8003348 <HAL_RCC_OscConfig+0x80>
 800333e:	4b7f      	ldr	r3, [pc, #508]	@ (800353c <HAL_RCC_OscConfig+0x274>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003346:	e005      	b.n	8003354 <HAL_RCC_OscConfig+0x8c>
 8003348:	4b7c      	ldr	r3, [pc, #496]	@ (800353c <HAL_RCC_OscConfig+0x274>)
 800334a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800334e:	091b      	lsrs	r3, r3, #4
 8003350:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003354:	4293      	cmp	r3, r2
 8003356:	d224      	bcs.n	80033a2 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800335c:	4618      	mov	r0, r3
 800335e:	f000 fdd9 	bl	8003f14 <RCC_SetFlashLatencyFromMSIRange>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d002      	beq.n	800336e <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	f000 bc06 	b.w	8003b7a <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800336e:	4b73      	ldr	r3, [pc, #460]	@ (800353c <HAL_RCC_OscConfig+0x274>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a72      	ldr	r2, [pc, #456]	@ (800353c <HAL_RCC_OscConfig+0x274>)
 8003374:	f043 0308 	orr.w	r3, r3, #8
 8003378:	6013      	str	r3, [r2, #0]
 800337a:	4b70      	ldr	r3, [pc, #448]	@ (800353c <HAL_RCC_OscConfig+0x274>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003386:	496d      	ldr	r1, [pc, #436]	@ (800353c <HAL_RCC_OscConfig+0x274>)
 8003388:	4313      	orrs	r3, r2
 800338a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800338c:	4b6b      	ldr	r3, [pc, #428]	@ (800353c <HAL_RCC_OscConfig+0x274>)
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a1b      	ldr	r3, [r3, #32]
 8003398:	021b      	lsls	r3, r3, #8
 800339a:	4968      	ldr	r1, [pc, #416]	@ (800353c <HAL_RCC_OscConfig+0x274>)
 800339c:	4313      	orrs	r3, r2
 800339e:	604b      	str	r3, [r1, #4]
 80033a0:	e025      	b.n	80033ee <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033a2:	4b66      	ldr	r3, [pc, #408]	@ (800353c <HAL_RCC_OscConfig+0x274>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a65      	ldr	r2, [pc, #404]	@ (800353c <HAL_RCC_OscConfig+0x274>)
 80033a8:	f043 0308 	orr.w	r3, r3, #8
 80033ac:	6013      	str	r3, [r2, #0]
 80033ae:	4b63      	ldr	r3, [pc, #396]	@ (800353c <HAL_RCC_OscConfig+0x274>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ba:	4960      	ldr	r1, [pc, #384]	@ (800353c <HAL_RCC_OscConfig+0x274>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033c0:	4b5e      	ldr	r3, [pc, #376]	@ (800353c <HAL_RCC_OscConfig+0x274>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	021b      	lsls	r3, r3, #8
 80033ce:	495b      	ldr	r1, [pc, #364]	@ (800353c <HAL_RCC_OscConfig+0x274>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033d4:	6a3b      	ldr	r3, [r7, #32]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d109      	bne.n	80033ee <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033de:	4618      	mov	r0, r3
 80033e0:	f000 fd98 	bl	8003f14 <RCC_SetFlashLatencyFromMSIRange>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e3c5      	b.n	8003b7a <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033ee:	f000 fccd 	bl	8003d8c <HAL_RCC_GetSysClockFreq>
 80033f2:	4602      	mov	r2, r0
 80033f4:	4b51      	ldr	r3, [pc, #324]	@ (800353c <HAL_RCC_OscConfig+0x274>)
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	091b      	lsrs	r3, r3, #4
 80033fa:	f003 030f 	and.w	r3, r3, #15
 80033fe:	4950      	ldr	r1, [pc, #320]	@ (8003540 <HAL_RCC_OscConfig+0x278>)
 8003400:	5ccb      	ldrb	r3, [r1, r3]
 8003402:	f003 031f 	and.w	r3, r3, #31
 8003406:	fa22 f303 	lsr.w	r3, r2, r3
 800340a:	4a4e      	ldr	r2, [pc, #312]	@ (8003544 <HAL_RCC_OscConfig+0x27c>)
 800340c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800340e:	4b4e      	ldr	r3, [pc, #312]	@ (8003548 <HAL_RCC_OscConfig+0x280>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4618      	mov	r0, r3
 8003414:	f7fd fec4 	bl	80011a0 <HAL_InitTick>
 8003418:	4603      	mov	r3, r0
 800341a:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 800341c:	7dfb      	ldrb	r3, [r7, #23]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d052      	beq.n	80034c8 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8003422:	7dfb      	ldrb	r3, [r7, #23]
 8003424:	e3a9      	b.n	8003b7a <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	69db      	ldr	r3, [r3, #28]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d032      	beq.n	8003494 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800342e:	4b43      	ldr	r3, [pc, #268]	@ (800353c <HAL_RCC_OscConfig+0x274>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a42      	ldr	r2, [pc, #264]	@ (800353c <HAL_RCC_OscConfig+0x274>)
 8003434:	f043 0301 	orr.w	r3, r3, #1
 8003438:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800343a:	f7fd ff01 	bl	8001240 <HAL_GetTick>
 800343e:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003440:	e008      	b.n	8003454 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003442:	f7fd fefd 	bl	8001240 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d901      	bls.n	8003454 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e392      	b.n	8003b7a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003454:	4b39      	ldr	r3, [pc, #228]	@ (800353c <HAL_RCC_OscConfig+0x274>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0302 	and.w	r3, r3, #2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d0f0      	beq.n	8003442 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003460:	4b36      	ldr	r3, [pc, #216]	@ (800353c <HAL_RCC_OscConfig+0x274>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a35      	ldr	r2, [pc, #212]	@ (800353c <HAL_RCC_OscConfig+0x274>)
 8003466:	f043 0308 	orr.w	r3, r3, #8
 800346a:	6013      	str	r3, [r2, #0]
 800346c:	4b33      	ldr	r3, [pc, #204]	@ (800353c <HAL_RCC_OscConfig+0x274>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003478:	4930      	ldr	r1, [pc, #192]	@ (800353c <HAL_RCC_OscConfig+0x274>)
 800347a:	4313      	orrs	r3, r2
 800347c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800347e:	4b2f      	ldr	r3, [pc, #188]	@ (800353c <HAL_RCC_OscConfig+0x274>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	021b      	lsls	r3, r3, #8
 800348c:	492b      	ldr	r1, [pc, #172]	@ (800353c <HAL_RCC_OscConfig+0x274>)
 800348e:	4313      	orrs	r3, r2
 8003490:	604b      	str	r3, [r1, #4]
 8003492:	e01a      	b.n	80034ca <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003494:	4b29      	ldr	r3, [pc, #164]	@ (800353c <HAL_RCC_OscConfig+0x274>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a28      	ldr	r2, [pc, #160]	@ (800353c <HAL_RCC_OscConfig+0x274>)
 800349a:	f023 0301 	bic.w	r3, r3, #1
 800349e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034a0:	f7fd fece 	bl	8001240 <HAL_GetTick>
 80034a4:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80034a6:	e008      	b.n	80034ba <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034a8:	f7fd feca 	bl	8001240 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e35f      	b.n	8003b7a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80034ba:	4b20      	ldr	r3, [pc, #128]	@ (800353c <HAL_RCC_OscConfig+0x274>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1f0      	bne.n	80034a8 <HAL_RCC_OscConfig+0x1e0>
 80034c6:	e000      	b.n	80034ca <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80034c8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d073      	beq.n	80035be <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80034d6:	6a3b      	ldr	r3, [r7, #32]
 80034d8:	2b08      	cmp	r3, #8
 80034da:	d005      	beq.n	80034e8 <HAL_RCC_OscConfig+0x220>
 80034dc:	6a3b      	ldr	r3, [r7, #32]
 80034de:	2b0c      	cmp	r3, #12
 80034e0:	d10e      	bne.n	8003500 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	2b03      	cmp	r3, #3
 80034e6:	d10b      	bne.n	8003500 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034e8:	4b14      	ldr	r3, [pc, #80]	@ (800353c <HAL_RCC_OscConfig+0x274>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d063      	beq.n	80035bc <HAL_RCC_OscConfig+0x2f4>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d15f      	bne.n	80035bc <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e33c      	b.n	8003b7a <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003508:	d106      	bne.n	8003518 <HAL_RCC_OscConfig+0x250>
 800350a:	4b0c      	ldr	r3, [pc, #48]	@ (800353c <HAL_RCC_OscConfig+0x274>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a0b      	ldr	r2, [pc, #44]	@ (800353c <HAL_RCC_OscConfig+0x274>)
 8003510:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003514:	6013      	str	r3, [r2, #0]
 8003516:	e025      	b.n	8003564 <HAL_RCC_OscConfig+0x29c>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003520:	d114      	bne.n	800354c <HAL_RCC_OscConfig+0x284>
 8003522:	4b06      	ldr	r3, [pc, #24]	@ (800353c <HAL_RCC_OscConfig+0x274>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a05      	ldr	r2, [pc, #20]	@ (800353c <HAL_RCC_OscConfig+0x274>)
 8003528:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800352c:	6013      	str	r3, [r2, #0]
 800352e:	4b03      	ldr	r3, [pc, #12]	@ (800353c <HAL_RCC_OscConfig+0x274>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a02      	ldr	r2, [pc, #8]	@ (800353c <HAL_RCC_OscConfig+0x274>)
 8003534:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003538:	6013      	str	r3, [r2, #0]
 800353a:	e013      	b.n	8003564 <HAL_RCC_OscConfig+0x29c>
 800353c:	40021000 	.word	0x40021000
 8003540:	0800521c 	.word	0x0800521c
 8003544:	20000000 	.word	0x20000000
 8003548:	20000004 	.word	0x20000004
 800354c:	4b8f      	ldr	r3, [pc, #572]	@ (800378c <HAL_RCC_OscConfig+0x4c4>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a8e      	ldr	r2, [pc, #568]	@ (800378c <HAL_RCC_OscConfig+0x4c4>)
 8003552:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003556:	6013      	str	r3, [r2, #0]
 8003558:	4b8c      	ldr	r3, [pc, #560]	@ (800378c <HAL_RCC_OscConfig+0x4c4>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a8b      	ldr	r2, [pc, #556]	@ (800378c <HAL_RCC_OscConfig+0x4c4>)
 800355e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003562:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d013      	beq.n	8003594 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800356c:	f7fd fe68 	bl	8001240 <HAL_GetTick>
 8003570:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003572:	e008      	b.n	8003586 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003574:	f7fd fe64 	bl	8001240 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b64      	cmp	r3, #100	@ 0x64
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e2f9      	b.n	8003b7a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003586:	4b81      	ldr	r3, [pc, #516]	@ (800378c <HAL_RCC_OscConfig+0x4c4>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d0f0      	beq.n	8003574 <HAL_RCC_OscConfig+0x2ac>
 8003592:	e014      	b.n	80035be <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003594:	f7fd fe54 	bl	8001240 <HAL_GetTick>
 8003598:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800359a:	e008      	b.n	80035ae <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800359c:	f7fd fe50 	bl	8001240 <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	2b64      	cmp	r3, #100	@ 0x64
 80035a8:	d901      	bls.n	80035ae <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e2e5      	b.n	8003b7a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035ae:	4b77      	ldr	r3, [pc, #476]	@ (800378c <HAL_RCC_OscConfig+0x4c4>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1f0      	bne.n	800359c <HAL_RCC_OscConfig+0x2d4>
 80035ba:	e000      	b.n	80035be <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d060      	beq.n	800368c <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80035ca:	6a3b      	ldr	r3, [r7, #32]
 80035cc:	2b04      	cmp	r3, #4
 80035ce:	d005      	beq.n	80035dc <HAL_RCC_OscConfig+0x314>
 80035d0:	6a3b      	ldr	r3, [r7, #32]
 80035d2:	2b0c      	cmp	r3, #12
 80035d4:	d119      	bne.n	800360a <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d116      	bne.n	800360a <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035dc:	4b6b      	ldr	r3, [pc, #428]	@ (800378c <HAL_RCC_OscConfig+0x4c4>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d005      	beq.n	80035f4 <HAL_RCC_OscConfig+0x32c>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d101      	bne.n	80035f4 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e2c2      	b.n	8003b7a <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035f4:	4b65      	ldr	r3, [pc, #404]	@ (800378c <HAL_RCC_OscConfig+0x4c4>)
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	061b      	lsls	r3, r3, #24
 8003602:	4962      	ldr	r1, [pc, #392]	@ (800378c <HAL_RCC_OscConfig+0x4c4>)
 8003604:	4313      	orrs	r3, r2
 8003606:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003608:	e040      	b.n	800368c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d023      	beq.n	800365a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003612:	4b5e      	ldr	r3, [pc, #376]	@ (800378c <HAL_RCC_OscConfig+0x4c4>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a5d      	ldr	r2, [pc, #372]	@ (800378c <HAL_RCC_OscConfig+0x4c4>)
 8003618:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800361c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800361e:	f7fd fe0f 	bl	8001240 <HAL_GetTick>
 8003622:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003624:	e008      	b.n	8003638 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003626:	f7fd fe0b 	bl	8001240 <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	2b02      	cmp	r3, #2
 8003632:	d901      	bls.n	8003638 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e2a0      	b.n	8003b7a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003638:	4b54      	ldr	r3, [pc, #336]	@ (800378c <HAL_RCC_OscConfig+0x4c4>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003640:	2b00      	cmp	r3, #0
 8003642:	d0f0      	beq.n	8003626 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003644:	4b51      	ldr	r3, [pc, #324]	@ (800378c <HAL_RCC_OscConfig+0x4c4>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	061b      	lsls	r3, r3, #24
 8003652:	494e      	ldr	r1, [pc, #312]	@ (800378c <HAL_RCC_OscConfig+0x4c4>)
 8003654:	4313      	orrs	r3, r2
 8003656:	604b      	str	r3, [r1, #4]
 8003658:	e018      	b.n	800368c <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800365a:	4b4c      	ldr	r3, [pc, #304]	@ (800378c <HAL_RCC_OscConfig+0x4c4>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a4b      	ldr	r2, [pc, #300]	@ (800378c <HAL_RCC_OscConfig+0x4c4>)
 8003660:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003664:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003666:	f7fd fdeb 	bl	8001240 <HAL_GetTick>
 800366a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800366c:	e008      	b.n	8003680 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800366e:	f7fd fde7 	bl	8001240 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	2b02      	cmp	r3, #2
 800367a:	d901      	bls.n	8003680 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e27c      	b.n	8003b7a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003680:	4b42      	ldr	r3, [pc, #264]	@ (800378c <HAL_RCC_OscConfig+0x4c4>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1f0      	bne.n	800366e <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0308 	and.w	r3, r3, #8
 8003694:	2b00      	cmp	r3, #0
 8003696:	f000 8082 	beq.w	800379e <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d05f      	beq.n	8003762 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80036a2:	4b3a      	ldr	r3, [pc, #232]	@ (800378c <HAL_RCC_OscConfig+0x4c4>)
 80036a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036a8:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	699a      	ldr	r2, [r3, #24]
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	f003 0310 	and.w	r3, r3, #16
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d037      	beq.n	8003728 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d006      	beq.n	80036d0 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d101      	bne.n	80036d0 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e254      	b.n	8003b7a <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d01b      	beq.n	8003712 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 80036da:	4b2c      	ldr	r3, [pc, #176]	@ (800378c <HAL_RCC_OscConfig+0x4c4>)
 80036dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036e0:	4a2a      	ldr	r2, [pc, #168]	@ (800378c <HAL_RCC_OscConfig+0x4c4>)
 80036e2:	f023 0301 	bic.w	r3, r3, #1
 80036e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80036ea:	f7fd fda9 	bl	8001240 <HAL_GetTick>
 80036ee:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036f0:	e008      	b.n	8003704 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036f2:	f7fd fda5 	bl	8001240 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	2b11      	cmp	r3, #17
 80036fe:	d901      	bls.n	8003704 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e23a      	b.n	8003b7a <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003704:	4b21      	ldr	r3, [pc, #132]	@ (800378c <HAL_RCC_OscConfig+0x4c4>)
 8003706:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1ef      	bne.n	80036f2 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8003712:	4b1e      	ldr	r3, [pc, #120]	@ (800378c <HAL_RCC_OscConfig+0x4c4>)
 8003714:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003718:	f023 0210 	bic.w	r2, r3, #16
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	491a      	ldr	r1, [pc, #104]	@ (800378c <HAL_RCC_OscConfig+0x4c4>)
 8003722:	4313      	orrs	r3, r2
 8003724:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003728:	4b18      	ldr	r3, [pc, #96]	@ (800378c <HAL_RCC_OscConfig+0x4c4>)
 800372a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800372e:	4a17      	ldr	r2, [pc, #92]	@ (800378c <HAL_RCC_OscConfig+0x4c4>)
 8003730:	f043 0301 	orr.w	r3, r3, #1
 8003734:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003738:	f7fd fd82 	bl	8001240 <HAL_GetTick>
 800373c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800373e:	e008      	b.n	8003752 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003740:	f7fd fd7e 	bl	8001240 <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b11      	cmp	r3, #17
 800374c:	d901      	bls.n	8003752 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e213      	b.n	8003b7a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003752:	4b0e      	ldr	r3, [pc, #56]	@ (800378c <HAL_RCC_OscConfig+0x4c4>)
 8003754:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003758:	f003 0302 	and.w	r3, r3, #2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d0ef      	beq.n	8003740 <HAL_RCC_OscConfig+0x478>
 8003760:	e01d      	b.n	800379e <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003762:	4b0a      	ldr	r3, [pc, #40]	@ (800378c <HAL_RCC_OscConfig+0x4c4>)
 8003764:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003768:	4a08      	ldr	r2, [pc, #32]	@ (800378c <HAL_RCC_OscConfig+0x4c4>)
 800376a:	f023 0301 	bic.w	r3, r3, #1
 800376e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003772:	f7fd fd65 	bl	8001240 <HAL_GetTick>
 8003776:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003778:	e00a      	b.n	8003790 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800377a:	f7fd fd61 	bl	8001240 <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	2b11      	cmp	r3, #17
 8003786:	d903      	bls.n	8003790 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e1f6      	b.n	8003b7a <HAL_RCC_OscConfig+0x8b2>
 800378c:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003790:	4ba9      	ldr	r3, [pc, #676]	@ (8003a38 <HAL_RCC_OscConfig+0x770>)
 8003792:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d1ed      	bne.n	800377a <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0304 	and.w	r3, r3, #4
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	f000 80bd 	beq.w	8003926 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037ac:	2300      	movs	r3, #0
 80037ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80037b2:	4ba1      	ldr	r3, [pc, #644]	@ (8003a38 <HAL_RCC_OscConfig+0x770>)
 80037b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d10e      	bne.n	80037dc <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037be:	4b9e      	ldr	r3, [pc, #632]	@ (8003a38 <HAL_RCC_OscConfig+0x770>)
 80037c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037c2:	4a9d      	ldr	r2, [pc, #628]	@ (8003a38 <HAL_RCC_OscConfig+0x770>)
 80037c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80037ca:	4b9b      	ldr	r3, [pc, #620]	@ (8003a38 <HAL_RCC_OscConfig+0x770>)
 80037cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037d2:	60fb      	str	r3, [r7, #12]
 80037d4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80037d6:	2301      	movs	r3, #1
 80037d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037dc:	4b97      	ldr	r3, [pc, #604]	@ (8003a3c <HAL_RCC_OscConfig+0x774>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d118      	bne.n	800381a <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037e8:	4b94      	ldr	r3, [pc, #592]	@ (8003a3c <HAL_RCC_OscConfig+0x774>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a93      	ldr	r2, [pc, #588]	@ (8003a3c <HAL_RCC_OscConfig+0x774>)
 80037ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037f4:	f7fd fd24 	bl	8001240 <HAL_GetTick>
 80037f8:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037fa:	e008      	b.n	800380e <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037fc:	f7fd fd20 	bl	8001240 <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	2b02      	cmp	r3, #2
 8003808:	d901      	bls.n	800380e <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e1b5      	b.n	8003b7a <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800380e:	4b8b      	ldr	r3, [pc, #556]	@ (8003a3c <HAL_RCC_OscConfig+0x774>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003816:	2b00      	cmp	r3, #0
 8003818:	d0f0      	beq.n	80037fc <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f003 0301 	and.w	r3, r3, #1
 8003822:	2b00      	cmp	r3, #0
 8003824:	d02c      	beq.n	8003880 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8003826:	4b84      	ldr	r3, [pc, #528]	@ (8003a38 <HAL_RCC_OscConfig+0x770>)
 8003828:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800382c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003838:	497f      	ldr	r1, [pc, #508]	@ (8003a38 <HAL_RCC_OscConfig+0x770>)
 800383a:	4313      	orrs	r3, r2
 800383c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f003 0304 	and.w	r3, r3, #4
 8003848:	2b00      	cmp	r3, #0
 800384a:	d010      	beq.n	800386e <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800384c:	4b7a      	ldr	r3, [pc, #488]	@ (8003a38 <HAL_RCC_OscConfig+0x770>)
 800384e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003852:	4a79      	ldr	r2, [pc, #484]	@ (8003a38 <HAL_RCC_OscConfig+0x770>)
 8003854:	f043 0304 	orr.w	r3, r3, #4
 8003858:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800385c:	4b76      	ldr	r3, [pc, #472]	@ (8003a38 <HAL_RCC_OscConfig+0x770>)
 800385e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003862:	4a75      	ldr	r2, [pc, #468]	@ (8003a38 <HAL_RCC_OscConfig+0x770>)
 8003864:	f043 0301 	orr.w	r3, r3, #1
 8003868:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800386c:	e018      	b.n	80038a0 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800386e:	4b72      	ldr	r3, [pc, #456]	@ (8003a38 <HAL_RCC_OscConfig+0x770>)
 8003870:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003874:	4a70      	ldr	r2, [pc, #448]	@ (8003a38 <HAL_RCC_OscConfig+0x770>)
 8003876:	f043 0301 	orr.w	r3, r3, #1
 800387a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800387e:	e00f      	b.n	80038a0 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003880:	4b6d      	ldr	r3, [pc, #436]	@ (8003a38 <HAL_RCC_OscConfig+0x770>)
 8003882:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003886:	4a6c      	ldr	r2, [pc, #432]	@ (8003a38 <HAL_RCC_OscConfig+0x770>)
 8003888:	f023 0301 	bic.w	r3, r3, #1
 800388c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003890:	4b69      	ldr	r3, [pc, #420]	@ (8003a38 <HAL_RCC_OscConfig+0x770>)
 8003892:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003896:	4a68      	ldr	r2, [pc, #416]	@ (8003a38 <HAL_RCC_OscConfig+0x770>)
 8003898:	f023 0304 	bic.w	r3, r3, #4
 800389c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d016      	beq.n	80038d6 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038a8:	f7fd fcca 	bl	8001240 <HAL_GetTick>
 80038ac:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038ae:	e00a      	b.n	80038c6 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038b0:	f7fd fcc6 	bl	8001240 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038be:	4293      	cmp	r3, r2
 80038c0:	d901      	bls.n	80038c6 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e159      	b.n	8003b7a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038c6:	4b5c      	ldr	r3, [pc, #368]	@ (8003a38 <HAL_RCC_OscConfig+0x770>)
 80038c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038cc:	f003 0302 	and.w	r3, r3, #2
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d0ed      	beq.n	80038b0 <HAL_RCC_OscConfig+0x5e8>
 80038d4:	e01d      	b.n	8003912 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038d6:	f7fd fcb3 	bl	8001240 <HAL_GetTick>
 80038da:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038dc:	e00a      	b.n	80038f4 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038de:	f7fd fcaf 	bl	8001240 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d901      	bls.n	80038f4 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e142      	b.n	8003b7a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038f4:	4b50      	ldr	r3, [pc, #320]	@ (8003a38 <HAL_RCC_OscConfig+0x770>)
 80038f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038fa:	f003 0302 	and.w	r3, r3, #2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1ed      	bne.n	80038de <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8003902:	4b4d      	ldr	r3, [pc, #308]	@ (8003a38 <HAL_RCC_OscConfig+0x770>)
 8003904:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003908:	4a4b      	ldr	r2, [pc, #300]	@ (8003a38 <HAL_RCC_OscConfig+0x770>)
 800390a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800390e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003912:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003916:	2b01      	cmp	r3, #1
 8003918:	d105      	bne.n	8003926 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800391a:	4b47      	ldr	r3, [pc, #284]	@ (8003a38 <HAL_RCC_OscConfig+0x770>)
 800391c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800391e:	4a46      	ldr	r2, [pc, #280]	@ (8003a38 <HAL_RCC_OscConfig+0x770>)
 8003920:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003924:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0320 	and.w	r3, r3, #32
 800392e:	2b00      	cmp	r3, #0
 8003930:	d03c      	beq.n	80039ac <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003936:	2b00      	cmp	r3, #0
 8003938:	d01c      	beq.n	8003974 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800393a:	4b3f      	ldr	r3, [pc, #252]	@ (8003a38 <HAL_RCC_OscConfig+0x770>)
 800393c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003940:	4a3d      	ldr	r2, [pc, #244]	@ (8003a38 <HAL_RCC_OscConfig+0x770>)
 8003942:	f043 0301 	orr.w	r3, r3, #1
 8003946:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800394a:	f7fd fc79 	bl	8001240 <HAL_GetTick>
 800394e:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003950:	e008      	b.n	8003964 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003952:	f7fd fc75 	bl	8001240 <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	2b02      	cmp	r3, #2
 800395e:	d901      	bls.n	8003964 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e10a      	b.n	8003b7a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003964:	4b34      	ldr	r3, [pc, #208]	@ (8003a38 <HAL_RCC_OscConfig+0x770>)
 8003966:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d0ef      	beq.n	8003952 <HAL_RCC_OscConfig+0x68a>
 8003972:	e01b      	b.n	80039ac <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003974:	4b30      	ldr	r3, [pc, #192]	@ (8003a38 <HAL_RCC_OscConfig+0x770>)
 8003976:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800397a:	4a2f      	ldr	r2, [pc, #188]	@ (8003a38 <HAL_RCC_OscConfig+0x770>)
 800397c:	f023 0301 	bic.w	r3, r3, #1
 8003980:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003984:	f7fd fc5c 	bl	8001240 <HAL_GetTick>
 8003988:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800398a:	e008      	b.n	800399e <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800398c:	f7fd fc58 	bl	8001240 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b02      	cmp	r3, #2
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e0ed      	b.n	8003b7a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800399e:	4b26      	ldr	r3, [pc, #152]	@ (8003a38 <HAL_RCC_OscConfig+0x770>)
 80039a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80039a4:	f003 0302 	and.w	r3, r3, #2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d1ef      	bne.n	800398c <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	f000 80e1 	beq.w	8003b78 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	f040 80b5 	bne.w	8003b2a <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80039c0:	4b1d      	ldr	r3, [pc, #116]	@ (8003a38 <HAL_RCC_OscConfig+0x770>)
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	f003 0203 	and.w	r2, r3, #3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d124      	bne.n	8003a1e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039de:	3b01      	subs	r3, #1
 80039e0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d11b      	bne.n	8003a1e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039f0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d113      	bne.n	8003a1e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a00:	085b      	lsrs	r3, r3, #1
 8003a02:	3b01      	subs	r3, #1
 8003a04:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d109      	bne.n	8003a1e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a14:	085b      	lsrs	r3, r3, #1
 8003a16:	3b01      	subs	r3, #1
 8003a18:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d05f      	beq.n	8003ade <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a1e:	6a3b      	ldr	r3, [r7, #32]
 8003a20:	2b0c      	cmp	r3, #12
 8003a22:	d05a      	beq.n	8003ada <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003a24:	4b04      	ldr	r3, [pc, #16]	@ (8003a38 <HAL_RCC_OscConfig+0x770>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a03      	ldr	r2, [pc, #12]	@ (8003a38 <HAL_RCC_OscConfig+0x770>)
 8003a2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a2e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a30:	f7fd fc06 	bl	8001240 <HAL_GetTick>
 8003a34:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a36:	e00c      	b.n	8003a52 <HAL_RCC_OscConfig+0x78a>
 8003a38:	40021000 	.word	0x40021000
 8003a3c:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a40:	f7fd fbfe 	bl	8001240 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e093      	b.n	8003b7a <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a52:	4b4c      	ldr	r3, [pc, #304]	@ (8003b84 <HAL_RCC_OscConfig+0x8bc>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1f0      	bne.n	8003a40 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a5e:	4b49      	ldr	r3, [pc, #292]	@ (8003b84 <HAL_RCC_OscConfig+0x8bc>)
 8003a60:	68da      	ldr	r2, [r3, #12]
 8003a62:	4b49      	ldr	r3, [pc, #292]	@ (8003b88 <HAL_RCC_OscConfig+0x8c0>)
 8003a64:	4013      	ands	r3, r2
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003a6e:	3a01      	subs	r2, #1
 8003a70:	0112      	lsls	r2, r2, #4
 8003a72:	4311      	orrs	r1, r2
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003a78:	0212      	lsls	r2, r2, #8
 8003a7a:	4311      	orrs	r1, r2
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003a80:	0852      	lsrs	r2, r2, #1
 8003a82:	3a01      	subs	r2, #1
 8003a84:	0552      	lsls	r2, r2, #21
 8003a86:	4311      	orrs	r1, r2
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003a8c:	0852      	lsrs	r2, r2, #1
 8003a8e:	3a01      	subs	r2, #1
 8003a90:	0652      	lsls	r2, r2, #25
 8003a92:	430a      	orrs	r2, r1
 8003a94:	493b      	ldr	r1, [pc, #236]	@ (8003b84 <HAL_RCC_OscConfig+0x8bc>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003a9a:	4b3a      	ldr	r3, [pc, #232]	@ (8003b84 <HAL_RCC_OscConfig+0x8bc>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a39      	ldr	r2, [pc, #228]	@ (8003b84 <HAL_RCC_OscConfig+0x8bc>)
 8003aa0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003aa4:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003aa6:	4b37      	ldr	r3, [pc, #220]	@ (8003b84 <HAL_RCC_OscConfig+0x8bc>)
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	4a36      	ldr	r2, [pc, #216]	@ (8003b84 <HAL_RCC_OscConfig+0x8bc>)
 8003aac:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ab0:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ab2:	f7fd fbc5 	bl	8001240 <HAL_GetTick>
 8003ab6:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ab8:	e008      	b.n	8003acc <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aba:	f7fd fbc1 	bl	8001240 <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d901      	bls.n	8003acc <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	e056      	b.n	8003b7a <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003acc:	4b2d      	ldr	r3, [pc, #180]	@ (8003b84 <HAL_RCC_OscConfig+0x8bc>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d0f0      	beq.n	8003aba <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ad8:	e04e      	b.n	8003b78 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e04d      	b.n	8003b7a <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ade:	4b29      	ldr	r3, [pc, #164]	@ (8003b84 <HAL_RCC_OscConfig+0x8bc>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d146      	bne.n	8003b78 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003aea:	4b26      	ldr	r3, [pc, #152]	@ (8003b84 <HAL_RCC_OscConfig+0x8bc>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a25      	ldr	r2, [pc, #148]	@ (8003b84 <HAL_RCC_OscConfig+0x8bc>)
 8003af0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003af4:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003af6:	4b23      	ldr	r3, [pc, #140]	@ (8003b84 <HAL_RCC_OscConfig+0x8bc>)
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	4a22      	ldr	r2, [pc, #136]	@ (8003b84 <HAL_RCC_OscConfig+0x8bc>)
 8003afc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b00:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b02:	f7fd fb9d 	bl	8001240 <HAL_GetTick>
 8003b06:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b08:	e008      	b.n	8003b1c <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b0a:	f7fd fb99 	bl	8001240 <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d901      	bls.n	8003b1c <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e02e      	b.n	8003b7a <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b1c:	4b19      	ldr	r3, [pc, #100]	@ (8003b84 <HAL_RCC_OscConfig+0x8bc>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d0f0      	beq.n	8003b0a <HAL_RCC_OscConfig+0x842>
 8003b28:	e026      	b.n	8003b78 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b2a:	6a3b      	ldr	r3, [r7, #32]
 8003b2c:	2b0c      	cmp	r3, #12
 8003b2e:	d021      	beq.n	8003b74 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b30:	4b14      	ldr	r3, [pc, #80]	@ (8003b84 <HAL_RCC_OscConfig+0x8bc>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a13      	ldr	r2, [pc, #76]	@ (8003b84 <HAL_RCC_OscConfig+0x8bc>)
 8003b36:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b3c:	f7fd fb80 	bl	8001240 <HAL_GetTick>
 8003b40:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b42:	e008      	b.n	8003b56 <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b44:	f7fd fb7c 	bl	8001240 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d901      	bls.n	8003b56 <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e011      	b.n	8003b7a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b56:	4b0b      	ldr	r3, [pc, #44]	@ (8003b84 <HAL_RCC_OscConfig+0x8bc>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d1f0      	bne.n	8003b44 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8003b62:	4b08      	ldr	r3, [pc, #32]	@ (8003b84 <HAL_RCC_OscConfig+0x8bc>)
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	4a07      	ldr	r2, [pc, #28]	@ (8003b84 <HAL_RCC_OscConfig+0x8bc>)
 8003b68:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8003b6c:	f023 0303 	bic.w	r3, r3, #3
 8003b70:	60d3      	str	r3, [r2, #12]
 8003b72:	e001      	b.n	8003b78 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e000      	b.n	8003b7a <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3728      	adds	r7, #40	@ 0x28
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	40021000 	.word	0x40021000
 8003b88:	f99f808c 	.word	0xf99f808c

08003b8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d101      	bne.n	8003ba0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e0e7      	b.n	8003d70 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ba0:	4b75      	ldr	r3, [pc, #468]	@ (8003d78 <HAL_RCC_ClockConfig+0x1ec>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0307 	and.w	r3, r3, #7
 8003ba8:	683a      	ldr	r2, [r7, #0]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d910      	bls.n	8003bd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bae:	4b72      	ldr	r3, [pc, #456]	@ (8003d78 <HAL_RCC_ClockConfig+0x1ec>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f023 0207 	bic.w	r2, r3, #7
 8003bb6:	4970      	ldr	r1, [pc, #448]	@ (8003d78 <HAL_RCC_ClockConfig+0x1ec>)
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bbe:	4b6e      	ldr	r3, [pc, #440]	@ (8003d78 <HAL_RCC_ClockConfig+0x1ec>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0307 	and.w	r3, r3, #7
 8003bc6:	683a      	ldr	r2, [r7, #0]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d001      	beq.n	8003bd0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e0cf      	b.n	8003d70 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d010      	beq.n	8003bfe <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689a      	ldr	r2, [r3, #8]
 8003be0:	4b66      	ldr	r3, [pc, #408]	@ (8003d7c <HAL_RCC_ClockConfig+0x1f0>)
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d908      	bls.n	8003bfe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bec:	4b63      	ldr	r3, [pc, #396]	@ (8003d7c <HAL_RCC_ClockConfig+0x1f0>)
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	4960      	ldr	r1, [pc, #384]	@ (8003d7c <HAL_RCC_ClockConfig+0x1f0>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0301 	and.w	r3, r3, #1
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d04c      	beq.n	8003ca4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	2b03      	cmp	r3, #3
 8003c10:	d107      	bne.n	8003c22 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c12:	4b5a      	ldr	r3, [pc, #360]	@ (8003d7c <HAL_RCC_ClockConfig+0x1f0>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d121      	bne.n	8003c62 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e0a6      	b.n	8003d70 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d107      	bne.n	8003c3a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c2a:	4b54      	ldr	r3, [pc, #336]	@ (8003d7c <HAL_RCC_ClockConfig+0x1f0>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d115      	bne.n	8003c62 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e09a      	b.n	8003d70 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d107      	bne.n	8003c52 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c42:	4b4e      	ldr	r3, [pc, #312]	@ (8003d7c <HAL_RCC_ClockConfig+0x1f0>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d109      	bne.n	8003c62 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e08e      	b.n	8003d70 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c52:	4b4a      	ldr	r3, [pc, #296]	@ (8003d7c <HAL_RCC_ClockConfig+0x1f0>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e086      	b.n	8003d70 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c62:	4b46      	ldr	r3, [pc, #280]	@ (8003d7c <HAL_RCC_ClockConfig+0x1f0>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f023 0203 	bic.w	r2, r3, #3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	4943      	ldr	r1, [pc, #268]	@ (8003d7c <HAL_RCC_ClockConfig+0x1f0>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c74:	f7fd fae4 	bl	8001240 <HAL_GetTick>
 8003c78:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c7a:	e00a      	b.n	8003c92 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c7c:	f7fd fae0 	bl	8001240 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e06e      	b.n	8003d70 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c92:	4b3a      	ldr	r3, [pc, #232]	@ (8003d7c <HAL_RCC_ClockConfig+0x1f0>)
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f003 020c 	and.w	r2, r3, #12
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d1eb      	bne.n	8003c7c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0302 	and.w	r3, r3, #2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d010      	beq.n	8003cd2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	689a      	ldr	r2, [r3, #8]
 8003cb4:	4b31      	ldr	r3, [pc, #196]	@ (8003d7c <HAL_RCC_ClockConfig+0x1f0>)
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d208      	bcs.n	8003cd2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cc0:	4b2e      	ldr	r3, [pc, #184]	@ (8003d7c <HAL_RCC_ClockConfig+0x1f0>)
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	492b      	ldr	r1, [pc, #172]	@ (8003d7c <HAL_RCC_ClockConfig+0x1f0>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cd2:	4b29      	ldr	r3, [pc, #164]	@ (8003d78 <HAL_RCC_ClockConfig+0x1ec>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0307 	and.w	r3, r3, #7
 8003cda:	683a      	ldr	r2, [r7, #0]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d210      	bcs.n	8003d02 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ce0:	4b25      	ldr	r3, [pc, #148]	@ (8003d78 <HAL_RCC_ClockConfig+0x1ec>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f023 0207 	bic.w	r2, r3, #7
 8003ce8:	4923      	ldr	r1, [pc, #140]	@ (8003d78 <HAL_RCC_ClockConfig+0x1ec>)
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cf0:	4b21      	ldr	r3, [pc, #132]	@ (8003d78 <HAL_RCC_ClockConfig+0x1ec>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0307 	and.w	r3, r3, #7
 8003cf8:	683a      	ldr	r2, [r7, #0]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d001      	beq.n	8003d02 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e036      	b.n	8003d70 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0304 	and.w	r3, r3, #4
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d008      	beq.n	8003d20 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d0e:	4b1b      	ldr	r3, [pc, #108]	@ (8003d7c <HAL_RCC_ClockConfig+0x1f0>)
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	4918      	ldr	r1, [pc, #96]	@ (8003d7c <HAL_RCC_ClockConfig+0x1f0>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0308 	and.w	r3, r3, #8
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d009      	beq.n	8003d40 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d2c:	4b13      	ldr	r3, [pc, #76]	@ (8003d7c <HAL_RCC_ClockConfig+0x1f0>)
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	00db      	lsls	r3, r3, #3
 8003d3a:	4910      	ldr	r1, [pc, #64]	@ (8003d7c <HAL_RCC_ClockConfig+0x1f0>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d40:	f000 f824 	bl	8003d8c <HAL_RCC_GetSysClockFreq>
 8003d44:	4602      	mov	r2, r0
 8003d46:	4b0d      	ldr	r3, [pc, #52]	@ (8003d7c <HAL_RCC_ClockConfig+0x1f0>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	091b      	lsrs	r3, r3, #4
 8003d4c:	f003 030f 	and.w	r3, r3, #15
 8003d50:	490b      	ldr	r1, [pc, #44]	@ (8003d80 <HAL_RCC_ClockConfig+0x1f4>)
 8003d52:	5ccb      	ldrb	r3, [r1, r3]
 8003d54:	f003 031f 	and.w	r3, r3, #31
 8003d58:	fa22 f303 	lsr.w	r3, r2, r3
 8003d5c:	4a09      	ldr	r2, [pc, #36]	@ (8003d84 <HAL_RCC_ClockConfig+0x1f8>)
 8003d5e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003d60:	4b09      	ldr	r3, [pc, #36]	@ (8003d88 <HAL_RCC_ClockConfig+0x1fc>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7fd fa1b 	bl	80011a0 <HAL_InitTick>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	72fb      	strb	r3, [r7, #11]

  return status;
 8003d6e:	7afb      	ldrb	r3, [r7, #11]
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3710      	adds	r7, #16
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	40022000 	.word	0x40022000
 8003d7c:	40021000 	.word	0x40021000
 8003d80:	0800521c 	.word	0x0800521c
 8003d84:	20000000 	.word	0x20000000
 8003d88:	20000004 	.word	0x20000004

08003d8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b089      	sub	sp, #36	@ 0x24
 8003d90:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003d92:	2300      	movs	r3, #0
 8003d94:	61fb      	str	r3, [r7, #28]
 8003d96:	2300      	movs	r3, #0
 8003d98:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d9a:	4b3e      	ldr	r3, [pc, #248]	@ (8003e94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f003 030c 	and.w	r3, r3, #12
 8003da2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003da4:	4b3b      	ldr	r3, [pc, #236]	@ (8003e94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	f003 0303 	and.w	r3, r3, #3
 8003dac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d005      	beq.n	8003dc0 <HAL_RCC_GetSysClockFreq+0x34>
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	2b0c      	cmp	r3, #12
 8003db8:	d121      	bne.n	8003dfe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d11e      	bne.n	8003dfe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003dc0:	4b34      	ldr	r3, [pc, #208]	@ (8003e94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0308 	and.w	r3, r3, #8
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d107      	bne.n	8003ddc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003dcc:	4b31      	ldr	r3, [pc, #196]	@ (8003e94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dd2:	0a1b      	lsrs	r3, r3, #8
 8003dd4:	f003 030f 	and.w	r3, r3, #15
 8003dd8:	61fb      	str	r3, [r7, #28]
 8003dda:	e005      	b.n	8003de8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003ddc:	4b2d      	ldr	r3, [pc, #180]	@ (8003e94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	091b      	lsrs	r3, r3, #4
 8003de2:	f003 030f 	and.w	r3, r3, #15
 8003de6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003de8:	4a2b      	ldr	r2, [pc, #172]	@ (8003e98 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003df0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d10d      	bne.n	8003e14 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003dfc:	e00a      	b.n	8003e14 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	2b04      	cmp	r3, #4
 8003e02:	d102      	bne.n	8003e0a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e04:	4b25      	ldr	r3, [pc, #148]	@ (8003e9c <HAL_RCC_GetSysClockFreq+0x110>)
 8003e06:	61bb      	str	r3, [r7, #24]
 8003e08:	e004      	b.n	8003e14 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	2b08      	cmp	r3, #8
 8003e0e:	d101      	bne.n	8003e14 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e10:	4b23      	ldr	r3, [pc, #140]	@ (8003ea0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003e12:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	2b0c      	cmp	r3, #12
 8003e18:	d134      	bne.n	8003e84 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e1a:	4b1e      	ldr	r3, [pc, #120]	@ (8003e94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	f003 0303 	and.w	r3, r3, #3
 8003e22:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d003      	beq.n	8003e32 <HAL_RCC_GetSysClockFreq+0xa6>
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	2b03      	cmp	r3, #3
 8003e2e:	d003      	beq.n	8003e38 <HAL_RCC_GetSysClockFreq+0xac>
 8003e30:	e005      	b.n	8003e3e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003e32:	4b1a      	ldr	r3, [pc, #104]	@ (8003e9c <HAL_RCC_GetSysClockFreq+0x110>)
 8003e34:	617b      	str	r3, [r7, #20]
      break;
 8003e36:	e005      	b.n	8003e44 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003e38:	4b19      	ldr	r3, [pc, #100]	@ (8003ea0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003e3a:	617b      	str	r3, [r7, #20]
      break;
 8003e3c:	e002      	b.n	8003e44 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	617b      	str	r3, [r7, #20]
      break;
 8003e42:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e44:	4b13      	ldr	r3, [pc, #76]	@ (8003e94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	091b      	lsrs	r3, r3, #4
 8003e4a:	f003 0307 	and.w	r3, r3, #7
 8003e4e:	3301      	adds	r3, #1
 8003e50:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003e52:	4b10      	ldr	r3, [pc, #64]	@ (8003e94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	0a1b      	lsrs	r3, r3, #8
 8003e58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e5c:	697a      	ldr	r2, [r7, #20]
 8003e5e:	fb03 f202 	mul.w	r2, r3, r2
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e68:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e6a:	4b0a      	ldr	r3, [pc, #40]	@ (8003e94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	0e5b      	lsrs	r3, r3, #25
 8003e70:	f003 0303 	and.w	r3, r3, #3
 8003e74:	3301      	adds	r3, #1
 8003e76:	005b      	lsls	r3, r3, #1
 8003e78:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e82:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003e84:	69bb      	ldr	r3, [r7, #24]
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3724      	adds	r7, #36	@ 0x24
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	40021000 	.word	0x40021000
 8003e98:	08005234 	.word	0x08005234
 8003e9c:	00f42400 	.word	0x00f42400
 8003ea0:	007a1200 	.word	0x007a1200

08003ea4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ea8:	4b03      	ldr	r3, [pc, #12]	@ (8003eb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	20000000 	.word	0x20000000

08003ebc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ec0:	f7ff fff0 	bl	8003ea4 <HAL_RCC_GetHCLKFreq>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	4b06      	ldr	r3, [pc, #24]	@ (8003ee0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	0a1b      	lsrs	r3, r3, #8
 8003ecc:	f003 0307 	and.w	r3, r3, #7
 8003ed0:	4904      	ldr	r1, [pc, #16]	@ (8003ee4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ed2:	5ccb      	ldrb	r3, [r1, r3]
 8003ed4:	f003 031f 	and.w	r3, r3, #31
 8003ed8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	40021000 	.word	0x40021000
 8003ee4:	0800522c 	.word	0x0800522c

08003ee8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003eec:	f7ff ffda 	bl	8003ea4 <HAL_RCC_GetHCLKFreq>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	4b06      	ldr	r3, [pc, #24]	@ (8003f0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	0adb      	lsrs	r3, r3, #11
 8003ef8:	f003 0307 	and.w	r3, r3, #7
 8003efc:	4904      	ldr	r1, [pc, #16]	@ (8003f10 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003efe:	5ccb      	ldrb	r3, [r1, r3]
 8003f00:	f003 031f 	and.w	r3, r3, #31
 8003f04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	40021000 	.word	0x40021000
 8003f10:	0800522c 	.word	0x0800522c

08003f14 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b086      	sub	sp, #24
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003f20:	4b2a      	ldr	r3, [pc, #168]	@ (8003fcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d003      	beq.n	8003f34 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003f2c:	f7ff f968 	bl	8003200 <HAL_PWREx_GetVoltageRange>
 8003f30:	6178      	str	r0, [r7, #20]
 8003f32:	e014      	b.n	8003f5e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f34:	4b25      	ldr	r3, [pc, #148]	@ (8003fcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f38:	4a24      	ldr	r2, [pc, #144]	@ (8003fcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f40:	4b22      	ldr	r3, [pc, #136]	@ (8003fcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f48:	60fb      	str	r3, [r7, #12]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003f4c:	f7ff f958 	bl	8003200 <HAL_PWREx_GetVoltageRange>
 8003f50:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003f52:	4b1e      	ldr	r3, [pc, #120]	@ (8003fcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f56:	4a1d      	ldr	r2, [pc, #116]	@ (8003fcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f5c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f64:	d10b      	bne.n	8003f7e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2b80      	cmp	r3, #128	@ 0x80
 8003f6a:	d919      	bls.n	8003fa0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2ba0      	cmp	r3, #160	@ 0xa0
 8003f70:	d902      	bls.n	8003f78 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f72:	2302      	movs	r3, #2
 8003f74:	613b      	str	r3, [r7, #16]
 8003f76:	e013      	b.n	8003fa0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f78:	2301      	movs	r3, #1
 8003f7a:	613b      	str	r3, [r7, #16]
 8003f7c:	e010      	b.n	8003fa0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2b80      	cmp	r3, #128	@ 0x80
 8003f82:	d902      	bls.n	8003f8a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003f84:	2303      	movs	r3, #3
 8003f86:	613b      	str	r3, [r7, #16]
 8003f88:	e00a      	b.n	8003fa0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2b80      	cmp	r3, #128	@ 0x80
 8003f8e:	d102      	bne.n	8003f96 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f90:	2302      	movs	r3, #2
 8003f92:	613b      	str	r3, [r7, #16]
 8003f94:	e004      	b.n	8003fa0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2b70      	cmp	r3, #112	@ 0x70
 8003f9a:	d101      	bne.n	8003fa0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003fa0:	4b0b      	ldr	r3, [pc, #44]	@ (8003fd0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f023 0207 	bic.w	r2, r3, #7
 8003fa8:	4909      	ldr	r1, [pc, #36]	@ (8003fd0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003fb0:	4b07      	ldr	r3, [pc, #28]	@ (8003fd0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0307 	and.w	r3, r3, #7
 8003fb8:	693a      	ldr	r2, [r7, #16]
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d001      	beq.n	8003fc2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e000      	b.n	8003fc4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3718      	adds	r7, #24
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	40021000 	.word	0x40021000
 8003fd0:	40022000 	.word	0x40022000

08003fd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b086      	sub	sp, #24
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003fdc:	2300      	movs	r3, #0
 8003fde:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	f000 809e 	beq.w	800412e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003ff6:	4b46      	ldr	r3, [pc, #280]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ffa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d101      	bne.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004002:	2301      	movs	r3, #1
 8004004:	e000      	b.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8004006:	2300      	movs	r3, #0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d00d      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800400c:	4b40      	ldr	r3, [pc, #256]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800400e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004010:	4a3f      	ldr	r2, [pc, #252]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004012:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004016:	6593      	str	r3, [r2, #88]	@ 0x58
 8004018:	4b3d      	ldr	r3, [pc, #244]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800401a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800401c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004020:	60bb      	str	r3, [r7, #8]
 8004022:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004024:	2301      	movs	r3, #1
 8004026:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004028:	4b3a      	ldr	r3, [pc, #232]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a39      	ldr	r2, [pc, #228]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800402e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004032:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004034:	f7fd f904 	bl	8001240 <HAL_GetTick>
 8004038:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800403a:	e009      	b.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800403c:	f7fd f900 	bl	8001240 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	2b02      	cmp	r3, #2
 8004048:	d902      	bls.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	74fb      	strb	r3, [r7, #19]
        break;
 800404e:	e005      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004050:	4b30      	ldr	r3, [pc, #192]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004058:	2b00      	cmp	r3, #0
 800405a:	d0ef      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 800405c:	7cfb      	ldrb	r3, [r7, #19]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d15a      	bne.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004062:	4b2b      	ldr	r3, [pc, #172]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004064:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004068:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800406c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d01e      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004078:	697a      	ldr	r2, [r7, #20]
 800407a:	429a      	cmp	r2, r3
 800407c:	d019      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800407e:	4b24      	ldr	r3, [pc, #144]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004080:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004084:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004088:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800408a:	4b21      	ldr	r3, [pc, #132]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800408c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004090:	4a1f      	ldr	r2, [pc, #124]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004092:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004096:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800409a:	4b1d      	ldr	r3, [pc, #116]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800409c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040a0:	4a1b      	ldr	r2, [pc, #108]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80040a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80040aa:	4a19      	ldr	r2, [pc, #100]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	f003 0301 	and.w	r3, r3, #1
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d016      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040bc:	f7fd f8c0 	bl	8001240 <HAL_GetTick>
 80040c0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040c2:	e00b      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040c4:	f7fd f8bc 	bl	8001240 <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d902      	bls.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	74fb      	strb	r3, [r7, #19]
            break;
 80040da:	e006      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040dc:	4b0c      	ldr	r3, [pc, #48]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80040de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d0ec      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 80040ea:	7cfb      	ldrb	r3, [r7, #19]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d10b      	bne.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040f0:	4b07      	ldr	r3, [pc, #28]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80040f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040f6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040fe:	4904      	ldr	r1, [pc, #16]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004100:	4313      	orrs	r3, r2
 8004102:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004106:	e009      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004108:	7cfb      	ldrb	r3, [r7, #19]
 800410a:	74bb      	strb	r3, [r7, #18]
 800410c:	e006      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x148>
 800410e:	bf00      	nop
 8004110:	40021000 	.word	0x40021000
 8004114:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004118:	7cfb      	ldrb	r3, [r7, #19]
 800411a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800411c:	7c7b      	ldrb	r3, [r7, #17]
 800411e:	2b01      	cmp	r3, #1
 8004120:	d105      	bne.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004122:	4b6e      	ldr	r3, [pc, #440]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004126:	4a6d      	ldr	r2, [pc, #436]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004128:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800412c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0301 	and.w	r3, r3, #1
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00a      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800413a:	4b68      	ldr	r3, [pc, #416]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800413c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004140:	f023 0203 	bic.w	r2, r3, #3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	4964      	ldr	r1, [pc, #400]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800414a:	4313      	orrs	r3, r2
 800414c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0302 	and.w	r3, r3, #2
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00a      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800415c:	4b5f      	ldr	r3, [pc, #380]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800415e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004162:	f023 020c 	bic.w	r2, r3, #12
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	495c      	ldr	r1, [pc, #368]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800416c:	4313      	orrs	r3, r2
 800416e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0304 	and.w	r3, r3, #4
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00a      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800417e:	4b57      	ldr	r3, [pc, #348]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004180:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004184:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	4953      	ldr	r1, [pc, #332]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800418e:	4313      	orrs	r3, r2
 8004190:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0320 	and.w	r3, r3, #32
 800419c:	2b00      	cmp	r3, #0
 800419e:	d00a      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041a0:	4b4e      	ldr	r3, [pc, #312]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80041a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041a6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	494b      	ldr	r1, [pc, #300]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00a      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041c2:	4b46      	ldr	r3, [pc, #280]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80041c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041c8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a1b      	ldr	r3, [r3, #32]
 80041d0:	4942      	ldr	r1, [pc, #264]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d00a      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80041e4:	4b3d      	ldr	r3, [pc, #244]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80041e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f2:	493a      	ldr	r1, [pc, #232]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00a      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004206:	4b35      	ldr	r3, [pc, #212]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004208:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800420c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	695b      	ldr	r3, [r3, #20]
 8004214:	4931      	ldr	r1, [pc, #196]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004216:	4313      	orrs	r3, r2
 8004218:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00a      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004228:	4b2c      	ldr	r3, [pc, #176]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800422a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800422e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	4929      	ldr	r1, [pc, #164]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004238:	4313      	orrs	r3, r2
 800423a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00a      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800424a:	4b24      	ldr	r3, [pc, #144]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800424c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004250:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	69db      	ldr	r3, [r3, #28]
 8004258:	4920      	ldr	r1, [pc, #128]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800425a:	4313      	orrs	r3, r2
 800425c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d015      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800426c:	4b1b      	ldr	r3, [pc, #108]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800426e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004272:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800427a:	4918      	ldr	r1, [pc, #96]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800427c:	4313      	orrs	r3, r2
 800427e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004286:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800428a:	d105      	bne.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800428c:	4b13      	ldr	r3, [pc, #76]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	4a12      	ldr	r2, [pc, #72]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004292:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004296:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d015      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80042a4:	4b0d      	ldr	r3, [pc, #52]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80042a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042aa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042b2:	490a      	ldr	r1, [pc, #40]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80042c2:	d105      	bne.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042c4:	4b05      	ldr	r3, [pc, #20]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	4a04      	ldr	r2, [pc, #16]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80042ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042ce:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80042d0:	7cbb      	ldrb	r3, [r7, #18]
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3718      	adds	r7, #24
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	40021000 	.word	0x40021000

080042e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d101      	bne.n	80042f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e049      	b.n	8004386 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d106      	bne.n	800430c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f7fc fdf4 	bl	8000ef4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2202      	movs	r2, #2
 8004310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	3304      	adds	r3, #4
 800431c:	4619      	mov	r1, r3
 800431e:	4610      	mov	r0, r2
 8004320:	f000 f878 	bl	8004414 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3708      	adds	r7, #8
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}

0800438e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800438e:	b580      	push	{r7, lr}
 8004390:	b082      	sub	sp, #8
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
 8004396:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d101      	bne.n	80043a6 <HAL_TIM_SlaveConfigSynchro+0x18>
 80043a2:	2302      	movs	r3, #2
 80043a4:	e031      	b.n	800440a <HAL_TIM_SlaveConfigSynchro+0x7c>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2201      	movs	r2, #1
 80043aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2202      	movs	r2, #2
 80043b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80043b6:	6839      	ldr	r1, [r7, #0]
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f000 f89b 	bl	80044f4 <TIM_SlaveTimer_SetConfig>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d009      	beq.n	80043d8 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e018      	b.n	800440a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68da      	ldr	r2, [r3, #12]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80043e6:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	68da      	ldr	r2, [r3, #12]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80043f6:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3708      	adds	r7, #8
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
	...

08004414 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004414:	b480      	push	{r7}
 8004416:	b085      	sub	sp, #20
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4a30      	ldr	r2, [pc, #192]	@ (80044e8 <TIM_Base_SetConfig+0xd4>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d003      	beq.n	8004434 <TIM_Base_SetConfig+0x20>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004432:	d108      	bne.n	8004446 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800443a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	4313      	orrs	r3, r2
 8004444:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a27      	ldr	r2, [pc, #156]	@ (80044e8 <TIM_Base_SetConfig+0xd4>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d00b      	beq.n	8004466 <TIM_Base_SetConfig+0x52>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004454:	d007      	beq.n	8004466 <TIM_Base_SetConfig+0x52>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a24      	ldr	r2, [pc, #144]	@ (80044ec <TIM_Base_SetConfig+0xd8>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d003      	beq.n	8004466 <TIM_Base_SetConfig+0x52>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a23      	ldr	r2, [pc, #140]	@ (80044f0 <TIM_Base_SetConfig+0xdc>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d108      	bne.n	8004478 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800446c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	4313      	orrs	r3, r2
 8004476:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	695b      	ldr	r3, [r3, #20]
 8004482:	4313      	orrs	r3, r2
 8004484:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	689a      	ldr	r2, [r3, #8]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a12      	ldr	r2, [pc, #72]	@ (80044e8 <TIM_Base_SetConfig+0xd4>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d007      	beq.n	80044b4 <TIM_Base_SetConfig+0xa0>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a11      	ldr	r2, [pc, #68]	@ (80044ec <TIM_Base_SetConfig+0xd8>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d003      	beq.n	80044b4 <TIM_Base_SetConfig+0xa0>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a10      	ldr	r2, [pc, #64]	@ (80044f0 <TIM_Base_SetConfig+0xdc>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d103      	bne.n	80044bc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	691a      	ldr	r2, [r3, #16]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d105      	bne.n	80044da <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	f023 0201 	bic.w	r2, r3, #1
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	611a      	str	r2, [r3, #16]
  }
}
 80044da:	bf00      	nop
 80044dc:	3714      	adds	r7, #20
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop
 80044e8:	40012c00 	.word	0x40012c00
 80044ec:	40014000 	.word	0x40014000
 80044f0:	40014400 	.word	0x40014400

080044f4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b086      	sub	sp, #24
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044fe:	2300      	movs	r3, #0
 8004500:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004510:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	693a      	ldr	r2, [r7, #16]
 8004518:	4313      	orrs	r3, r2
 800451a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004522:	f023 0307 	bic.w	r3, r3, #7
 8004526:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	693a      	ldr	r2, [r7, #16]
 800452e:	4313      	orrs	r3, r2
 8004530:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	693a      	ldr	r2, [r7, #16]
 8004538:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	2b70      	cmp	r3, #112	@ 0x70
 8004540:	d01a      	beq.n	8004578 <TIM_SlaveTimer_SetConfig+0x84>
 8004542:	2b70      	cmp	r3, #112	@ 0x70
 8004544:	d860      	bhi.n	8004608 <TIM_SlaveTimer_SetConfig+0x114>
 8004546:	2b60      	cmp	r3, #96	@ 0x60
 8004548:	d054      	beq.n	80045f4 <TIM_SlaveTimer_SetConfig+0x100>
 800454a:	2b60      	cmp	r3, #96	@ 0x60
 800454c:	d85c      	bhi.n	8004608 <TIM_SlaveTimer_SetConfig+0x114>
 800454e:	2b50      	cmp	r3, #80	@ 0x50
 8004550:	d046      	beq.n	80045e0 <TIM_SlaveTimer_SetConfig+0xec>
 8004552:	2b50      	cmp	r3, #80	@ 0x50
 8004554:	d858      	bhi.n	8004608 <TIM_SlaveTimer_SetConfig+0x114>
 8004556:	2b40      	cmp	r3, #64	@ 0x40
 8004558:	d019      	beq.n	800458e <TIM_SlaveTimer_SetConfig+0x9a>
 800455a:	2b40      	cmp	r3, #64	@ 0x40
 800455c:	d854      	bhi.n	8004608 <TIM_SlaveTimer_SetConfig+0x114>
 800455e:	2b30      	cmp	r3, #48	@ 0x30
 8004560:	d055      	beq.n	800460e <TIM_SlaveTimer_SetConfig+0x11a>
 8004562:	2b30      	cmp	r3, #48	@ 0x30
 8004564:	d850      	bhi.n	8004608 <TIM_SlaveTimer_SetConfig+0x114>
 8004566:	2b20      	cmp	r3, #32
 8004568:	d051      	beq.n	800460e <TIM_SlaveTimer_SetConfig+0x11a>
 800456a:	2b20      	cmp	r3, #32
 800456c:	d84c      	bhi.n	8004608 <TIM_SlaveTimer_SetConfig+0x114>
 800456e:	2b00      	cmp	r3, #0
 8004570:	d04d      	beq.n	800460e <TIM_SlaveTimer_SetConfig+0x11a>
 8004572:	2b10      	cmp	r3, #16
 8004574:	d04b      	beq.n	800460e <TIM_SlaveTimer_SetConfig+0x11a>
 8004576:	e047      	b.n	8004608 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8004588:	f000 f8a6 	bl	80046d8 <TIM_ETR_SetConfig>
      break;
 800458c:	e040      	b.n	8004610 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2b05      	cmp	r3, #5
 8004594:	d101      	bne.n	800459a <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e03b      	b.n	8004612 <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	6a1b      	ldr	r3, [r3, #32]
 80045a0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	6a1a      	ldr	r2, [r3, #32]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f022 0201 	bic.w	r2, r2, #1
 80045b0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80045c0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	011b      	lsls	r3, r3, #4
 80045c8:	68ba      	ldr	r2, [r7, #8]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	68ba      	ldr	r2, [r7, #8]
 80045d4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	621a      	str	r2, [r3, #32]
      break;
 80045de:	e017      	b.n	8004610 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045ec:	461a      	mov	r2, r3
 80045ee:	f000 f814 	bl	800461a <TIM_TI1_ConfigInputStage>
      break;
 80045f2:	e00d      	b.n	8004610 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004600:	461a      	mov	r2, r3
 8004602:	f000 f839 	bl	8004678 <TIM_TI2_ConfigInputStage>
      break;
 8004606:	e003      	b.n	8004610 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	75fb      	strb	r3, [r7, #23]
      break;
 800460c:	e000      	b.n	8004610 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 800460e:	bf00      	nop
  }

  return status;
 8004610:	7dfb      	ldrb	r3, [r7, #23]
}
 8004612:	4618      	mov	r0, r3
 8004614:	3718      	adds	r7, #24
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}

0800461a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800461a:	b480      	push	{r7}
 800461c:	b087      	sub	sp, #28
 800461e:	af00      	add	r7, sp, #0
 8004620:	60f8      	str	r0, [r7, #12]
 8004622:	60b9      	str	r1, [r7, #8]
 8004624:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6a1b      	ldr	r3, [r3, #32]
 800462a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6a1b      	ldr	r3, [r3, #32]
 8004630:	f023 0201 	bic.w	r2, r3, #1
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	699b      	ldr	r3, [r3, #24]
 800463c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004644:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	011b      	lsls	r3, r3, #4
 800464a:	693a      	ldr	r2, [r7, #16]
 800464c:	4313      	orrs	r3, r2
 800464e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	f023 030a 	bic.w	r3, r3, #10
 8004656:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004658:	697a      	ldr	r2, [r7, #20]
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	4313      	orrs	r3, r2
 800465e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	693a      	ldr	r2, [r7, #16]
 8004664:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	697a      	ldr	r2, [r7, #20]
 800466a:	621a      	str	r2, [r3, #32]
}
 800466c:	bf00      	nop
 800466e:	371c      	adds	r7, #28
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004678:	b480      	push	{r7}
 800467a:	b087      	sub	sp, #28
 800467c:	af00      	add	r7, sp, #0
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6a1b      	ldr	r3, [r3, #32]
 8004688:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6a1b      	ldr	r3, [r3, #32]
 800468e:	f023 0210 	bic.w	r2, r3, #16
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80046a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	031b      	lsls	r3, r3, #12
 80046a8:	693a      	ldr	r2, [r7, #16]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80046b4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	011b      	lsls	r3, r3, #4
 80046ba:	697a      	ldr	r2, [r7, #20]
 80046bc:	4313      	orrs	r3, r2
 80046be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	697a      	ldr	r2, [r7, #20]
 80046ca:	621a      	str	r2, [r3, #32]
}
 80046cc:	bf00      	nop
 80046ce:	371c      	adds	r7, #28
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046d8:	b480      	push	{r7}
 80046da:	b087      	sub	sp, #28
 80046dc:	af00      	add	r7, sp, #0
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	607a      	str	r2, [r7, #4]
 80046e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80046f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	021a      	lsls	r2, r3, #8
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	431a      	orrs	r2, r3
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	4313      	orrs	r3, r2
 8004700:	697a      	ldr	r2, [r7, #20]
 8004702:	4313      	orrs	r3, r2
 8004704:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	697a      	ldr	r2, [r7, #20]
 800470a:	609a      	str	r2, [r3, #8]
}
 800470c:	bf00      	nop
 800470e:	371c      	adds	r7, #28
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr

08004718 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004718:	b480      	push	{r7}
 800471a:	b085      	sub	sp, #20
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004728:	2b01      	cmp	r3, #1
 800472a:	d101      	bne.n	8004730 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800472c:	2302      	movs	r3, #2
 800472e:	e04f      	b.n	80047d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2202      	movs	r2, #2
 800473c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a21      	ldr	r2, [pc, #132]	@ (80047dc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d108      	bne.n	800476c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004760:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	4313      	orrs	r3, r2
 800476a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004772:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	4313      	orrs	r3, r2
 800477c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a14      	ldr	r2, [pc, #80]	@ (80047dc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d009      	beq.n	80047a4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004798:	d004      	beq.n	80047a4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a10      	ldr	r2, [pc, #64]	@ (80047e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d10c      	bne.n	80047be <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	68ba      	ldr	r2, [r7, #8]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68ba      	ldr	r2, [r7, #8]
 80047bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2201      	movs	r2, #1
 80047c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80047ce:	2300      	movs	r3, #0
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3714      	adds	r7, #20
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr
 80047dc:	40012c00 	.word	0x40012c00
 80047e0:	40014000 	.word	0x40014000

080047e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b082      	sub	sp, #8
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d101      	bne.n	80047f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e040      	b.n	8004878 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d106      	bne.n	800480c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f7fc fbe8 	bl	8000fdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2224      	movs	r2, #36	@ 0x24
 8004810:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f022 0201 	bic.w	r2, r2, #1
 8004820:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004826:	2b00      	cmp	r3, #0
 8004828:	d002      	beq.n	8004830 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 fa82 	bl	8004d34 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f000 f825 	bl	8004880 <UART_SetConfig>
 8004836:	4603      	mov	r3, r0
 8004838:	2b01      	cmp	r3, #1
 800483a:	d101      	bne.n	8004840 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e01b      	b.n	8004878 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	685a      	ldr	r2, [r3, #4]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800484e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	689a      	ldr	r2, [r3, #8]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800485e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f042 0201 	orr.w	r2, r2, #1
 800486e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f000 fb01 	bl	8004e78 <UART_CheckIdleState>
 8004876:	4603      	mov	r3, r0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3708      	adds	r7, #8
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004880:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004884:	b08a      	sub	sp, #40	@ 0x28
 8004886:	af00      	add	r7, sp, #0
 8004888:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800488a:	2300      	movs	r3, #0
 800488c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	689a      	ldr	r2, [r3, #8]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	431a      	orrs	r2, r3
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	695b      	ldr	r3, [r3, #20]
 800489e:	431a      	orrs	r2, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	69db      	ldr	r3, [r3, #28]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	4b9e      	ldr	r3, [pc, #632]	@ (8004b28 <UART_SetConfig+0x2a8>)
 80048b0:	4013      	ands	r3, r2
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	6812      	ldr	r2, [r2, #0]
 80048b6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80048b8:	430b      	orrs	r3, r1
 80048ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	68da      	ldr	r2, [r3, #12]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	430a      	orrs	r2, r1
 80048d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	699b      	ldr	r3, [r3, #24]
 80048d6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a93      	ldr	r2, [pc, #588]	@ (8004b2c <UART_SetConfig+0x2ac>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d004      	beq.n	80048ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6a1b      	ldr	r3, [r3, #32]
 80048e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048e8:	4313      	orrs	r3, r2
 80048ea:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048fc:	430a      	orrs	r2, r1
 80048fe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a8a      	ldr	r2, [pc, #552]	@ (8004b30 <UART_SetConfig+0x2b0>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d126      	bne.n	8004958 <UART_SetConfig+0xd8>
 800490a:	4b8a      	ldr	r3, [pc, #552]	@ (8004b34 <UART_SetConfig+0x2b4>)
 800490c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004910:	f003 0303 	and.w	r3, r3, #3
 8004914:	2b03      	cmp	r3, #3
 8004916:	d81b      	bhi.n	8004950 <UART_SetConfig+0xd0>
 8004918:	a201      	add	r2, pc, #4	@ (adr r2, 8004920 <UART_SetConfig+0xa0>)
 800491a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800491e:	bf00      	nop
 8004920:	08004931 	.word	0x08004931
 8004924:	08004941 	.word	0x08004941
 8004928:	08004939 	.word	0x08004939
 800492c:	08004949 	.word	0x08004949
 8004930:	2301      	movs	r3, #1
 8004932:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004936:	e0ab      	b.n	8004a90 <UART_SetConfig+0x210>
 8004938:	2302      	movs	r3, #2
 800493a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800493e:	e0a7      	b.n	8004a90 <UART_SetConfig+0x210>
 8004940:	2304      	movs	r3, #4
 8004942:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004946:	e0a3      	b.n	8004a90 <UART_SetConfig+0x210>
 8004948:	2308      	movs	r3, #8
 800494a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800494e:	e09f      	b.n	8004a90 <UART_SetConfig+0x210>
 8004950:	2310      	movs	r3, #16
 8004952:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004956:	e09b      	b.n	8004a90 <UART_SetConfig+0x210>
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a76      	ldr	r2, [pc, #472]	@ (8004b38 <UART_SetConfig+0x2b8>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d138      	bne.n	80049d4 <UART_SetConfig+0x154>
 8004962:	4b74      	ldr	r3, [pc, #464]	@ (8004b34 <UART_SetConfig+0x2b4>)
 8004964:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004968:	f003 030c 	and.w	r3, r3, #12
 800496c:	2b0c      	cmp	r3, #12
 800496e:	d82d      	bhi.n	80049cc <UART_SetConfig+0x14c>
 8004970:	a201      	add	r2, pc, #4	@ (adr r2, 8004978 <UART_SetConfig+0xf8>)
 8004972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004976:	bf00      	nop
 8004978:	080049ad 	.word	0x080049ad
 800497c:	080049cd 	.word	0x080049cd
 8004980:	080049cd 	.word	0x080049cd
 8004984:	080049cd 	.word	0x080049cd
 8004988:	080049bd 	.word	0x080049bd
 800498c:	080049cd 	.word	0x080049cd
 8004990:	080049cd 	.word	0x080049cd
 8004994:	080049cd 	.word	0x080049cd
 8004998:	080049b5 	.word	0x080049b5
 800499c:	080049cd 	.word	0x080049cd
 80049a0:	080049cd 	.word	0x080049cd
 80049a4:	080049cd 	.word	0x080049cd
 80049a8:	080049c5 	.word	0x080049c5
 80049ac:	2300      	movs	r3, #0
 80049ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049b2:	e06d      	b.n	8004a90 <UART_SetConfig+0x210>
 80049b4:	2302      	movs	r3, #2
 80049b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049ba:	e069      	b.n	8004a90 <UART_SetConfig+0x210>
 80049bc:	2304      	movs	r3, #4
 80049be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049c2:	e065      	b.n	8004a90 <UART_SetConfig+0x210>
 80049c4:	2308      	movs	r3, #8
 80049c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049ca:	e061      	b.n	8004a90 <UART_SetConfig+0x210>
 80049cc:	2310      	movs	r3, #16
 80049ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049d2:	e05d      	b.n	8004a90 <UART_SetConfig+0x210>
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a58      	ldr	r2, [pc, #352]	@ (8004b3c <UART_SetConfig+0x2bc>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d125      	bne.n	8004a2a <UART_SetConfig+0x1aa>
 80049de:	4b55      	ldr	r3, [pc, #340]	@ (8004b34 <UART_SetConfig+0x2b4>)
 80049e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049e4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80049e8:	2b30      	cmp	r3, #48	@ 0x30
 80049ea:	d016      	beq.n	8004a1a <UART_SetConfig+0x19a>
 80049ec:	2b30      	cmp	r3, #48	@ 0x30
 80049ee:	d818      	bhi.n	8004a22 <UART_SetConfig+0x1a2>
 80049f0:	2b20      	cmp	r3, #32
 80049f2:	d00a      	beq.n	8004a0a <UART_SetConfig+0x18a>
 80049f4:	2b20      	cmp	r3, #32
 80049f6:	d814      	bhi.n	8004a22 <UART_SetConfig+0x1a2>
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d002      	beq.n	8004a02 <UART_SetConfig+0x182>
 80049fc:	2b10      	cmp	r3, #16
 80049fe:	d008      	beq.n	8004a12 <UART_SetConfig+0x192>
 8004a00:	e00f      	b.n	8004a22 <UART_SetConfig+0x1a2>
 8004a02:	2300      	movs	r3, #0
 8004a04:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a08:	e042      	b.n	8004a90 <UART_SetConfig+0x210>
 8004a0a:	2302      	movs	r3, #2
 8004a0c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a10:	e03e      	b.n	8004a90 <UART_SetConfig+0x210>
 8004a12:	2304      	movs	r3, #4
 8004a14:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a18:	e03a      	b.n	8004a90 <UART_SetConfig+0x210>
 8004a1a:	2308      	movs	r3, #8
 8004a1c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a20:	e036      	b.n	8004a90 <UART_SetConfig+0x210>
 8004a22:	2310      	movs	r3, #16
 8004a24:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a28:	e032      	b.n	8004a90 <UART_SetConfig+0x210>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a3f      	ldr	r2, [pc, #252]	@ (8004b2c <UART_SetConfig+0x2ac>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d12a      	bne.n	8004a8a <UART_SetConfig+0x20a>
 8004a34:	4b3f      	ldr	r3, [pc, #252]	@ (8004b34 <UART_SetConfig+0x2b4>)
 8004a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a3a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004a3e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a42:	d01a      	beq.n	8004a7a <UART_SetConfig+0x1fa>
 8004a44:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a48:	d81b      	bhi.n	8004a82 <UART_SetConfig+0x202>
 8004a4a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a4e:	d00c      	beq.n	8004a6a <UART_SetConfig+0x1ea>
 8004a50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a54:	d815      	bhi.n	8004a82 <UART_SetConfig+0x202>
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d003      	beq.n	8004a62 <UART_SetConfig+0x1e2>
 8004a5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a5e:	d008      	beq.n	8004a72 <UART_SetConfig+0x1f2>
 8004a60:	e00f      	b.n	8004a82 <UART_SetConfig+0x202>
 8004a62:	2300      	movs	r3, #0
 8004a64:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a68:	e012      	b.n	8004a90 <UART_SetConfig+0x210>
 8004a6a:	2302      	movs	r3, #2
 8004a6c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a70:	e00e      	b.n	8004a90 <UART_SetConfig+0x210>
 8004a72:	2304      	movs	r3, #4
 8004a74:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a78:	e00a      	b.n	8004a90 <UART_SetConfig+0x210>
 8004a7a:	2308      	movs	r3, #8
 8004a7c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a80:	e006      	b.n	8004a90 <UART_SetConfig+0x210>
 8004a82:	2310      	movs	r3, #16
 8004a84:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a88:	e002      	b.n	8004a90 <UART_SetConfig+0x210>
 8004a8a:	2310      	movs	r3, #16
 8004a8c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a25      	ldr	r2, [pc, #148]	@ (8004b2c <UART_SetConfig+0x2ac>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	f040 808a 	bne.w	8004bb0 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a9c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004aa0:	2b08      	cmp	r3, #8
 8004aa2:	d824      	bhi.n	8004aee <UART_SetConfig+0x26e>
 8004aa4:	a201      	add	r2, pc, #4	@ (adr r2, 8004aac <UART_SetConfig+0x22c>)
 8004aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aaa:	bf00      	nop
 8004aac:	08004ad1 	.word	0x08004ad1
 8004ab0:	08004aef 	.word	0x08004aef
 8004ab4:	08004ad9 	.word	0x08004ad9
 8004ab8:	08004aef 	.word	0x08004aef
 8004abc:	08004adf 	.word	0x08004adf
 8004ac0:	08004aef 	.word	0x08004aef
 8004ac4:	08004aef 	.word	0x08004aef
 8004ac8:	08004aef 	.word	0x08004aef
 8004acc:	08004ae7 	.word	0x08004ae7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ad0:	f7ff f9f4 	bl	8003ebc <HAL_RCC_GetPCLK1Freq>
 8004ad4:	61f8      	str	r0, [r7, #28]
        break;
 8004ad6:	e010      	b.n	8004afa <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ad8:	4b19      	ldr	r3, [pc, #100]	@ (8004b40 <UART_SetConfig+0x2c0>)
 8004ada:	61fb      	str	r3, [r7, #28]
        break;
 8004adc:	e00d      	b.n	8004afa <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ade:	f7ff f955 	bl	8003d8c <HAL_RCC_GetSysClockFreq>
 8004ae2:	61f8      	str	r0, [r7, #28]
        break;
 8004ae4:	e009      	b.n	8004afa <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ae6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004aea:	61fb      	str	r3, [r7, #28]
        break;
 8004aec:	e005      	b.n	8004afa <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8004aee:	2300      	movs	r3, #0
 8004af0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004af8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	f000 8109 	beq.w	8004d14 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	685a      	ldr	r2, [r3, #4]
 8004b06:	4613      	mov	r3, r2
 8004b08:	005b      	lsls	r3, r3, #1
 8004b0a:	4413      	add	r3, r2
 8004b0c:	69fa      	ldr	r2, [r7, #28]
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d305      	bcc.n	8004b1e <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004b18:	69fa      	ldr	r2, [r7, #28]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d912      	bls.n	8004b44 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004b24:	e0f6      	b.n	8004d14 <UART_SetConfig+0x494>
 8004b26:	bf00      	nop
 8004b28:	efff69f3 	.word	0xefff69f3
 8004b2c:	40008000 	.word	0x40008000
 8004b30:	40013800 	.word	0x40013800
 8004b34:	40021000 	.word	0x40021000
 8004b38:	40004400 	.word	0x40004400
 8004b3c:	40004800 	.word	0x40004800
 8004b40:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	2200      	movs	r2, #0
 8004b48:	461c      	mov	r4, r3
 8004b4a:	4615      	mov	r5, r2
 8004b4c:	f04f 0200 	mov.w	r2, #0
 8004b50:	f04f 0300 	mov.w	r3, #0
 8004b54:	022b      	lsls	r3, r5, #8
 8004b56:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004b5a:	0222      	lsls	r2, r4, #8
 8004b5c:	68f9      	ldr	r1, [r7, #12]
 8004b5e:	6849      	ldr	r1, [r1, #4]
 8004b60:	0849      	lsrs	r1, r1, #1
 8004b62:	2000      	movs	r0, #0
 8004b64:	4688      	mov	r8, r1
 8004b66:	4681      	mov	r9, r0
 8004b68:	eb12 0a08 	adds.w	sl, r2, r8
 8004b6c:	eb43 0b09 	adc.w	fp, r3, r9
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	603b      	str	r3, [r7, #0]
 8004b78:	607a      	str	r2, [r7, #4]
 8004b7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b7e:	4650      	mov	r0, sl
 8004b80:	4659      	mov	r1, fp
 8004b82:	f7fb fb23 	bl	80001cc <__aeabi_uldivmod>
 8004b86:	4602      	mov	r2, r0
 8004b88:	460b      	mov	r3, r1
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b94:	d308      	bcc.n	8004ba8 <UART_SetConfig+0x328>
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b9c:	d204      	bcs.n	8004ba8 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	69ba      	ldr	r2, [r7, #24]
 8004ba4:	60da      	str	r2, [r3, #12]
 8004ba6:	e0b5      	b.n	8004d14 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004bae:	e0b1      	b.n	8004d14 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	69db      	ldr	r3, [r3, #28]
 8004bb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bb8:	d15d      	bne.n	8004c76 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8004bba:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004bbe:	2b08      	cmp	r3, #8
 8004bc0:	d827      	bhi.n	8004c12 <UART_SetConfig+0x392>
 8004bc2:	a201      	add	r2, pc, #4	@ (adr r2, 8004bc8 <UART_SetConfig+0x348>)
 8004bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc8:	08004bed 	.word	0x08004bed
 8004bcc:	08004bf5 	.word	0x08004bf5
 8004bd0:	08004bfd 	.word	0x08004bfd
 8004bd4:	08004c13 	.word	0x08004c13
 8004bd8:	08004c03 	.word	0x08004c03
 8004bdc:	08004c13 	.word	0x08004c13
 8004be0:	08004c13 	.word	0x08004c13
 8004be4:	08004c13 	.word	0x08004c13
 8004be8:	08004c0b 	.word	0x08004c0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bec:	f7ff f966 	bl	8003ebc <HAL_RCC_GetPCLK1Freq>
 8004bf0:	61f8      	str	r0, [r7, #28]
        break;
 8004bf2:	e014      	b.n	8004c1e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bf4:	f7ff f978 	bl	8003ee8 <HAL_RCC_GetPCLK2Freq>
 8004bf8:	61f8      	str	r0, [r7, #28]
        break;
 8004bfa:	e010      	b.n	8004c1e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bfc:	4b4c      	ldr	r3, [pc, #304]	@ (8004d30 <UART_SetConfig+0x4b0>)
 8004bfe:	61fb      	str	r3, [r7, #28]
        break;
 8004c00:	e00d      	b.n	8004c1e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c02:	f7ff f8c3 	bl	8003d8c <HAL_RCC_GetSysClockFreq>
 8004c06:	61f8      	str	r0, [r7, #28]
        break;
 8004c08:	e009      	b.n	8004c1e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c0e:	61fb      	str	r3, [r7, #28]
        break;
 8004c10:	e005      	b.n	8004c1e <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8004c12:	2300      	movs	r3, #0
 8004c14:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004c1c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d077      	beq.n	8004d14 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	005a      	lsls	r2, r3, #1
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	085b      	lsrs	r3, r3, #1
 8004c2e:	441a      	add	r2, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c38:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	2b0f      	cmp	r3, #15
 8004c3e:	d916      	bls.n	8004c6e <UART_SetConfig+0x3ee>
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c46:	d212      	bcs.n	8004c6e <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	f023 030f 	bic.w	r3, r3, #15
 8004c50:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	085b      	lsrs	r3, r3, #1
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	f003 0307 	and.w	r3, r3, #7
 8004c5c:	b29a      	uxth	r2, r3
 8004c5e:	8afb      	ldrh	r3, [r7, #22]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	8afa      	ldrh	r2, [r7, #22]
 8004c6a:	60da      	str	r2, [r3, #12]
 8004c6c:	e052      	b.n	8004d14 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004c74:	e04e      	b.n	8004d14 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c76:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004c7a:	2b08      	cmp	r3, #8
 8004c7c:	d827      	bhi.n	8004cce <UART_SetConfig+0x44e>
 8004c7e:	a201      	add	r2, pc, #4	@ (adr r2, 8004c84 <UART_SetConfig+0x404>)
 8004c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c84:	08004ca9 	.word	0x08004ca9
 8004c88:	08004cb1 	.word	0x08004cb1
 8004c8c:	08004cb9 	.word	0x08004cb9
 8004c90:	08004ccf 	.word	0x08004ccf
 8004c94:	08004cbf 	.word	0x08004cbf
 8004c98:	08004ccf 	.word	0x08004ccf
 8004c9c:	08004ccf 	.word	0x08004ccf
 8004ca0:	08004ccf 	.word	0x08004ccf
 8004ca4:	08004cc7 	.word	0x08004cc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ca8:	f7ff f908 	bl	8003ebc <HAL_RCC_GetPCLK1Freq>
 8004cac:	61f8      	str	r0, [r7, #28]
        break;
 8004cae:	e014      	b.n	8004cda <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cb0:	f7ff f91a 	bl	8003ee8 <HAL_RCC_GetPCLK2Freq>
 8004cb4:	61f8      	str	r0, [r7, #28]
        break;
 8004cb6:	e010      	b.n	8004cda <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cb8:	4b1d      	ldr	r3, [pc, #116]	@ (8004d30 <UART_SetConfig+0x4b0>)
 8004cba:	61fb      	str	r3, [r7, #28]
        break;
 8004cbc:	e00d      	b.n	8004cda <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cbe:	f7ff f865 	bl	8003d8c <HAL_RCC_GetSysClockFreq>
 8004cc2:	61f8      	str	r0, [r7, #28]
        break;
 8004cc4:	e009      	b.n	8004cda <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004cca:	61fb      	str	r3, [r7, #28]
        break;
 8004ccc:	e005      	b.n	8004cda <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004cd8:	bf00      	nop
    }

    if (pclk != 0U)
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d019      	beq.n	8004d14 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	085a      	lsrs	r2, r3, #1
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	441a      	add	r2, r3
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cf2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	2b0f      	cmp	r3, #15
 8004cf8:	d909      	bls.n	8004d0e <UART_SetConfig+0x48e>
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d00:	d205      	bcs.n	8004d0e <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	b29a      	uxth	r2, r3
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	60da      	str	r2, [r3, #12]
 8004d0c:	e002      	b.n	8004d14 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2200      	movs	r2, #0
 8004d18:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004d20:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3728      	adds	r7, #40	@ 0x28
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d2e:	bf00      	nop
 8004d30:	00f42400 	.word	0x00f42400

08004d34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d40:	f003 0308 	and.w	r3, r3, #8
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d00a      	beq.n	8004d5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	430a      	orrs	r2, r1
 8004d5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d62:	f003 0301 	and.w	r3, r3, #1
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00a      	beq.n	8004d80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	430a      	orrs	r2, r1
 8004d7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d84:	f003 0302 	and.w	r3, r3, #2
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d00a      	beq.n	8004da2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	430a      	orrs	r2, r1
 8004da0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da6:	f003 0304 	and.w	r3, r3, #4
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00a      	beq.n	8004dc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	430a      	orrs	r2, r1
 8004dc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dc8:	f003 0310 	and.w	r3, r3, #16
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00a      	beq.n	8004de6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	430a      	orrs	r2, r1
 8004de4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dea:	f003 0320 	and.w	r3, r3, #32
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d00a      	beq.n	8004e08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	430a      	orrs	r2, r1
 8004e06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d01a      	beq.n	8004e4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	430a      	orrs	r2, r1
 8004e28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e32:	d10a      	bne.n	8004e4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	430a      	orrs	r2, r1
 8004e48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d00a      	beq.n	8004e6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	430a      	orrs	r2, r1
 8004e6a:	605a      	str	r2, [r3, #4]
  }
}
 8004e6c:	bf00      	nop
 8004e6e:	370c      	adds	r7, #12
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b098      	sub	sp, #96	@ 0x60
 8004e7c:	af02      	add	r7, sp, #8
 8004e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e88:	f7fc f9da 	bl	8001240 <HAL_GetTick>
 8004e8c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0308 	and.w	r3, r3, #8
 8004e98:	2b08      	cmp	r3, #8
 8004e9a:	d12e      	bne.n	8004efa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e9c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004ea0:	9300      	str	r3, [sp, #0]
 8004ea2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 f88c 	bl	8004fc8 <UART_WaitOnFlagUntilTimeout>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d021      	beq.n	8004efa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ebe:	e853 3f00 	ldrex	r3, [r3]
 8004ec2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004ec4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ec6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004eca:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ed4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ed6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004eda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004edc:	e841 2300 	strex	r3, r2, [r1]
 8004ee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004ee2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1e6      	bne.n	8004eb6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2220      	movs	r2, #32
 8004eec:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e062      	b.n	8004fc0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0304 	and.w	r3, r3, #4
 8004f04:	2b04      	cmp	r3, #4
 8004f06:	d149      	bne.n	8004f9c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f08:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004f0c:	9300      	str	r3, [sp, #0]
 8004f0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f10:	2200      	movs	r2, #0
 8004f12:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 f856 	bl	8004fc8 <UART_WaitOnFlagUntilTimeout>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d03c      	beq.n	8004f9c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f2a:	e853 3f00 	ldrex	r3, [r3]
 8004f2e:	623b      	str	r3, [r7, #32]
   return(result);
 8004f30:	6a3b      	ldr	r3, [r7, #32]
 8004f32:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f40:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f42:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f44:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f48:	e841 2300 	strex	r3, r2, [r1]
 8004f4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004f4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d1e6      	bne.n	8004f22 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	3308      	adds	r3, #8
 8004f5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	e853 3f00 	ldrex	r3, [r3]
 8004f62:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f023 0301 	bic.w	r3, r3, #1
 8004f6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	3308      	adds	r3, #8
 8004f72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f74:	61fa      	str	r2, [r7, #28]
 8004f76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f78:	69b9      	ldr	r1, [r7, #24]
 8004f7a:	69fa      	ldr	r2, [r7, #28]
 8004f7c:	e841 2300 	strex	r3, r2, [r1]
 8004f80:	617b      	str	r3, [r7, #20]
   return(result);
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d1e5      	bne.n	8004f54 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2220      	movs	r2, #32
 8004f8c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	e011      	b.n	8004fc0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2220      	movs	r2, #32
 8004fa0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2220      	movs	r2, #32
 8004fa6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3758      	adds	r7, #88	@ 0x58
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	603b      	str	r3, [r7, #0]
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fd8:	e04f      	b.n	800507a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004fe0:	d04b      	beq.n	800507a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fe2:	f7fc f92d 	bl	8001240 <HAL_GetTick>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	69ba      	ldr	r2, [r7, #24]
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d302      	bcc.n	8004ff8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d101      	bne.n	8004ffc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e04e      	b.n	800509a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0304 	and.w	r3, r3, #4
 8005006:	2b00      	cmp	r3, #0
 8005008:	d037      	beq.n	800507a <UART_WaitOnFlagUntilTimeout+0xb2>
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	2b80      	cmp	r3, #128	@ 0x80
 800500e:	d034      	beq.n	800507a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	2b40      	cmp	r3, #64	@ 0x40
 8005014:	d031      	beq.n	800507a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	69db      	ldr	r3, [r3, #28]
 800501c:	f003 0308 	and.w	r3, r3, #8
 8005020:	2b08      	cmp	r3, #8
 8005022:	d110      	bne.n	8005046 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2208      	movs	r2, #8
 800502a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800502c:	68f8      	ldr	r0, [r7, #12]
 800502e:	f000 f838 	bl	80050a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2208      	movs	r2, #8
 8005036:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e029      	b.n	800509a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	69db      	ldr	r3, [r3, #28]
 800504c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005050:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005054:	d111      	bne.n	800507a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800505e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005060:	68f8      	ldr	r0, [r7, #12]
 8005062:	f000 f81e 	bl	80050a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2220      	movs	r2, #32
 800506a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2200      	movs	r2, #0
 8005072:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	e00f      	b.n	800509a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	69da      	ldr	r2, [r3, #28]
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	4013      	ands	r3, r2
 8005084:	68ba      	ldr	r2, [r7, #8]
 8005086:	429a      	cmp	r2, r3
 8005088:	bf0c      	ite	eq
 800508a:	2301      	moveq	r3, #1
 800508c:	2300      	movne	r3, #0
 800508e:	b2db      	uxtb	r3, r3
 8005090:	461a      	mov	r2, r3
 8005092:	79fb      	ldrb	r3, [r7, #7]
 8005094:	429a      	cmp	r2, r3
 8005096:	d0a0      	beq.n	8004fda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005098:	2300      	movs	r3, #0
}
 800509a:	4618      	mov	r0, r3
 800509c:	3710      	adds	r7, #16
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}

080050a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050a2:	b480      	push	{r7}
 80050a4:	b095      	sub	sp, #84	@ 0x54
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050b2:	e853 3f00 	ldrex	r3, [r3]
 80050b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80050b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80050be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	461a      	mov	r2, r3
 80050c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80050ca:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80050ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80050d0:	e841 2300 	strex	r3, r2, [r1]
 80050d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80050d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d1e6      	bne.n	80050aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	3308      	adds	r3, #8
 80050e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e4:	6a3b      	ldr	r3, [r7, #32]
 80050e6:	e853 3f00 	ldrex	r3, [r3]
 80050ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	f023 0301 	bic.w	r3, r3, #1
 80050f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	3308      	adds	r3, #8
 80050fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80050fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80050fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005100:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005102:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005104:	e841 2300 	strex	r3, r2, [r1]
 8005108:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800510a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800510c:	2b00      	cmp	r3, #0
 800510e:	d1e5      	bne.n	80050dc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005114:	2b01      	cmp	r3, #1
 8005116:	d118      	bne.n	800514a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	e853 3f00 	ldrex	r3, [r3]
 8005124:	60bb      	str	r3, [r7, #8]
   return(result);
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	f023 0310 	bic.w	r3, r3, #16
 800512c:	647b      	str	r3, [r7, #68]	@ 0x44
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	461a      	mov	r2, r3
 8005134:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005136:	61bb      	str	r3, [r7, #24]
 8005138:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800513a:	6979      	ldr	r1, [r7, #20]
 800513c:	69ba      	ldr	r2, [r7, #24]
 800513e:	e841 2300 	strex	r3, r2, [r1]
 8005142:	613b      	str	r3, [r7, #16]
   return(result);
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d1e6      	bne.n	8005118 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2220      	movs	r2, #32
 800514e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800515e:	bf00      	nop
 8005160:	3754      	adds	r7, #84	@ 0x54
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr

0800516a <memset>:
 800516a:	4402      	add	r2, r0
 800516c:	4603      	mov	r3, r0
 800516e:	4293      	cmp	r3, r2
 8005170:	d100      	bne.n	8005174 <memset+0xa>
 8005172:	4770      	bx	lr
 8005174:	f803 1b01 	strb.w	r1, [r3], #1
 8005178:	e7f9      	b.n	800516e <memset+0x4>
	...

0800517c <__libc_init_array>:
 800517c:	b570      	push	{r4, r5, r6, lr}
 800517e:	4d0d      	ldr	r5, [pc, #52]	@ (80051b4 <__libc_init_array+0x38>)
 8005180:	4c0d      	ldr	r4, [pc, #52]	@ (80051b8 <__libc_init_array+0x3c>)
 8005182:	1b64      	subs	r4, r4, r5
 8005184:	10a4      	asrs	r4, r4, #2
 8005186:	2600      	movs	r6, #0
 8005188:	42a6      	cmp	r6, r4
 800518a:	d109      	bne.n	80051a0 <__libc_init_array+0x24>
 800518c:	4d0b      	ldr	r5, [pc, #44]	@ (80051bc <__libc_init_array+0x40>)
 800518e:	4c0c      	ldr	r4, [pc, #48]	@ (80051c0 <__libc_init_array+0x44>)
 8005190:	f000 f818 	bl	80051c4 <_init>
 8005194:	1b64      	subs	r4, r4, r5
 8005196:	10a4      	asrs	r4, r4, #2
 8005198:	2600      	movs	r6, #0
 800519a:	42a6      	cmp	r6, r4
 800519c:	d105      	bne.n	80051aa <__libc_init_array+0x2e>
 800519e:	bd70      	pop	{r4, r5, r6, pc}
 80051a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80051a4:	4798      	blx	r3
 80051a6:	3601      	adds	r6, #1
 80051a8:	e7ee      	b.n	8005188 <__libc_init_array+0xc>
 80051aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80051ae:	4798      	blx	r3
 80051b0:	3601      	adds	r6, #1
 80051b2:	e7f2      	b.n	800519a <__libc_init_array+0x1e>
 80051b4:	0800526c 	.word	0x0800526c
 80051b8:	0800526c 	.word	0x0800526c
 80051bc:	0800526c 	.word	0x0800526c
 80051c0:	08005270 	.word	0x08005270

080051c4 <_init>:
 80051c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051c6:	bf00      	nop
 80051c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051ca:	bc08      	pop	{r3}
 80051cc:	469e      	mov	lr, r3
 80051ce:	4770      	bx	lr

080051d0 <_fini>:
 80051d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051d2:	bf00      	nop
 80051d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051d6:	bc08      	pop	{r3}
 80051d8:	469e      	mov	lr, r3
 80051da:	4770      	bx	lr
